
BlueCoin_ProjectNEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019d54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b80  08019ef8  08019ef8  0001aef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aa78  0801aa78  0001cae0  2**0
                  CONTENTS
  4 .ARM          00000008  0801aa78  0801aa78  0001ba78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aa80  0801aa80  0001cae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aa80  0801aa80  0001ba80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801aa84  0801aa84  0001ba84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ae0  20000000  0801aa88  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000ae0  0801b568  0001cae0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010b4  0801b568  0001d0b4  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  0001cae0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcc9  00000000  00000000  0001cb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f8  00000000  00000000  0002a7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002c8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000965  00000000  00000000  0002d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001872e  00000000  00000000  0002de1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5a1  00000000  00000000  0004654b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095ffd  00000000  00000000  00053aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00004248  00000000  00000000  000e9ae9  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000042e  00000000  00000000  000edd31  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 0000004c  00000000  00000000  000ee160  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00008dfc  00000000  00000000  000ee1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006e  00000000  00000000  000f6fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000ae0 	.word	0x20000ae0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08019edc 	.word	0x08019edc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000ae4 	.word	0x20000ae4
 80001dc:	08019edc 	.word	0x08019edc

080001e0 <ai_buffer_get_size>:
 80001e0:	b430      	push	{r4, r5}
 80001e2:	0003      	movs	r3, r0
 80001e4:	d04e      	beq.n	8000284 <ai_buffer_get_size+0xa4>
 80001e6:	6818      	ldr	r0, [r3, #0]
 80001e8:	4ccb      	ldr	r4, [pc, #812]	@ (8000518 <.text_8>)
 80001ea:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 80001ee:	42a2      	cmp	r2, r4
 80001f0:	bf1e      	ittt	ne
 80001f2:	f020 407e 	bicne.w	r0, r0, #4261412864	@ 0xfe000000
 80001f6:	4ac9      	ldrne	r2, [pc, #804]	@ (800051c <.text_9>)
 80001f8:	4290      	cmpne	r0, r2
 80001fa:	d106      	bne.n	800020a <ai_buffer_get_size+0x2a>
 80001fc:	b129      	cbz	r1, 800020a <ai_buffer_get_size+0x2a>
 80001fe:	6998      	ldr	r0, [r3, #24]
 8000200:	6840      	ldr	r0, [r0, #4]
 8000202:	301f      	adds	r0, #31
 8000204:	0940      	lsrs	r0, r0, #5
 8000206:	0140      	lsls	r0, r0, #5
 8000208:	e001      	b.n	800020e <ai_buffer_get_size+0x2e>
 800020a:	6998      	ldr	r0, [r3, #24]
 800020c:	6840      	ldr	r0, [r0, #4]
 800020e:	695a      	ldr	r2, [r3, #20]
 8000210:	f002 01ff 	and.w	r1, r2, #255	@ 0xff
 8000214:	2901      	cmp	r1, #1
 8000216:	bf0c      	ite	eq
 8000218:	2401      	moveq	r4, #1
 800021a:	2400      	movne	r4, #0
 800021c:	0a12      	lsrs	r2, r2, #8
 800021e:	4294      	cmp	r4, r2
 8000220:	da2e      	bge.n	8000280 <ai_buffer_get_size+0xa0>
 8000222:	6999      	ldr	r1, [r3, #24]
 8000224:	1b12      	subs	r2, r2, r4
 8000226:	eb01 0384 	add.w	r3, r1, r4, lsl #2
 800022a:	f012 0103 	ands.w	r1, r2, #3
 800022e:	d009      	beq.n	8000244 <ai_buffer_get_size+0x64>
 8000230:	2c01      	cmp	r4, #1
 8000232:	bf0c      	ite	eq
 8000234:	2501      	moveq	r5, #1
 8000236:	681d      	ldrne	r5, [r3, #0]
 8000238:	4368      	muls	r0, r5
 800023a:	1c64      	adds	r4, r4, #1
 800023c:	1e49      	subs	r1, r1, #1
 800023e:	f103 0304 	add.w	r3, r3, #4
 8000242:	d1f5      	bne.n	8000230 <ai_buffer_get_size+0x50>
 8000244:	0892      	lsrs	r2, r2, #2
 8000246:	d01b      	beq.n	8000280 <ai_buffer_get_size+0xa0>
 8000248:	2c01      	cmp	r4, #1
 800024a:	bf0c      	ite	eq
 800024c:	2101      	moveq	r1, #1
 800024e:	6819      	ldrne	r1, [r3, #0]
 8000250:	4348      	muls	r0, r1
 8000252:	1c64      	adds	r4, r4, #1
 8000254:	2c01      	cmp	r4, #1
 8000256:	bf0c      	ite	eq
 8000258:	2101      	moveq	r1, #1
 800025a:	6859      	ldrne	r1, [r3, #4]
 800025c:	4348      	muls	r0, r1
 800025e:	1c64      	adds	r4, r4, #1
 8000260:	2c01      	cmp	r4, #1
 8000262:	bf0c      	ite	eq
 8000264:	2101      	moveq	r1, #1
 8000266:	6899      	ldrne	r1, [r3, #8]
 8000268:	4348      	muls	r0, r1
 800026a:	1c64      	adds	r4, r4, #1
 800026c:	2c01      	cmp	r4, #1
 800026e:	bf0c      	ite	eq
 8000270:	2101      	moveq	r1, #1
 8000272:	68d9      	ldrne	r1, [r3, #12]
 8000274:	4348      	muls	r0, r1
 8000276:	1c64      	adds	r4, r4, #1
 8000278:	1e52      	subs	r2, r2, #1
 800027a:	f103 0310 	add.w	r3, r3, #16
 800027e:	d1e3      	bne.n	8000248 <ai_buffer_get_size+0x68>
 8000280:	2800      	cmp	r0, #0
 8000282:	dc00      	bgt.n	8000286 <ai_buffer_get_size+0xa6>
 8000284:	2000      	movs	r0, #0
 8000286:	bc30      	pop	{r4, r5}
 8000288:	4770      	bx	lr

0800028a <ai_buffer_get_byte_size>:
 800028a:	b120      	cbz	r0, 8000296 <ai_buffer_get_byte_size+0xc>
 800028c:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8000290:	4348      	muls	r0, r1
 8000292:	1dc0      	adds	r0, r0, #7
 8000294:	08c0      	lsrs	r0, r0, #3
 8000296:	4770      	bx	lr

08000298 <ai_buffer_array_is_empty>:
 8000298:	2800      	cmp	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	6841      	ldrne	r1, [r0, #4]
 800029e:	2900      	cmpne	r1, #0
 80002a0:	d005      	beq.n	80002ae <ai_buffer_array_is_empty+0x16>
 80002a2:	8840      	ldrh	r0, [r0, #2]
 80002a4:	b118      	cbz	r0, 80002ae <ai_buffer_array_is_empty+0x16>
 80002a6:	1e40      	subs	r0, r0, #1
 80002a8:	4180      	sbcs	r0, r0
 80002aa:	0fc0      	lsrs	r0, r0, #31
 80002ac:	4770      	bx	lr
 80002ae:	2001      	movs	r0, #1
 80002b0:	4770      	bx	lr
	...

080002b4 <ai_buffer_array_is_valid>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	b081      	sub	sp, #4
 80002b8:	4604      	mov	r4, r0
 80002ba:	f7ff ffed 	bl	8000298 <ai_buffer_array_is_empty>
 80002be:	b110      	cbz	r0, 80002c6 <ai_buffer_array_is_valid+0x12>
 80002c0:	2000      	movs	r0, #0
 80002c2:	b001      	add	sp, #4
 80002c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002c6:	2c00      	cmp	r4, #0
 80002c8:	bf1f      	itttt	ne
 80002ca:	6865      	ldrne	r5, [r4, #4]
 80002cc:	2d00      	cmpne	r5, #0
 80002ce:	8863      	ldrhne	r3, [r4, #2]
 80002d0:	2b00      	cmpne	r3, #0
 80002d2:	f000 807e 	beq.w	80003d2 <ai_buffer_array_is_valid+0x11e>
 80002d6:	1c58      	adds	r0, r3, #1
 80002d8:	bfc6      	itte	gt
 80002da:	ebc0 01c0 	rsbgt	r1, r0, r0, lsl #3
 80002de:	0088      	lslgt	r0, r1, #2
 80002e0:	2000      	movle	r0, #0
 80002e2:	461c      	mov	r4, r3
 80002e4:	182a      	adds	r2, r5, r0
 80002e6:	e06d      	b.n	80003c4 <ai_buffer_array_is_valid+0x110>
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	bf0c      	ite	eq
 80002ec:	ebc3 00c3 	rsbeq	r0, r3, r3, lsl #3
 80002f0:	2000      	movne	r0, #0
 80002f2:	4428      	add	r0, r5
 80002f4:	4282      	cmp	r2, r0
 80002f6:	d367      	bcc.n	80003c8 <ai_buffer_array_is_valid+0x114>
 80002f8:	6850      	ldr	r0, [r2, #4]
 80002fa:	2800      	cmp	r0, #0
 80002fc:	bf18      	it	ne
 80002fe:	2a00      	cmpne	r2, #0
 8000300:	d05f      	beq.n	80003c2 <ai_buffer_array_is_valid+0x10e>
 8000302:	6810      	ldr	r0, [r2, #0]
 8000304:	4e84      	ldr	r6, [pc, #528]	@ (8000518 <.text_8>)
 8000306:	f020 417e 	bic.w	r1, r0, #4261412864	@ 0xfe000000
 800030a:	42b1      	cmp	r1, r6
 800030c:	bf1e      	ittt	ne
 800030e:	f020 407e 	bicne.w	r0, r0, #4261412864	@ 0xfe000000
 8000312:	4982      	ldrne	r1, [pc, #520]	@ (800051c <.text_9>)
 8000314:	4288      	cmpne	r0, r1
 8000316:	d002      	beq.n	800031e <ai_buffer_array_is_valid+0x6a>
 8000318:	6990      	ldr	r0, [r2, #24]
 800031a:	6846      	ldr	r6, [r0, #4]
 800031c:	e004      	b.n	8000328 <ai_buffer_array_is_valid+0x74>
 800031e:	6990      	ldr	r0, [r2, #24]
 8000320:	6846      	ldr	r6, [r0, #4]
 8000322:	361f      	adds	r6, #31
 8000324:	0976      	lsrs	r6, r6, #5
 8000326:	0176      	lsls	r6, r6, #5
 8000328:	6951      	ldr	r1, [r2, #20]
 800032a:	f001 00ff 	and.w	r0, r1, #255	@ 0xff
 800032e:	2801      	cmp	r0, #1
 8000330:	bf0c      	ite	eq
 8000332:	f04f 0c01 	moveq.w	ip, #1
 8000336:	f04f 0c00 	movne.w	ip, #0
 800033a:	0a09      	lsrs	r1, r1, #8
 800033c:	458c      	cmp	ip, r1
 800033e:	da3d      	bge.n	80003bc <ai_buffer_array_is_valid+0x108>
 8000340:	6990      	ldr	r0, [r2, #24]
 8000342:	eba1 010c 	sub.w	r1, r1, ip
 8000346:	eb00 078c 	add.w	r7, r0, ip, lsl #2
 800034a:	f011 0003 	ands.w	r0, r1, #3
 800034e:	d00e      	beq.n	800036e <ai_buffer_array_is_valid+0xba>
 8000350:	f1bc 0f01 	cmp.w	ip, #1
 8000354:	bf0c      	ite	eq
 8000356:	f04f 0e01 	moveq.w	lr, #1
 800035a:	f8d7 e000 	ldrne.w	lr, [r7]
 800035e:	1e40      	subs	r0, r0, #1
 8000360:	fb0e f606 	mul.w	r6, lr, r6
 8000364:	f10c 0c01 	add.w	ip, ip, #1
 8000368:	f107 0704 	add.w	r7, r7, #4
 800036c:	d1f0      	bne.n	8000350 <ai_buffer_array_is_valid+0x9c>
 800036e:	0889      	lsrs	r1, r1, #2
 8000370:	f000 8024 	beq.w	80003bc <ai_buffer_array_is_valid+0x108>
 8000374:	f1bc 0f01 	cmp.w	ip, #1
 8000378:	bf0c      	ite	eq
 800037a:	2001      	moveq	r0, #1
 800037c:	6838      	ldrne	r0, [r7, #0]
 800037e:	4346      	muls	r6, r0
 8000380:	f10c 0c01 	add.w	ip, ip, #1
 8000384:	f1bc 0f01 	cmp.w	ip, #1
 8000388:	bf0c      	ite	eq
 800038a:	2001      	moveq	r0, #1
 800038c:	6878      	ldrne	r0, [r7, #4]
 800038e:	4346      	muls	r6, r0
 8000390:	f10c 0c01 	add.w	ip, ip, #1
 8000394:	f1bc 0f01 	cmp.w	ip, #1
 8000398:	bf0c      	ite	eq
 800039a:	2001      	moveq	r0, #1
 800039c:	68b8      	ldrne	r0, [r7, #8]
 800039e:	4370      	muls	r0, r6
 80003a0:	f10c 0c01 	add.w	ip, ip, #1
 80003a4:	f1bc 0f01 	cmp.w	ip, #1
 80003a8:	bf14      	ite	ne
 80003aa:	68fe      	ldrne	r6, [r7, #12]
 80003ac:	2601      	moveq	r6, #1
 80003ae:	4346      	muls	r6, r0
 80003b0:	1e49      	subs	r1, r1, #1
 80003b2:	f10c 0c01 	add.w	ip, ip, #1
 80003b6:	f107 0710 	add.w	r7, r7, #16
 80003ba:	d1db      	bne.n	8000374 <ai_buffer_array_is_valid+0xc0>
 80003bc:	2e00      	cmp	r6, #0
 80003be:	bfc8      	it	gt
 80003c0:	1e64      	subgt	r4, r4, #1
 80003c2:	3a1c      	subs	r2, #28
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	d18f      	bne.n	80002e8 <ai_buffer_array_is_valid+0x34>
 80003c8:	1e60      	subs	r0, r4, #1
 80003ca:	4180      	sbcs	r0, r0
 80003cc:	0fc0      	lsrs	r0, r0, #31
 80003ce:	b001      	add	sp, #4
 80003d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d2:	2001      	movs	r0, #1
 80003d4:	b001      	add	sp, #4
 80003d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080003d8 <ai_buffer_array_sane>:
 80003d8:	2800      	cmp	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	6841      	ldrne	r1, [r0, #4]
 80003de:	2900      	cmpne	r1, #0
 80003e0:	d005      	beq.n	80003ee <ai_buffer_array_sane+0x16>
 80003e2:	8840      	ldrh	r0, [r0, #2]
 80003e4:	1e40      	subs	r0, r0, #1
 80003e6:	4180      	sbcs	r0, r0
 80003e8:	43c0      	mvns	r0, r0
 80003ea:	0fc0      	lsrs	r0, r0, #31
 80003ec:	4770      	bx	lr
 80003ee:	2000      	movs	r0, #0
 80003f0:	4770      	bx	lr
	...

080003f4 <ai_buffer_array_get_byte_size>:
 80003f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003f8:	2700      	movs	r7, #0
 80003fa:	2800      	cmp	r0, #0
 80003fc:	bf1f      	itttt	ne
 80003fe:	6846      	ldrne	r6, [r0, #4]
 8000400:	2e00      	cmpne	r6, #0
 8000402:	8843      	ldrhne	r3, [r0, #2]
 8000404:	2b00      	cmpne	r3, #0
 8000406:	f000 8083 	beq.w	8000510 <ai_buffer_array_get_byte_size+0x11c>
 800040a:	1c58      	adds	r0, r3, #1
 800040c:	bfc6      	itte	gt
 800040e:	ebc0 01c0 	rsbgt	r1, r0, r0, lsl #3
 8000412:	0088      	lslgt	r0, r1, #2
 8000414:	2000      	movle	r0, #0
 8000416:	1832      	adds	r2, r6, r0
 8000418:	e012      	b.n	8000440 <ai_buffer_array_get_byte_size+0x4c>
 800041a:	bf00      	nop
 800041c:	f3c5 10c6 	ubfx	r0, r5, #7, #7
 8000420:	4344      	muls	r4, r0
 8000422:	1de4      	adds	r4, r4, #7
 8000424:	eb07 07d4 	add.w	r7, r7, r4, lsr #3
 8000428:	e009      	b.n	800043e <ai_buffer_array_get_byte_size+0x4a>
 800042a:	4344      	muls	r4, r0
 800042c:	1e49      	subs	r1, r1, #1
 800042e:	f10c 0c01 	add.w	ip, ip, #1
 8000432:	f10e 0e10 	add.w	lr, lr, #16
 8000436:	d149      	bne.n	80004cc <ai_buffer_array_get_byte_size+0xd8>
 8000438:	2c00      	cmp	r4, #0
 800043a:	dd00      	ble.n	800043e <ai_buffer_array_get_byte_size+0x4a>
 800043c:	d1ee      	bne.n	800041c <ai_buffer_array_get_byte_size+0x28>
 800043e:	3a1c      	subs	r2, #28
 8000440:	2a00      	cmp	r2, #0
 8000442:	d065      	beq.n	8000510 <ai_buffer_array_get_byte_size+0x11c>
 8000444:	2b00      	cmp	r3, #0
 8000446:	bf0c      	ite	eq
 8000448:	ebc3 00c3 	rsbeq	r0, r3, r3, lsl #3
 800044c:	2000      	movne	r0, #0
 800044e:	4430      	add	r0, r6
 8000450:	4282      	cmp	r2, r0
 8000452:	d35d      	bcc.n	8000510 <ai_buffer_array_get_byte_size+0x11c>
 8000454:	2a00      	cmp	r2, #0
 8000456:	d0f2      	beq.n	800043e <ai_buffer_array_get_byte_size+0x4a>
 8000458:	6815      	ldr	r5, [r2, #0]
 800045a:	4c2f      	ldr	r4, [pc, #188]	@ (8000518 <.text_8>)
 800045c:	f025 417e 	bic.w	r1, r5, #4261412864	@ 0xfe000000
 8000460:	42a1      	cmp	r1, r4
 8000462:	bf1e      	ittt	ne
 8000464:	f025 407e 	bicne.w	r0, r5, #4261412864	@ 0xfe000000
 8000468:	492c      	ldrne	r1, [pc, #176]	@ (800051c <.text_9>)
 800046a:	4288      	cmpne	r0, r1
 800046c:	d002      	beq.n	8000474 <ai_buffer_array_get_byte_size+0x80>
 800046e:	6990      	ldr	r0, [r2, #24]
 8000470:	6844      	ldr	r4, [r0, #4]
 8000472:	e004      	b.n	800047e <ai_buffer_array_get_byte_size+0x8a>
 8000474:	6990      	ldr	r0, [r2, #24]
 8000476:	6844      	ldr	r4, [r0, #4]
 8000478:	341f      	adds	r4, #31
 800047a:	0964      	lsrs	r4, r4, #5
 800047c:	0164      	lsls	r4, r4, #5
 800047e:	6951      	ldr	r1, [r2, #20]
 8000480:	f001 00ff 	and.w	r0, r1, #255	@ 0xff
 8000484:	2801      	cmp	r0, #1
 8000486:	bf0c      	ite	eq
 8000488:	f04f 0c01 	moveq.w	ip, #1
 800048c:	f04f 0c00 	movne.w	ip, #0
 8000490:	0a09      	lsrs	r1, r1, #8
 8000492:	458c      	cmp	ip, r1
 8000494:	dad0      	bge.n	8000438 <ai_buffer_array_get_byte_size+0x44>
 8000496:	6990      	ldr	r0, [r2, #24]
 8000498:	eba1 010c 	sub.w	r1, r1, ip
 800049c:	eb00 0e8c 	add.w	lr, r0, ip, lsl #2
 80004a0:	f011 0003 	ands.w	r0, r1, #3
 80004a4:	f000 800f 	beq.w	80004c6 <ai_buffer_array_get_byte_size+0xd2>
 80004a8:	f1bc 0f01 	cmp.w	ip, #1
 80004ac:	bf0c      	ite	eq
 80004ae:	f04f 0801 	moveq.w	r8, #1
 80004b2:	f8de 8000 	ldrne.w	r8, [lr]
 80004b6:	1e40      	subs	r0, r0, #1
 80004b8:	fb08 f404 	mul.w	r4, r8, r4
 80004bc:	f10c 0c01 	add.w	ip, ip, #1
 80004c0:	f10e 0e04 	add.w	lr, lr, #4
 80004c4:	d1f0      	bne.n	80004a8 <ai_buffer_array_get_byte_size+0xb4>
 80004c6:	0889      	lsrs	r1, r1, #2
 80004c8:	f43f afb6 	beq.w	8000438 <ai_buffer_array_get_byte_size+0x44>
 80004cc:	f1bc 0f01 	cmp.w	ip, #1
 80004d0:	bf0c      	ite	eq
 80004d2:	2001      	moveq	r0, #1
 80004d4:	f8de 0000 	ldrne.w	r0, [lr]
 80004d8:	4344      	muls	r4, r0
 80004da:	f10c 0c01 	add.w	ip, ip, #1
 80004de:	f1bc 0f01 	cmp.w	ip, #1
 80004e2:	bf0c      	ite	eq
 80004e4:	2001      	moveq	r0, #1
 80004e6:	f8de 0004 	ldrne.w	r0, [lr, #4]
 80004ea:	4344      	muls	r4, r0
 80004ec:	f10c 0c01 	add.w	ip, ip, #1
 80004f0:	f1bc 0f01 	cmp.w	ip, #1
 80004f4:	bf0c      	ite	eq
 80004f6:	2001      	moveq	r0, #1
 80004f8:	f8de 0008 	ldrne.w	r0, [lr, #8]
 80004fc:	4344      	muls	r4, r0
 80004fe:	f10c 0c01 	add.w	ip, ip, #1
 8000502:	f1bc 0f01 	cmp.w	ip, #1
 8000506:	bf0c      	ite	eq
 8000508:	2001      	moveq	r0, #1
 800050a:	f8de 000c 	ldrne.w	r0, [lr, #12]
 800050e:	e78c      	b.n	800042a <ai_buffer_array_get_byte_size+0x36>
 8000510:	4638      	mov	r0, r7
 8000512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000518 <.text_8>:
 8000518:	008400c0 	.word	0x008400c0

0800051c <.text_9>:
 800051c:	000400c0 	.word	0x000400c0

08000520 <ai_buffer_array_item_set_address>:
 8000520:	2800      	cmp	r0, #0
 8000522:	bf1c      	itt	ne
 8000524:	6843      	ldrne	r3, [r0, #4]
 8000526:	2b00      	cmpne	r3, #0
 8000528:	d00a      	beq.n	8000540 <ai_buffer_array_item_set_address+0x20>
 800052a:	8840      	ldrh	r0, [r0, #2]
 800052c:	2800      	cmp	r0, #0
 800052e:	bf1c      	itt	ne
 8000530:	ebc1 0cc1 	rsbne	ip, r1, r1, lsl #3
 8000534:	eb13 008c 	addsne.w	r0, r3, ip, lsl #2
 8000538:	d002      	beq.n	8000540 <ai_buffer_array_item_set_address+0x20>
 800053a:	6042      	str	r2, [r0, #4]
 800053c:	2001      	movs	r0, #1
 800053e:	4770      	bx	lr
 8000540:	2000      	movs	r0, #0
 8000542:	4770      	bx	lr

08000544 <_ai_platform_get_io_buffers_info>:
 8000544:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000548:	b08a      	sub	sp, #40	@ 0x28
 800054a:	2500      	movs	r5, #0
 800054c:	46a8      	mov	r8, r5
 800054e:	46ab      	mov	fp, r5
 8000550:	46aa      	mov	sl, r5
 8000552:	46a9      	mov	r9, r5
 8000554:	9001      	str	r0, [sp, #4]
 8000556:	e024      	b.n	80005a2 <_ai_platform_get_io_buffers_info+0x5e>
 8000558:	2000      	movs	r0, #0
 800055a:	e00e      	b.n	800057a <_ai_platform_get_io_buffers_info+0x36>
 800055c:	9a00      	ldr	r2, [sp, #0]
 800055e:	2000      	movs	r0, #0
 8000560:	6010      	str	r0, [r2, #0]
 8000562:	9b00      	ldr	r3, [sp, #0]
 8000564:	6820      	ldr	r0, [r4, #0]
 8000566:	6058      	str	r0, [r3, #4]
 8000568:	2800      	cmp	r0, #0
 800056a:	bf1c      	itt	ne
 800056c:	8840      	ldrhne	r0, [r0, #2]
 800056e:	2800      	cmpne	r0, #0
 8000570:	d0f2      	beq.n	8000558 <_ai_platform_get_io_buffers_info+0x14>
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	2201      	movs	r2, #1
 8000576:	6002      	str	r2, [r0, #0]
 8000578:	9800      	ldr	r0, [sp, #0]
 800057a:	9005      	str	r0, [sp, #20]
 800057c:	1c6d      	adds	r5, r5, #1
 800057e:	6849      	ldr	r1, [r1, #4]
 8000580:	9802      	ldr	r0, [sp, #8]
 8000582:	9107      	str	r1, [sp, #28]
 8000584:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8000588:	a903      	add	r1, sp, #12
 800058a:	e891 50dc 	ldmia.w	r1, {r2, r3, r4, r6, r7, ip, lr}
 800058e:	e880 50dc 	stmia.w	r0, {r2, r3, r4, r6, r7, ip, lr}
 8000592:	f108 0801 	add.w	r8, r8, #1
 8000596:	f109 091c 	add.w	r9, r9, #28
 800059a:	f10a 0a08 	add.w	sl, sl, #8
 800059e:	f10b 0b04 	add.w	fp, fp, #4
 80005a2:	9801      	ldr	r0, [sp, #4]
 80005a4:	b100      	cbz	r0, 80005a8 <_ai_platform_get_io_buffers_info+0x64>
 80005a6:	8800      	ldrh	r0, [r0, #0]
 80005a8:	4580      	cmp	r8, r0
 80005aa:	d22c      	bcs.n	8000606 <_ai_platform_get_io_buffers_info+0xc2>
 80005ac:	9801      	ldr	r0, [sp, #4]
 80005ae:	6840      	ldr	r0, [r0, #4]
 80005b0:	b348      	cbz	r0, 8000606 <_ai_platform_get_io_buffers_info+0xc2>
 80005b2:	f850 400b 	ldr.w	r4, [r0, fp]
 80005b6:	b334      	cbz	r4, 8000606 <_ai_platform_get_io_buffers_info+0xc2>
 80005b8:	9801      	ldr	r0, [sp, #4]
 80005ba:	6881      	ldr	r1, [r0, #8]
 80005bc:	684a      	ldr	r2, [r1, #4]
 80005be:	bf00      	nop
 80005c0:	a016      	add	r0, pc, #88	@ (adr r0, 800061c <.text_4>)
 80005c2:	444a      	add	r2, r9
 80005c4:	9202      	str	r2, [sp, #8]
 80005c6:	2200      	movs	r2, #0
 80005c8:	6889      	ldr	r1, [r1, #8]
 80005ca:	4451      	add	r1, sl
 80005cc:	9100      	str	r1, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	e9d0 1700 	ldrd	r1, r7, [r0]
 80005d4:	68a0      	ldr	r0, [r4, #8]
 80005d6:	68e7      	ldr	r7, [r4, #12]
 80005d8:	0a00      	lsrs	r0, r0, #8
 80005da:	f360 211f 	bfi	r1, r0, #8, #24
 80005de:	460e      	mov	r6, r1
 80005e0:	a903      	add	r1, sp, #12
 80005e2:	4694      	mov	ip, r2
 80005e4:	4696      	mov	lr, r2
 80005e6:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
 80005ea:	e8a1 100c 	stmia.w	r1!, {r2, r3, ip}
 80005ee:	69a0      	ldr	r0, [r4, #24]
 80005f0:	6800      	ldr	r0, [r0, #0]
 80005f2:	f00b ff19 	bl	800c428 <ai_array_to_buffer_fmt>
 80005f6:	9003      	str	r0, [sp, #12]
 80005f8:	69a1      	ldr	r1, [r4, #24]
 80005fa:	6888      	ldr	r0, [r1, #8]
 80005fc:	9004      	str	r0, [sp, #16]
 80005fe:	9800      	ldr	r0, [sp, #0]
 8000600:	2800      	cmp	r0, #0
 8000602:	d1ab      	bne.n	800055c <_ai_platform_get_io_buffers_info+0x18>
 8000604:	e7b9      	b.n	800057a <_ai_platform_get_io_buffers_info+0x36>
 8000606:	9901      	ldr	r1, [sp, #4]
 8000608:	b2aa      	uxth	r2, r5
 800060a:	b10a      	cbz	r2, 8000610 <_ai_platform_get_io_buffers_info+0xcc>
 800060c:	6889      	ldr	r1, [r1, #8]
 800060e:	684a      	ldr	r2, [r1, #4]
 8000610:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8000612:	600a      	str	r2, [r1, #0]
 8000614:	b2a8      	uxth	r0, r5
 8000616:	b00b      	add	sp, #44	@ 0x2c
 8000618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800061c <.text_4>:
 800061c:	00000001 	.word	0x00000001
 8000620:	00000000 	.word	0x00000000

08000624 <_platform_ai_buffer_array_copy>:
 8000624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000628:	884b      	ldrh	r3, [r1, #2]
 800062a:	8844      	ldrh	r4, [r0, #2]
 800062c:	429c      	cmp	r4, r3
 800062e:	d204      	bcs.n	800063a <_platform_ai_buffer_array_copy+0x16>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d04e      	beq.n	80006d2 <_platform_ai_buffer_array_copy+0xae>
 8000634:	2000      	movs	r0, #0
 8000636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800063a:	2a00      	cmp	r2, #0
 800063c:	d049      	beq.n	80006d2 <_platform_ai_buffer_array_copy+0xae>
 800063e:	2200      	movs	r2, #0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d03f      	beq.n	80006c4 <_platform_ai_buffer_array_copy+0xa0>
 8000644:	6844      	ldr	r4, [r0, #4]
 8000646:	684d      	ldr	r5, [r1, #4]
 8000648:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800064c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000650:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000654:	e893 53e0 	ldmia.w	r3, {r5, r6, r7, r8, r9, ip, lr}
 8000658:	e884 53e0 	stmia.w	r4, {r5, r6, r7, r8, r9, ip, lr}
 800065c:	884c      	ldrh	r4, [r1, #2]
 800065e:	1c52      	adds	r2, r2, #1
 8000660:	42a2      	cmp	r2, r4
 8000662:	d22f      	bcs.n	80006c4 <_platform_ai_buffer_array_copy+0xa0>
 8000664:	6844      	ldr	r4, [r0, #4]
 8000666:	684d      	ldr	r5, [r1, #4]
 8000668:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800066c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000670:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000674:	e893 53e0 	ldmia.w	r3, {r5, r6, r7, r8, r9, ip, lr}
 8000678:	e884 53e0 	stmia.w	r4, {r5, r6, r7, r8, r9, ip, lr}
 800067c:	884c      	ldrh	r4, [r1, #2]
 800067e:	1c52      	adds	r2, r2, #1
 8000680:	42a2      	cmp	r2, r4
 8000682:	d21f      	bcs.n	80006c4 <_platform_ai_buffer_array_copy+0xa0>
 8000684:	6844      	ldr	r4, [r0, #4]
 8000686:	684d      	ldr	r5, [r1, #4]
 8000688:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800068c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000690:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000694:	e893 53e0 	ldmia.w	r3, {r5, r6, r7, r8, r9, ip, lr}
 8000698:	e884 53e0 	stmia.w	r4, {r5, r6, r7, r8, r9, ip, lr}
 800069c:	884c      	ldrh	r4, [r1, #2]
 800069e:	1c52      	adds	r2, r2, #1
 80006a0:	42a2      	cmp	r2, r4
 80006a2:	d20f      	bcs.n	80006c4 <_platform_ai_buffer_array_copy+0xa0>
 80006a4:	6844      	ldr	r4, [r0, #4]
 80006a6:	684d      	ldr	r5, [r1, #4]
 80006a8:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80006ac:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80006b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80006b4:	e893 53e0 	ldmia.w	r3, {r5, r6, r7, r8, r9, ip, lr}
 80006b8:	e884 53e0 	stmia.w	r4, {r5, r6, r7, r8, r9, ip, lr}
 80006bc:	884c      	ldrh	r4, [r1, #2]
 80006be:	1c52      	adds	r2, r2, #1
 80006c0:	42a2      	cmp	r2, r4
 80006c2:	d3bf      	bcc.n	8000644 <_platform_ai_buffer_array_copy+0x20>
 80006c4:	884a      	ldrh	r2, [r1, #2]
 80006c6:	8042      	strh	r2, [r0, #2]
 80006c8:	8809      	ldrh	r1, [r1, #0]
 80006ca:	8001      	strh	r1, [r0, #0]
 80006cc:	2001      	movs	r0, #1
 80006ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006d2:	684a      	ldr	r2, [r1, #4]
 80006d4:	6042      	str	r2, [r0, #4]
 80006d6:	e7f5      	b.n	80006c4 <_platform_ai_buffer_array_copy+0xa0>

080006d8 <_platform_network_state_setup>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	4604      	mov	r4, r0
 80006dc:	4616      	mov	r6, r2
 80006de:	460d      	mov	r5, r1
 80006e0:	4630      	mov	r0, r6
 80006e2:	f00c f936 	bl	800c952 <get_tensor_byte_size>
 80006e6:	60a0      	str	r0, [r4, #8]
 80006e8:	69a9      	ldr	r1, [r5, #24]
 80006ea:	6809      	ldr	r1, [r1, #0]
 80006ec:	4341      	muls	r1, r0
 80006ee:	60e1      	str	r1, [r4, #12]
 80006f0:	6868      	ldr	r0, [r5, #4]
 80006f2:	6060      	str	r0, [r4, #4]
 80006f4:	4408      	add	r0, r1
 80006f6:	6020      	str	r0, [r4, #0]
 80006f8:	69b1      	ldr	r1, [r6, #24]
 80006fa:	680a      	ldr	r2, [r1, #0]
 80006fc:	0090      	lsls	r0, r2, #2
 80006fe:	d407      	bmi.n	8000710 <_platform_network_state_setup+0x38>
 8000700:	688b      	ldr	r3, [r1, #8]
 8000702:	68c8      	ldr	r0, [r1, #12]
 8000704:	6862      	ldr	r2, [r4, #4]
 8000706:	1a1b      	subs	r3, r3, r0
 8000708:	18d0      	adds	r0, r2, r3
 800070a:	6088      	str	r0, [r1, #8]
 800070c:	6862      	ldr	r2, [r4, #4]
 800070e:	60ca      	str	r2, [r1, #12]
 8000710:	bd70      	pop	{r4, r5, r6, pc}

08000712 <_platform_observer_node_exec_cb>:
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	460b      	mov	r3, r1
 8000716:	4614      	mov	r4, r2
 8000718:	2100      	movs	r1, #0
 800071a:	b085      	sub	sp, #20
 800071c:	2c00      	cmp	r4, #0
 800071e:	bf1a      	itte	ne
 8000720:	6822      	ldrne	r2, [r4, #0]
 8000722:	2a00      	cmpne	r2, #0
 8000724:	2001      	moveq	r0, #1
 8000726:	d05b      	beq.n	80007e0 <_platform_observer_node_exec_cb+0xce>
 8000728:	89a2      	ldrh	r2, [r4, #12]
 800072a:	b90a      	cbnz	r2, 8000730 <_platform_observer_node_exec_cb+0x1e>
 800072c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000730:	89e5      	ldrh	r5, [r4, #14]
 8000732:	1e6d      	subs	r5, r5, #1
 8000734:	4295      	cmp	r5, r2
 8000736:	bf08      	it	eq
 8000738:	f441 7100 	orreq.w	r1, r1, #512	@ 0x200
 800073c:	0005      	movs	r5, r0
 800073e:	d112      	bne.n	8000766 <_platform_observer_node_exec_cb+0x54>
 8000740:	7a20      	ldrb	r0, [r4, #8]
 8000742:	07c5      	lsls	r5, r0, #31
 8000744:	d548      	bpl.n	80007d8 <_platform_observer_node_exec_cb+0xc6>
 8000746:	f8ad 2000 	strh.w	r2, [sp]
 800074a:	f041 0101 	orr.w	r1, r1, #1
 800074e:	885a      	ldrh	r2, [r3, #2]
 8000750:	f8ad 2004 	strh.w	r2, [sp, #4]
 8000754:	881d      	ldrh	r5, [r3, #0]
 8000756:	f8ad 5002 	strh.w	r5, [sp, #2]
 800075a:	699a      	ldr	r2, [r3, #24]
 800075c:	9203      	str	r2, [sp, #12]
 800075e:	2300      	movs	r3, #0
 8000760:	9302      	str	r3, [sp, #8]
 8000762:	466a      	mov	r2, sp
 8000764:	e035      	b.n	80007d2 <_platform_observer_node_exec_cb+0xc0>
 8000766:	2801      	cmp	r0, #1
 8000768:	d102      	bne.n	8000770 <_platform_observer_node_exec_cb+0x5e>
 800076a:	6123      	str	r3, [r4, #16]
 800076c:	2000      	movs	r0, #0
 800076e:	e035      	b.n	80007dc <_platform_observer_node_exec_cb+0xca>
 8000770:	2802      	cmp	r0, #2
 8000772:	d117      	bne.n	80007a4 <_platform_observer_node_exec_cb+0x92>
 8000774:	7a20      	ldrb	r0, [r4, #8]
 8000776:	6123      	str	r3, [r4, #16]
 8000778:	0782      	lsls	r2, r0, #30
 800077a:	d530      	bpl.n	80007de <_platform_observer_node_exec_cb+0xcc>
 800077c:	89a0      	ldrh	r0, [r4, #12]
 800077e:	f8ad 0000 	strh.w	r0, [sp]
 8000782:	f041 0102 	orr.w	r1, r1, #2
 8000786:	885a      	ldrh	r2, [r3, #2]
 8000788:	f8ad 2004 	strh.w	r2, [sp, #4]
 800078c:	881d      	ldrh	r5, [r3, #0]
 800078e:	f8ad 5002 	strh.w	r5, [sp, #2]
 8000792:	699a      	ldr	r2, [r3, #24]
 8000794:	9203      	str	r2, [sp, #12]
 8000796:	2300      	movs	r3, #0
 8000798:	9302      	str	r3, [sp, #8]
 800079a:	466a      	mov	r2, sp
 800079c:	6860      	ldr	r0, [r4, #4]
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	4798      	blx	r3
 80007a2:	e01c      	b.n	80007de <_platform_observer_node_exec_cb+0xcc>
 80007a4:	2803      	cmp	r0, #3
 80007a6:	d11a      	bne.n	80007de <_platform_observer_node_exec_cb+0xcc>
 80007a8:	7a20      	ldrb	r0, [r4, #8]
 80007aa:	0743      	lsls	r3, r0, #29
 80007ac:	d514      	bpl.n	80007d8 <_platform_observer_node_exec_cb+0xc6>
 80007ae:	f8ad 2000 	strh.w	r2, [sp]
 80007b2:	2300      	movs	r3, #0
 80007b4:	6920      	ldr	r0, [r4, #16]
 80007b6:	8842      	ldrh	r2, [r0, #2]
 80007b8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80007bc:	f041 0104 	orr.w	r1, r1, #4
 80007c0:	6920      	ldr	r0, [r4, #16]
 80007c2:	8802      	ldrh	r2, [r0, #0]
 80007c4:	f8ad 2002 	strh.w	r2, [sp, #2]
 80007c8:	6920      	ldr	r0, [r4, #16]
 80007ca:	6982      	ldr	r2, [r0, #24]
 80007cc:	9203      	str	r2, [sp, #12]
 80007ce:	9302      	str	r3, [sp, #8]
 80007d0:	466a      	mov	r2, sp
 80007d2:	6860      	ldr	r0, [r4, #4]
 80007d4:	6823      	ldr	r3, [r4, #0]
 80007d6:	4798      	blx	r3
 80007d8:	89a0      	ldrh	r0, [r4, #12]
 80007da:	1c40      	adds	r0, r0, #1
 80007dc:	81a0      	strh	r0, [r4, #12]
 80007de:	2000      	movs	r0, #0
 80007e0:	b005      	add	sp, #20
 80007e2:	bd30      	pop	{r4, r5, pc}

080007e4 <_platform_get_table_map_from_buffer>:
 80007e4:	b470      	push	{r4, r5, r6}
 80007e6:	2800      	cmp	r0, #0
 80007e8:	bf18      	it	ne
 80007ea:	2900      	cmpne	r1, #0
 80007ec:	d03b      	beq.n	8000866 <_platform_get_table_map_from_buffer+0x82>
 80007ee:	2a00      	cmp	r2, #0
 80007f0:	bf1c      	itt	ne
 80007f2:	6852      	ldrne	r2, [r2, #4]
 80007f4:	2a00      	cmpne	r2, #0
 80007f6:	d036      	beq.n	8000866 <_platform_get_table_map_from_buffer+0x82>
 80007f8:	4613      	mov	r3, r2
 80007fa:	f8df 4b48 	ldr.w	r4, [pc, #2888]	@ 8001344 <.text_35>
 80007fe:	f853 5b04 	ldr.w	r5, [r3], #4
 8000802:	42a5      	cmp	r5, r4
 8000804:	d005      	beq.n	8000812 <_platform_get_table_map_from_buffer+0x2e>
 8000806:	2901      	cmp	r1, #1
 8000808:	6002      	str	r2, [r0, #0]
 800080a:	d12c      	bne.n	8000866 <_platform_get_table_map_from_buffer+0x82>
 800080c:	bc70      	pop	{r4, r5, r6}
 800080e:	2001      	movs	r0, #1
 8000810:	4770      	bx	lr
 8000812:	2200      	movs	r2, #0
 8000814:	461d      	mov	r5, r3
 8000816:	e006      	b.n	8000826 <_platform_get_table_map_from_buffer+0x42>
 8000818:	68ee      	ldr	r6, [r5, #12]
 800081a:	42a6      	cmp	r6, r4
 800081c:	d023      	beq.n	8000866 <_platform_get_table_map_from_buffer+0x82>
 800081e:	60c6      	str	r6, [r0, #12]
 8000820:	1c52      	adds	r2, r2, #1
 8000822:	3010      	adds	r0, #16
 8000824:	3510      	adds	r5, #16
 8000826:	428a      	cmp	r2, r1
 8000828:	d214      	bcs.n	8000854 <_platform_get_table_map_from_buffer+0x70>
 800082a:	682e      	ldr	r6, [r5, #0]
 800082c:	42a6      	cmp	r6, r4
 800082e:	d01a      	beq.n	8000866 <_platform_get_table_map_from_buffer+0x82>
 8000830:	1c52      	adds	r2, r2, #1
 8000832:	428a      	cmp	r2, r1
 8000834:	6006      	str	r6, [r0, #0]
 8000836:	d20d      	bcs.n	8000854 <_platform_get_table_map_from_buffer+0x70>
 8000838:	686e      	ldr	r6, [r5, #4]
 800083a:	42a6      	cmp	r6, r4
 800083c:	d013      	beq.n	8000866 <_platform_get_table_map_from_buffer+0x82>
 800083e:	1c52      	adds	r2, r2, #1
 8000840:	428a      	cmp	r2, r1
 8000842:	6046      	str	r6, [r0, #4]
 8000844:	d206      	bcs.n	8000854 <_platform_get_table_map_from_buffer+0x70>
 8000846:	68ae      	ldr	r6, [r5, #8]
 8000848:	42a6      	cmp	r6, r4
 800084a:	d00c      	beq.n	8000866 <_platform_get_table_map_from_buffer+0x82>
 800084c:	1c52      	adds	r2, r2, #1
 800084e:	428a      	cmp	r2, r1
 8000850:	6086      	str	r6, [r0, #8]
 8000852:	d3e1      	bcc.n	8000818 <_platform_get_table_map_from_buffer+0x34>
 8000854:	428a      	cmp	r2, r1
 8000856:	bf04      	itt	eq
 8000858:	f853 0022 	ldreq.w	r0, [r3, r2, lsl #2]
 800085c:	42a0      	cmpeq	r0, r4
 800085e:	d102      	bne.n	8000866 <_platform_get_table_map_from_buffer+0x82>
 8000860:	bc70      	pop	{r4, r5, r6}
 8000862:	2001      	movs	r0, #1
 8000864:	4770      	bx	lr
 8000866:	bc70      	pop	{r4, r5, r6}
 8000868:	2000      	movs	r0, #0
 800086a:	4770      	bx	lr

0800086c <_platform_get_table_map_from_buffer_array>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	0004      	movs	r4, r0
 8000870:	4615      	mov	r5, r2
 8000872:	bf18      	it	ne
 8000874:	2d00      	cmpne	r5, #0
 8000876:	460e      	mov	r6, r1
 8000878:	d028      	beq.n	80008cc <_platform_get_table_map_from_buffer_array+0x60>
 800087a:	4628      	mov	r0, r5
 800087c:	f7ff fdac 	bl	80003d8 <ai_buffer_array_sane>
 8000880:	b100      	cbz	r0, 8000884 <_platform_get_table_map_from_buffer_array+0x18>
 8000882:	8868      	ldrh	r0, [r5, #2]
 8000884:	4286      	cmp	r6, r0
 8000886:	d121      	bne.n	80008cc <_platform_get_table_map_from_buffer_array+0x60>
 8000888:	6868      	ldr	r0, [r5, #4]
 800088a:	2100      	movs	r1, #0
 800088c:	1d02      	adds	r2, r0, #4
 800088e:	e005      	b.n	800089c <_platform_get_table_map_from_buffer_array+0x30>
 8000890:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8000892:	b1d8      	cbz	r0, 80008cc <_platform_get_table_map_from_buffer_array+0x60>
 8000894:	60e0      	str	r0, [r4, #12]
 8000896:	1c49      	adds	r1, r1, #1
 8000898:	3270      	adds	r2, #112	@ 0x70
 800089a:	3410      	adds	r4, #16
 800089c:	42b1      	cmp	r1, r6
 800089e:	d211      	bcs.n	80008c4 <_platform_get_table_map_from_buffer_array+0x58>
 80008a0:	6810      	ldr	r0, [r2, #0]
 80008a2:	b198      	cbz	r0, 80008cc <_platform_get_table_map_from_buffer_array+0x60>
 80008a4:	1c49      	adds	r1, r1, #1
 80008a6:	42b1      	cmp	r1, r6
 80008a8:	6020      	str	r0, [r4, #0]
 80008aa:	d20b      	bcs.n	80008c4 <_platform_get_table_map_from_buffer_array+0x58>
 80008ac:	69d0      	ldr	r0, [r2, #28]
 80008ae:	b168      	cbz	r0, 80008cc <_platform_get_table_map_from_buffer_array+0x60>
 80008b0:	1c49      	adds	r1, r1, #1
 80008b2:	42b1      	cmp	r1, r6
 80008b4:	6060      	str	r0, [r4, #4]
 80008b6:	d205      	bcs.n	80008c4 <_platform_get_table_map_from_buffer_array+0x58>
 80008b8:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 80008ba:	b138      	cbz	r0, 80008cc <_platform_get_table_map_from_buffer_array+0x60>
 80008bc:	1c49      	adds	r1, r1, #1
 80008be:	42b1      	cmp	r1, r6
 80008c0:	60a0      	str	r0, [r4, #8]
 80008c2:	d3e5      	bcc.n	8000890 <_platform_get_table_map_from_buffer_array+0x24>
 80008c4:	42b1      	cmp	r1, r6
 80008c6:	d101      	bne.n	80008cc <_platform_get_table_map_from_buffer_array+0x60>
 80008c8:	2001      	movs	r0, #1
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
 80008cc:	2000      	movs	r0, #0
 80008ce:	bd70      	pop	{r4, r5, r6, pc}

080008d0 <ai_platform_get_weights_map>:
 80008d0:	b410      	push	{r4}
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	bf18      	it	ne
 80008d6:	2800      	cmpne	r0, #0
 80008d8:	b081      	sub	sp, #4
 80008da:	d000      	beq.n	80008de <ai_platform_get_weights_map+0xe>
 80008dc:	b919      	cbnz	r1, 80008e6 <ai_platform_get_weights_map+0x16>
 80008de:	b001      	add	sp, #4
 80008e0:	bc10      	pop	{r4}
 80008e2:	2000      	movs	r0, #0
 80008e4:	4770      	bx	lr
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	f8df 4a58 	ldr.w	r4, [pc, #2648]	@ 8001344 <.text_35>
 80008ec:	42a3      	cmp	r3, r4
 80008ee:	d103      	bne.n	80008f8 <ai_platform_get_weights_map+0x28>
 80008f0:	b001      	add	sp, #4
 80008f2:	bc10      	pop	{r4}
 80008f4:	1d12      	adds	r2, r2, #4
 80008f6:	e7b9      	b.n	800086c <_platform_get_table_map_from_buffer_array>
 80008f8:	b001      	add	sp, #4
 80008fa:	bc10      	pop	{r4}
 80008fc:	e772      	b.n	80007e4 <_platform_get_table_map_from_buffer>

080008fe <ai_platform_get_activations_map>:
 80008fe:	b410      	push	{r4}
 8000900:	2a00      	cmp	r2, #0
 8000902:	bf18      	it	ne
 8000904:	2800      	cmpne	r0, #0
 8000906:	b081      	sub	sp, #4
 8000908:	d000      	beq.n	800090c <ai_platform_get_activations_map+0xe>
 800090a:	b919      	cbnz	r1, 8000914 <ai_platform_get_activations_map+0x16>
 800090c:	b001      	add	sp, #4
 800090e:	bc10      	pop	{r4}
 8000910:	2000      	movs	r0, #0
 8000912:	4770      	bx	lr
 8000914:	6813      	ldr	r3, [r2, #0]
 8000916:	f8df 4a2c 	ldr.w	r4, [pc, #2604]	@ 8001344 <.text_35>
 800091a:	42a3      	cmp	r3, r4
 800091c:	d103      	bne.n	8000926 <ai_platform_get_activations_map+0x28>
 800091e:	b001      	add	sp, #4
 8000920:	bc10      	pop	{r4}
 8000922:	320c      	adds	r2, #12
 8000924:	e7a2      	b.n	800086c <_platform_get_table_map_from_buffer_array>
 8000926:	b001      	add	sp, #4
 8000928:	bc10      	pop	{r4}
 800092a:	321c      	adds	r2, #28
 800092c:	e75a      	b.n	80007e4 <_platform_get_table_map_from_buffer>

0800092e <ai_platform_bind_network_params>:
 800092e:	b4f0      	push	{r4, r5, r6, r7}
 8000930:	2800      	cmp	r0, #0
 8000932:	bf18      	it	ne
 8000934:	2900      	cmpne	r1, #0
 8000936:	d000      	beq.n	800093a <ai_platform_bind_network_params+0xc>
 8000938:	b912      	cbnz	r2, 8000940 <ai_platform_bind_network_params+0x12>
 800093a:	bcf0      	pop	{r4, r5, r6, r7}
 800093c:	2000      	movs	r0, #0
 800093e:	4770      	bx	lr
 8000940:	f8df 3a00 	ldr.w	r3, [pc, #2560]	@ 8001344 <.text_35>
 8000944:	6003      	str	r3, [r0, #0]
 8000946:	e9d1 4500 	ldrd	r4, r5, [r1]
 800094a:	e9c0 4501 	strd	r4, r5, [r0, #4]
 800094e:	e9d2 6700 	ldrd	r6, r7, [r2]
 8000952:	300c      	adds	r0, #12
 8000954:	e9c0 6700 	strd	r6, r7, [r0]
 8000958:	bcf0      	pop	{r4, r5, r6, r7}
 800095a:	2001      	movs	r0, #1
 800095c:	4770      	bx	lr

0800095e <ai_platform_runtime_get_revision>:
 800095e:	a0a4      	add	r0, pc, #656	@ (adr r0, 8000bf0 <.text_24>)
 8000960:	4770      	bx	lr

08000962 <ai_platform_runtime_get_version>:
 8000962:	f60f 200c 	addw	r0, pc, #2572	@ 0xa0c
 8000966:	6800      	ldr	r0, [r0, #0]
 8000968:	4770      	bx	lr

0800096a <ai_platform_api_get_version>:
 800096a:	f60f 2008 	addw	r0, pc, #2568	@ 0xa08
 800096e:	6800      	ldr	r0, [r0, #0]
 8000970:	4770      	bx	lr

08000972 <ai_platform_interface_api_get_version>:
 8000972:	f60f 2004 	addw	r0, pc, #2564	@ 0xa04
 8000976:	6800      	ldr	r0, [r0, #0]
 8000978:	4770      	bx	lr

0800097a <ai_platform_context_acquire>:
 800097a:	b128      	cbz	r0, 8000988 <ai_platform_context_acquire+0xe>
 800097c:	6802      	ldr	r2, [r0, #0]
 800097e:	f8df 19c8 	ldr.w	r1, [pc, #2504]	@ 8001348 <.text_36>
 8000982:	400a      	ands	r2, r1
 8000984:	428a      	cmp	r2, r1
 8000986:	d000      	beq.n	800098a <ai_platform_context_acquire+0x10>
 8000988:	2000      	movs	r0, #0
 800098a:	4770      	bx	lr

0800098c <ai_platform_context_release>:
 800098c:	4770      	bx	lr

0800098e <ai_platform_network_get_error>:
 800098e:	b140      	cbz	r0, 80009a2 <ai_platform_network_get_error+0x14>
 8000990:	6802      	ldr	r2, [r0, #0]
 8000992:	f8df 19b4 	ldr.w	r1, [pc, #2484]	@ 8001348 <.text_36>
 8000996:	400a      	ands	r2, r1
 8000998:	428a      	cmp	r2, r1
 800099a:	bf04      	itt	eq
 800099c:	300c      	addeq	r0, #12
 800099e:	f000 bd03 	beq.w	80013a8 <core_get_error>
 80009a2:	f60f 11d8 	addw	r1, pc, #2520	@ 0x9d8
 80009a6:	6808      	ldr	r0, [r1, #0]
 80009a8:	4770      	bx	lr

080009aa <ai_platform_network_set_error>:
 80009aa:	2800      	cmp	r0, #0
 80009ac:	bf1c      	itt	ne
 80009ae:	300c      	addne	r0, #12
 80009b0:	f000 bcff 	bne.w	80013b2 <core_set_error>
 80009b4:	4770      	bx	lr

080009b6 <ai_platform_inputs_get>:
 80009b6:	b570      	push	{r4, r5, r6, lr}
 80009b8:	0005      	movs	r5, r0
 80009ba:	b082      	sub	sp, #8
 80009bc:	460c      	mov	r4, r1
 80009be:	d01b      	beq.n	80009f8 <ai_platform_inputs_get+0x42>
 80009c0:	6829      	ldr	r1, [r5, #0]
 80009c2:	f8df 0984 	ldr.w	r0, [pc, #2436]	@ 8001348 <.text_36>
 80009c6:	4001      	ands	r1, r0
 80009c8:	4281      	cmp	r1, r0
 80009ca:	d115      	bne.n	80009f8 <ai_platform_inputs_get+0x42>
 80009cc:	2200      	movs	r2, #0
 80009ce:	9200      	str	r2, [sp, #0]
 80009d0:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
 80009d2:	b9a0      	cbnz	r0, 80009fe <ai_platform_inputs_get+0x48>
 80009d4:	4669      	mov	r1, sp
 80009d6:	f7ff fdb5 	bl	8000544 <_ai_platform_get_io_buffers_info>
 80009da:	0006      	movs	r6, r0
 80009dc:	d107      	bne.n	80009ee <ai_platform_inputs_get+0x38>
 80009de:	2218      	movs	r2, #24
 80009e0:	2111      	movs	r1, #17
 80009e2:	f105 000c 	add.w	r0, r5, #12
 80009e6:	f000 fce4 	bl	80013b2 <core_set_error>
 80009ea:	2000      	movs	r0, #0
 80009ec:	9000      	str	r0, [sp, #0]
 80009ee:	b104      	cbz	r4, 80009f2 <ai_platform_inputs_get+0x3c>
 80009f0:	8026      	strh	r6, [r4, #0]
 80009f2:	9800      	ldr	r0, [sp, #0]
 80009f4:	b002      	add	sp, #8
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	2000      	movs	r0, #0
 80009fa:	b002      	add	sp, #8
 80009fc:	bd70      	pop	{r4, r5, r6, pc}
 80009fe:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8000a00:	e7e8      	b.n	80009d4 <ai_platform_inputs_get+0x1e>

08000a02 <ai_platform_outputs_get>:
 8000a02:	b570      	push	{r4, r5, r6, lr}
 8000a04:	0005      	movs	r5, r0
 8000a06:	b082      	sub	sp, #8
 8000a08:	460c      	mov	r4, r1
 8000a0a:	d00d      	beq.n	8000a28 <ai_platform_outputs_get+0x26>
 8000a0c:	6829      	ldr	r1, [r5, #0]
 8000a0e:	f8df 0938 	ldr.w	r0, [pc, #2360]	@ 8001348 <.text_36>
 8000a12:	4001      	ands	r1, r0
 8000a14:	4281      	cmp	r1, r0
 8000a16:	d107      	bne.n	8000a28 <ai_platform_outputs_get+0x26>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	9000      	str	r0, [sp, #0]
 8000a1c:	8e29      	ldrh	r1, [r5, #48]	@ 0x30
 8000a1e:	2902      	cmp	r1, #2
 8000a20:	db05      	blt.n	8000a2e <ai_platform_outputs_get+0x2c>
 8000a22:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8000a24:	300c      	adds	r0, #12
 8000a26:	e002      	b.n	8000a2e <ai_platform_outputs_get+0x2c>
 8000a28:	2000      	movs	r0, #0
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
 8000a2e:	4669      	mov	r1, sp
 8000a30:	f7ff fd88 	bl	8000544 <_ai_platform_get_io_buffers_info>
 8000a34:	0006      	movs	r6, r0
 8000a36:	d107      	bne.n	8000a48 <ai_platform_outputs_get+0x46>
 8000a38:	2218      	movs	r2, #24
 8000a3a:	2111      	movs	r1, #17
 8000a3c:	f105 000c 	add.w	r0, r5, #12
 8000a40:	f000 fcb7 	bl	80013b2 <core_set_error>
 8000a44:	2000      	movs	r0, #0
 8000a46:	9000      	str	r0, [sp, #0]
 8000a48:	b104      	cbz	r4, 8000a4c <ai_platform_outputs_get+0x4a>
 8000a4a:	8026      	strh	r6, [r4, #0]
 8000a4c:	9800      	ldr	r0, [sp, #0]
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd70      	pop	{r4, r5, r6, pc}

08000a52 <ai_platform_api_get_network_report>:
 8000a52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a56:	0004      	movs	r4, r0
 8000a58:	b08b      	sub	sp, #44	@ 0x2c
 8000a5a:	460d      	mov	r5, r1
 8000a5c:	d056      	beq.n	8000b0c <ai_platform_api_get_network_report+0xba>
 8000a5e:	6821      	ldr	r1, [r4, #0]
 8000a60:	f8df 08e4 	ldr.w	r0, [pc, #2276]	@ 8001348 <.text_36>
 8000a64:	4001      	ands	r1, r0
 8000a66:	4281      	cmp	r1, r0
 8000a68:	d150      	bne.n	8000b0c <ai_platform_api_get_network_report+0xba>
 8000a6a:	2d00      	cmp	r5, #0
 8000a6c:	d04e      	beq.n	8000b0c <ai_platform_api_get_network_report+0xba>
 8000a6e:	2000      	movs	r0, #0
 8000a70:	67e8      	str	r0, [r5, #124]	@ 0x7c
 8000a72:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000a74:	b152      	cbz	r2, 8000a8c <ai_platform_api_get_network_report+0x3a>
 8000a76:	e000      	b.n	8000a7a <ai_platform_api_get_network_report+0x28>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 8000a7c:	1c49      	adds	r1, r1, #1
 8000a7e:	67e9      	str	r1, [r5, #124]	@ 0x7c
 8000a80:	6910      	ldr	r0, [r2, #16]
 8000a82:	4282      	cmp	r2, r0
 8000a84:	bf18      	it	ne
 8000a86:	2800      	cmpne	r0, #0
 8000a88:	d1f6      	bne.n	8000a78 <ai_platform_api_get_network_report+0x26>
 8000a8a:	b909      	cbnz	r1, 8000a90 <ai_platform_api_get_network_report+0x3e>
 8000a8c:	2218      	movs	r2, #24
 8000a8e:	e038      	b.n	8000b02 <ai_platform_api_get_network_report+0xb0>
 8000a90:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8000a92:	b100      	cbz	r0, 8000a96 <ai_platform_api_get_network_report+0x44>
 8000a94:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8000a96:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 8000a9a:	f7ff fd53 	bl	8000544 <_ai_platform_get_io_buffers_info>
 8000a9e:	8728      	strh	r0, [r5, #56]	@ 0x38
 8000aa0:	b910      	cbnz	r0, 8000aa8 <ai_platform_api_get_network_report+0x56>
 8000aa2:	2218      	movs	r2, #24
 8000aa4:	2112      	movs	r1, #18
 8000aa6:	e02d      	b.n	8000b04 <ai_platform_api_get_network_report+0xb2>
 8000aa8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8000aaa:	2802      	cmp	r0, #2
 8000aac:	bfa6      	itte	ge
 8000aae:	6b60      	ldrge	r0, [r4, #52]	@ 0x34
 8000ab0:	300c      	addge	r0, #12
 8000ab2:	2000      	movlt	r0, #0
 8000ab4:	f105 0140 	add.w	r1, r5, #64	@ 0x40
 8000ab8:	f7ff fd44 	bl	8000544 <_ai_platform_get_io_buffers_info>
 8000abc:	8768      	strh	r0, [r5, #58]	@ 0x3a
 8000abe:	b910      	cbnz	r0, 8000ac6 <ai_platform_api_get_network_report+0x74>
 8000ac0:	2218      	movs	r2, #24
 8000ac2:	2113      	movs	r1, #19
 8000ac4:	e01e      	b.n	8000b04 <ai_platform_api_get_network_report+0xb2>
 8000ac6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8000aca:	f7ff fc85 	bl	80003d8 <ai_buffer_array_sane>
 8000ace:	b948      	cbnz	r0, 8000ae4 <ai_platform_api_get_network_report+0x92>
 8000ad0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8000ad4:	f7ff fc80 	bl	80003d8 <ai_buffer_array_sane>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	bf1e      	ittt	ne
 8000adc:	8d60      	ldrhne	r0, [r4, #42]	@ 0x2a
 8000ade:	2800      	cmpne	r0, #0
 8000ae0:	2213      	movne	r2, #19
 8000ae2:	d10e      	bne.n	8000b02 <ai_platform_api_get_network_report+0xb0>
 8000ae4:	f104 0020 	add.w	r0, r4, #32
 8000ae8:	f7ff fc76 	bl	80003d8 <ai_buffer_array_sane>
 8000aec:	b990      	cbnz	r0, 8000b14 <ai_platform_api_get_network_report+0xc2>
 8000aee:	f104 0020 	add.w	r0, r4, #32
 8000af2:	f7ff fc71 	bl	80003d8 <ai_buffer_array_sane>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf1c      	itt	ne
 8000afa:	8c60      	ldrhne	r0, [r4, #34]	@ 0x22
 8000afc:	2800      	cmpne	r0, #0
 8000afe:	d009      	beq.n	8000b14 <ai_platform_api_get_network_report+0xc2>
 8000b00:	2212      	movs	r2, #18
 8000b02:	2111      	movs	r1, #17
 8000b04:	f104 000c 	add.w	r0, r4, #12
 8000b08:	f000 fc53 	bl	80013b2 <core_set_error>
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	b00b      	add	sp, #44	@ 0x2c
 8000b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b14:	6860      	ldr	r0, [r4, #4]
 8000b16:	f8c5 0080 	str.w	r0, [r5, #128]	@ 0x80
 8000b1a:	a135      	add	r1, pc, #212	@ (adr r1, 8000bf0 <.text_24>)
 8000b1c:	f60f 0050 	addw	r0, pc, #2128	@ 0x850
 8000b20:	6129      	str	r1, [r5, #16]
 8000b22:	6802      	ldr	r2, [r0, #0]
 8000b24:	f60f 014c 	addw	r1, pc, #2124	@ 0x84c
 8000b28:	616a      	str	r2, [r5, #20]
 8000b2a:	6808      	ldr	r0, [r1, #0]
 8000b2c:	f60f 0248 	addw	r2, pc, #2120	@ 0x848
 8000b30:	6268      	str	r0, [r5, #36]	@ 0x24
 8000b32:	6811      	ldr	r1, [r2, #0]
 8000b34:	62a9      	str	r1, [r5, #40]	@ 0x28
 8000b36:	68a0      	ldr	r0, [r4, #8]
 8000b38:	f00b fecc 	bl	800c8d4 <ai_platform_version_get>
 8000b3c:	6228      	str	r0, [r5, #32]
 8000b3e:	f8df 1804 	ldr.w	r1, [pc, #2052]	@ 8001344 <.text_35>
 8000b42:	6c68      	ldr	r0, [r5, #68]	@ 0x44
 8000b44:	4288      	cmp	r0, r1
 8000b46:	d10e      	bne.n	8000b66 <ai_platform_api_get_network_report+0x114>
 8000b48:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8000b4c:	f105 0050 	add.w	r0, r5, #80	@ 0x50
 8000b50:	e9d2 6700 	ldrd	r6, r7, [r2]
 8000b54:	e9c0 6700 	strd	r6, r7, [r0]
 8000b58:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8000b5c:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 8000b60:	e9c1 2300 	strd	r2, r3, [r1]
 8000b64:	e040      	b.n	8000be8 <ai_platform_api_get_network_report+0x196>
 8000b66:	f60f 0218 	addw	r2, pc, #2072	@ 0x818
 8000b6a:	e892 53c8 	ldmia.w	r2, {r3, r6, r7, r8, r9, ip, lr}
 8000b6e:	a804      	add	r0, sp, #16
 8000b70:	4669      	mov	r1, sp
 8000b72:	e880 53c8 	stmia.w	r0, {r3, r6, r7, r8, r9, ip, lr}
 8000b76:	f20f 76d8 	addw	r6, pc, #2008	@ 0x7d8
 8000b7a:	f8cd d028 	str.w	sp, [sp, #40]	@ 0x28
 8000b7e:	f105 0c44 	add.w	ip, r5, #68	@ 0x44
 8000b82:	e896 080d 	ldmia.w	r6, {r0, r2, r3, fp}
 8000b86:	e881 080d 	stmia.w	r1, {r0, r2, r3, fp}
 8000b8a:	a804      	add	r0, sp, #16
 8000b8c:	e890 43cc 	ldmia.w	r0, {r2, r3, r6, r7, r8, r9, lr}
 8000b90:	f105 0144 	add.w	r1, r5, #68	@ 0x44
 8000b94:	f105 0a60 	add.w	sl, r5, #96	@ 0x60
 8000b98:	e881 43cc 	stmia.w	r1, {r2, r3, r6, r7, r8, r9, lr}
 8000b9c:	e89c 08cf 	ldmia.w	ip, {r0, r1, r2, r3, r6, r7, fp}
 8000ba0:	e88a 08cf 	stmia.w	sl, {r0, r1, r2, r3, r6, r7, fp}
 8000ba4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8000ba8:	f7ff fc16 	bl	80003d8 <ai_buffer_array_sane>
 8000bac:	b158      	cbz	r0, 8000bc6 <ai_platform_api_get_network_report+0x174>
 8000bae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8000bb2:	f7ff fc11 	bl	80003d8 <ai_buffer_array_sane>
 8000bb6:	b100      	cbz	r0, 8000bba <ai_platform_api_get_network_report+0x168>
 8000bb8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000bba:	e890 51cc 	ldmia.w	r0, {r2, r3, r6, r7, r8, ip, lr}
 8000bbe:	f105 0160 	add.w	r1, r5, #96	@ 0x60
 8000bc2:	e881 51cc 	stmia.w	r1, {r2, r3, r6, r7, r8, ip, lr}
 8000bc6:	f104 0020 	add.w	r0, r4, #32
 8000bca:	f7ff fc05 	bl	80003d8 <ai_buffer_array_sane>
 8000bce:	b158      	cbz	r0, 8000be8 <ai_platform_api_get_network_report+0x196>
 8000bd0:	f104 0020 	add.w	r0, r4, #32
 8000bd4:	f7ff fc00 	bl	80003d8 <ai_buffer_array_sane>
 8000bd8:	b100      	cbz	r0, 8000bdc <ai_platform_api_get_network_report+0x18a>
 8000bda:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000bdc:	f105 0144 	add.w	r1, r5, #68	@ 0x44
 8000be0:	e890 10fc 	ldmia.w	r0, {r2, r3, r4, r5, r6, r7, ip}
 8000be4:	e881 10fc 	stmia.w	r1, {r2, r3, r4, r5, r6, r7, ip}
 8000be8:	2001      	movs	r0, #1
 8000bea:	b00b      	add	sp, #44	@ 0x2c
 8000bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000bf0 <.text_24>:
 8000bf0:	00000000 	.word	0x00000000

08000bf4 <ai_platform_network_create>:
 8000bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	f20f 70a0 	addw	r0, pc, #1952	@ 0x7a0
 8000bfe:	b081      	sub	sp, #4
 8000c00:	6805      	ldr	r5, [r0, #0]
 8000c02:	4616      	mov	r6, r2
 8000c04:	461f      	mov	r7, r3
 8000c06:	d105      	bne.n	8000c14 <ai_platform_network_create+0x20>
 8000c08:	f20f 7094 	addw	r0, pc, #1940	@ 0x794
 8000c0c:	6800      	ldr	r0, [r0, #0]
 8000c0e:	b001      	add	sp, #4
 8000c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c14:	6026      	str	r6, [r4, #0]
 8000c16:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c1a:	f000 fbc3 	bl	80013a4 <core_init>
 8000c1e:	b910      	cbnz	r0, 8000c26 <ai_platform_network_create+0x32>
 8000c20:	f20f 703c 	addw	r0, pc, #1852	@ 0x73c
 8000c24:	e016      	b.n	8000c54 <ai_platform_network_create+0x60>
 8000c26:	2200      	movs	r2, #0
 8000c28:	4641      	mov	r1, r8
 8000c2a:	b2f8      	uxtb	r0, r7
 8000c2c:	f00b fe4c 	bl	800c8c8 <ai_version_get>
 8000c30:	4681      	mov	r9, r0
 8000c32:	2200      	movs	r2, #0
 8000c34:	2105      	movs	r1, #5
 8000c36:	2001      	movs	r0, #1
 8000c38:	f00b fe46 	bl	800c8c8 <ai_version_get>
 8000c3c:	4581      	cmp	r9, r0
 8000c3e:	bf18      	it	ne
 8000c40:	f20f 7020 	addwne	r0, pc, #1824	@ 0x720
 8000c44:	d106      	bne.n	8000c54 <ai_platform_network_create+0x60>
 8000c46:	f20f 7020 	addw	r0, pc, #1824	@ 0x720
 8000c4a:	f000 fbfd 	bl	8001448 <ai_check_custom_types>
 8000c4e:	b920      	cbnz	r0, 8000c5a <ai_platform_network_create+0x66>
 8000c50:	f20f 7018 	addw	r0, pc, #1816	@ 0x718
 8000c54:	6805      	ldr	r5, [r0, #0]
 8000c56:	2100      	movs	r1, #0
 8000c58:	6021      	str	r1, [r4, #0]
 8000c5a:	4641      	mov	r1, r8
 8000c5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c5e:	b2f8      	uxtb	r0, r7
 8000c60:	f00b fe32 	bl	800c8c8 <ai_version_get>
 8000c64:	60b0      	str	r0, [r6, #8]
 8000c66:	b001      	add	sp, #4
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c6e <ai_platform_network_destroy>:
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d100      	bne.n	8000c74 <ai_platform_network_destroy+0x6>
 8000c72:	4770      	bx	lr
 8000c74:	b500      	push	{lr}
 8000c76:	b081      	sub	sp, #4
 8000c78:	6801      	ldr	r1, [r0, #0]
 8000c7a:	f8df 26cc 	ldr.w	r2, [pc, #1740]	@ 8001348 <.text_36>
 8000c7e:	ea02 0301 	and.w	r3, r2, r1
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d104      	bne.n	8000c90 <ai_platform_network_destroy+0x22>
 8000c86:	4291      	cmp	r1, r2
 8000c88:	bf08      	it	eq
 8000c8a:	f000 fdb7 	bleq	80017fc <ai_layers_destroy_all>
 8000c8e:	2000      	movs	r0, #0
 8000c90:	b001      	add	sp, #4
 8000c92:	bd00      	pop	{pc}

08000c94 <ai_platform_network_init>:
 8000c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	d070      	beq.n	8000d80 <ai_platform_network_init+0xec>
 8000c9e:	6802      	ldr	r2, [r0, #0]
 8000ca0:	f8df 96a4 	ldr.w	r9, [pc, #1700]	@ 8001348 <.text_36>
 8000ca4:	ea09 0202 	and.w	r2, r9, r2
 8000ca8:	454a      	cmp	r2, r9
 8000caa:	d169      	bne.n	8000d80 <ai_platform_network_init+0xec>
 8000cac:	000d      	movs	r5, r1
 8000cae:	4680      	mov	r8, r0
 8000cb0:	d102      	bne.n	8000cb8 <ai_platform_network_init+0x24>
 8000cb2:	2211      	movs	r2, #17
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	e05f      	b.n	8000d78 <ai_platform_network_init+0xe4>
 8000cb8:	6828      	ldr	r0, [r5, #0]
 8000cba:	f8df a688 	ldr.w	sl, [pc, #1672]	@ 8001344 <.text_35>
 8000cbe:	4550      	cmp	r0, sl
 8000cc0:	d10e      	bne.n	8000ce0 <ai_platform_network_init+0x4c>
 8000cc2:	f105 020c 	add.w	r2, r5, #12
 8000cc6:	f8cd a000 	str.w	sl, [sp]
 8000cca:	e9d2 0100 	ldrd	r0, r1, [r2]
 8000cce:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8000cd2:	f04f 0b01 	mov.w	fp, #1
 8000cd6:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8000cda:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000cde:	e033      	b.n	8000d48 <ai_platform_network_init+0xb4>
 8000ce0:	686e      	ldr	r6, [r5, #4]
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	f7ff fa7b 	bl	80001e0 <ai_buffer_get_size>
 8000cea:	4604      	mov	r4, r0
 8000cec:	6a2f      	ldr	r7, [r5, #32]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	f105 001c 	add.w	r0, r5, #28
 8000cf4:	f7ff fa74 	bl	80001e0 <ai_buffer_get_size>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2c00      	cmp	r4, #0
 8000cfe:	f04f 0b00 	mov.w	fp, #0
 8000d02:	bf1a      	itte	ne
 8000d04:	2101      	movne	r1, #1
 8000d06:	462b      	movne	r3, r5
 8000d08:	2300      	moveq	r3, #0
 8000d0a:	b120      	cbz	r0, 8000d16 <ai_platform_network_init+0x82>
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	351c      	adds	r5, #28
 8000d10:	b917      	cbnz	r7, 8000d18 <ai_platform_network_init+0x84>
 8000d12:	2213      	movs	r2, #19
 8000d14:	e003      	b.n	8000d1e <ai_platform_network_init+0x8a>
 8000d16:	2500      	movs	r5, #0
 8000d18:	b956      	cbnz	r6, 8000d30 <ai_platform_network_init+0x9c>
 8000d1a:	b14c      	cbz	r4, 8000d30 <ai_platform_network_init+0x9c>
 8000d1c:	2212      	movs	r2, #18
 8000d1e:	2110      	movs	r1, #16
 8000d20:	f108 000c 	add.w	r0, r8, #12
 8000d24:	f000 fb45 	bl	80013b2 <core_set_error>
 8000d28:	2000      	movs	r0, #0
 8000d2a:	b005      	add	sp, #20
 8000d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d30:	f8cd a000 	str.w	sl, [sp]
 8000d34:	f8ad b004 	strh.w	fp, [sp, #4]
 8000d38:	f8ad 1006 	strh.w	r1, [sp, #6]
 8000d3c:	9302      	str	r3, [sp, #8]
 8000d3e:	f8ad b00c 	strh.w	fp, [sp, #12]
 8000d42:	f8ad 200e 	strh.w	r2, [sp, #14]
 8000d46:	9504      	str	r5, [sp, #16]
 8000d48:	f8d8 1000 	ldr.w	r1, [r8]
 8000d4c:	4549      	cmp	r1, r9
 8000d4e:	d11e      	bne.n	8000d8e <ai_platform_network_init+0xfa>
 8000d50:	f08b 0401 	eor.w	r4, fp, #1
 8000d54:	4622      	mov	r2, r4
 8000d56:	a901      	add	r1, sp, #4
 8000d58:	f108 0020 	add.w	r0, r8, #32
 8000d5c:	f7ff fc62 	bl	8000624 <_platform_ai_buffer_array_copy>
 8000d60:	b908      	cbnz	r0, 8000d66 <ai_platform_network_init+0xd2>
 8000d62:	2212      	movs	r2, #18
 8000d64:	e007      	b.n	8000d76 <ai_platform_network_init+0xe2>
 8000d66:	4622      	mov	r2, r4
 8000d68:	a903      	add	r1, sp, #12
 8000d6a:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8000d6e:	f7ff fc59 	bl	8000624 <_platform_ai_buffer_array_copy>
 8000d72:	b948      	cbnz	r0, 8000d88 <ai_platform_network_init+0xf4>
 8000d74:	2213      	movs	r2, #19
 8000d76:	2116      	movs	r1, #22
 8000d78:	f108 000c 	add.w	r0, r8, #12
 8000d7c:	f000 fb19 	bl	80013b2 <core_set_error>
 8000d80:	2000      	movs	r0, #0
 8000d82:	b005      	add	sp, #20
 8000d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d88:	4640      	mov	r0, r8
 8000d8a:	f000 fcd8 	bl	800173e <ai_layers_init_all>
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f8c8 0010 	str.w	r0, [r8, #16]
 8000d94:	b005      	add	sp, #20
 8000d96:	4640      	mov	r0, r8
 8000d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d9c <ai_platform_network_post_init>:
 8000d9c:	b530      	push	{r4, r5, lr}
 8000d9e:	0004      	movs	r4, r0
 8000da0:	b081      	sub	sp, #4
 8000da2:	d00f      	beq.n	8000dc4 <ai_platform_network_post_init+0x28>
 8000da4:	6820      	ldr	r0, [r4, #0]
 8000da6:	f8df 15a0 	ldr.w	r1, [pc, #1440]	@ 8001348 <.text_36>
 8000daa:	ea01 0200 	and.w	r2, r1, r0
 8000dae:	428a      	cmp	r2, r1
 8000db0:	d108      	bne.n	8000dc4 <ai_platform_network_post_init+0x28>
 8000db2:	7c23      	ldrb	r3, [r4, #16]
 8000db4:	079d      	lsls	r5, r3, #30
 8000db6:	d408      	bmi.n	8000dca <ai_platform_network_post_init+0x2e>
 8000db8:	2210      	movs	r2, #16
 8000dba:	2111      	movs	r1, #17
 8000dbc:	f104 000c 	add.w	r0, r4, #12
 8000dc0:	f000 faf7 	bl	80013b2 <core_set_error>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	b001      	add	sp, #4
 8000dc8:	bd30      	pop	{r4, r5, pc}
 8000dca:	4288      	cmp	r0, r1
 8000dcc:	d114      	bne.n	8000df8 <ai_platform_network_post_init+0x5c>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	f000 fcc3 	bl	800175a <ai_layers_post_init_all>
 8000dd4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	bf1c      	itt	ne
 8000dda:	6ba5      	ldrne	r5, [r4, #56]	@ 0x38
 8000ddc:	2d00      	cmpne	r5, #0
 8000dde:	d00b      	beq.n	8000df8 <ai_platform_network_post_init+0x5c>
 8000de0:	e000      	b.n	8000de4 <ai_platform_network_post_init+0x48>
 8000de2:	4605      	mov	r5, r0
 8000de4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000de6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000de8:	4629      	mov	r1, r5
 8000dea:	2000      	movs	r0, #0
 8000dec:	4798      	blx	r3
 8000dee:	6928      	ldr	r0, [r5, #16]
 8000df0:	4285      	cmp	r5, r0
 8000df2:	bf18      	it	ne
 8000df4:	2800      	cmpne	r0, #0
 8000df6:	d1f4      	bne.n	8000de2 <ai_platform_network_post_init+0x46>
 8000df8:	2001      	movs	r0, #1
 8000dfa:	b001      	add	sp, #4
 8000dfc:	bd30      	pop	{r4, r5, pc}
	...

08000e00 <ai_platform_network_process>:
 8000e00:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	b1b0      	cbz	r0, 8000e36 <ai_platform_network_process+0x36>
 8000e08:	6803      	ldr	r3, [r0, #0]
 8000e0a:	f8df 253c 	ldr.w	r2, [pc, #1340]	@ 8001348 <.text_36>
 8000e0e:	4013      	ands	r3, r2
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d110      	bne.n	8000e36 <ai_platform_network_process+0x36>
 8000e14:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 8000e16:	b102      	cbz	r2, 8000e1a <ai_platform_network_process+0x1a>
 8000e18:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	8343      	strh	r3, [r0, #26]
 8000e1e:	2400      	movs	r4, #0
 8000e20:	7c03      	ldrb	r3, [r0, #16]
 8000e22:	8304      	strh	r4, [r0, #24]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d008      	beq.n	8000e3e <ai_platform_network_process+0x3e>
 8000e2c:	2230      	movs	r2, #48	@ 0x30
 8000e2e:	2111      	movs	r1, #17
 8000e30:	300c      	adds	r0, #12
 8000e32:	f000 fabe 	bl	80013b2 <core_set_error>
 8000e36:	2000      	movs	r0, #0
 8000e38:	b003      	add	sp, #12
 8000e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	bf1e      	ittt	ne
 8000e42:	2a00      	cmpne	r2, #0
 8000e44:	8813      	ldrhne	r3, [r2, #0]
 8000e46:	2b00      	cmpne	r3, #0
 8000e48:	f000 8108 	beq.w	800105c <ai_platform_network_process+0x25c>
 8000e4c:	698b      	ldr	r3, [r1, #24]
 8000e4e:	f8d3 8000 	ldr.w	r8, [r3]
 8000e52:	9200      	str	r2, [sp, #0]
 8000e54:	46a2      	mov	sl, r4
 8000e56:	2600      	movs	r6, #0
 8000e58:	46a1      	mov	r9, r4
 8000e5a:	f101 0718 	add.w	r7, r1, #24
 8000e5e:	4605      	mov	r5, r0
 8000e60:	e018      	b.n	8000e94 <ai_platform_network_process+0x94>
 8000e62:	bf00      	nop
 8000e64:	f857 0c14 	ldr.w	r0, [r7, #-20]
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	f000 80f6 	beq.w	800105a <ai_platform_network_process+0x25a>
 8000e6e:	6839      	ldr	r1, [r7, #0]
 8000e70:	6808      	ldr	r0, [r1, #0]
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d055      	beq.n	8000f22 <ai_platform_network_process+0x122>
 8000e76:	4540      	cmp	r0, r8
 8000e78:	bf28      	it	cs
 8000e7a:	4680      	movcs	r8, r0
 8000e7c:	9801      	ldr	r0, [sp, #4]
 8000e7e:	4622      	mov	r2, r4
 8000e80:	f1a7 0118 	sub.w	r1, r7, #24
 8000e84:	f7ff fc28 	bl	80006d8 <_platform_network_state_setup>
 8000e88:	f10a 0a01 	add.w	sl, sl, #1
 8000e8c:	371c      	adds	r7, #28
 8000e8e:	f109 0910 	add.w	r9, r9, #16
 8000e92:	1d36      	adds	r6, r6, #4
 8000e94:	9800      	ldr	r0, [sp, #0]
 8000e96:	8801      	ldrh	r1, [r0, #0]
 8000e98:	458a      	cmp	sl, r1
 8000e9a:	d24c      	bcs.n	8000f36 <ai_platform_network_process+0x136>
 8000e9c:	6840      	ldr	r0, [r0, #4]
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	bf1c      	itt	ne
 8000ea2:	5984      	ldrne	r4, [r0, r6]
 8000ea4:	2c00      	cmpne	r4, #0
 8000ea6:	d046      	beq.n	8000f36 <ai_platform_network_process+0x136>
 8000ea8:	9800      	ldr	r0, [sp, #0]
 8000eaa:	6881      	ldr	r1, [r0, #8]
 8000eac:	680a      	ldr	r2, [r1, #0]
 8000eae:	eb12 0209 	adds.w	r2, r2, r9
 8000eb2:	9201      	str	r2, [sp, #4]
 8000eb4:	f000 80d1 	beq.w	800105a <ai_platform_network_process+0x25a>
 8000eb8:	2101      	movs	r1, #1
 8000eba:	f1a7 0018 	sub.w	r0, r7, #24
 8000ebe:	f7ff f98f 	bl	80001e0 <ai_buffer_get_size>
 8000ec2:	69a2      	ldr	r2, [r4, #24]
 8000ec4:	6851      	ldr	r1, [r2, #4]
 8000ec6:	4281      	cmp	r1, r0
 8000ec8:	d330      	bcc.n	8000f2c <ai_platform_network_process+0x12c>
 8000eca:	68e0      	ldr	r0, [r4, #12]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8000ed2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8000ed6:	45f4      	cmp	ip, lr
 8000ed8:	bf02      	ittt	eq
 8000eda:	f8d0 c008 	ldreq.w	ip, [r0, #8]
 8000ede:	f8d3 e008 	ldreq.w	lr, [r3, #8]
 8000ee2:	45f4      	cmpeq	ip, lr
 8000ee4:	bf02      	ittt	eq
 8000ee6:	6840      	ldreq	r0, [r0, #4]
 8000ee8:	685b      	ldreq	r3, [r3, #4]
 8000eea:	4298      	cmpeq	r0, r3
 8000eec:	d11e      	bne.n	8000f2c <ai_platform_network_process+0x12c>
 8000eee:	6810      	ldr	r0, [r2, #0]
 8000ef0:	f00b fbd3 	bl	800c69a <ai_array_get_data_byte_size>
 8000ef4:	4683      	mov	fp, r0
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f00b fd2b 	bl	800c952 <get_tensor_byte_size>
 8000efc:	4583      	cmp	fp, r0
 8000efe:	d315      	bcc.n	8000f2c <ai_platform_network_process+0x12c>
 8000f00:	69a0      	ldr	r0, [r4, #24]
 8000f02:	6800      	ldr	r0, [r0, #0]
 8000f04:	f00b fa90 	bl	800c428 <ai_array_to_buffer_fmt>
 8000f08:	f857 1c18 	ldr.w	r1, [r7, #-24]
 8000f0c:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
 8000f10:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 8000f14:	4288      	cmp	r0, r1
 8000f16:	d0a5      	beq.n	8000e64 <ai_platform_network_process+0x64>
 8000f18:	2219      	movs	r2, #25
 8000f1a:	2112      	movs	r1, #18
 8000f1c:	f105 000c 	add.w	r0, r5, #12
 8000f20:	e787      	b.n	8000e32 <ai_platform_network_process+0x32>
 8000f22:	2221      	movs	r2, #33	@ 0x21
 8000f24:	2112      	movs	r1, #18
 8000f26:	f105 000c 	add.w	r0, r5, #12
 8000f2a:	e782      	b.n	8000e32 <ai_platform_network_process+0x32>
 8000f2c:	2218      	movs	r2, #24
 8000f2e:	2112      	movs	r1, #18
 8000f30:	f105 000c 	add.w	r0, r5, #12
 8000f34:	e77d      	b.n	8000e32 <ai_platform_network_process+0x32>
 8000f36:	9902      	ldr	r1, [sp, #8]
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	f000 807d 	beq.w	8001038 <ai_platform_network_process+0x238>
 8000f3e:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
 8000f40:	2802      	cmp	r0, #2
 8000f42:	db74      	blt.n	800102e <ai_platform_network_process+0x22e>
 8000f44:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8000f46:	300c      	adds	r0, #12
 8000f48:	bf1c      	itt	ne
 8000f4a:	8802      	ldrhne	r2, [r0, #0]
 8000f4c:	2a00      	cmpne	r2, #0
 8000f4e:	d06e      	beq.n	800102e <ai_platform_network_process+0x22e>
 8000f50:	f04f 0a00 	mov.w	sl, #0
 8000f54:	2600      	movs	r6, #0
 8000f56:	46d1      	mov	r9, sl
 8000f58:	f101 0718 	add.w	r7, r1, #24
 8000f5c:	9000      	str	r0, [sp, #0]
 8000f5e:	e016      	b.n	8000f8e <ai_platform_network_process+0x18e>
 8000f60:	f857 0c14 	ldr.w	r0, [r7, #-20]
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d05d      	beq.n	8001024 <ai_platform_network_process+0x224>
 8000f68:	6839      	ldr	r1, [r7, #0]
 8000f6a:	6808      	ldr	r0, [r1, #0]
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	d054      	beq.n	800101a <ai_platform_network_process+0x21a>
 8000f70:	4540      	cmp	r0, r8
 8000f72:	bf28      	it	cs
 8000f74:	4680      	movcs	r8, r0
 8000f76:	9801      	ldr	r0, [sp, #4]
 8000f78:	4622      	mov	r2, r4
 8000f7a:	f1a7 0118 	sub.w	r1, r7, #24
 8000f7e:	f7ff fbab 	bl	80006d8 <_platform_network_state_setup>
 8000f82:	f10a 0a01 	add.w	sl, sl, #1
 8000f86:	371c      	adds	r7, #28
 8000f88:	f109 0910 	add.w	r9, r9, #16
 8000f8c:	1d36      	adds	r6, r6, #4
 8000f8e:	9800      	ldr	r0, [sp, #0]
 8000f90:	8801      	ldrh	r1, [r0, #0]
 8000f92:	458a      	cmp	sl, r1
 8000f94:	d250      	bcs.n	8001038 <ai_platform_network_process+0x238>
 8000f96:	6840      	ldr	r0, [r0, #4]
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	bf1c      	itt	ne
 8000f9c:	5984      	ldrne	r4, [r0, r6]
 8000f9e:	2c00      	cmpne	r4, #0
 8000fa0:	d04a      	beq.n	8001038 <ai_platform_network_process+0x238>
 8000fa2:	9800      	ldr	r0, [sp, #0]
 8000fa4:	6881      	ldr	r1, [r0, #8]
 8000fa6:	680a      	ldr	r2, [r1, #0]
 8000fa8:	eb12 0209 	adds.w	r2, r2, r9
 8000fac:	9201      	str	r2, [sp, #4]
 8000fae:	d039      	beq.n	8001024 <ai_platform_network_process+0x224>
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	f1a7 0018 	sub.w	r0, r7, #24
 8000fb6:	f7ff f913 	bl	80001e0 <ai_buffer_get_size>
 8000fba:	69a2      	ldr	r2, [r4, #24]
 8000fbc:	6851      	ldr	r1, [r2, #4]
 8000fbe:	4281      	cmp	r1, r0
 8000fc0:	d335      	bcc.n	800102e <ai_platform_network_process+0x22e>
 8000fc2:	68e0      	ldr	r0, [r4, #12]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8000fca:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8000fce:	45f4      	cmp	ip, lr
 8000fd0:	bf02      	ittt	eq
 8000fd2:	f8d0 c008 	ldreq.w	ip, [r0, #8]
 8000fd6:	f8d3 e008 	ldreq.w	lr, [r3, #8]
 8000fda:	45f4      	cmpeq	ip, lr
 8000fdc:	bf02      	ittt	eq
 8000fde:	6840      	ldreq	r0, [r0, #4]
 8000fe0:	685b      	ldreq	r3, [r3, #4]
 8000fe2:	4298      	cmpeq	r0, r3
 8000fe4:	d123      	bne.n	800102e <ai_platform_network_process+0x22e>
 8000fe6:	6810      	ldr	r0, [r2, #0]
 8000fe8:	f00b fb57 	bl	800c69a <ai_array_get_data_byte_size>
 8000fec:	4683      	mov	fp, r0
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f00b fcaf 	bl	800c952 <get_tensor_byte_size>
 8000ff4:	4583      	cmp	fp, r0
 8000ff6:	d31a      	bcc.n	800102e <ai_platform_network_process+0x22e>
 8000ff8:	69a0      	ldr	r0, [r4, #24]
 8000ffa:	6800      	ldr	r0, [r0, #0]
 8000ffc:	f00b fa14 	bl	800c428 <ai_array_to_buffer_fmt>
 8001000:	f857 1c18 	ldr.w	r1, [r7, #-24]
 8001004:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
 8001008:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 800100c:	4288      	cmp	r0, r1
 800100e:	d0a7      	beq.n	8000f60 <ai_platform_network_process+0x160>
 8001010:	2219      	movs	r2, #25
 8001012:	2113      	movs	r1, #19
 8001014:	f105 000c 	add.w	r0, r5, #12
 8001018:	e70b      	b.n	8000e32 <ai_platform_network_process+0x32>
 800101a:	2221      	movs	r2, #33	@ 0x21
 800101c:	2113      	movs	r1, #19
 800101e:	f105 000c 	add.w	r0, r5, #12
 8001022:	e706      	b.n	8000e32 <ai_platform_network_process+0x32>
 8001024:	2217      	movs	r2, #23
 8001026:	2113      	movs	r1, #19
 8001028:	f105 000c 	add.w	r0, r5, #12
 800102c:	e701      	b.n	8000e32 <ai_platform_network_process+0x32>
 800102e:	2218      	movs	r2, #24
 8001030:	2113      	movs	r1, #19
 8001032:	f105 000c 	add.w	r0, r5, #12
 8001036:	e6fc      	b.n	8000e32 <ai_platform_network_process+0x32>
 8001038:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
 800103a:	f8a5 8018 	strh.w	r8, [r5, #24]
 800103e:	2800      	cmp	r0, #0
 8001040:	bf14      	ite	ne
 8001042:	f8d5 8034 	ldrne.w	r8, [r5, #52]	@ 0x34
 8001046:	f04f 0800 	moveq.w	r8, #0
 800104a:	2802      	cmp	r0, #2
 800104c:	bfa6      	itte	ge
 800104e:	6b68      	ldrge	r0, [r5, #52]	@ 0x34
 8001050:	f100 0a0c 	addge.w	sl, r0, #12
 8001054:	f04f 0a00 	movlt.w	sl, #0
 8001058:	e003      	b.n	8001062 <ai_platform_network_process+0x262>
 800105a:	4628      	mov	r0, r5
 800105c:	2217      	movs	r2, #23
 800105e:	2112      	movs	r1, #18
 8001060:	e6e6      	b.n	8000e30 <ai_platform_network_process+0x30>
 8001062:	8b68      	ldrh	r0, [r5, #26]
 8001064:	8b29      	ldrh	r1, [r5, #24]
 8001066:	4288      	cmp	r0, r1
 8001068:	f080 8081 	bcs.w	800116e <ai_platform_network_process+0x36e>
 800106c:	2600      	movs	r6, #0
 800106e:	4644      	mov	r4, r8
 8001070:	46b1      	mov	r9, r6
 8001072:	46b0      	mov	r8, r6
 8001074:	e017      	b.n	80010a6 <ai_platform_network_process+0x2a6>
 8001076:	6882      	ldr	r2, [r0, #8]
 8001078:	68c3      	ldr	r3, [r0, #12]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	1ad2      	subs	r2, r2, r3
 800107e:	4411      	add	r1, r2
 8001080:	6081      	str	r1, [r0, #8]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	60c2      	str	r2, [r0, #12]
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	4408      	add	r0, r1
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	4288      	cmp	r0, r1
 8001092:	d302      	bcc.n	800109a <ai_platform_network_process+0x29a>
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	4240      	negs	r0, r0
 8001098:	4408      	add	r0, r1
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	f108 0801 	add.w	r8, r8, #1
 80010a0:	f109 0910 	add.w	r9, r9, #16
 80010a4:	1d36      	adds	r6, r6, #4
 80010a6:	2c00      	cmp	r4, #0
 80010a8:	bf14      	ite	ne
 80010aa:	8820      	ldrhne	r0, [r4, #0]
 80010ac:	2000      	moveq	r0, #0
 80010ae:	4580      	cmp	r8, r0
 80010b0:	d211      	bcs.n	80010d6 <ai_platform_network_process+0x2d6>
 80010b2:	6860      	ldr	r0, [r4, #4]
 80010b4:	b178      	cbz	r0, 80010d6 <ai_platform_network_process+0x2d6>
 80010b6:	5980      	ldr	r0, [r0, r6]
 80010b8:	b168      	cbz	r0, 80010d6 <ai_platform_network_process+0x2d6>
 80010ba:	68a1      	ldr	r1, [r4, #8]
 80010bc:	6980      	ldr	r0, [r0, #24]
 80010be:	680a      	ldr	r2, [r1, #0]
 80010c0:	6801      	ldr	r1, [r0, #0]
 80010c2:	eb02 0709 	add.w	r7, r2, r9
 80010c6:	008a      	lsls	r2, r1, #2
 80010c8:	d5d5      	bpl.n	8001076 <ai_platform_network_process+0x276>
 80010ca:	6881      	ldr	r1, [r0, #8]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f00a fe6c 	bl	800bdac <st_int8_copy>
 80010d4:	e7d7      	b.n	8001086 <ai_platform_network_process+0x286>
 80010d6:	46a0      	mov	r8, r4
 80010d8:	4628      	mov	r0, r5
 80010da:	f000 fb55 	bl	8001788 <ai_layers_forward_all>
 80010de:	2600      	movs	r6, #0
 80010e0:	4654      	mov	r4, sl
 80010e2:	46b1      	mov	r9, r6
 80010e4:	46b2      	mov	sl, r6
 80010e6:	e016      	b.n	8001116 <ai_platform_network_process+0x316>
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	4411      	add	r1, r2
 80010ee:	6079      	str	r1, [r7, #4]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4291      	cmp	r1, r2
 80010f4:	d302      	bcc.n	80010fc <ai_platform_network_process+0x2fc>
 80010f6:	68f9      	ldr	r1, [r7, #12]
 80010f8:	4249      	negs	r1, r1
 80010fa:	4411      	add	r1, r2
 80010fc:	6079      	str	r1, [r7, #4]
 80010fe:	6882      	ldr	r2, [r0, #8]
 8001100:	68c3      	ldr	r3, [r0, #12]
 8001102:	1ad2      	subs	r2, r2, r3
 8001104:	4411      	add	r1, r2
 8001106:	6081      	str	r1, [r0, #8]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	60c2      	str	r2, [r0, #12]
 800110c:	f10a 0a01 	add.w	sl, sl, #1
 8001110:	f109 0910 	add.w	r9, r9, #16
 8001114:	1d36      	adds	r6, r6, #4
 8001116:	2c00      	cmp	r4, #0
 8001118:	bf14      	ite	ne
 800111a:	8820      	ldrhne	r0, [r4, #0]
 800111c:	2000      	moveq	r0, #0
 800111e:	4582      	cmp	sl, r0
 8001120:	d21c      	bcs.n	800115c <ai_platform_network_process+0x35c>
 8001122:	6860      	ldr	r0, [r4, #4]
 8001124:	b1d0      	cbz	r0, 800115c <ai_platform_network_process+0x35c>
 8001126:	5980      	ldr	r0, [r0, r6]
 8001128:	b1c0      	cbz	r0, 800115c <ai_platform_network_process+0x35c>
 800112a:	68a1      	ldr	r1, [r4, #8]
 800112c:	6980      	ldr	r0, [r0, #24]
 800112e:	680a      	ldr	r2, [r1, #0]
 8001130:	6801      	ldr	r1, [r0, #0]
 8001132:	eb02 0709 	add.w	r7, r2, r9
 8001136:	008a      	lsls	r2, r1, #2
 8001138:	d5d6      	bpl.n	80010e8 <ai_platform_network_process+0x2e8>
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	6880      	ldr	r0, [r0, #8]
 8001140:	f00a fe34 	bl	800bdac <st_int8_copy>
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	68b9      	ldr	r1, [r7, #8]
 8001148:	4408      	add	r0, r1
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6839      	ldr	r1, [r7, #0]
 800114e:	4288      	cmp	r0, r1
 8001150:	d302      	bcc.n	8001158 <ai_platform_network_process+0x358>
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	4240      	negs	r0, r0
 8001156:	4408      	add	r0, r1
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	e7d7      	b.n	800110c <ai_platform_network_process+0x30c>
 800115c:	8b68      	ldrh	r0, [r5, #26]
 800115e:	8b29      	ldrh	r1, [r5, #24]
 8001160:	1c40      	adds	r0, r0, #1
 8001162:	8368      	strh	r0, [r5, #26]
 8001164:	46a2      	mov	sl, r4
 8001166:	b280      	uxth	r0, r0
 8001168:	4288      	cmp	r0, r1
 800116a:	f4ff af7f 	bcc.w	800106c <ai_platform_network_process+0x26c>
 800116e:	8b68      	ldrh	r0, [r5, #26]
 8001170:	b003      	add	sp, #12
 8001172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001176 <ai_platform_observer_node_info>:
 8001176:	b530      	push	{r4, r5, lr}
 8001178:	0003      	movs	r3, r0
 800117a:	b081      	sub	sp, #4
 800117c:	d043      	beq.n	8001206 <ai_platform_observer_node_info+0x90>
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4871      	ldr	r0, [pc, #452]	@ (8001348 <.text_36>)
 8001182:	4002      	ands	r2, r0
 8001184:	4282      	cmp	r2, r0
 8001186:	d13e      	bne.n	8001206 <ai_platform_observer_node_info+0x90>
 8001188:	b931      	cbnz	r1, 8001198 <ai_platform_observer_node_info+0x22>
 800118a:	2210      	movs	r2, #16
 800118c:	2110      	movs	r1, #16
 800118e:	f103 000c 	add.w	r0, r3, #12
 8001192:	f000 f90e 	bl	80013b2 <core_set_error>
 8001196:	e036      	b.n	8001206 <ai_platform_observer_node_info+0x90>
 8001198:	7c18      	ldrb	r0, [r3, #16]
 800119a:	0782      	lsls	r2, r0, #30
 800119c:	d402      	bmi.n	80011a4 <ai_platform_observer_node_info+0x2e>
 800119e:	2210      	movs	r2, #16
 80011a0:	2111      	movs	r1, #17
 80011a2:	e02c      	b.n	80011fe <ai_platform_observer_node_info+0x88>
 80011a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011a6:	2400      	movs	r4, #0
 80011a8:	b33a      	cbz	r2, 80011fa <ai_platform_observer_node_info+0x84>
 80011aa:	e006      	b.n	80011ba <ai_platform_observer_node_info+0x44>
 80011ac:	6910      	ldr	r0, [r2, #16]
 80011ae:	1c64      	adds	r4, r4, #1
 80011b0:	4282      	cmp	r2, r0
 80011b2:	bf18      	it	ne
 80011b4:	2800      	cmpne	r0, #0
 80011b6:	d020      	beq.n	80011fa <ai_platform_observer_node_info+0x84>
 80011b8:	4602      	mov	r2, r0
 80011ba:	880d      	ldrh	r5, [r1, #0]
 80011bc:	b2a0      	uxth	r0, r4
 80011be:	42a8      	cmp	r0, r5
 80011c0:	d1f4      	bne.n	80011ac <ai_platform_observer_node_info+0x36>
 80011c2:	6990      	ldr	r0, [r2, #24]
 80011c4:	60c8      	str	r0, [r1, #12]
 80011c6:	f240 140f 	movw	r4, #271	@ 0x10f
 80011ca:	8813      	ldrh	r3, [r2, #0]
 80011cc:	42a3      	cmp	r3, r4
 80011ce:	d10b      	bne.n	80011e8 <ai_platform_observer_node_info+0x72>
 80011d0:	69d0      	ldr	r0, [r2, #28]
 80011d2:	8842      	ldrh	r2, [r0, #2]
 80011d4:	808a      	strh	r2, [r1, #4]
 80011d6:	8803      	ldrh	r3, [r0, #0]
 80011d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011dc:	804b      	strh	r3, [r1, #2]
 80011de:	6980      	ldr	r0, [r0, #24]
 80011e0:	6088      	str	r0, [r1, #8]
 80011e2:	b001      	add	sp, #4
 80011e4:	2001      	movs	r0, #1
 80011e6:	bd30      	pop	{r4, r5, pc}
 80011e8:	8850      	ldrh	r0, [r2, #2]
 80011ea:	8088      	strh	r0, [r1, #4]
 80011ec:	2000      	movs	r0, #0
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	6088      	str	r0, [r1, #8]
 80011f2:	804a      	strh	r2, [r1, #2]
 80011f4:	2001      	movs	r0, #1
 80011f6:	b001      	add	sp, #4
 80011f8:	bd30      	pop	{r4, r5, pc}
 80011fa:	2214      	movs	r2, #20
 80011fc:	2114      	movs	r1, #20
 80011fe:	f103 000c 	add.w	r0, r3, #12
 8001202:	f000 f8d6 	bl	80013b2 <core_set_error>
 8001206:	2000      	movs	r0, #0
 8001208:	b001      	add	sp, #4
 800120a:	bd30      	pop	{r4, r5, pc}

0800120c <ai_platform_observer_register>:
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120e:	0004      	movs	r4, r0
 8001210:	b081      	sub	sp, #4
 8001212:	460d      	mov	r5, r1
 8001214:	4616      	mov	r6, r2
 8001216:	461f      	mov	r7, r3
 8001218:	d014      	beq.n	8001244 <ai_platform_observer_register+0x38>
 800121a:	6821      	ldr	r1, [r4, #0]
 800121c:	484a      	ldr	r0, [pc, #296]	@ (8001348 <.text_36>)
 800121e:	4001      	ands	r1, r0
 8001220:	4281      	cmp	r1, r0
 8001222:	d10f      	bne.n	8001244 <ai_platform_observer_register+0x38>
 8001224:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8001226:	b110      	cbz	r0, 800122e <ai_platform_observer_register+0x22>
 8001228:	2240      	movs	r2, #64	@ 0x40
 800122a:	2111      	movs	r1, #17
 800122c:	e006      	b.n	800123c <ai_platform_observer_register+0x30>
 800122e:	2014      	movs	r0, #20
 8001230:	f000 f8ca 	bl	80013c8 <core_mem_alloc>
 8001234:	0001      	movs	r1, r0
 8001236:	d108      	bne.n	800124a <ai_platform_observer_register+0x3e>
 8001238:	2210      	movs	r2, #16
 800123a:	2131      	movs	r1, #49	@ 0x31
 800123c:	f104 000c 	add.w	r0, r4, #12
 8001240:	f000 f8b7 	bl	80013b2 <core_set_error>
 8001244:	2000      	movs	r0, #0
 8001246:	b001      	add	sp, #4
 8001248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124a:	2000      	movs	r0, #0
 800124c:	81c8      	strh	r0, [r1, #14]
 800124e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001250:	b14a      	cbz	r2, 8001266 <ai_platform_observer_register+0x5a>
 8001252:	e000      	b.n	8001256 <ai_platform_observer_register+0x4a>
 8001254:	4602      	mov	r2, r0
 8001256:	89c8      	ldrh	r0, [r1, #14]
 8001258:	1c40      	adds	r0, r0, #1
 800125a:	81c8      	strh	r0, [r1, #14]
 800125c:	6910      	ldr	r0, [r2, #16]
 800125e:	4282      	cmp	r2, r0
 8001260:	bf18      	it	ne
 8001262:	2800      	cmpne	r0, #0
 8001264:	d1f6      	bne.n	8001254 <ai_platform_observer_register+0x48>
 8001266:	f007 07ff 	and.w	r7, r7, #255	@ 0xff
 800126a:	600d      	str	r5, [r1, #0]
 800126c:	2000      	movs	r0, #0
 800126e:	f047 7780 	orr.w	r7, r7, #16777216	@ 0x1000000
 8001272:	604e      	str	r6, [r1, #4]
 8001274:	8188      	strh	r0, [r1, #12]
 8001276:	608f      	str	r7, [r1, #8]
 8001278:	6461      	str	r1, [r4, #68]	@ 0x44
 800127a:	4834      	ldr	r0, [pc, #208]	@ (800134c <.text_37>)
 800127c:	6420      	str	r0, [r4, #64]	@ 0x40
 800127e:	b001      	add	sp, #4
 8001280:	2001      	movs	r0, #1
 8001282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001284 <ai_platform_observer_register_s>:
 8001284:	b500      	push	{lr}
 8001286:	b081      	sub	sp, #4
 8001288:	460a      	mov	r2, r1
 800128a:	b1a0      	cbz	r0, 80012b6 <ai_platform_observer_register_s+0x32>
 800128c:	6803      	ldr	r3, [r0, #0]
 800128e:	492e      	ldr	r1, [pc, #184]	@ (8001348 <.text_36>)
 8001290:	400b      	ands	r3, r1
 8001292:	428b      	cmp	r3, r1
 8001294:	d10f      	bne.n	80012b6 <ai_platform_observer_register_s+0x32>
 8001296:	b93a      	cbnz	r2, 80012a8 <ai_platform_observer_register_s+0x24>
 8001298:	2211      	movs	r2, #17
 800129a:	2110      	movs	r1, #16
 800129c:	300c      	adds	r0, #12
 800129e:	f000 f888 	bl	80013b2 <core_set_error>
 80012a2:	2000      	movs	r0, #0
 80012a4:	b001      	add	sp, #4
 80012a6:	bd00      	pop	{pc}
 80012a8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80012aa:	b139      	cbz	r1, 80012bc <ai_platform_observer_register_s+0x38>
 80012ac:	2240      	movs	r2, #64	@ 0x40
 80012ae:	2111      	movs	r1, #17
 80012b0:	300c      	adds	r0, #12
 80012b2:	f000 f87e 	bl	80013b2 <core_set_error>
 80012b6:	2000      	movs	r0, #0
 80012b8:	b001      	add	sp, #4
 80012ba:	bd00      	pop	{pc}
 80012bc:	81d1      	strh	r1, [r2, #14]
 80012be:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80012c0:	b14b      	cbz	r3, 80012d6 <ai_platform_observer_register_s+0x52>
 80012c2:	e000      	b.n	80012c6 <ai_platform_observer_register_s+0x42>
 80012c4:	460b      	mov	r3, r1
 80012c6:	89d1      	ldrh	r1, [r2, #14]
 80012c8:	1c49      	adds	r1, r1, #1
 80012ca:	81d1      	strh	r1, [r2, #14]
 80012cc:	6919      	ldr	r1, [r3, #16]
 80012ce:	428b      	cmp	r3, r1
 80012d0:	bf18      	it	ne
 80012d2:	2900      	cmpne	r1, #0
 80012d4:	d1f6      	bne.n	80012c4 <ai_platform_observer_register_s+0x40>
 80012d6:	7a13      	ldrb	r3, [r2, #8]
 80012d8:	2100      	movs	r1, #0
 80012da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012de:	8191      	strh	r1, [r2, #12]
 80012e0:	6093      	str	r3, [r2, #8]
 80012e2:	6442      	str	r2, [r0, #68]	@ 0x44
 80012e4:	4919      	ldr	r1, [pc, #100]	@ (800134c <.text_37>)
 80012e6:	6401      	str	r1, [r0, #64]	@ 0x40
 80012e8:	2001      	movs	r0, #1
 80012ea:	b001      	add	sp, #4
 80012ec:	bd00      	pop	{pc}

080012ee <ai_platform_observer_unregister>:
 80012ee:	b510      	push	{r4, lr}
 80012f0:	0004      	movs	r4, r0
 80012f2:	d00d      	beq.n	8001310 <ai_platform_observer_unregister+0x22>
 80012f4:	6821      	ldr	r1, [r4, #0]
 80012f6:	4814      	ldr	r0, [pc, #80]	@ (8001348 <.text_36>)
 80012f8:	4001      	ands	r1, r0
 80012fa:	4281      	cmp	r1, r0
 80012fc:	d108      	bne.n	8001310 <ai_platform_observer_unregister+0x22>
 80012fe:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8001300:	b108      	cbz	r0, 8001306 <ai_platform_observer_unregister+0x18>
 8001302:	f000 f86e 	bl	80013e2 <core_mem_free>
 8001306:	2000      	movs	r0, #0
 8001308:	6460      	str	r0, [r4, #68]	@ 0x44
 800130a:	6420      	str	r0, [r4, #64]	@ 0x40
 800130c:	2001      	movs	r0, #1
 800130e:	bd10      	pop	{r4, pc}
 8001310:	2000      	movs	r0, #0
 8001312:	bd10      	pop	{r4, pc}

08001314 <ai_platform_observer_unregister_s>:
 8001314:	b500      	push	{lr}
 8001316:	b081      	sub	sp, #4
 8001318:	b150      	cbz	r0, 8001330 <ai_platform_observer_unregister_s+0x1c>
 800131a:	6803      	ldr	r3, [r0, #0]
 800131c:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <.text_36>)
 800131e:	4013      	ands	r3, r2
 8001320:	4293      	cmp	r3, r2
 8001322:	d105      	bne.n	8001330 <ai_platform_observer_unregister_s+0x1c>
 8001324:	b939      	cbnz	r1, 8001336 <ai_platform_observer_unregister_s+0x22>
 8001326:	2211      	movs	r2, #17
 8001328:	2110      	movs	r1, #16
 800132a:	300c      	adds	r0, #12
 800132c:	f000 f841 	bl	80013b2 <core_set_error>
 8001330:	2000      	movs	r0, #0
 8001332:	b001      	add	sp, #4
 8001334:	bd00      	pop	{pc}
 8001336:	2100      	movs	r1, #0
 8001338:	6441      	str	r1, [r0, #68]	@ 0x44
 800133a:	6401      	str	r1, [r0, #64]	@ 0x40
 800133c:	2001      	movs	r0, #1
 800133e:	b001      	add	sp, #4
 8001340:	bd00      	pop	{pc}
	...

08001344 <.text_35>:
 8001344:	a1facade 	.word	0xa1facade

08001348 <.text_36>:
 8001348:	a1c00100 	.word	0xa1c00100

0800134c <.text_37>:
 800134c:	08000713 	.word	0x08000713

08001350 <.text_38>:
 8001350:	00000001 	.word	0x00000001
 8001354:	00000000 	.word	0x00000000
 8001358:	00000001 	.word	0x00000001
 800135c:	00000001 	.word	0x00000001

08001360 <_platform_network_sanity_check{1}{2}::e>:
 8001360:	00001030                                0...

08001364 <_platform_network_sanity_check{4}{5}::e>:
 8001364:	00001001                                ....

08001368 <_platform_network_sanity_check{9}::signatures>:
 8001368:	84048403                                ....

0800136c <_platform_network_sanity_check{9}{10}{11}::e>:
 800136c:	00001002                                ....

08001370 <ai_platform_runtime_get_version::v>:
 8001370:	00000109                                ....

08001374 <ai_platform_api_get_version::v>:
 8001374:	00000201                                ....

08001378 <ai_platform_interface_api_get_version::v>:
 8001378:	00000501                                ....

0800137c <ai_platform_network_get_error{1}{2}::error>:
 800137c:	00001010                                ....

08001380 <.text_47>:
 8001380:	00040440 	.word	0x00040440
	...
 8001394:	00000401 	.word	0x00000401
 8001398:	00000000 	.word	0x00000000

0800139c <.text_48>:
 800139c:	00000000 	.word	0x00000000

080013a0 <ai_platform_network_create{7}{8}::e>:
 80013a0:	00001010                                ....

080013a4 <core_init>:
 80013a4:	2001      	movs	r0, #1
 80013a6:	4770      	bx	lr

080013a8 <core_get_error>:
 80013a8:	4601      	mov	r1, r0
 80013aa:	2200      	movs	r2, #0
 80013ac:	6808      	ldr	r0, [r1, #0]
 80013ae:	600a      	str	r2, [r1, #0]
 80013b0:	4770      	bx	lr

080013b2 <core_set_error>:
 80013b2:	7803      	ldrb	r3, [r0, #0]
 80013b4:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 80013b8:	d104      	bne.n	80013c4 <core_set_error+0x12>
 80013ba:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80013be:	6001      	str	r1, [r0, #0]
 80013c0:	2001      	movs	r0, #1
 80013c2:	4770      	bx	lr
 80013c4:	2000      	movs	r0, #0
 80013c6:	4770      	bx	lr

080013c8 <core_mem_alloc>:
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d100      	bne.n	80013ce <core_mem_alloc+0x6>
 80013cc:	4770      	bx	lr
 80013ce:	b500      	push	{lr}
 80013d0:	b081      	sub	sp, #4
 80013d2:	1d00      	adds	r0, r0, #4
 80013d4:	f010 ff8e 	bl	80122f4 <malloc>
 80013d8:	b108      	cbz	r0, 80013de <core_mem_alloc+0x16>
 80013da:	6000      	str	r0, [r0, #0]
 80013dc:	1d00      	adds	r0, r0, #4
 80013de:	b001      	add	sp, #4
 80013e0:	bd00      	pop	{pc}

080013e2 <core_mem_free>:
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d100      	bne.n	80013e8 <core_mem_free+0x6>
 80013e6:	4770      	bx	lr
 80013e8:	b500      	push	{lr}
 80013ea:	b081      	sub	sp, #4
 80013ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80013f0:	1f01      	subs	r1, r0, #4
 80013f2:	428a      	cmp	r2, r1
 80013f4:	d106      	bne.n	8001404 <core_mem_free+0x22>
 80013f6:	b129      	cbz	r1, 8001404 <core_mem_free+0x22>
 80013f8:	2000      	movs	r0, #0
 80013fa:	6008      	str	r0, [r1, #0]
 80013fc:	4608      	mov	r0, r1
 80013fe:	f010 ff81 	bl	8012304 <free>
 8001402:	2000      	movs	r0, #0
 8001404:	b001      	add	sp, #4
 8001406:	bd00      	pop	{pc}

08001408 <core_mem_realloc>:
 8001408:	b500      	push	{lr}
 800140a:	b081      	sub	sp, #4
 800140c:	b920      	cbnz	r0, 8001418 <core_mem_realloc+0x10>
 800140e:	b1c1      	cbz	r1, 8001442 <core_mem_realloc+0x3a>
 8001410:	1d08      	adds	r0, r1, #4
 8001412:	f010 ff6f 	bl	80122f4 <malloc>
 8001416:	e00e      	b.n	8001436 <core_mem_realloc+0x2e>
 8001418:	b919      	cbnz	r1, 8001422 <core_mem_realloc+0x1a>
 800141a:	b001      	add	sp, #4
 800141c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001420:	e7df      	b.n	80013e2 <core_mem_free>
 8001422:	1f02      	subs	r2, r0, #4
 8001424:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8001428:	4290      	cmp	r0, r2
 800142a:	d109      	bne.n	8001440 <core_mem_realloc+0x38>
 800142c:	b142      	cbz	r2, 8001440 <core_mem_realloc+0x38>
 800142e:	1d09      	adds	r1, r1, #4
 8001430:	4610      	mov	r0, r2
 8001432:	f011 f81d 	bl	8012470 <realloc>
 8001436:	b120      	cbz	r0, 8001442 <core_mem_realloc+0x3a>
 8001438:	6000      	str	r0, [r0, #0]
 800143a:	b001      	add	sp, #4
 800143c:	1d00      	adds	r0, r0, #4
 800143e:	bd00      	pop	{pc}
 8001440:	2000      	movs	r0, #0
 8001442:	b001      	add	sp, #4
 8001444:	bd00      	pop	{pc}
	...

08001448 <ai_check_custom_types>:
 8001448:	b500      	push	{lr}
 800144a:	b081      	sub	sp, #4
 800144c:	b160      	cbz	r0, 8001468 <ai_check_custom_types+0x20>
 800144e:	7801      	ldrb	r1, [r0, #0]
 8001450:	2903      	cmp	r1, #3
 8001452:	d109      	bne.n	8001468 <ai_check_custom_types+0x20>
 8001454:	2204      	movs	r2, #4
 8001456:	f20f 6180 	addw	r1, pc, #1664	@ 0x680
 800145a:	f013 fa23 	bl	80148a4 <memcmp>
 800145e:	1e40      	subs	r0, r0, #1
 8001460:	4180      	sbcs	r0, r0
 8001462:	0fc0      	lsrs	r0, r0, #31
 8001464:	b001      	add	sp, #4
 8001466:	bd00      	pop	{pc}
 8001468:	2000      	movs	r0, #0
 800146a:	b001      	add	sp, #4
 800146c:	bd00      	pop	{pc}

0800146e <ai_layer_type_name>:
 800146e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001472:	1a81      	subs	r1, r0, r2
 8001474:	2904      	cmp	r1, #4
 8001476:	bf84      	itt	hi
 8001478:	1f89      	subhi	r1, r1, #6
 800147a:	2919      	cmphi	r1, #25
 800147c:	d90d      	bls.n	800149a <ai_layer_type_name+0x2c>
 800147e:	391b      	subs	r1, #27
 8001480:	290c      	cmp	r1, #12
 8001482:	bf84      	itt	hi
 8001484:	3911      	subhi	r1, #17
 8001486:	2902      	cmphi	r1, #2
 8001488:	d907      	bls.n	800149a <ai_layer_type_name+0x2c>
 800148a:	390d      	subs	r1, #13
 800148c:	d005      	beq.n	800149a <ai_layer_type_name+0x2c>
 800148e:	1ec9      	subs	r1, r1, #3
 8001490:	d003      	beq.n	800149a <ai_layer_type_name+0x2c>
 8001492:	393e      	subs	r1, #62	@ 0x3e
 8001494:	2903      	cmp	r1, #3
 8001496:	f200 8137 	bhi.w	8001708 <ai_layer_type_name+0x29a>
 800149a:	1a80      	subs	r0, r0, r2
 800149c:	f000 809e 	beq.w	80015dc <ai_layer_type_name+0x16e>
 80014a0:	1e40      	subs	r0, r0, #1
 80014a2:	f000 809e 	beq.w	80015e2 <ai_layer_type_name+0x174>
 80014a6:	1e40      	subs	r0, r0, #1
 80014a8:	f000 809d 	beq.w	80015e6 <ai_layer_type_name+0x178>
 80014ac:	1e40      	subs	r0, r0, #1
 80014ae:	f000 809c 	beq.w	80015ea <ai_layer_type_name+0x17c>
 80014b2:	1e40      	subs	r0, r0, #1
 80014b4:	f000 809c 	beq.w	80015f0 <ai_layer_type_name+0x182>
 80014b8:	1e80      	subs	r0, r0, #2
 80014ba:	f000 809c 	beq.w	80015f6 <ai_layer_type_name+0x188>
 80014be:	1e40      	subs	r0, r0, #1
 80014c0:	f000 809b 	beq.w	80015fa <ai_layer_type_name+0x18c>
 80014c4:	1e40      	subs	r0, r0, #1
 80014c6:	f000 809a 	beq.w	80015fe <ai_layer_type_name+0x190>
 80014ca:	1e40      	subs	r0, r0, #1
 80014cc:	f000 809a 	beq.w	8001604 <ai_layer_type_name+0x196>
 80014d0:	1e40      	subs	r0, r0, #1
 80014d2:	f000 809a 	beq.w	800160a <ai_layer_type_name+0x19c>
 80014d6:	1e40      	subs	r0, r0, #1
 80014d8:	f000 809a 	beq.w	8001610 <ai_layer_type_name+0x1a2>
 80014dc:	1e40      	subs	r0, r0, #1
 80014de:	f000 809a 	beq.w	8001616 <ai_layer_type_name+0x1a8>
 80014e2:	1e40      	subs	r0, r0, #1
 80014e4:	f000 8099 	beq.w	800161a <ai_layer_type_name+0x1ac>
 80014e8:	1e40      	subs	r0, r0, #1
 80014ea:	f000 8099 	beq.w	8001620 <ai_layer_type_name+0x1b2>
 80014ee:	1e40      	subs	r0, r0, #1
 80014f0:	f000 8099 	beq.w	8001626 <ai_layer_type_name+0x1b8>
 80014f4:	1e40      	subs	r0, r0, #1
 80014f6:	f000 8099 	beq.w	800162c <ai_layer_type_name+0x1be>
 80014fa:	1e40      	subs	r0, r0, #1
 80014fc:	f000 8099 	beq.w	8001632 <ai_layer_type_name+0x1c4>
 8001500:	1e40      	subs	r0, r0, #1
 8001502:	f000 8099 	beq.w	8001638 <ai_layer_type_name+0x1ca>
 8001506:	1e40      	subs	r0, r0, #1
 8001508:	f000 8099 	beq.w	800163e <ai_layer_type_name+0x1d0>
 800150c:	1e40      	subs	r0, r0, #1
 800150e:	f000 8099 	beq.w	8001644 <ai_layer_type_name+0x1d6>
 8001512:	1e40      	subs	r0, r0, #1
 8001514:	f000 8099 	beq.w	800164a <ai_layer_type_name+0x1dc>
 8001518:	1e40      	subs	r0, r0, #1
 800151a:	f000 8099 	beq.w	8001650 <ai_layer_type_name+0x1e2>
 800151e:	1e40      	subs	r0, r0, #1
 8001520:	f000 8098 	beq.w	8001654 <ai_layer_type_name+0x1e6>
 8001524:	1e40      	subs	r0, r0, #1
 8001526:	f000 8098 	beq.w	800165a <ai_layer_type_name+0x1ec>
 800152a:	1e40      	subs	r0, r0, #1
 800152c:	f000 8098 	beq.w	8001660 <ai_layer_type_name+0x1f2>
 8001530:	1e40      	subs	r0, r0, #1
 8001532:	f000 8098 	beq.w	8001666 <ai_layer_type_name+0x1f8>
 8001536:	1e40      	subs	r0, r0, #1
 8001538:	f000 8097 	beq.w	800166a <ai_layer_type_name+0x1fc>
 800153c:	1e40      	subs	r0, r0, #1
 800153e:	f000 8097 	beq.w	8001670 <ai_layer_type_name+0x202>
 8001542:	1e40      	subs	r0, r0, #1
 8001544:	f000 8097 	beq.w	8001676 <ai_layer_type_name+0x208>
 8001548:	1e40      	subs	r0, r0, #1
 800154a:	f000 8097 	beq.w	800167c <ai_layer_type_name+0x20e>
 800154e:	1e40      	subs	r0, r0, #1
 8001550:	f000 8097 	beq.w	8001682 <ai_layer_type_name+0x214>
 8001554:	1e80      	subs	r0, r0, #2
 8001556:	f000 8097 	beq.w	8001688 <ai_layer_type_name+0x21a>
 800155a:	1e40      	subs	r0, r0, #1
 800155c:	f000 8097 	beq.w	800168e <ai_layer_type_name+0x220>
 8001560:	1e40      	subs	r0, r0, #1
 8001562:	f000 8097 	beq.w	8001694 <ai_layer_type_name+0x226>
 8001566:	1e40      	subs	r0, r0, #1
 8001568:	f000 8097 	beq.w	800169a <ai_layer_type_name+0x22c>
 800156c:	1e40      	subs	r0, r0, #1
 800156e:	f000 8097 	beq.w	80016a0 <ai_layer_type_name+0x232>
 8001572:	1e40      	subs	r0, r0, #1
 8001574:	f000 8096 	beq.w	80016a4 <ai_layer_type_name+0x236>
 8001578:	1e40      	subs	r0, r0, #1
 800157a:	f000 8096 	beq.w	80016aa <ai_layer_type_name+0x23c>
 800157e:	1e40      	subs	r0, r0, #1
 8001580:	f000 80ab 	beq.w	80016da <ai_layer_type_name+0x26c>
 8001584:	1e40      	subs	r0, r0, #1
 8001586:	f000 80ab 	beq.w	80016e0 <ai_layer_type_name+0x272>
 800158a:	1e40      	subs	r0, r0, #1
 800158c:	f000 8090 	beq.w	80016b0 <ai_layer_type_name+0x242>
 8001590:	1e40      	subs	r0, r0, #1
 8001592:	f000 8090 	beq.w	80016b6 <ai_layer_type_name+0x248>
 8001596:	1e40      	subs	r0, r0, #1
 8001598:	f000 80a5 	beq.w	80016e6 <ai_layer_type_name+0x278>
 800159c:	1e40      	subs	r0, r0, #1
 800159e:	f000 808d 	beq.w	80016bc <ai_layer_type_name+0x24e>
 80015a2:	1f40      	subs	r0, r0, #5
 80015a4:	f000 80a2 	beq.w	80016ec <ai_layer_type_name+0x27e>
 80015a8:	1e40      	subs	r0, r0, #1
 80015aa:	f000 808a 	beq.w	80016c2 <ai_layer_type_name+0x254>
 80015ae:	1e40      	subs	r0, r0, #1
 80015b0:	f000 808a 	beq.w	80016c8 <ai_layer_type_name+0x25a>
 80015b4:	380b      	subs	r0, #11
 80015b6:	f000 808a 	beq.w	80016ce <ai_layer_type_name+0x260>
 80015ba:	1ec0      	subs	r0, r0, #3
 80015bc:	f000 808a 	beq.w	80016d4 <ai_layer_type_name+0x266>
 80015c0:	383e      	subs	r0, #62	@ 0x3e
 80015c2:	f000 8096 	beq.w	80016f2 <ai_layer_type_name+0x284>
 80015c6:	1e40      	subs	r0, r0, #1
 80015c8:	f000 8096 	beq.w	80016f8 <ai_layer_type_name+0x28a>
 80015cc:	1e40      	subs	r0, r0, #1
 80015ce:	f000 8096 	beq.w	80016fe <ai_layer_type_name+0x290>
 80015d2:	1e40      	subs	r0, r0, #1
 80015d4:	f000 8096 	beq.w	8001704 <ai_layer_type_name+0x296>
 80015d8:	a0b3      	add	r0, pc, #716	@ (adr r0, 80018a8 <.text_10>)
 80015da:	4770      	bx	lr
 80015dc:	f20f 20f4 	addw	r0, pc, #756	@ 0x2f4
 80015e0:	4770      	bx	lr
 80015e2:	a0b2      	add	r0, pc, #712	@ (adr r0, 80018ac <.text_11>)
 80015e4:	4770      	bx	lr
 80015e6:	a0b2      	add	r0, pc, #712	@ (adr r0, 80018b0 <.text_12>)
 80015e8:	4770      	bx	lr
 80015ea:	f20f 20f0 	addw	r0, pc, #752	@ 0x2f0
 80015ee:	4770      	bx	lr
 80015f0:	f20f 20f0 	addw	r0, pc, #752	@ 0x2f0
 80015f4:	4770      	bx	lr
 80015f6:	a0af      	add	r0, pc, #700	@ (adr r0, 80018b4 <.text_13>)
 80015f8:	4770      	bx	lr
 80015fa:	a0af      	add	r0, pc, #700	@ (adr r0, 80018b8 <.text_14>)
 80015fc:	4770      	bx	lr
 80015fe:	f20f 20ec 	addw	r0, pc, #748	@ 0x2ec
 8001602:	4770      	bx	lr
 8001604:	f20f 20ec 	addw	r0, pc, #748	@ 0x2ec
 8001608:	4770      	bx	lr
 800160a:	f20f 20fc 	addw	r0, pc, #764	@ 0x2fc
 800160e:	4770      	bx	lr
 8001610:	f20f 3000 	addw	r0, pc, #768	@ 0x300
 8001614:	4770      	bx	lr
 8001616:	a0a9      	add	r0, pc, #676	@ (adr r0, 80018bc <.text_15>)
 8001618:	4770      	bx	lr
 800161a:	f20f 3000 	addw	r0, pc, #768	@ 0x300
 800161e:	4770      	bx	lr
 8001620:	f20f 3000 	addw	r0, pc, #768	@ 0x300
 8001624:	4770      	bx	lr
 8001626:	f20f 3008 	addw	r0, pc, #776	@ 0x308
 800162a:	4770      	bx	lr
 800162c:	f20f 3014 	addw	r0, pc, #788	@ 0x314
 8001630:	4770      	bx	lr
 8001632:	f20f 3018 	addw	r0, pc, #792	@ 0x318
 8001636:	4770      	bx	lr
 8001638:	f20f 3018 	addw	r0, pc, #792	@ 0x318
 800163c:	4770      	bx	lr
 800163e:	f20f 3020 	addw	r0, pc, #800	@ 0x320
 8001642:	4770      	bx	lr
 8001644:	f20f 3020 	addw	r0, pc, #800	@ 0x320
 8001648:	4770      	bx	lr
 800164a:	f20f 302c 	addw	r0, pc, #812	@ 0x32c
 800164e:	4770      	bx	lr
 8001650:	a09b      	add	r0, pc, #620	@ (adr r0, 80018c0 <.text_16>)
 8001652:	4770      	bx	lr
 8001654:	f20f 3038 	addw	r0, pc, #824	@ 0x338
 8001658:	4770      	bx	lr
 800165a:	f20f 303c 	addw	r0, pc, #828	@ 0x33c
 800165e:	4770      	bx	lr
 8001660:	f20f 303c 	addw	r0, pc, #828	@ 0x33c
 8001664:	4770      	bx	lr
 8001666:	a097      	add	r0, pc, #604	@ (adr r0, 80018c4 <.text_17>)
 8001668:	4770      	bx	lr
 800166a:	f20f 303c 	addw	r0, pc, #828	@ 0x33c
 800166e:	4770      	bx	lr
 8001670:	f20f 303c 	addw	r0, pc, #828	@ 0x33c
 8001674:	4770      	bx	lr
 8001676:	f20f 3040 	addw	r0, pc, #832	@ 0x340
 800167a:	4770      	bx	lr
 800167c:	f20f 3040 	addw	r0, pc, #832	@ 0x340
 8001680:	4770      	bx	lr
 8001682:	f20f 3044 	addw	r0, pc, #836	@ 0x344
 8001686:	4770      	bx	lr
 8001688:	f20f 3048 	addw	r0, pc, #840	@ 0x348
 800168c:	4770      	bx	lr
 800168e:	f20f 304c 	addw	r0, pc, #844	@ 0x34c
 8001692:	4770      	bx	lr
 8001694:	f20f 304c 	addw	r0, pc, #844	@ 0x34c
 8001698:	4770      	bx	lr
 800169a:	f20f 3050 	addw	r0, pc, #848	@ 0x350
 800169e:	4770      	bx	lr
 80016a0:	a089      	add	r0, pc, #548	@ (adr r0, 80018c8 <.text_18>)
 80016a2:	4770      	bx	lr
 80016a4:	f20f 305c 	addw	r0, pc, #860	@ 0x35c
 80016a8:	4770      	bx	lr
 80016aa:	f20f 3060 	addw	r0, pc, #864	@ 0x360
 80016ae:	4770      	bx	lr
 80016b0:	f20f 3060 	addw	r0, pc, #864	@ 0x360
 80016b4:	4770      	bx	lr
 80016b6:	f20f 3070 	addw	r0, pc, #880	@ 0x370
 80016ba:	4770      	bx	lr
 80016bc:	f20f 3084 	addw	r0, pc, #900	@ 0x384
 80016c0:	4770      	bx	lr
 80016c2:	f20f 3088 	addw	r0, pc, #904	@ 0x388
 80016c6:	4770      	bx	lr
 80016c8:	f20f 3094 	addw	r0, pc, #916	@ 0x394
 80016cc:	4770      	bx	lr
 80016ce:	f20f 309c 	addw	r0, pc, #924	@ 0x39c
 80016d2:	4770      	bx	lr
 80016d4:	f20f 30a0 	addw	r0, pc, #928	@ 0x3a0
 80016d8:	4770      	bx	lr
 80016da:	f20f 30b4 	addw	r0, pc, #948	@ 0x3b4
 80016de:	4770      	bx	lr
 80016e0:	f20f 30b8 	addw	r0, pc, #952	@ 0x3b8
 80016e4:	4770      	bx	lr
 80016e6:	f20f 30c0 	addw	r0, pc, #960	@ 0x3c0
 80016ea:	4770      	bx	lr
 80016ec:	f20f 30c4 	addw	r0, pc, #964	@ 0x3c4
 80016f0:	4770      	bx	lr
 80016f2:	f20f 30c8 	addw	r0, pc, #968	@ 0x3c8
 80016f6:	4770      	bx	lr
 80016f8:	f20f 30cc 	addw	r0, pc, #972	@ 0x3cc
 80016fc:	4770      	bx	lr
 80016fe:	f20f 30d0 	addw	r0, pc, #976	@ 0x3d0
 8001702:	4770      	bx	lr
 8001704:	a071      	add	r0, pc, #452	@ (adr r0, 80018cc <.text_19>)
 8001706:	4770      	bx	lr
 8001708:	a067      	add	r0, pc, #412	@ (adr r0, 80018a8 <.text_10>)
 800170a:	4770      	bx	lr

0800170c <ai_layer_type_is_valid>:
 800170c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001710:	1a40      	subs	r0, r0, r1
 8001712:	2804      	cmp	r0, #4
 8001714:	bf84      	itt	hi
 8001716:	1f80      	subhi	r0, r0, #6
 8001718:	2819      	cmphi	r0, #25
 800171a:	d90c      	bls.n	8001736 <ai_layer_type_is_valid+0x2a>
 800171c:	381b      	subs	r0, #27
 800171e:	280c      	cmp	r0, #12
 8001720:	bf84      	itt	hi
 8001722:	3811      	subhi	r0, #17
 8001724:	2802      	cmphi	r0, #2
 8001726:	d906      	bls.n	8001736 <ai_layer_type_is_valid+0x2a>
 8001728:	380d      	subs	r0, #13
 800172a:	d004      	beq.n	8001736 <ai_layer_type_is_valid+0x2a>
 800172c:	1ec0      	subs	r0, r0, #3
 800172e:	d002      	beq.n	8001736 <ai_layer_type_is_valid+0x2a>
 8001730:	383e      	subs	r0, #62	@ 0x3e
 8001732:	2803      	cmp	r0, #3
 8001734:	d801      	bhi.n	800173a <ai_layer_type_is_valid+0x2e>
 8001736:	2001      	movs	r0, #1
 8001738:	4770      	bx	lr
 800173a:	2000      	movs	r0, #0
 800173c:	4770      	bx	lr

0800173e <ai_layers_init_all>:
 800173e:	4603      	mov	r3, r0
 8001740:	2000      	movs	r0, #0
 8001742:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001744:	b142      	cbz	r2, 8001758 <ai_layers_init_all+0x1a>
 8001746:	e000      	b.n	800174a <ai_layers_init_all+0xc>
 8001748:	460a      	mov	r2, r1
 800174a:	6911      	ldr	r1, [r2, #16]
 800174c:	60d3      	str	r3, [r2, #12]
 800174e:	1c40      	adds	r0, r0, #1
 8001750:	428a      	cmp	r2, r1
 8001752:	bf18      	it	ne
 8001754:	2900      	cmpne	r1, #0
 8001756:	d1f7      	bne.n	8001748 <ai_layers_init_all+0xa>
 8001758:	4770      	bx	lr

0800175a <ai_layers_post_init_all>:
 800175a:	b530      	push	{r4, r5, lr}
 800175c:	b081      	sub	sp, #4
 800175e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8001760:	2500      	movs	r5, #0
 8001762:	b174      	cbz	r4, 8001782 <ai_layers_post_init_all+0x28>
 8001764:	e000      	b.n	8001768 <ai_layers_post_init_all+0xe>
 8001766:	4604      	mov	r4, r0
 8001768:	7920      	ldrb	r0, [r4, #4]
 800176a:	07c1      	lsls	r1, r0, #31
 800176c:	d504      	bpl.n	8001778 <ai_layers_post_init_all+0x1e>
 800176e:	6a21      	ldr	r1, [r4, #32]
 8001770:	b111      	cbz	r1, 8001778 <ai_layers_post_init_all+0x1e>
 8001772:	4620      	mov	r0, r4
 8001774:	4788      	blx	r1
 8001776:	1c6d      	adds	r5, r5, #1
 8001778:	6920      	ldr	r0, [r4, #16]
 800177a:	4284      	cmp	r4, r0
 800177c:	bf18      	it	ne
 800177e:	2800      	cmpne	r0, #0
 8001780:	d1f1      	bne.n	8001766 <ai_layers_post_init_all+0xc>
 8001782:	4628      	mov	r0, r5
 8001784:	b001      	add	sp, #4
 8001786:	bd30      	pop	{r4, r5, pc}

08001788 <ai_layers_forward_all>:
 8001788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800178c:	4604      	mov	r4, r0
 800178e:	2500      	movs	r5, #0
 8001790:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8001792:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001794:	63e1      	str	r1, [r4, #60]	@ 0x3c
 8001796:	0030      	movs	r0, r6
 8001798:	d01f      	beq.n	80017da <ai_layers_forward_all+0x52>
 800179a:	b1d9      	cbz	r1, 80017d4 <ai_layers_forward_all+0x4c>
 800179c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800179e:	2001      	movs	r0, #1
 80017a0:	47b0      	blx	r6
 80017a2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80017a4:	b1b0      	cbz	r0, 80017d4 <ai_layers_forward_all+0x4c>
 80017a6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80017a8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80017aa:	2002      	movs	r0, #2
 80017ac:	47b0      	blx	r6
 80017ae:	f8d4 803c 	ldr.w	r8, [r4, #60]	@ 0x3c
 80017b2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80017b6:	4640      	mov	r0, r8
 80017b8:	4788      	blx	r1
 80017ba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80017be:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80017c0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80017c2:	4547      	cmp	r7, r8
 80017c4:	bf08      	it	eq
 80017c6:	2700      	moveq	r7, #0
 80017c8:	2003      	movs	r0, #3
 80017ca:	47b0      	blx	r6
 80017cc:	1c6d      	adds	r5, r5, #1
 80017ce:	2f00      	cmp	r7, #0
 80017d0:	63e7      	str	r7, [r4, #60]	@ 0x3c
 80017d2:	d1e8      	bne.n	80017a6 <ai_layers_forward_all+0x1e>
 80017d4:	4628      	mov	r0, r5
 80017d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017da:	2900      	cmp	r1, #0
 80017dc:	d0fa      	beq.n	80017d4 <ai_layers_forward_all+0x4c>
 80017de:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 80017e0:	6971      	ldr	r1, [r6, #20]
 80017e2:	4630      	mov	r0, r6
 80017e4:	4788      	blx	r1
 80017e6:	6930      	ldr	r0, [r6, #16]
 80017e8:	42b0      	cmp	r0, r6
 80017ea:	bf08      	it	eq
 80017ec:	2000      	moveq	r0, #0
 80017ee:	1c6d      	adds	r5, r5, #1
 80017f0:	2800      	cmp	r0, #0
 80017f2:	63e0      	str	r0, [r4, #60]	@ 0x3c
 80017f4:	d1f3      	bne.n	80017de <ai_layers_forward_all+0x56>
 80017f6:	4628      	mov	r0, r5
 80017f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080017fc <ai_layers_destroy_all>:
 80017fc:	b530      	push	{r4, r5, lr}
 80017fe:	b081      	sub	sp, #4
 8001800:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8001802:	2500      	movs	r5, #0
 8001804:	b174      	cbz	r4, 8001824 <ai_layers_destroy_all+0x28>
 8001806:	e000      	b.n	800180a <ai_layers_destroy_all+0xe>
 8001808:	4604      	mov	r4, r0
 800180a:	7920      	ldrb	r0, [r4, #4]
 800180c:	0741      	lsls	r1, r0, #29
 800180e:	d504      	bpl.n	800181a <ai_layers_destroy_all+0x1e>
 8001810:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001812:	b111      	cbz	r1, 800181a <ai_layers_destroy_all+0x1e>
 8001814:	4620      	mov	r0, r4
 8001816:	4788      	blx	r1
 8001818:	1c6d      	adds	r5, r5, #1
 800181a:	6920      	ldr	r0, [r4, #16]
 800181c:	4284      	cmp	r4, r0
 800181e:	bf18      	it	ne
 8001820:	2800      	cmpne	r0, #0
 8001822:	d1f1      	bne.n	8001808 <ai_layers_destroy_all+0xc>
 8001824:	4628      	mov	r0, r5
 8001826:	b001      	add	sp, #4
 8001828:	bd30      	pop	{r4, r5, pc}

0800182a <_layer_get_scratch_size>:
 800182a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182c:	b087      	sub	sp, #28
 800182e:	4604      	mov	r4, r0
 8001830:	4615      	mov	r5, r2
 8001832:	461e      	mov	r6, r3
 8001834:	2000      	movs	r0, #0
 8001836:	f240 1c03 	movw	ip, #259	@ 0x103
 800183a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800183c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800183e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8001840:	ebb4 040c 	subs.w	r4, r4, ip
 8001844:	d007      	beq.n	8001856 <_layer_get_scratch_size+0x2c>
 8001846:	1e64      	subs	r4, r4, #1
 8001848:	d01e      	beq.n	8001888 <_layer_get_scratch_size+0x5e>
 800184a:	1f64      	subs	r4, r4, #5
 800184c:	d003      	beq.n	8001856 <_layer_get_scratch_size+0x2c>
 800184e:	3c1f      	subs	r4, #31
 8001850:	d022      	beq.n	8001898 <_layer_get_scratch_size+0x6e>
 8001852:	b007      	add	sp, #28
 8001854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001856:	481e      	ldr	r0, [pc, #120]	@ (80018d0 <.text_20>)
 8001858:	4281      	cmp	r1, r0
 800185a:	d11d      	bne.n	8001898 <_layer_get_scratch_size+0x6e>
 800185c:	f89d 104c 	ldrb.w	r1, [sp, #76]	@ 0x4c
 8001860:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8001864:	9105      	str	r1, [sp, #20]
 8001866:	9003      	str	r0, [sp, #12]
 8001868:	9704      	str	r7, [sp, #16]
 800186a:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800186e:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 8001872:	f89d 403c 	ldrb.w	r4, [sp, #60]	@ 0x3c
 8001876:	9102      	str	r1, [sp, #8]
 8001878:	9000      	str	r0, [sp, #0]
 800187a:	9401      	str	r4, [sp, #4]
 800187c:	4631      	mov	r1, r6
 800187e:	4628      	mov	r0, r5
 8001880:	f004 f9d0 	bl	8005c24 <get_conv2d_scratch_size>
 8001884:	b007      	add	sp, #28
 8001886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001888:	0050      	lsls	r0, r2, #1
 800188a:	b157      	cbz	r7, 80018a2 <_layer_get_scratch_size+0x78>
 800188c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001890:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8001894:	b007      	add	sp, #28
 8001896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001898:	4375      	muls	r5, r6
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fb02 3505 	mla	r5, r2, r5, r3
 80018a0:	00a8      	lsls	r0, r5, #2
 80018a2:	b007      	add	sp, #28
 80018a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080018a8 <.text_10>:
 80018a8:	00000000 	.word	0x00000000

080018ac <.text_11>:
 80018ac:	00444441 	.word	0x00444441

080018b0 <.text_12>:
 80018b0:	00004e42 	.word	0x00004e42

080018b4 <.text_13>:
 80018b4:	004e524c 	.word	0x004e524c

080018b8 <.text_14>:
 80018b8:	00004c4e 	.word	0x00004c4e

080018bc <.text_15>:
 80018bc:	00004d53 	.word	0x00004d53

080018c0 <.text_16>:
 80018c0:	00444150 	.word	0x00444150

080018c4 <.text_17>:
 80018c4:	004e4e52 	.word	0x004e4e52

080018c8 <.text_18>:
 80018c8:	00435653 	.word	0x00435653

080018cc <.text_19>:
 80018cc:	00555247 	.word	0x00555247

080018d0 <.text_20>:
 80018d0:	00040440 	.word	0x00040440

080018d4 <.text_21>:
 80018d4:	45534142 	.word	0x45534142
 80018d8:	00          	.byte	0x00
 80018d9:	00          	.byte	0x00
	...

080018dc <.text_22>:
 80018dc:	564e4f43 	.word	0x564e4f43
 80018e0:	00004432 	.word	0x00004432

080018e4 <.text_23>:
 80018e4:	534e4544 	.word	0x534e4544
 80018e8:	0045      	.short	0x0045
	...

080018ec <.text_24>:
 80018ec:	4d524f4e 	.word	0x4d524f4e
 80018f0:	00          	.byte	0x00
 80018f1:	00          	.byte	0x00
	...

080018f4 <.text_25>:
 80018f4:	4954504f 	.word	0x4954504f
 80018f8:	455a494d 	.word	0x455a494d
 80018fc:	4f435f44 	.word	0x4f435f44
 8001900:	4432564e 	.word	0x4432564e
 8001904:	00          	.byte	0x00
 8001905:	00          	.byte	0x00
	...

08001908 <.text_26>:
 8001908:	4e415254 	.word	0x4e415254
 800190c:	534f5053 	.word	0x534f5053
 8001910:	0045      	.short	0x0045
	...

08001914 <.text_27>:
 8001914:	4c4f4f50 	.word	0x4c4f4f50
 8001918:	00          	.byte	0x00
 8001919:	00          	.byte	0x00
	...

0800191c <.text_28>:
 800191c:	494c5053 	.word	0x494c5053
 8001920:	0054      	.short	0x0054
	...

08001924 <.text_29>:
 8001924:	454d4954 	.word	0x454d4954
 8001928:	4c45445f 	.word	0x4c45445f
 800192c:	00005941 	.word	0x00005941

08001930 <.text_30>:
 8001930:	454d4954 	.word	0x454d4954
 8001934:	5349445f 	.word	0x5349445f
 8001938:	42495254 	.word	0x42495254
 800193c:	44455455 	.word	0x44455455
 8001940:	00          	.byte	0x00
 8001941:	00          	.byte	0x00
	...

08001944 <.text_31>:
 8001944:	434e4f43 	.word	0x434e4f43
 8001948:	00005441 	.word	0x00005441

0800194c <.text_32>:
 800194c:	4d4d4547 	.word	0x4d4d4547
 8001950:	00          	.byte	0x00
 8001951:	00          	.byte	0x00
	...

08001954 <.text_33>:
 8001954:	41535055 	.word	0x41535055
 8001958:	454c504d 	.word	0x454c504d
 800195c:	00          	.byte	0x00
 800195d:	00          	.byte	0x00
	...

08001960 <.text_34>:
 8001960:	57544c45 	.word	0x57544c45
 8001964:	00455349 	.word	0x00455349

08001968 <.text_35>:
 8001968:	57544c45 	.word	0x57544c45
 800196c:	5f455349 	.word	0x5f455349
 8001970:	45544e49 	.word	0x45544e49
 8001974:	00524547 	.word	0x00524547

08001978 <.text_36>:
 8001978:	54534e49 	.word	0x54534e49
 800197c:	45434e41 	.word	0x45434e41
 8001980:	4d524f4e 	.word	0x4d524f4e
 8001984:	5a494c41 	.word	0x5a494c41
 8001988:	4f495441 	.word	0x4f495441
 800198c:	004e      	.short	0x004e
	...

08001990 <.text_37>:
 8001990:	43494c53 	.word	0x43494c53
 8001994:	0045      	.short	0x0045
	...

08001998 <.text_38>:
 8001998:	454c4954 	.word	0x454c4954
 800199c:	00          	.byte	0x00
 800199d:	00          	.byte	0x00
	...

080019a0 <.text_39>:
 80019a0:	55444552 	.word	0x55444552
 80019a4:	00004543 	.word	0x00004543

080019a8 <.text_40>:
 80019a8:	49534552 	.word	0x49534552
 80019ac:	0000455a 	.word	0x0000455a

080019b0 <.text_41>:
 80019b0:	48544147 	.word	0x48544147
 80019b4:	00005245 	.word	0x00005245

080019b8 <.text_42>:
 80019b8:	4b434150 	.word	0x4b434150
 80019bc:	00          	.byte	0x00
 80019bd:	00          	.byte	0x00
	...

080019c0 <.text_43>:
 80019c0:	41504e55 	.word	0x41504e55
 80019c4:	00004b43 	.word	0x00004b43

080019c8 <.text_44>:
 80019c8:	4d475241 	.word	0x4d475241
 80019cc:	414d4e49 	.word	0x414d4e49
 80019d0:	0058      	.short	0x0058
	...

080019d4 <.text_45>:
 80019d4:	54534143 	.word	0x54534143
 80019d8:	00          	.byte	0x00
 80019d9:	00          	.byte	0x00
	...

080019dc <.text_46>:
 80019dc:	524f4649 	.word	0x524f4649
 80019e0:	00545345 	.word	0x00545345

080019e4 <.text_47>:
 80019e4:	524d5653 	.word	0x524d5653
 80019e8:	00004745 	.word	0x00004745

080019ec <.text_48>:
 80019ec:	41525241 	.word	0x41525241
 80019f0:	41454659 	.word	0x41454659
 80019f4:	45525554 	.word	0x45525554
 80019f8:	52545845 	.word	0x52545845
 80019fc:	4f544341 	.word	0x4f544341
 8001a00:	0052      	.short	0x0052
	...

08001a04 <.text_49>:
 8001a04:	4d50495a 	.word	0x4d50495a
 8001a08:	00005041 	.word	0x00005041

08001a0c <.text_50>:
 8001a0c:	52454857 	.word	0x52454857
 8001a10:	0045      	.short	0x0045
	...

08001a14 <.text_51>:
 8001a14:	454e494c 	.word	0x454e494c
 8001a18:	4c435241 	.word	0x4c435241
 8001a1c:	49535341 	.word	0x49535341
 8001a20:	52454946 	.word	0x52454946
 8001a24:	00          	.byte	0x00
 8001a25:	00          	.byte	0x00
	...

08001a28 <.text_52>:
 8001a28:	45455254 	.word	0x45455254
 8001a2c:	534e455f 	.word	0x534e455f
 8001a30:	4c424d45 	.word	0x4c424d45
 8001a34:	4c435f45 	.word	0x4c435f45
 8001a38:	49535341 	.word	0x49535341
 8001a3c:	52454946 	.word	0x52454946
 8001a40:	00          	.byte	0x00
 8001a41:	00          	.byte	0x00
	...

08001a44 <.text_53>:
 8001a44:	4b504f54 	.word	0x4b504f54
 8001a48:	00          	.byte	0x00
 8001a49:	00          	.byte	0x00
	...

08001a4c <.text_54>:
 8001a4c:	55444552 	.word	0x55444552
 8001a50:	4c5f4543 	.word	0x4c5f4543
 8001a54:	535f474f 	.word	0x535f474f
 8001a58:	455f4d55 	.word	0x455f4d55
 8001a5c:	00005058 	.word	0x00005058

08001a60 <.text_55>:
 8001a60:	55444552 	.word	0x55444552
 8001a64:	4c5f4543 	.word	0x4c5f4543
 8001a68:	0031      	.short	0x0031
	...

08001a6c <.text_56>:
 8001a6c:	4554494c 	.word	0x4554494c
 8001a70:	4152475f 	.word	0x4152475f
 8001a74:	00004850 	.word	0x00004850

08001a78 <.text_57>:
 8001a78:	45455254 	.word	0x45455254
 8001a7c:	534e455f 	.word	0x534e455f
 8001a80:	4c424d45 	.word	0x4c424d45
 8001a84:	45525f45 	.word	0x45525f45
 8001a88:	53455247 	.word	0x53455247
 8001a8c:	00524f53 	.word	0x00524f53

08001a90 <.text_58>:
 8001a90:	564e4f43 	.word	0x564e4f43
 8001a94:	445f4432 	.word	0x445f4432
 8001a98:	004e4e51 	.word	0x004e4e51

08001a9c <.text_59>:
 8001a9c:	4c4f4f50 	.word	0x4c4f4f50
 8001aa0:	4e51445f 	.word	0x4e51445f
 8001aa4:	004e      	.short	0x004e
	...

08001aa8 <.text_60>:
 8001aa8:	534e4544 	.word	0x534e4544
 8001aac:	51445f45 	.word	0x51445f45
 8001ab0:	00004e4e 	.word	0x00004e4e

08001ab4 <.text_61>:
 8001ab4:	45564552 	.word	0x45564552
 8001ab8:	00455352 	.word	0x00455352

08001abc <.text_62>:
 8001abc:	54415453 	.word	0x54415453
 8001ac0:	4c554645 	.word	0x4c554645
 8001ac4:	00          	.byte	0x00
 8001ac5:	00          	.byte	0x00
	...

08001ac8 <.text_63>:
 8001ac8:	4d54534c 	.word	0x4d54534c
 8001acc:	00          	.byte	0x00
 8001acd:	00          	.byte	0x00
	...

08001ad0 <.text_64>:
 8001ad0:	54535543 	.word	0x54535543
 8001ad4:	00004d4f 	.word	0x00004d4f

08001ad8 <ai_check_custom_types::ref_signatures>:
 8001ad8:	84048403                                ....

08001adc <forward_conv2d_if32of32wf32>:
 8001adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	b09f      	sub	sp, #124	@ 0x7c
 8001ae4:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8001ae8:	f8bc 0000 	ldrh.w	r0, [ip]
 8001aec:	2800      	cmp	r0, #0
 8001aee:	bf1a      	itte	ne
 8001af0:	f8dc 2004 	ldrne.w	r2, [ip, #4]
 8001af4:	1d12      	addne	r2, r2, #4
 8001af6:	2204      	moveq	r2, #4
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	2a00      	cmp	r2, #0
 8001afc:	bf14      	ite	ne
 8001afe:	6814      	ldrne	r4, [r2, #0]
 8001b00:	2400      	moveq	r4, #0
 8001b02:	2802      	cmp	r0, #2
 8001b04:	bfa6      	itte	ge
 8001b06:	f8dc 2004 	ldrge.w	r2, [ip, #4]
 8001b0a:	3210      	addge	r2, #16
 8001b0c:	2204      	movlt	r2, #4
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	bf14      	ite	ne
 8001b14:	f8d2 e000 	ldrne.w	lr, [r2]
 8001b18:	f04f 0e00 	moveq.w	lr, #0
 8001b1c:	2802      	cmp	r0, #2
 8001b1e:	bfc6      	itte	gt
 8001b20:	f8dc 2004 	ldrgt.w	r2, [ip, #4]
 8001b24:	321c      	addgt	r2, #28
 8001b26:	2204      	movle	r2, #4
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	b102      	cbz	r2, 8001b2e <forward_conv2d_if32of32wf32+0x52>
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	2802      	cmp	r0, #2
 8001b30:	dd0b      	ble.n	8001b4a <forward_conv2d_if32of32wf32+0x6e>
 8001b32:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8001b36:	f115 0318 	adds.w	r3, r5, #24
 8001b3a:	d006      	beq.n	8001b4a <forward_conv2d_if32of32wf32+0x6e>
 8001b3c:	8b2b      	ldrh	r3, [r5, #24]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	db03      	blt.n	8001b4a <forward_conv2d_if32of32wf32+0x6e>
 8001b42:	69eb      	ldr	r3, [r5, #28]
 8001b44:	b10b      	cbz	r3, 8001b4a <forward_conv2d_if32of32wf32+0x6e>
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	e000      	b.n	8001b4c <forward_conv2d_if32of32wf32+0x70>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	68e7      	ldr	r7, [r4, #12]
 8001b4e:	687e      	ldr	r6, [r7, #4]
 8001b50:	9616      	str	r6, [sp, #88]	@ 0x58
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f8de 500c 	ldr.w	r5, [lr, #12]
 8001b58:	686e      	ldr	r6, [r5, #4]
 8001b5a:	961e      	str	r6, [sp, #120]	@ 0x78
 8001b5c:	68ee      	ldr	r6, [r5, #12]
 8001b5e:	961d      	str	r6, [sp, #116]	@ 0x74
 8001b60:	68ad      	ldr	r5, [r5, #8]
 8001b62:	951c      	str	r5, [sp, #112]	@ 0x70
 8001b64:	68fd      	ldr	r5, [r7, #12]
 8001b66:	951b      	str	r5, [sp, #108]	@ 0x6c
 8001b68:	68bf      	ldr	r7, [r7, #8]
 8001b6a:	971a      	str	r7, [sp, #104]	@ 0x68
 8001b6c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8001b6e:	f8ad 5054 	strh.w	r5, [sp, #84]	@ 0x54
 8001b72:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
 8001b74:	f8ad 7052 	strh.w	r7, [sp, #82]	@ 0x52
 8001b78:	6bce      	ldr	r6, [r1, #60]	@ 0x3c
 8001b7a:	f8d6 8000 	ldr.w	r8, [r6]
 8001b7e:	6877      	ldr	r7, [r6, #4]
 8001b80:	f8ad 7050 	strh.w	r7, [sp, #80]	@ 0x50
 8001b84:	6b0d      	ldr	r5, [r1, #48]	@ 0x30
 8001b86:	f8ad 504a 	strh.w	r5, [sp, #74]	@ 0x4a
 8001b8a:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8001b8c:	f8ad 5048 	strh.w	r5, [sp, #72]	@ 0x48
 8001b90:	68d7      	ldr	r7, [r2, #12]
 8001b92:	68bd      	ldr	r5, [r7, #8]
 8001b94:	9513      	str	r5, [sp, #76]	@ 0x4c
 8001b96:	687e      	ldr	r6, [r7, #4]
 8001b98:	69cf      	ldr	r7, [r1, #28]
 8001b9a:	9719      	str	r7, [sp, #100]	@ 0x64
 8001b9c:	f1a6 0901 	sub.w	r9, r6, #1
 8001ba0:	69a4      	ldr	r4, [r4, #24]
 8001ba2:	68a7      	ldr	r7, [r4, #8]
 8001ba4:	9718      	str	r7, [sp, #96]	@ 0x60
 8001ba6:	6994      	ldr	r4, [r2, #24]
 8001ba8:	68a7      	ldr	r7, [r4, #8]
 8001baa:	9702      	str	r7, [sp, #8]
 8001bac:	463c      	mov	r4, r7
 8001bae:	bf1a      	itte	ne
 8001bb0:	6999      	ldrne	r1, [r3, #24]
 8001bb2:	688f      	ldrne	r7, [r1, #8]
 8001bb4:	2700      	moveq	r7, #0
 8001bb6:	f8de 3018 	ldr.w	r3, [lr, #24]
 8001bba:	6899      	ldr	r1, [r3, #8]
 8001bbc:	9117      	str	r1, [sp, #92]	@ 0x5c
 8001bbe:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8001bc0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8001bc4:	1e69      	subs	r1, r5, #1
 8001bc6:	1e5b      	subs	r3, r3, #1
 8001bc8:	fb03 5501 	mla	r5, r3, r1, r5
 8001bcc:	f8bd 104a 	ldrh.w	r1, [sp, #74]	@ 0x4a
 8001bd0:	1e49      	subs	r1, r1, #1
 8001bd2:	2804      	cmp	r0, #4
 8001bd4:	bfa6      	itte	ge
 8001bd6:	f8dc 0004 	ldrge.w	r0, [ip, #4]
 8001bda:	f100 0328 	addge.w	r3, r0, #40	@ 0x28
 8001bde:	2304      	movlt	r3, #4
 8001be0:	fb01 6909 	mla	r9, r1, r9, r6
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8001bea:	2800      	cmp	r0, #0
 8001bec:	bf1c      	itt	ne
 8001bee:	6801      	ldrne	r1, [r0, #0]
 8001bf0:	2900      	cmpne	r1, #0
 8001bf2:	bf1a      	itte	ne
 8001bf4:	6989      	ldrne	r1, [r1, #24]
 8001bf6:	f8d1 a008 	ldrne.w	sl, [r1, #8]
 8001bfa:	f04f 0a00 	moveq.w	sl, #0
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	bf1c      	itt	ne
 8001c02:	6840      	ldrne	r0, [r0, #4]
 8001c04:	2800      	cmpne	r0, #0
 8001c06:	bf1a      	itte	ne
 8001c08:	6981      	ldrne	r1, [r0, #24]
 8001c0a:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 8001c0e:	f04f 0b00 	moveq.w	fp, #0
 8001c12:	f8dc 1000 	ldr.w	r1, [ip]
 8001c16:	2200      	movs	r2, #0
 8001c18:	11cb      	asrs	r3, r1, #7
 8001c1a:	ea4f 5e61 	mov.w	lr, r1, asr #21
 8001c1e:	1449      	asrs	r1, r1, #17
 8001c20:	f001 010f 	and.w	r1, r1, #15
 8001c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c28:	f00e 0e03 	and.w	lr, lr, #3
 8001c2c:	2904      	cmp	r1, #4
 8001c2e:	fa23 f30e 	lsr.w	r3, r3, lr
 8001c32:	bf14      	ite	ne
 8001c34:	2908      	cmpne	r1, #8
 8001c36:	f8dc 200c 	ldreq.w	r2, [ip, #12]
 8001c3a:	b142      	cbz	r2, 8001c4e <forward_conv2d_if32of32wf32+0x172>
 8001c3c:	6980      	ldr	r0, [r0, #24]
 8001c3e:	6841      	ldr	r1, [r0, #4]
 8001c40:	9101      	str	r1, [sp, #4]
 8001c42:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8001c44:	9000      	str	r0, [sp, #0]
 8001c46:	4658      	mov	r0, fp
 8001c48:	9902      	ldr	r1, [sp, #8]
 8001c4a:	f005 fbeb 	bl	8007424 <lite_decompress_ilutof32>
 8001c4e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8001c50:	f8bd 1048 	ldrh.w	r1, [sp, #72]	@ 0x48
 8001c54:	9011      	str	r0, [sp, #68]	@ 0x44
 8001c56:	9110      	str	r1, [sp, #64]	@ 0x40
 8001c58:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 8001c5c:	f1bb 0f00 	cmp.w	fp, #0
 8001c60:	f8bd 004a 	ldrh.w	r0, [sp, #74]	@ 0x4a
 8001c64:	900f      	str	r0, [sp, #60]	@ 0x3c
 8001c66:	950d      	str	r5, [sp, #52]	@ 0x34
 8001c68:	bf14      	ite	ne
 8001c6a:	465a      	movne	r2, fp
 8001c6c:	4622      	moveq	r2, r4
 8001c6e:	f8bd 0054 	ldrh.w	r0, [sp, #84]	@ 0x54
 8001c72:	f8bd 1052 	ldrh.w	r1, [sp, #82]	@ 0x52
 8001c76:	900b      	str	r0, [sp, #44]	@ 0x2c
 8001c78:	910c      	str	r1, [sp, #48]	@ 0x30
 8001c7a:	fa1f f088 	uxth.w	r0, r8
 8001c7e:	900a      	str	r0, [sp, #40]	@ 0x28
 8001c80:	9607      	str	r6, [sp, #28]
 8001c82:	f8bd 1050 	ldrh.w	r1, [sp, #80]	@ 0x50
 8001c86:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8001c88:	9109      	str	r1, [sp, #36]	@ 0x24
 8001c8a:	9008      	str	r0, [sp, #32]
 8001c8c:	f8cd a000 	str.w	sl, [sp]
 8001c90:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8001c92:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8001c94:	9106      	str	r1, [sp, #24]
 8001c96:	9005      	str	r0, [sp, #20]
 8001c98:	463b      	mov	r3, r7
 8001c9a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8001c9c:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8001c9e:	9104      	str	r1, [sp, #16]
 8001ca0:	9003      	str	r0, [sp, #12]
 8001ca2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8001ca4:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8001ca6:	9102      	str	r1, [sp, #8]
 8001ca8:	9001      	str	r0, [sp, #4]
 8001caa:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8001cac:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8001cae:	f004 fb2d 	bl	800630c <forward_lite_conv2d_if32of32wf32>
 8001cb2:	b01f      	add	sp, #124	@ 0x7c
 8001cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001cb8 <forward_dw_if32of32wf32>:
 8001cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cbc:	b09d      	sub	sp, #116	@ 0x74
 8001cbe:	6983      	ldr	r3, [r0, #24]
 8001cc0:	8819      	ldrh	r1, [r3, #0]
 8001cc2:	2900      	cmp	r1, #0
 8001cc4:	bf1a      	itte	ne
 8001cc6:	685a      	ldrne	r2, [r3, #4]
 8001cc8:	1d12      	addne	r2, r2, #4
 8001cca:	2204      	moveq	r2, #4
 8001ccc:	460c      	mov	r4, r1
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	2a00      	cmp	r2, #0
 8001cd2:	bf14      	ite	ne
 8001cd4:	f8d2 8000 	ldrne.w	r8, [r2]
 8001cd8:	f04f 0800 	moveq.w	r8, #0
 8001cdc:	2c02      	cmp	r4, #2
 8001cde:	bfa6      	itte	ge
 8001ce0:	6859      	ldrge	r1, [r3, #4]
 8001ce2:	3110      	addge	r1, #16
 8001ce4:	2104      	movlt	r1, #4
 8001ce6:	6809      	ldr	r1, [r1, #0]
 8001ce8:	2900      	cmp	r1, #0
 8001cea:	bf14      	ite	ne
 8001cec:	f8d1 c000 	ldrne.w	ip, [r1]
 8001cf0:	f04f 0c00 	moveq.w	ip, #0
 8001cf4:	2c02      	cmp	r4, #2
 8001cf6:	bfc6      	itte	gt
 8001cf8:	6859      	ldrgt	r1, [r3, #4]
 8001cfa:	311c      	addgt	r1, #28
 8001cfc:	2104      	movle	r1, #4
 8001cfe:	6809      	ldr	r1, [r1, #0]
 8001d00:	2900      	cmp	r1, #0
 8001d02:	bf14      	ite	ne
 8001d04:	680a      	ldrne	r2, [r1, #0]
 8001d06:	2200      	moveq	r2, #0
 8001d08:	2c02      	cmp	r4, #2
 8001d0a:	dd0a      	ble.n	8001d22 <forward_dw_if32of32wf32+0x6a>
 8001d0c:	685e      	ldr	r6, [r3, #4]
 8001d0e:	f116 0118 	adds.w	r1, r6, #24
 8001d12:	d006      	beq.n	8001d22 <forward_dw_if32of32wf32+0x6a>
 8001d14:	8b31      	ldrh	r1, [r6, #24]
 8001d16:	2902      	cmp	r1, #2
 8001d18:	db03      	blt.n	8001d22 <forward_dw_if32of32wf32+0x6a>
 8001d1a:	69f1      	ldr	r1, [r6, #28]
 8001d1c:	b109      	cbz	r1, 8001d22 <forward_dw_if32of32wf32+0x6a>
 8001d1e:	6849      	ldr	r1, [r1, #4]
 8001d20:	e000      	b.n	8001d24 <forward_dw_if32of32wf32+0x6c>
 8001d22:	2100      	movs	r1, #0
 8001d24:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8001d28:	6877      	ldr	r7, [r6, #4]
 8001d2a:	9714      	str	r7, [sp, #80]	@ 0x50
 8001d2c:	2900      	cmp	r1, #0
 8001d2e:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8001d32:	686f      	ldr	r7, [r5, #4]
 8001d34:	971c      	str	r7, [sp, #112]	@ 0x70
 8001d36:	68ef      	ldr	r7, [r5, #12]
 8001d38:	971b      	str	r7, [sp, #108]	@ 0x6c
 8001d3a:	68ad      	ldr	r5, [r5, #8]
 8001d3c:	951a      	str	r5, [sp, #104]	@ 0x68
 8001d3e:	68f5      	ldr	r5, [r6, #12]
 8001d40:	9519      	str	r5, [sp, #100]	@ 0x64
 8001d42:	68b5      	ldr	r5, [r6, #8]
 8001d44:	9518      	str	r5, [sp, #96]	@ 0x60
 8001d46:	6a85      	ldr	r5, [r0, #40]	@ 0x28
 8001d48:	f8ad 504c 	strh.w	r5, [sp, #76]	@ 0x4c
 8001d4c:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
 8001d4e:	f8ad 504a 	strh.w	r5, [sp, #74]	@ 0x4a
 8001d52:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
 8001d54:	683e      	ldr	r6, [r7, #0]
 8001d56:	687d      	ldr	r5, [r7, #4]
 8001d58:	f8ad 5048 	strh.w	r5, [sp, #72]	@ 0x48
 8001d5c:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8001d5e:	f8ad 5046 	strh.w	r5, [sp, #70]	@ 0x46
 8001d62:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8001d64:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8001d68:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8001d6c:	69c0      	ldr	r0, [r0, #28]
 8001d6e:	f8de 7008 	ldr.w	r7, [lr, #8]
 8001d72:	f8de 5004 	ldr.w	r5, [lr, #4]
 8001d76:	9017      	str	r0, [sp, #92]	@ 0x5c
 8001d78:	f1a7 0a01 	sub.w	sl, r7, #1
 8001d7c:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8001d80:	6880      	ldr	r0, [r0, #8]
 8001d82:	9016      	str	r0, [sp, #88]	@ 0x58
 8001d84:	f1a5 0b01 	sub.w	fp, r5, #1
 8001d88:	6990      	ldr	r0, [r2, #24]
 8001d8a:	6880      	ldr	r0, [r0, #8]
 8001d8c:	9002      	str	r0, [sp, #8]
 8001d8e:	4680      	mov	r8, r0
 8001d90:	bf1a      	itte	ne
 8001d92:	6988      	ldrne	r0, [r1, #24]
 8001d94:	f8d0 9008 	ldrne.w	r9, [r0, #8]
 8001d98:	f04f 0900 	moveq.w	r9, #0
 8001d9c:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8001da0:	6881      	ldr	r1, [r0, #8]
 8001da2:	f8bd 0044 	ldrh.w	r0, [sp, #68]	@ 0x44
 8001da6:	9115      	str	r1, [sp, #84]	@ 0x54
 8001da8:	1e40      	subs	r0, r0, #1
 8001daa:	fb00 7a0a 	mla	sl, r0, sl, r7
 8001dae:	f8bd 0046 	ldrh.w	r0, [sp, #70]	@ 0x46
 8001db2:	1e40      	subs	r0, r0, #1
 8001db4:	fb00 5b0b 	mla	fp, r0, fp, r5
 8001db8:	2c04      	cmp	r4, #4
 8001dba:	bfa6      	itte	ge
 8001dbc:	6858      	ldrge	r0, [r3, #4]
 8001dbe:	3028      	addge	r0, #40	@ 0x28
 8001dc0:	2004      	movlt	r0, #4
 8001dc2:	6800      	ldr	r0, [r0, #0]
 8001dc4:	b100      	cbz	r0, 8001dc8 <forward_dw_if32of32wf32+0x110>
 8001dc6:	6800      	ldr	r0, [r0, #0]
 8001dc8:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8001dcc:	f8dc 1000 	ldr.w	r1, [ip]
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	11cb      	asrs	r3, r1, #7
 8001dd6:	ea4f 5e61 	mov.w	lr, r1, asr #21
 8001dda:	1449      	asrs	r1, r1, #17
 8001ddc:	f001 010f 	and.w	r1, r1, #15
 8001de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001de4:	f00e 0e03 	and.w	lr, lr, #3
 8001de8:	2904      	cmp	r1, #4
 8001dea:	fa23 f30e 	lsr.w	r3, r3, lr
 8001dee:	bf14      	ite	ne
 8001df0:	2908      	cmpne	r1, #8
 8001df2:	f8dc 200c 	ldreq.w	r2, [ip, #12]
 8001df6:	b16a      	cbz	r2, 8001e14 <forward_dw_if32of32wf32+0x15c>
 8001df8:	6981      	ldr	r1, [r0, #24]
 8001dfa:	b100      	cbz	r0, 8001dfe <forward_dw_if32of32wf32+0x146>
 8001dfc:	688c      	ldr	r4, [r1, #8]
 8001dfe:	6848      	ldr	r0, [r1, #4]
 8001e00:	9001      	str	r0, [sp, #4]
 8001e02:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8001e04:	9000      	str	r0, [sp, #0]
 8001e06:	4620      	mov	r0, r4
 8001e08:	9902      	ldr	r1, [sp, #8]
 8001e0a:	f005 fb0b 	bl	8007424 <lite_decompress_ilutof32>
 8001e0e:	b10c      	cbz	r4, 8001e14 <forward_dw_if32of32wf32+0x15c>
 8001e10:	4622      	mov	r2, r4
 8001e12:	e000      	b.n	8001e16 <forward_dw_if32of32wf32+0x15e>
 8001e14:	4642      	mov	r2, r8
 8001e16:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8001e18:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8001e1c:	9010      	str	r0, [sp, #64]	@ 0x40
 8001e1e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8001e20:	b2b6      	uxth	r6, r6
 8001e22:	f8bd 0046 	ldrh.w	r0, [sp, #70]	@ 0x46
 8001e26:	f8bd 104a 	ldrh.w	r1, [sp, #74]	@ 0x4a
 8001e2a:	900e      	str	r0, [sp, #56]	@ 0x38
 8001e2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001e2e:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8001e32:	f8bd 004c 	ldrh.w	r0, [sp, #76]	@ 0x4c
 8001e36:	f8bd 1048 	ldrh.w	r1, [sp, #72]	@ 0x48
 8001e3a:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8001e3e:	900a      	str	r0, [sp, #40]	@ 0x28
 8001e40:	9609      	str	r6, [sp, #36]	@ 0x24
 8001e42:	9108      	str	r1, [sp, #32]
 8001e44:	9707      	str	r7, [sp, #28]
 8001e46:	9506      	str	r5, [sp, #24]
 8001e48:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8001e4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8001e4c:	9005      	str	r0, [sp, #20]
 8001e4e:	9104      	str	r1, [sp, #16]
 8001e50:	464b      	mov	r3, r9
 8001e52:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8001e54:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8001e56:	9003      	str	r0, [sp, #12]
 8001e58:	9102      	str	r1, [sp, #8]
 8001e5a:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8001e5c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8001e5e:	9001      	str	r0, [sp, #4]
 8001e60:	9100      	str	r1, [sp, #0]
 8001e62:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8001e64:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8001e66:	f004 fb53 	bl	8006510 <forward_lite_dw_if32of32wf32>
 8001e6a:	b01d      	add	sp, #116	@ 0x74
 8001e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001e70 <forward_conv2d_if32of32wf32_group>:
 8001e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e74:	b09d      	sub	sp, #116	@ 0x74
 8001e76:	6983      	ldr	r3, [r0, #24]
 8001e78:	8819      	ldrh	r1, [r3, #0]
 8001e7a:	2900      	cmp	r1, #0
 8001e7c:	bf1a      	itte	ne
 8001e7e:	685a      	ldrne	r2, [r3, #4]
 8001e80:	1d12      	addne	r2, r2, #4
 8001e82:	2204      	moveq	r2, #4
 8001e84:	460c      	mov	r4, r1
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	f8d2 8000 	ldrne.w	r8, [r2]
 8001e90:	f04f 0800 	moveq.w	r8, #0
 8001e94:	2c02      	cmp	r4, #2
 8001e96:	bfa6      	itte	ge
 8001e98:	6859      	ldrge	r1, [r3, #4]
 8001e9a:	3110      	addge	r1, #16
 8001e9c:	2104      	movlt	r1, #4
 8001e9e:	6809      	ldr	r1, [r1, #0]
 8001ea0:	2900      	cmp	r1, #0
 8001ea2:	bf14      	ite	ne
 8001ea4:	f8d1 c000 	ldrne.w	ip, [r1]
 8001ea8:	f04f 0c00 	moveq.w	ip, #0
 8001eac:	2c02      	cmp	r4, #2
 8001eae:	bfc6      	itte	gt
 8001eb0:	6859      	ldrgt	r1, [r3, #4]
 8001eb2:	311c      	addgt	r1, #28
 8001eb4:	2104      	movle	r1, #4
 8001eb6:	6809      	ldr	r1, [r1, #0]
 8001eb8:	2900      	cmp	r1, #0
 8001eba:	bf14      	ite	ne
 8001ebc:	680a      	ldrne	r2, [r1, #0]
 8001ebe:	2200      	moveq	r2, #0
 8001ec0:	2c02      	cmp	r4, #2
 8001ec2:	dd0a      	ble.n	8001eda <forward_conv2d_if32of32wf32_group+0x6a>
 8001ec4:	685e      	ldr	r6, [r3, #4]
 8001ec6:	f116 0118 	adds.w	r1, r6, #24
 8001eca:	d006      	beq.n	8001eda <forward_conv2d_if32of32wf32_group+0x6a>
 8001ecc:	8b31      	ldrh	r1, [r6, #24]
 8001ece:	2902      	cmp	r1, #2
 8001ed0:	db03      	blt.n	8001eda <forward_conv2d_if32of32wf32_group+0x6a>
 8001ed2:	69f1      	ldr	r1, [r6, #28]
 8001ed4:	b109      	cbz	r1, 8001eda <forward_conv2d_if32of32wf32_group+0x6a>
 8001ed6:	6849      	ldr	r1, [r1, #4]
 8001ed8:	e000      	b.n	8001edc <forward_conv2d_if32of32wf32_group+0x6c>
 8001eda:	2100      	movs	r1, #0
 8001edc:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8001ee0:	6877      	ldr	r7, [r6, #4]
 8001ee2:	9714      	str	r7, [sp, #80]	@ 0x50
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8001eea:	686f      	ldr	r7, [r5, #4]
 8001eec:	971c      	str	r7, [sp, #112]	@ 0x70
 8001eee:	68ef      	ldr	r7, [r5, #12]
 8001ef0:	971b      	str	r7, [sp, #108]	@ 0x6c
 8001ef2:	68ad      	ldr	r5, [r5, #8]
 8001ef4:	951a      	str	r5, [sp, #104]	@ 0x68
 8001ef6:	68f5      	ldr	r5, [r6, #12]
 8001ef8:	9519      	str	r5, [sp, #100]	@ 0x64
 8001efa:	68b5      	ldr	r5, [r6, #8]
 8001efc:	9518      	str	r5, [sp, #96]	@ 0x60
 8001efe:	6a85      	ldr	r5, [r0, #40]	@ 0x28
 8001f00:	f8ad 504c 	strh.w	r5, [sp, #76]	@ 0x4c
 8001f04:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
 8001f06:	f8ad 504a 	strh.w	r5, [sp, #74]	@ 0x4a
 8001f0a:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
 8001f0c:	683e      	ldr	r6, [r7, #0]
 8001f0e:	687d      	ldr	r5, [r7, #4]
 8001f10:	f8ad 5048 	strh.w	r5, [sp, #72]	@ 0x48
 8001f14:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8001f16:	f8ad 5046 	strh.w	r5, [sp, #70]	@ 0x46
 8001f1a:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8001f1c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8001f20:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8001f24:	69c0      	ldr	r0, [r0, #28]
 8001f26:	f8de 7008 	ldr.w	r7, [lr, #8]
 8001f2a:	f8de 5004 	ldr.w	r5, [lr, #4]
 8001f2e:	9017      	str	r0, [sp, #92]	@ 0x5c
 8001f30:	f1a7 0a01 	sub.w	sl, r7, #1
 8001f34:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8001f38:	6880      	ldr	r0, [r0, #8]
 8001f3a:	9016      	str	r0, [sp, #88]	@ 0x58
 8001f3c:	f1a5 0b01 	sub.w	fp, r5, #1
 8001f40:	6990      	ldr	r0, [r2, #24]
 8001f42:	6880      	ldr	r0, [r0, #8]
 8001f44:	9002      	str	r0, [sp, #8]
 8001f46:	4680      	mov	r8, r0
 8001f48:	bf1a      	itte	ne
 8001f4a:	6988      	ldrne	r0, [r1, #24]
 8001f4c:	f8d0 9008 	ldrne.w	r9, [r0, #8]
 8001f50:	f04f 0900 	moveq.w	r9, #0
 8001f54:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8001f58:	6881      	ldr	r1, [r0, #8]
 8001f5a:	f8bd 0044 	ldrh.w	r0, [sp, #68]	@ 0x44
 8001f5e:	9115      	str	r1, [sp, #84]	@ 0x54
 8001f60:	1e40      	subs	r0, r0, #1
 8001f62:	fb00 7a0a 	mla	sl, r0, sl, r7
 8001f66:	f8bd 0046 	ldrh.w	r0, [sp, #70]	@ 0x46
 8001f6a:	1e40      	subs	r0, r0, #1
 8001f6c:	fb00 5b0b 	mla	fp, r0, fp, r5
 8001f70:	2c04      	cmp	r4, #4
 8001f72:	bfa6      	itte	ge
 8001f74:	6858      	ldrge	r0, [r3, #4]
 8001f76:	3028      	addge	r0, #40	@ 0x28
 8001f78:	2004      	movlt	r0, #4
 8001f7a:	6800      	ldr	r0, [r0, #0]
 8001f7c:	b100      	cbz	r0, 8001f80 <forward_conv2d_if32of32wf32_group+0x110>
 8001f7e:	6800      	ldr	r0, [r0, #0]
 8001f80:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8001f84:	f8dc 1000 	ldr.w	r1, [ip]
 8001f88:	2400      	movs	r4, #0
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	11cb      	asrs	r3, r1, #7
 8001f8e:	ea4f 5e61 	mov.w	lr, r1, asr #21
 8001f92:	1449      	asrs	r1, r1, #17
 8001f94:	f001 010f 	and.w	r1, r1, #15
 8001f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f9c:	f00e 0e03 	and.w	lr, lr, #3
 8001fa0:	2904      	cmp	r1, #4
 8001fa2:	fa23 f30e 	lsr.w	r3, r3, lr
 8001fa6:	bf14      	ite	ne
 8001fa8:	2908      	cmpne	r1, #8
 8001faa:	f8dc 200c 	ldreq.w	r2, [ip, #12]
 8001fae:	b16a      	cbz	r2, 8001fcc <forward_conv2d_if32of32wf32_group+0x15c>
 8001fb0:	6981      	ldr	r1, [r0, #24]
 8001fb2:	b100      	cbz	r0, 8001fb6 <forward_conv2d_if32of32wf32_group+0x146>
 8001fb4:	688c      	ldr	r4, [r1, #8]
 8001fb6:	6848      	ldr	r0, [r1, #4]
 8001fb8:	9001      	str	r0, [sp, #4]
 8001fba:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8001fbc:	9000      	str	r0, [sp, #0]
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	9902      	ldr	r1, [sp, #8]
 8001fc2:	f005 fa2f 	bl	8007424 <lite_decompress_ilutof32>
 8001fc6:	b10c      	cbz	r4, 8001fcc <forward_conv2d_if32of32wf32_group+0x15c>
 8001fc8:	4622      	mov	r2, r4
 8001fca:	e000      	b.n	8001fce <forward_conv2d_if32of32wf32_group+0x15e>
 8001fcc:	4642      	mov	r2, r8
 8001fce:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8001fd0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8001fd4:	9010      	str	r0, [sp, #64]	@ 0x40
 8001fd6:	910f      	str	r1, [sp, #60]	@ 0x3c
 8001fd8:	b2b6      	uxth	r6, r6
 8001fda:	f8bd 0046 	ldrh.w	r0, [sp, #70]	@ 0x46
 8001fde:	f8bd 104a 	ldrh.w	r1, [sp, #74]	@ 0x4a
 8001fe2:	900e      	str	r0, [sp, #56]	@ 0x38
 8001fe4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001fe6:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8001fea:	f8bd 004c 	ldrh.w	r0, [sp, #76]	@ 0x4c
 8001fee:	f8bd 1048 	ldrh.w	r1, [sp, #72]	@ 0x48
 8001ff2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8001ff6:	900a      	str	r0, [sp, #40]	@ 0x28
 8001ff8:	9609      	str	r6, [sp, #36]	@ 0x24
 8001ffa:	9108      	str	r1, [sp, #32]
 8001ffc:	9707      	str	r7, [sp, #28]
 8001ffe:	9506      	str	r5, [sp, #24]
 8002000:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8002002:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002004:	9005      	str	r0, [sp, #20]
 8002006:	9104      	str	r1, [sp, #16]
 8002008:	464b      	mov	r3, r9
 800200a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800200c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800200e:	9003      	str	r0, [sp, #12]
 8002010:	9102      	str	r1, [sp, #8]
 8002012:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8002014:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8002016:	9001      	str	r0, [sp, #4]
 8002018:	9100      	str	r1, [sp, #0]
 800201a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800201c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800201e:	f004 faf8 	bl	8006612 <forward_lite_conv2d_if32of32wf32_group>
 8002022:	b01d      	add	sp, #116	@ 0x74
 8002024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002028 <forward_conv2d_if32of32wf32_nl_pool>:
 8002028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800202c:	4605      	mov	r5, r0
 800202e:	b0b1      	sub	sp, #196	@ 0xc4
 8002030:	69aa      	ldr	r2, [r5, #24]
 8002032:	8811      	ldrh	r1, [r2, #0]
 8002034:	2900      	cmp	r1, #0
 8002036:	bf1a      	itte	ne
 8002038:	6850      	ldrne	r0, [r2, #4]
 800203a:	1d00      	addne	r0, r0, #4
 800203c:	2004      	moveq	r0, #4
 800203e:	6800      	ldr	r0, [r0, #0]
 8002040:	2800      	cmp	r0, #0
 8002042:	bf14      	ite	ne
 8002044:	6806      	ldrne	r6, [r0, #0]
 8002046:	2600      	moveq	r6, #0
 8002048:	2901      	cmp	r1, #1
 800204a:	bfc6      	itte	gt
 800204c:	6850      	ldrgt	r0, [r2, #4]
 800204e:	3010      	addgt	r0, #16
 8002050:	2004      	movle	r0, #4
 8002052:	6800      	ldr	r0, [r0, #0]
 8002054:	2800      	cmp	r0, #0
 8002056:	bf14      	ite	ne
 8002058:	6807      	ldrne	r7, [r0, #0]
 800205a:	2700      	moveq	r7, #0
 800205c:	2902      	cmp	r1, #2
 800205e:	bfc6      	itte	gt
 8002060:	6850      	ldrgt	r0, [r2, #4]
 8002062:	f100 031c 	addgt.w	r3, r0, #28
 8002066:	2304      	movle	r3, #4
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	2800      	cmp	r0, #0
 800206c:	bf14      	ite	ne
 800206e:	f8d0 8000 	ldrne.w	r8, [r0]
 8002072:	f04f 0800 	moveq.w	r8, #0
 8002076:	2902      	cmp	r1, #2
 8002078:	dd0c      	ble.n	8002094 <forward_conv2d_if32of32wf32_nl_pool+0x6c>
 800207a:	6852      	ldr	r2, [r2, #4]
 800207c:	f112 0118 	adds.w	r1, r2, #24
 8002080:	d008      	beq.n	8002094 <forward_conv2d_if32of32wf32_nl_pool+0x6c>
 8002082:	8b11      	ldrh	r1, [r2, #24]
 8002084:	2901      	cmp	r1, #1
 8002086:	dd05      	ble.n	8002094 <forward_conv2d_if32of32wf32_nl_pool+0x6c>
 8002088:	69d1      	ldr	r1, [r2, #28]
 800208a:	b119      	cbz	r1, 8002094 <forward_conv2d_if32of32wf32_nl_pool+0x6c>
 800208c:	6849      	ldr	r1, [r1, #4]
 800208e:	f101 0918 	add.w	r9, r1, #24
 8002092:	e002      	b.n	800209a <forward_conv2d_if32of32wf32_nl_pool+0x72>
 8002094:	2200      	movs	r2, #0
 8002096:	f102 0918 	add.w	r9, r2, #24
 800209a:	68f1      	ldr	r1, [r6, #12]
 800209c:	2800      	cmp	r0, #0
 800209e:	bf14      	ite	ne
 80020a0:	6884      	ldrne	r4, [r0, #8]
 80020a2:	2400      	moveq	r4, #0
 80020a4:	6848      	ldr	r0, [r1, #4]
 80020a6:	f8ad 00ac 	strh.w	r0, [sp, #172]	@ 0xac
 80020aa:	2c00      	cmp	r4, #0
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	6850      	ldr	r0, [r2, #4]
 80020b0:	f8ad 00aa 	strh.w	r0, [sp, #170]	@ 0xaa
 80020b4:	68d3      	ldr	r3, [r2, #12]
 80020b6:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 80020ba:	6892      	ldr	r2, [r2, #8]
 80020bc:	f8ad 20a6 	strh.w	r2, [sp, #166]	@ 0xa6
 80020c0:	68cb      	ldr	r3, [r1, #12]
 80020c2:	f8ad 308e 	strh.w	r3, [sp, #142]	@ 0x8e
 80020c6:	6889      	ldr	r1, [r1, #8]
 80020c8:	f8ad 108c 	strh.w	r1, [sp, #140]	@ 0x8c
 80020cc:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80020ce:	f8ad 208a 	strh.w	r2, [sp, #138]	@ 0x8a
 80020d2:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80020d4:	f8ad 1088 	strh.w	r1, [sp, #136]	@ 0x88
 80020d8:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 80020da:	6808      	ldr	r0, [r1, #0]
 80020dc:	f8ad 0086 	strh.w	r0, [sp, #134]	@ 0x86
 80020e0:	684a      	ldr	r2, [r1, #4]
 80020e2:	f8ad 2084 	strh.w	r2, [sp, #132]	@ 0x84
 80020e6:	688b      	ldr	r3, [r1, #8]
 80020e8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80020ec:	68c9      	ldr	r1, [r1, #12]
 80020ee:	f8ad 1000 	strh.w	r1, [sp]
 80020f2:	69ea      	ldr	r2, [r5, #28]
 80020f4:	f8ad 20a4 	strh.w	r2, [sp, #164]	@ 0xa4
 80020f8:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 80020fa:	f8ad 1082 	strh.w	r1, [sp, #130]	@ 0x82
 80020fe:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002100:	f8ad 2080 	strh.w	r2, [sp, #128]	@ 0x80
 8002104:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8002108:	6841      	ldr	r1, [r0, #4]
 800210a:	9128      	str	r1, [sp, #160]	@ 0xa0
 800210c:	6882      	ldr	r2, [r0, #8]
 800210e:	9227      	str	r2, [sp, #156]	@ 0x9c
 8002110:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8002112:	f8ad 109a 	strh.w	r1, [sp, #154]	@ 0x9a
 8002116:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 8002118:	f8ad 2098 	strh.w	r2, [sp, #152]	@ 0x98
 800211c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800211e:	f8ad 1096 	strh.w	r1, [sp, #150]	@ 0x96
 8002122:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8002124:	680a      	ldr	r2, [r1, #0]
 8002126:	f8ad 2094 	strh.w	r2, [sp, #148]	@ 0x94
 800212a:	6849      	ldr	r1, [r1, #4]
 800212c:	f8ad 1092 	strh.w	r1, [sp, #146]	@ 0x92
 8002130:	6a29      	ldr	r1, [r5, #32]
 8002132:	bf1e      	ittt	ne
 8002134:	69a0      	ldrne	r0, [r4, #24]
 8002136:	2800      	cmpne	r0, #0
 8002138:	4601      	movne	r1, r0
 800213a:	2900      	cmp	r1, #0
 800213c:	bf14      	ite	ne
 800213e:	f8d1 a008 	ldrne.w	sl, [r1, #8]
 8002142:	f04f 0a00 	moveq.w	sl, #0
 8002146:	b924      	cbnz	r4, 8002152 <forward_conv2d_if32of32wf32_nl_pool+0x12a>
 8002148:	f04f 0b00 	mov.w	fp, #0
 800214c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800214e:	2101      	movs	r1, #1
 8002150:	e010      	b.n	8002174 <forward_conv2d_if32of32wf32_nl_pool+0x14c>
 8002152:	69a0      	ldr	r0, [r4, #24]
 8002154:	2800      	cmp	r0, #0
 8002156:	d0f7      	beq.n	8002148 <forward_conv2d_if32of32wf32_nl_pool+0x120>
 8002158:	6841      	ldr	r1, [r0, #4]
 800215a:	6800      	ldr	r0, [r0, #0]
 800215c:	f00a fa7c 	bl	800c658 <ai_array_get_byte_size>
 8002160:	4683      	mov	fp, r0
 8002162:	69a0      	ldr	r0, [r4, #24]
 8002164:	2800      	cmp	r0, #0
 8002166:	d0f1      	beq.n	800214c <forward_conv2d_if32of32wf32_nl_pool+0x124>
 8002168:	6841      	ldr	r1, [r0, #4]
 800216a:	6800      	ldr	r0, [r0, #0]
 800216c:	f00a fa74 	bl	800c658 <ai_array_get_byte_size>
 8002170:	4601      	mov	r1, r0
 8002172:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002174:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8002176:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 8002178:	f8bd c086 	ldrh.w	ip, [sp, #134]	@ 0x86
 800217c:	902f      	str	r0, [sp, #188]	@ 0xbc
 800217e:	1e58      	subs	r0, r3, #1
 8002180:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002182:	922e      	str	r2, [sp, #184]	@ 0xb8
 8002184:	f8bd 2080 	ldrh.w	r2, [sp, #128]	@ 0x80
 8002188:	1e52      	subs	r2, r2, #1
 800218a:	fb02 3300 	mla	r3, r2, r0, r3
 800218e:	f8bd 2082 	ldrh.w	r2, [sp, #130]	@ 0x82
 8002192:	1e60      	subs	r0, r4, #1
 8002194:	1e52      	subs	r2, r2, #1
 8002196:	fb02 4400 	mla	r4, r2, r0, r4
 800219a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800219c:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	@ 0x8e
 80021a0:	f8ad 0090 	strh.w	r0, [sp, #144]	@ 0x90
 80021a4:	b218      	sxth	r0, r3
 80021a6:	69b6      	ldr	r6, [r6, #24]
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	1a12      	subs	r2, r2, r0
 80021ac:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80021b0:	4494      	add	ip, r2
 80021b2:	f8bd 2088 	ldrh.w	r2, [sp, #136]	@ 0x88
 80021b6:	4460      	add	r0, ip
 80021b8:	fb90 fcf2 	sdiv	ip, r0, r2
 80021bc:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	@ 0x8c
 80021c0:	b220      	sxth	r0, r4
 80021c2:	1a10      	subs	r0, r2, r0
 80021c4:	f8bd 2084 	ldrh.w	r2, [sp, #132]	@ 0x84
 80021c8:	4402      	add	r2, r0
 80021ca:	f8bd 0000 	ldrh.w	r0, [sp]
 80021ce:	1810      	adds	r0, r2, r0
 80021d0:	f10c 0c01 	add.w	ip, ip, #1
 80021d4:	f8bd 208a 	ldrh.w	r2, [sp, #138]	@ 0x8a
 80021d8:	fb90 fef2 	sdiv	lr, r0, r2
 80021dc:	68b2      	ldr	r2, [r6, #8]
 80021de:	922d      	str	r2, [sp, #180]	@ 0xb4
 80021e0:	f10e 0e01 	add.w	lr, lr, #1
 80021e4:	69be      	ldr	r6, [r7, #24]
 80021e6:	68b2      	ldr	r2, [r6, #8]
 80021e8:	922c      	str	r2, [sp, #176]	@ 0xb0
 80021ea:	b224      	sxth	r4, r4
 80021ec:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80021f0:	f8d9 0000 	ldr.w	r0, [r9]
 80021f4:	68b2      	ldr	r2, [r6, #8]
 80021f6:	6886      	ldr	r6, [r0, #8]
 80021f8:	69a8      	ldr	r0, [r5, #24]
 80021fa:	8805      	ldrh	r5, [r0, #0]
 80021fc:	2d04      	cmp	r5, #4
 80021fe:	bfa6      	itte	ge
 8002200:	6840      	ldrge	r0, [r0, #4]
 8002202:	f100 0728 	addge.w	r7, r0, #40	@ 0x28
 8002206:	2704      	movlt	r7, #4
 8002208:	6838      	ldr	r0, [r7, #0]
 800220a:	2800      	cmp	r0, #0
 800220c:	bf1c      	itt	ne
 800220e:	6805      	ldrne	r5, [r0, #0]
 8002210:	2d00      	cmpne	r5, #0
 8002212:	bf1a      	itte	ne
 8002214:	69ad      	ldrne	r5, [r5, #24]
 8002216:	68ad      	ldrne	r5, [r5, #8]
 8002218:	2500      	moveq	r5, #0
 800221a:	2800      	cmp	r0, #0
 800221c:	bf19      	ittee	ne
 800221e:	6840      	ldrne	r0, [r0, #4]
 8002220:	3018      	addne	r0, #24
 8002222:	2700      	moveq	r7, #0
 8002224:	f107 0018 	addeq.w	r0, r7, #24
 8002228:	f9bd 7094 	ldrsh.w	r7, [sp, #148]	@ 0x94
 800222c:	971f      	str	r7, [sp, #124]	@ 0x7c
 800222e:	f9bd 7092 	ldrsh.w	r7, [sp, #146]	@ 0x92
 8002232:	971e      	str	r7, [sp, #120]	@ 0x78
 8002234:	f9bd 7096 	ldrsh.w	r7, [sp, #150]	@ 0x96
 8002238:	971d      	str	r7, [sp, #116]	@ 0x74
 800223a:	f9bd 7098 	ldrsh.w	r7, [sp, #152]	@ 0x98
 800223e:	971c      	str	r7, [sp, #112]	@ 0x70
 8002240:	f9bd 7090 	ldrsh.w	r7, [sp, #144]	@ 0x90
 8002244:	971b      	str	r7, [sp, #108]	@ 0x6c
 8002246:	f9bd 709a 	ldrsh.w	r7, [sp, #154]	@ 0x9a
 800224a:	971a      	str	r7, [sp, #104]	@ 0x68
 800224c:	9118      	str	r1, [sp, #96]	@ 0x60
 800224e:	f8cd b05c 	str.w	fp, [sp, #92]	@ 0x5c
 8002252:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 8002256:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8002258:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800225a:	9115      	str	r1, [sp, #84]	@ 0x54
 800225c:	9719      	str	r7, [sp, #100]	@ 0x64
 800225e:	fa0f f18c 	sxth.w	r1, ip
 8002262:	9114      	str	r1, [sp, #80]	@ 0x50
 8002264:	fa0f f18e 	sxth.w	r1, lr
 8002268:	9113      	str	r1, [sp, #76]	@ 0x4c
 800226a:	930e      	str	r3, [sp, #56]	@ 0x38
 800226c:	940f      	str	r4, [sp, #60]	@ 0x3c
 800226e:	9501      	str	r5, [sp, #4]
 8002270:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8002274:	f8bd 308a 	ldrh.w	r3, [sp, #138]	@ 0x8a
 8002278:	f9bd 70a4 	ldrsh.w	r7, [sp, #164]	@ 0xa4
 800227c:	9111      	str	r1, [sp, #68]	@ 0x44
 800227e:	930c      	str	r3, [sp, #48]	@ 0x30
 8002280:	9712      	str	r7, [sp, #72]	@ 0x48
 8002282:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 8002286:	f8bd 3084 	ldrh.w	r3, [sp, #132]	@ 0x84
 800228a:	f8bd 7082 	ldrh.w	r7, [sp, #130]	@ 0x82
 800228e:	910d      	str	r1, [sp, #52]	@ 0x34
 8002290:	930a      	str	r3, [sp, #40]	@ 0x28
 8002292:	9710      	str	r7, [sp, #64]	@ 0x40
 8002294:	f8bd 1086 	ldrh.w	r1, [sp, #134]	@ 0x86
 8002298:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800229a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800229c:	b21b      	sxth	r3, r3
 800229e:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80022a0:	9308      	str	r3, [sp, #32]
 80022a2:	b209      	sxth	r1, r1
 80022a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80022a6:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	@ 0xa6
 80022aa:	f9bd 10a8 	ldrsh.w	r1, [sp, #168]	@ 0xa8
 80022ae:	9107      	str	r1, [sp, #28]
 80022b0:	9306      	str	r3, [sp, #24]
 80022b2:	f9bd 108e 	ldrsh.w	r1, [sp, #142]	@ 0x8e
 80022b6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 80022ba:	9105      	str	r1, [sp, #20]
 80022bc:	9304      	str	r3, [sp, #16]
 80022be:	f9bd 10aa 	ldrsh.w	r1, [sp, #170]	@ 0xaa
 80022c2:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	@ 0xac
 80022c6:	9103      	str	r1, [sp, #12]
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	4633      	mov	r3, r6
 80022cc:	6800      	ldr	r0, [r0, #0]
 80022ce:	6881      	ldr	r1, [r0, #8]
 80022d0:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 80022d2:	9100      	str	r1, [sp, #0]
 80022d4:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80022d6:	f004 fa2b 	bl	8006730 <forward_lite_conv2d_if32of32wf32_pool>
 80022da:	b031      	add	sp, #196	@ 0xc4
 80022dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080022e0 <forward_dw_if32of32wf32_nl_pool>:
 80022e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e4:	4605      	mov	r5, r0
 80022e6:	b0af      	sub	sp, #188	@ 0xbc
 80022e8:	69aa      	ldr	r2, [r5, #24]
 80022ea:	8811      	ldrh	r1, [r2, #0]
 80022ec:	2900      	cmp	r1, #0
 80022ee:	bf1a      	itte	ne
 80022f0:	6850      	ldrne	r0, [r2, #4]
 80022f2:	1d00      	addne	r0, r0, #4
 80022f4:	2004      	moveq	r0, #4
 80022f6:	6800      	ldr	r0, [r0, #0]
 80022f8:	2800      	cmp	r0, #0
 80022fa:	bf14      	ite	ne
 80022fc:	6806      	ldrne	r6, [r0, #0]
 80022fe:	2600      	moveq	r6, #0
 8002300:	2901      	cmp	r1, #1
 8002302:	bfc6      	itte	gt
 8002304:	6850      	ldrgt	r0, [r2, #4]
 8002306:	3010      	addgt	r0, #16
 8002308:	2004      	movle	r0, #4
 800230a:	6800      	ldr	r0, [r0, #0]
 800230c:	2800      	cmp	r0, #0
 800230e:	bf14      	ite	ne
 8002310:	6807      	ldrne	r7, [r0, #0]
 8002312:	2700      	moveq	r7, #0
 8002314:	2902      	cmp	r1, #2
 8002316:	bfc6      	itte	gt
 8002318:	6850      	ldrgt	r0, [r2, #4]
 800231a:	f100 031c 	addgt.w	r3, r0, #28
 800231e:	2304      	movle	r3, #4
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	2800      	cmp	r0, #0
 8002324:	bf14      	ite	ne
 8002326:	f8d0 8000 	ldrne.w	r8, [r0]
 800232a:	f04f 0800 	moveq.w	r8, #0
 800232e:	2902      	cmp	r1, #2
 8002330:	dd0c      	ble.n	800234c <forward_dw_if32of32wf32_nl_pool+0x6c>
 8002332:	6852      	ldr	r2, [r2, #4]
 8002334:	f112 0118 	adds.w	r1, r2, #24
 8002338:	d008      	beq.n	800234c <forward_dw_if32of32wf32_nl_pool+0x6c>
 800233a:	8b11      	ldrh	r1, [r2, #24]
 800233c:	2901      	cmp	r1, #1
 800233e:	dd05      	ble.n	800234c <forward_dw_if32of32wf32_nl_pool+0x6c>
 8002340:	69d1      	ldr	r1, [r2, #28]
 8002342:	b119      	cbz	r1, 800234c <forward_dw_if32of32wf32_nl_pool+0x6c>
 8002344:	6849      	ldr	r1, [r1, #4]
 8002346:	f101 0918 	add.w	r9, r1, #24
 800234a:	e002      	b.n	8002352 <forward_dw_if32of32wf32_nl_pool+0x72>
 800234c:	2200      	movs	r2, #0
 800234e:	f102 0918 	add.w	r9, r2, #24
 8002352:	68f1      	ldr	r1, [r6, #12]
 8002354:	2800      	cmp	r0, #0
 8002356:	bf14      	ite	ne
 8002358:	6884      	ldrne	r4, [r0, #8]
 800235a:	2400      	moveq	r4, #0
 800235c:	6848      	ldr	r0, [r1, #4]
 800235e:	f8ad 00a8 	strh.w	r0, [sp, #168]	@ 0xa8
 8002362:	2c00      	cmp	r4, #0
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	6850      	ldr	r0, [r2, #4]
 8002368:	f8ad 00a6 	strh.w	r0, [sp, #166]	@ 0xa6
 800236c:	68d3      	ldr	r3, [r2, #12]
 800236e:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
 8002372:	6892      	ldr	r2, [r2, #8]
 8002374:	f8ad 20a2 	strh.w	r2, [sp, #162]	@ 0xa2
 8002378:	68cb      	ldr	r3, [r1, #12]
 800237a:	f8ad 308a 	strh.w	r3, [sp, #138]	@ 0x8a
 800237e:	6889      	ldr	r1, [r1, #8]
 8002380:	f8ad 1088 	strh.w	r1, [sp, #136]	@ 0x88
 8002384:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002386:	f8ad 2086 	strh.w	r2, [sp, #134]	@ 0x86
 800238a:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800238c:	f8ad 1084 	strh.w	r1, [sp, #132]	@ 0x84
 8002390:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 8002392:	6808      	ldr	r0, [r1, #0]
 8002394:	f8ad 0082 	strh.w	r0, [sp, #130]	@ 0x82
 8002398:	684a      	ldr	r2, [r1, #4]
 800239a:	f8ad 2080 	strh.w	r2, [sp, #128]	@ 0x80
 800239e:	688b      	ldr	r3, [r1, #8]
 80023a0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80023a4:	68c9      	ldr	r1, [r1, #12]
 80023a6:	f8ad 1000 	strh.w	r1, [sp]
 80023aa:	69ea      	ldr	r2, [r5, #28]
 80023ac:	f8ad 20a0 	strh.w	r2, [sp, #160]	@ 0xa0
 80023b0:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 80023b2:	f8ad 107e 	strh.w	r1, [sp, #126]	@ 0x7e
 80023b6:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80023b8:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 80023bc:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80023c0:	6841      	ldr	r1, [r0, #4]
 80023c2:	9127      	str	r1, [sp, #156]	@ 0x9c
 80023c4:	6882      	ldr	r2, [r0, #8]
 80023c6:	9226      	str	r2, [sp, #152]	@ 0x98
 80023c8:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 80023ca:	f8ad 1096 	strh.w	r1, [sp, #150]	@ 0x96
 80023ce:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 80023d0:	f8ad 2094 	strh.w	r2, [sp, #148]	@ 0x94
 80023d4:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 80023d6:	f8ad 1092 	strh.w	r1, [sp, #146]	@ 0x92
 80023da:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80023dc:	680a      	ldr	r2, [r1, #0]
 80023de:	f8ad 2090 	strh.w	r2, [sp, #144]	@ 0x90
 80023e2:	6849      	ldr	r1, [r1, #4]
 80023e4:	f8ad 108e 	strh.w	r1, [sp, #142]	@ 0x8e
 80023e8:	6a29      	ldr	r1, [r5, #32]
 80023ea:	bf1e      	ittt	ne
 80023ec:	69a0      	ldrne	r0, [r4, #24]
 80023ee:	2800      	cmpne	r0, #0
 80023f0:	4601      	movne	r1, r0
 80023f2:	2900      	cmp	r1, #0
 80023f4:	bf14      	ite	ne
 80023f6:	f8d1 a008 	ldrne.w	sl, [r1, #8]
 80023fa:	f04f 0a00 	moveq.w	sl, #0
 80023fe:	b924      	cbnz	r4, 800240a <forward_dw_if32of32wf32_nl_pool+0x12a>
 8002400:	f04f 0b00 	mov.w	fp, #0
 8002404:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8002406:	2001      	movs	r0, #1
 8002408:	e00f      	b.n	800242a <forward_dw_if32of32wf32_nl_pool+0x14a>
 800240a:	69a0      	ldr	r0, [r4, #24]
 800240c:	2800      	cmp	r0, #0
 800240e:	d0f7      	beq.n	8002400 <forward_dw_if32of32wf32_nl_pool+0x120>
 8002410:	6841      	ldr	r1, [r0, #4]
 8002412:	6800      	ldr	r0, [r0, #0]
 8002414:	f00a f920 	bl	800c658 <ai_array_get_byte_size>
 8002418:	4683      	mov	fp, r0
 800241a:	69a0      	ldr	r0, [r4, #24]
 800241c:	2800      	cmp	r0, #0
 800241e:	d0f1      	beq.n	8002404 <forward_dw_if32of32wf32_nl_pool+0x124>
 8002420:	6841      	ldr	r1, [r0, #4]
 8002422:	6800      	ldr	r0, [r0, #0]
 8002424:	f00a f918 	bl	800c658 <ai_array_get_byte_size>
 8002428:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800242a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800242c:	9c27      	ldr	r4, [sp, #156]	@ 0x9c
 800242e:	f8bd c082 	ldrh.w	ip, [sp, #130]	@ 0x82
 8002432:	912d      	str	r1, [sp, #180]	@ 0xb4
 8002434:	1e59      	subs	r1, r3, #1
 8002436:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002438:	922c      	str	r2, [sp, #176]	@ 0xb0
 800243a:	f8bd 207c 	ldrh.w	r2, [sp, #124]	@ 0x7c
 800243e:	1e52      	subs	r2, r2, #1
 8002440:	fb02 3301 	mla	r3, r2, r1, r3
 8002444:	f8bd 207e 	ldrh.w	r2, [sp, #126]	@ 0x7e
 8002448:	1e61      	subs	r1, r4, #1
 800244a:	1e52      	subs	r2, r2, #1
 800244c:	fb02 4401 	mla	r4, r2, r1, r4
 8002450:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8002452:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	@ 0x8a
 8002456:	f8ad 108c 	strh.w	r1, [sp, #140]	@ 0x8c
 800245a:	b219      	sxth	r1, r3
 800245c:	69b6      	ldr	r6, [r6, #24]
 800245e:	b21b      	sxth	r3, r3
 8002460:	1a52      	subs	r2, r2, r1
 8002462:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8002466:	4494      	add	ip, r2
 8002468:	f8bd 2084 	ldrh.w	r2, [sp, #132]	@ 0x84
 800246c:	4461      	add	r1, ip
 800246e:	fb91 fcf2 	sdiv	ip, r1, r2
 8002472:	f9bd 2088 	ldrsh.w	r2, [sp, #136]	@ 0x88
 8002476:	b221      	sxth	r1, r4
 8002478:	1a51      	subs	r1, r2, r1
 800247a:	f8bd 2080 	ldrh.w	r2, [sp, #128]	@ 0x80
 800247e:	440a      	add	r2, r1
 8002480:	f8bd 1000 	ldrh.w	r1, [sp]
 8002484:	1851      	adds	r1, r2, r1
 8002486:	f10c 0c01 	add.w	ip, ip, #1
 800248a:	f8bd 2086 	ldrh.w	r2, [sp, #134]	@ 0x86
 800248e:	fb91 fef2 	sdiv	lr, r1, r2
 8002492:	68b2      	ldr	r2, [r6, #8]
 8002494:	922b      	str	r2, [sp, #172]	@ 0xac
 8002496:	f10e 0e01 	add.w	lr, lr, #1
 800249a:	69ad      	ldr	r5, [r5, #24]
 800249c:	69be      	ldr	r6, [r7, #24]
 800249e:	882f      	ldrh	r7, [r5, #0]
 80024a0:	68b1      	ldr	r1, [r6, #8]
 80024a2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80024a6:	f8d9 6000 	ldr.w	r6, [r9]
 80024aa:	6892      	ldr	r2, [r2, #8]
 80024ac:	68b6      	ldr	r6, [r6, #8]
 80024ae:	2f04      	cmp	r7, #4
 80024b0:	bfa6      	itte	ge
 80024b2:	686d      	ldrge	r5, [r5, #4]
 80024b4:	3528      	addge	r5, #40	@ 0x28
 80024b6:	2504      	movlt	r5, #4
 80024b8:	b224      	sxth	r4, r4
 80024ba:	682d      	ldr	r5, [r5, #0]
 80024bc:	2d00      	cmp	r5, #0
 80024be:	bf19      	ittee	ne
 80024c0:	682d      	ldrne	r5, [r5, #0]
 80024c2:	3518      	addne	r5, #24
 80024c4:	2700      	moveq	r7, #0
 80024c6:	f107 0518 	addeq.w	r5, r7, #24
 80024ca:	f9bd 7090 	ldrsh.w	r7, [sp, #144]	@ 0x90
 80024ce:	971e      	str	r7, [sp, #120]	@ 0x78
 80024d0:	f9bd 708e 	ldrsh.w	r7, [sp, #142]	@ 0x8e
 80024d4:	971d      	str	r7, [sp, #116]	@ 0x74
 80024d6:	f9bd 7092 	ldrsh.w	r7, [sp, #146]	@ 0x92
 80024da:	971c      	str	r7, [sp, #112]	@ 0x70
 80024dc:	f9bd 7094 	ldrsh.w	r7, [sp, #148]	@ 0x94
 80024e0:	971b      	str	r7, [sp, #108]	@ 0x6c
 80024e2:	f9bd 7096 	ldrsh.w	r7, [sp, #150]	@ 0x96
 80024e6:	971a      	str	r7, [sp, #104]	@ 0x68
 80024e8:	f9bd 708c 	ldrsh.w	r7, [sp, #140]	@ 0x8c
 80024ec:	9719      	str	r7, [sp, #100]	@ 0x64
 80024ee:	9017      	str	r0, [sp, #92]	@ 0x5c
 80024f0:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 80024f4:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
 80024f8:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 80024fa:	9f2c      	ldr	r7, [sp, #176]	@ 0xb0
 80024fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80024fe:	9718      	str	r7, [sp, #96]	@ 0x60
 8002500:	fa0f f08c 	sxth.w	r0, ip
 8002504:	9013      	str	r0, [sp, #76]	@ 0x4c
 8002506:	fa0f f08e 	sxth.w	r0, lr
 800250a:	9012      	str	r0, [sp, #72]	@ 0x48
 800250c:	930d      	str	r3, [sp, #52]	@ 0x34
 800250e:	940e      	str	r4, [sp, #56]	@ 0x38
 8002510:	f8bd 007c 	ldrh.w	r0, [sp, #124]	@ 0x7c
 8002514:	f8bd 3086 	ldrh.w	r3, [sp, #134]	@ 0x86
 8002518:	f9bd 70a0 	ldrsh.w	r7, [sp, #160]	@ 0xa0
 800251c:	9010      	str	r0, [sp, #64]	@ 0x40
 800251e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002520:	9711      	str	r7, [sp, #68]	@ 0x44
 8002522:	f8bd 0084 	ldrh.w	r0, [sp, #132]	@ 0x84
 8002526:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 800252a:	f8bd 707e 	ldrh.w	r7, [sp, #126]	@ 0x7e
 800252e:	900c      	str	r0, [sp, #48]	@ 0x30
 8002530:	9309      	str	r3, [sp, #36]	@ 0x24
 8002532:	970f      	str	r7, [sp, #60]	@ 0x3c
 8002534:	f8bd 0082 	ldrh.w	r0, [sp, #130]	@ 0x82
 8002538:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800253a:	900a      	str	r0, [sp, #40]	@ 0x28
 800253c:	b21b      	sxth	r3, r3
 800253e:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8002540:	9307      	str	r3, [sp, #28]
 8002542:	b200      	sxth	r0, r0
 8002544:	9008      	str	r0, [sp, #32]
 8002546:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	@ 0xa2
 800254a:	f9bd 00a4 	ldrsh.w	r0, [sp, #164]	@ 0xa4
 800254e:	9006      	str	r0, [sp, #24]
 8002550:	9305      	str	r3, [sp, #20]
 8002552:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	@ 0x8a
 8002556:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	@ 0x88
 800255a:	9004      	str	r0, [sp, #16]
 800255c:	9303      	str	r3, [sp, #12]
 800255e:	f9bd 00a6 	ldrsh.w	r0, [sp, #166]	@ 0xa6
 8002562:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 8002566:	9002      	str	r0, [sp, #8]
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	4633      	mov	r3, r6
 800256c:	682c      	ldr	r4, [r5, #0]
 800256e:	68a0      	ldr	r0, [r4, #8]
 8002570:	9000      	str	r0, [sp, #0]
 8002572:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8002574:	f004 faac 	bl	8006ad0 <forward_lite_dw_if32of32wf32_pool>
 8002578:	b02f      	add	sp, #188	@ 0xbc
 800257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800257e <forward_conv2d_if32of32wf32_group_nl_pool>:
 800257e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002582:	4605      	mov	r5, r0
 8002584:	b0af      	sub	sp, #188	@ 0xbc
 8002586:	69aa      	ldr	r2, [r5, #24]
 8002588:	8811      	ldrh	r1, [r2, #0]
 800258a:	2900      	cmp	r1, #0
 800258c:	bf1a      	itte	ne
 800258e:	6850      	ldrne	r0, [r2, #4]
 8002590:	1d00      	addne	r0, r0, #4
 8002592:	2004      	moveq	r0, #4
 8002594:	6800      	ldr	r0, [r0, #0]
 8002596:	2800      	cmp	r0, #0
 8002598:	bf14      	ite	ne
 800259a:	6806      	ldrne	r6, [r0, #0]
 800259c:	2600      	moveq	r6, #0
 800259e:	2901      	cmp	r1, #1
 80025a0:	bfc6      	itte	gt
 80025a2:	6850      	ldrgt	r0, [r2, #4]
 80025a4:	3010      	addgt	r0, #16
 80025a6:	2004      	movle	r0, #4
 80025a8:	6800      	ldr	r0, [r0, #0]
 80025aa:	2800      	cmp	r0, #0
 80025ac:	bf14      	ite	ne
 80025ae:	6807      	ldrne	r7, [r0, #0]
 80025b0:	2700      	moveq	r7, #0
 80025b2:	2902      	cmp	r1, #2
 80025b4:	bfc6      	itte	gt
 80025b6:	6850      	ldrgt	r0, [r2, #4]
 80025b8:	f100 031c 	addgt.w	r3, r0, #28
 80025bc:	2304      	movle	r3, #4
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	2800      	cmp	r0, #0
 80025c2:	bf14      	ite	ne
 80025c4:	f8d0 8000 	ldrne.w	r8, [r0]
 80025c8:	f04f 0800 	moveq.w	r8, #0
 80025cc:	2902      	cmp	r1, #2
 80025ce:	dd0c      	ble.n	80025ea <forward_conv2d_if32of32wf32_group_nl_pool+0x6c>
 80025d0:	6852      	ldr	r2, [r2, #4]
 80025d2:	f112 0118 	adds.w	r1, r2, #24
 80025d6:	d008      	beq.n	80025ea <forward_conv2d_if32of32wf32_group_nl_pool+0x6c>
 80025d8:	8b11      	ldrh	r1, [r2, #24]
 80025da:	2901      	cmp	r1, #1
 80025dc:	dd05      	ble.n	80025ea <forward_conv2d_if32of32wf32_group_nl_pool+0x6c>
 80025de:	69d1      	ldr	r1, [r2, #28]
 80025e0:	b119      	cbz	r1, 80025ea <forward_conv2d_if32of32wf32_group_nl_pool+0x6c>
 80025e2:	6849      	ldr	r1, [r1, #4]
 80025e4:	f101 0918 	add.w	r9, r1, #24
 80025e8:	e002      	b.n	80025f0 <forward_conv2d_if32of32wf32_group_nl_pool+0x72>
 80025ea:	2200      	movs	r2, #0
 80025ec:	f102 0918 	add.w	r9, r2, #24
 80025f0:	68f1      	ldr	r1, [r6, #12]
 80025f2:	2800      	cmp	r0, #0
 80025f4:	bf14      	ite	ne
 80025f6:	6884      	ldrne	r4, [r0, #8]
 80025f8:	2400      	moveq	r4, #0
 80025fa:	6848      	ldr	r0, [r1, #4]
 80025fc:	f8ad 00a8 	strh.w	r0, [sp, #168]	@ 0xa8
 8002600:	2c00      	cmp	r4, #0
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	6850      	ldr	r0, [r2, #4]
 8002606:	f8ad 00a6 	strh.w	r0, [sp, #166]	@ 0xa6
 800260a:	68d3      	ldr	r3, [r2, #12]
 800260c:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
 8002610:	6892      	ldr	r2, [r2, #8]
 8002612:	f8ad 20a2 	strh.w	r2, [sp, #162]	@ 0xa2
 8002616:	68cb      	ldr	r3, [r1, #12]
 8002618:	f8ad 308a 	strh.w	r3, [sp, #138]	@ 0x8a
 800261c:	6889      	ldr	r1, [r1, #8]
 800261e:	f8ad 1088 	strh.w	r1, [sp, #136]	@ 0x88
 8002622:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002624:	f8ad 2086 	strh.w	r2, [sp, #134]	@ 0x86
 8002628:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800262a:	f8ad 1084 	strh.w	r1, [sp, #132]	@ 0x84
 800262e:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 8002630:	6808      	ldr	r0, [r1, #0]
 8002632:	f8ad 0082 	strh.w	r0, [sp, #130]	@ 0x82
 8002636:	684a      	ldr	r2, [r1, #4]
 8002638:	f8ad 2080 	strh.w	r2, [sp, #128]	@ 0x80
 800263c:	688b      	ldr	r3, [r1, #8]
 800263e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002642:	68c9      	ldr	r1, [r1, #12]
 8002644:	f8ad 1000 	strh.w	r1, [sp]
 8002648:	69ea      	ldr	r2, [r5, #28]
 800264a:	f8ad 20a0 	strh.w	r2, [sp, #160]	@ 0xa0
 800264e:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8002650:	f8ad 107e 	strh.w	r1, [sp, #126]	@ 0x7e
 8002654:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002656:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 800265a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800265e:	6841      	ldr	r1, [r0, #4]
 8002660:	9127      	str	r1, [sp, #156]	@ 0x9c
 8002662:	6882      	ldr	r2, [r0, #8]
 8002664:	9226      	str	r2, [sp, #152]	@ 0x98
 8002666:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8002668:	f8ad 1096 	strh.w	r1, [sp, #150]	@ 0x96
 800266c:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 800266e:	f8ad 2094 	strh.w	r2, [sp, #148]	@ 0x94
 8002672:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8002674:	f8ad 1092 	strh.w	r1, [sp, #146]	@ 0x92
 8002678:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800267a:	680a      	ldr	r2, [r1, #0]
 800267c:	f8ad 2090 	strh.w	r2, [sp, #144]	@ 0x90
 8002680:	6849      	ldr	r1, [r1, #4]
 8002682:	f8ad 108e 	strh.w	r1, [sp, #142]	@ 0x8e
 8002686:	6a29      	ldr	r1, [r5, #32]
 8002688:	bf1e      	ittt	ne
 800268a:	69a0      	ldrne	r0, [r4, #24]
 800268c:	2800      	cmpne	r0, #0
 800268e:	4601      	movne	r1, r0
 8002690:	2900      	cmp	r1, #0
 8002692:	bf14      	ite	ne
 8002694:	f8d1 a008 	ldrne.w	sl, [r1, #8]
 8002698:	f04f 0a00 	moveq.w	sl, #0
 800269c:	b924      	cbnz	r4, 80026a8 <forward_conv2d_if32of32wf32_group_nl_pool+0x12a>
 800269e:	f04f 0b00 	mov.w	fp, #0
 80026a2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80026a4:	2001      	movs	r0, #1
 80026a6:	e00f      	b.n	80026c8 <forward_conv2d_if32of32wf32_group_nl_pool+0x14a>
 80026a8:	69a0      	ldr	r0, [r4, #24]
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d0f7      	beq.n	800269e <forward_conv2d_if32of32wf32_group_nl_pool+0x120>
 80026ae:	6841      	ldr	r1, [r0, #4]
 80026b0:	6800      	ldr	r0, [r0, #0]
 80026b2:	f009 ffd1 	bl	800c658 <ai_array_get_byte_size>
 80026b6:	4683      	mov	fp, r0
 80026b8:	69a0      	ldr	r0, [r4, #24]
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d0f1      	beq.n	80026a2 <forward_conv2d_if32of32wf32_group_nl_pool+0x124>
 80026be:	6841      	ldr	r1, [r0, #4]
 80026c0:	6800      	ldr	r0, [r0, #0]
 80026c2:	f009 ffc9 	bl	800c658 <ai_array_get_byte_size>
 80026c6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80026c8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80026ca:	9c27      	ldr	r4, [sp, #156]	@ 0x9c
 80026cc:	f8bd c082 	ldrh.w	ip, [sp, #130]	@ 0x82
 80026d0:	912d      	str	r1, [sp, #180]	@ 0xb4
 80026d2:	1e59      	subs	r1, r3, #1
 80026d4:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80026d6:	922c      	str	r2, [sp, #176]	@ 0xb0
 80026d8:	f8bd 207c 	ldrh.w	r2, [sp, #124]	@ 0x7c
 80026dc:	1e52      	subs	r2, r2, #1
 80026de:	fb02 3301 	mla	r3, r2, r1, r3
 80026e2:	f8bd 207e 	ldrh.w	r2, [sp, #126]	@ 0x7e
 80026e6:	1e61      	subs	r1, r4, #1
 80026e8:	1e52      	subs	r2, r2, #1
 80026ea:	fb02 4401 	mla	r4, r2, r1, r4
 80026ee:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 80026f0:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	@ 0x8a
 80026f4:	f8ad 108c 	strh.w	r1, [sp, #140]	@ 0x8c
 80026f8:	b219      	sxth	r1, r3
 80026fa:	69b6      	ldr	r6, [r6, #24]
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	1a52      	subs	r2, r2, r1
 8002700:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8002704:	4494      	add	ip, r2
 8002706:	f8bd 2084 	ldrh.w	r2, [sp, #132]	@ 0x84
 800270a:	4461      	add	r1, ip
 800270c:	fb91 fcf2 	sdiv	ip, r1, r2
 8002710:	f9bd 2088 	ldrsh.w	r2, [sp, #136]	@ 0x88
 8002714:	b221      	sxth	r1, r4
 8002716:	1a51      	subs	r1, r2, r1
 8002718:	f8bd 2080 	ldrh.w	r2, [sp, #128]	@ 0x80
 800271c:	440a      	add	r2, r1
 800271e:	f8bd 1000 	ldrh.w	r1, [sp]
 8002722:	1851      	adds	r1, r2, r1
 8002724:	f10c 0c01 	add.w	ip, ip, #1
 8002728:	f8bd 2086 	ldrh.w	r2, [sp, #134]	@ 0x86
 800272c:	fb91 fef2 	sdiv	lr, r1, r2
 8002730:	68b2      	ldr	r2, [r6, #8]
 8002732:	922b      	str	r2, [sp, #172]	@ 0xac
 8002734:	f10e 0e01 	add.w	lr, lr, #1
 8002738:	69ad      	ldr	r5, [r5, #24]
 800273a:	69be      	ldr	r6, [r7, #24]
 800273c:	882f      	ldrh	r7, [r5, #0]
 800273e:	68b1      	ldr	r1, [r6, #8]
 8002740:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8002744:	f8d9 6000 	ldr.w	r6, [r9]
 8002748:	6892      	ldr	r2, [r2, #8]
 800274a:	68b6      	ldr	r6, [r6, #8]
 800274c:	2f04      	cmp	r7, #4
 800274e:	bfa6      	itte	ge
 8002750:	686d      	ldrge	r5, [r5, #4]
 8002752:	3528      	addge	r5, #40	@ 0x28
 8002754:	2504      	movlt	r5, #4
 8002756:	b224      	sxth	r4, r4
 8002758:	682d      	ldr	r5, [r5, #0]
 800275a:	2d00      	cmp	r5, #0
 800275c:	bf19      	ittee	ne
 800275e:	682d      	ldrne	r5, [r5, #0]
 8002760:	3518      	addne	r5, #24
 8002762:	2700      	moveq	r7, #0
 8002764:	f107 0518 	addeq.w	r5, r7, #24
 8002768:	f9bd 7090 	ldrsh.w	r7, [sp, #144]	@ 0x90
 800276c:	971e      	str	r7, [sp, #120]	@ 0x78
 800276e:	f9bd 708e 	ldrsh.w	r7, [sp, #142]	@ 0x8e
 8002772:	971d      	str	r7, [sp, #116]	@ 0x74
 8002774:	f9bd 7092 	ldrsh.w	r7, [sp, #146]	@ 0x92
 8002778:	971c      	str	r7, [sp, #112]	@ 0x70
 800277a:	f9bd 7094 	ldrsh.w	r7, [sp, #148]	@ 0x94
 800277e:	971b      	str	r7, [sp, #108]	@ 0x6c
 8002780:	f9bd 708c 	ldrsh.w	r7, [sp, #140]	@ 0x8c
 8002784:	971a      	str	r7, [sp, #104]	@ 0x68
 8002786:	f9bd 7096 	ldrsh.w	r7, [sp, #150]	@ 0x96
 800278a:	9719      	str	r7, [sp, #100]	@ 0x64
 800278c:	9017      	str	r0, [sp, #92]	@ 0x5c
 800278e:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 8002792:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
 8002796:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8002798:	9f2c      	ldr	r7, [sp, #176]	@ 0xb0
 800279a:	9014      	str	r0, [sp, #80]	@ 0x50
 800279c:	9718      	str	r7, [sp, #96]	@ 0x60
 800279e:	fa0f f08c 	sxth.w	r0, ip
 80027a2:	9013      	str	r0, [sp, #76]	@ 0x4c
 80027a4:	fa0f f08e 	sxth.w	r0, lr
 80027a8:	9012      	str	r0, [sp, #72]	@ 0x48
 80027aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80027ac:	940e      	str	r4, [sp, #56]	@ 0x38
 80027ae:	f8bd 007c 	ldrh.w	r0, [sp, #124]	@ 0x7c
 80027b2:	f8bd 3086 	ldrh.w	r3, [sp, #134]	@ 0x86
 80027b6:	f9bd 70a0 	ldrsh.w	r7, [sp, #160]	@ 0xa0
 80027ba:	9010      	str	r0, [sp, #64]	@ 0x40
 80027bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80027be:	9711      	str	r7, [sp, #68]	@ 0x44
 80027c0:	f8bd 0084 	ldrh.w	r0, [sp, #132]	@ 0x84
 80027c4:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 80027c8:	f8bd 707e 	ldrh.w	r7, [sp, #126]	@ 0x7e
 80027cc:	900c      	str	r0, [sp, #48]	@ 0x30
 80027ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80027d0:	970f      	str	r7, [sp, #60]	@ 0x3c
 80027d2:	f8bd 0082 	ldrh.w	r0, [sp, #130]	@ 0x82
 80027d6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80027d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80027da:	b21b      	sxth	r3, r3
 80027dc:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80027de:	9307      	str	r3, [sp, #28]
 80027e0:	b200      	sxth	r0, r0
 80027e2:	9008      	str	r0, [sp, #32]
 80027e4:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	@ 0xa2
 80027e8:	f9bd 00a4 	ldrsh.w	r0, [sp, #164]	@ 0xa4
 80027ec:	9006      	str	r0, [sp, #24]
 80027ee:	9305      	str	r3, [sp, #20]
 80027f0:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	@ 0x8a
 80027f4:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	@ 0x88
 80027f8:	9004      	str	r0, [sp, #16]
 80027fa:	9303      	str	r3, [sp, #12]
 80027fc:	f9bd 00a6 	ldrsh.w	r0, [sp, #166]	@ 0xa6
 8002800:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 8002804:	9002      	str	r0, [sp, #8]
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	4633      	mov	r3, r6
 800280a:	682c      	ldr	r4, [r5, #0]
 800280c:	68a0      	ldr	r0, [r4, #8]
 800280e:	9000      	str	r0, [sp, #0]
 8002810:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8002812:	f004 fab7 	bl	8006d84 <forward_lite_conv2d_if32of32wf32_group_pool>
 8002816:	b02f      	add	sp, #188	@ 0xbc
 8002818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800281c <forward_dense>:
 800281c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002820:	b087      	sub	sp, #28
 8002822:	6987      	ldr	r7, [r0, #24]
 8002824:	8838      	ldrh	r0, [r7, #0]
 8002826:	2800      	cmp	r0, #0
 8002828:	bf1a      	itte	ne
 800282a:	6879      	ldrne	r1, [r7, #4]
 800282c:	1d09      	addne	r1, r1, #4
 800282e:	2104      	moveq	r1, #4
 8002830:	6809      	ldr	r1, [r1, #0]
 8002832:	2900      	cmp	r1, #0
 8002834:	bf14      	ite	ne
 8002836:	680b      	ldrne	r3, [r1, #0]
 8002838:	2300      	moveq	r3, #0
 800283a:	2802      	cmp	r0, #2
 800283c:	bfa6      	itte	ge
 800283e:	6879      	ldrge	r1, [r7, #4]
 8002840:	3110      	addge	r1, #16
 8002842:	2104      	movlt	r1, #4
 8002844:	6809      	ldr	r1, [r1, #0]
 8002846:	2900      	cmp	r1, #0
 8002848:	bf14      	ite	ne
 800284a:	f8d1 c000 	ldrne.w	ip, [r1]
 800284e:	f04f 0c00 	moveq.w	ip, #0
 8002852:	2802      	cmp	r0, #2
 8002854:	bfc6      	itte	gt
 8002856:	6879      	ldrgt	r1, [r7, #4]
 8002858:	311c      	addgt	r1, #28
 800285a:	2104      	movle	r1, #4
 800285c:	6809      	ldr	r1, [r1, #0]
 800285e:	2900      	cmp	r1, #0
 8002860:	bf19      	ittee	ne
 8002862:	6809      	ldrne	r1, [r1, #0]
 8002864:	f101 0818 	addne.w	r8, r1, #24
 8002868:	2200      	moveq	r2, #0
 800286a:	f102 0818 	addeq.w	r8, r2, #24
 800286e:	2802      	cmp	r0, #2
 8002870:	dd0a      	ble.n	8002888 <forward_dense+0x6c>
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	f112 0118 	adds.w	r1, r2, #24
 8002878:	d006      	beq.n	8002888 <forward_dense+0x6c>
 800287a:	8b11      	ldrh	r1, [r2, #24]
 800287c:	2902      	cmp	r1, #2
 800287e:	db03      	blt.n	8002888 <forward_dense+0x6c>
 8002880:	69d1      	ldr	r1, [r2, #28]
 8002882:	b109      	cbz	r1, 8002888 <forward_dense+0x6c>
 8002884:	684a      	ldr	r2, [r1, #4]
 8002886:	e000      	b.n	800288a <forward_dense+0x6e>
 8002888:	2200      	movs	r2, #0
 800288a:	68d9      	ldr	r1, [r3, #12]
 800288c:	684c      	ldr	r4, [r1, #4]
 800288e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8002892:	684d      	ldr	r5, [r1, #4]
 8002894:	688e      	ldr	r6, [r1, #8]
 8002896:	68c9      	ldr	r1, [r1, #12]
 8002898:	f8d8 e000 	ldr.w	lr, [r8]
 800289c:	434e      	muls	r6, r1
 800289e:	2804      	cmp	r0, #4
 80028a0:	bfa6      	itte	ge
 80028a2:	6878      	ldrge	r0, [r7, #4]
 80028a4:	3028      	addge	r0, #40	@ 0x28
 80028a6:	2004      	movlt	r0, #4
 80028a8:	6800      	ldr	r0, [r0, #0]
 80028aa:	f8de 1000 	ldr.w	r1, [lr]
 80028ae:	2800      	cmp	r0, #0
 80028b0:	bf1c      	itt	ne
 80028b2:	6800      	ldrne	r0, [r0, #0]
 80028b4:	2800      	cmpne	r0, #0
 80028b6:	f021 487e 	bic.w	r8, r1, #4261412864	@ 0xfe000000
 80028ba:	bf1a      	itte	ne
 80028bc:	6980      	ldrne	r0, [r0, #24]
 80028be:	f8d0 9008 	ldrne.w	r9, [r0, #8]
 80028c2:	f04f 0900 	moveq.w	r9, #0
 80028c6:	2a00      	cmp	r2, #0
 80028c8:	bf1a      	itte	ne
 80028ca:	6992      	ldrne	r2, [r2, #24]
 80028cc:	6897      	ldrne	r7, [r2, #8]
 80028ce:	2700      	moveq	r7, #0
 80028d0:	f8dc 0018 	ldr.w	r0, [ip, #24]
 80028d4:	6999      	ldr	r1, [r3, #24]
 80028d6:	f8de 2008 	ldr.w	r2, [lr, #8]
 80028da:	f8de 300c 	ldr.w	r3, [lr, #12]
 80028de:	f8df e504 	ldr.w	lr, [pc, #1284]	@ 8002de4 <.text_15>
 80028e2:	6880      	ldr	r0, [r0, #8]
 80028e4:	6889      	ldr	r1, [r1, #8]
 80028e6:	45f0      	cmp	r8, lr
 80028e8:	d00a      	beq.n	8002900 <forward_dense+0xe4>
 80028ea:	f8df e4fc 	ldr.w	lr, [pc, #1276]	@ 8002de8 <.text_16>
 80028ee:	45f0      	cmp	r8, lr
 80028f0:	d01e      	beq.n	8002930 <forward_dense+0x114>
 80028f2:	f8df e4f8 	ldr.w	lr, [pc, #1272]	@ 8002dec <.text_17>
 80028f6:	45f0      	cmp	r8, lr
 80028f8:	d00f      	beq.n	800291a <forward_dense+0xfe>
 80028fa:	b007      	add	sp, #28
 80028fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002900:	9000      	str	r0, [sp, #0]
 8002902:	9101      	str	r1, [sp, #4]
 8002904:	9202      	str	r2, [sp, #8]
 8002906:	9703      	str	r7, [sp, #12]
 8002908:	9404      	str	r4, [sp, #16]
 800290a:	9505      	str	r5, [sp, #20]
 800290c:	9606      	str	r6, [sp, #24]
 800290e:	4668      	mov	r0, sp
 8002910:	f004 fdf8 	bl	8007504 <forward_lite_dense_if32of32wf32>
 8002914:	b007      	add	sp, #28
 8002916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800291a:	9604      	str	r6, [sp, #16]
 800291c:	9503      	str	r5, [sp, #12]
 800291e:	9402      	str	r4, [sp, #8]
 8002920:	9701      	str	r7, [sp, #4]
 8002922:	f8cd 9000 	str.w	r9, [sp]
 8002926:	f004 ff77 	bl	8007818 <forward_lite_dense_if32of32wf32_lut4>
 800292a:	b007      	add	sp, #28
 800292c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002930:	9604      	str	r6, [sp, #16]
 8002932:	9503      	str	r5, [sp, #12]
 8002934:	9402      	str	r4, [sp, #8]
 8002936:	9701      	str	r7, [sp, #4]
 8002938:	f8cd 9000 	str.w	r9, [sp]
 800293c:	f005 f896 	bl	8007a6c <forward_lite_dense_if32of32wf32_lut8>
 8002940:	b007      	add	sp, #28
 8002942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002946 <st_mat_init_f32>:
 8002946:	8001      	strh	r1, [r0, #0]
 8002948:	8042      	strh	r2, [r0, #2]
 800294a:	6043      	str	r3, [r0, #4]
 800294c:	4770      	bx	lr
	...

08002950 <st_mat_gemm_f32>:
 8002950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002954:	4604      	mov	r4, r0
 8002956:	4618      	mov	r0, r3
 8002958:	460d      	mov	r5, r1
 800295a:	b089      	sub	sp, #36	@ 0x24
 800295c:	6863      	ldr	r3, [r4, #4]
 800295e:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 8002962:	9303      	str	r3, [sp, #12]
 8002964:	4611      	mov	r1, r2
 8002966:	f04f 0a00 	mov.w	sl, #0
 800296a:	684a      	ldr	r2, [r1, #4]
 800296c:	9200      	str	r2, [sp, #0]
 800296e:	f8b1 c000 	ldrh.w	ip, [r1]
 8002972:	884f      	ldrh	r7, [r1, #2]
 8002974:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002978:	f8b4 e000 	ldrh.w	lr, [r4]
 800297c:	8866      	ldrh	r6, [r4, #2]
 800297e:	f8b8 1000 	ldrh.w	r1, [r8]
 8002982:	f8b5 b000 	ldrh.w	fp, [r5]
 8002986:	886a      	ldrh	r2, [r5, #2]
 8002988:	f8b8 8002 	ldrh.w	r8, [r8, #2]
 800298c:	686c      	ldr	r4, [r5, #4]
 800298e:	9406      	str	r4, [sp, #24]
 8002990:	9405      	str	r4, [sp, #20]
 8002992:	b245      	sxtb	r5, r0
 8002994:	2d00      	cmp	r5, #0
 8002996:	bf0c      	ite	eq
 8002998:	4674      	moveq	r4, lr
 800299a:	4634      	movne	r4, r6
 800299c:	2f01      	cmp	r7, #1
 800299e:	bf0c      	ite	eq
 80029a0:	46d1      	moveq	r9, sl
 80029a2:	f04f 0904 	movne.w	r9, #4
 80029a6:	f1bc 0f01 	cmp.w	ip, #1
 80029aa:	d104      	bne.n	80029b6 <st_mat_gemm_f32+0x66>
 80029ac:	2f01      	cmp	r7, #1
 80029ae:	d006      	beq.n	80029be <st_mat_gemm_f32+0x6e>
 80029b0:	f1c8 0500 	rsb	r5, r8, #0
 80029b4:	e004      	b.n	80029c0 <st_mat_gemm_f32+0x70>
 80029b6:	2f01      	cmp	r7, #1
 80029b8:	bf08      	it	eq
 80029ba:	2501      	moveq	r5, #1
 80029bc:	d000      	beq.n	80029c0 <st_mat_gemm_f32+0x70>
 80029be:	2500      	movs	r5, #0
 80029c0:	b22d      	sxth	r5, r5
 80029c2:	9504      	str	r5, [sp, #16]
 80029c4:	b245      	sxtb	r5, r0
 80029c6:	2d00      	cmp	r5, #0
 80029c8:	bf0c      	ite	eq
 80029ca:	4675      	moveq	r5, lr
 80029cc:	4635      	movne	r5, r6
 80029ce:	428d      	cmp	r5, r1
 80029d0:	d114      	bne.n	80029fc <st_mat_gemm_f32+0xac>
 80029d2:	f99d 5048 	ldrsb.w	r5, [sp, #72]	@ 0x48
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	bf0c      	ite	eq
 80029da:	9201      	streq	r2, [sp, #4]
 80029dc:	f8cd b004 	strne.w	fp, [sp, #4]
 80029e0:	9f01      	ldr	r7, [sp, #4]
 80029e2:	4547      	cmp	r7, r8
 80029e4:	d10a      	bne.n	80029fc <st_mat_gemm_f32+0xac>
 80029e6:	b247      	sxtb	r7, r0
 80029e8:	2f00      	cmp	r7, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	46b4      	moveq	ip, r6
 80029ee:	46f4      	movne	ip, lr
 80029f0:	2d00      	cmp	r5, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	465f      	moveq	r7, fp
 80029f6:	4617      	movne	r7, r2
 80029f8:	45bc      	cmp	ip, r7
 80029fa:	d020      	beq.n	8002a3e <st_mat_gemm_f32+0xee>
 80029fc:	fb01 f108 	mul.w	r1, r1, r8
 8002a00:	2900      	cmp	r1, #0
 8002a02:	f06f 0202 	mvn.w	r2, #2
 8002a06:	f340 8088 	ble.w	8002b1a <st_mat_gemm_f32+0x1ca>
 8002a0a:	f011 0003 	ands.w	r0, r1, #3
 8002a0e:	d003      	beq.n	8002a18 <st_mat_gemm_f32+0xc8>
 8002a10:	1e40      	subs	r0, r0, #1
 8002a12:	f843 ab04 	str.w	sl, [r3], #4
 8002a16:	d1fb      	bne.n	8002a10 <st_mat_gemm_f32+0xc0>
 8002a18:	ea5f 0191 	movs.w	r1, r1, lsr #2
 8002a1c:	f000 807d 	beq.w	8002b1a <st_mat_gemm_f32+0x1ca>
 8002a20:	f8c3 a000 	str.w	sl, [r3]
 8002a24:	f8c3 a004 	str.w	sl, [r3, #4]
 8002a28:	f8c3 a008 	str.w	sl, [r3, #8]
 8002a2c:	f8c3 a00c 	str.w	sl, [r3, #12]
 8002a30:	3310      	adds	r3, #16
 8002a32:	1e49      	subs	r1, r1, #1
 8002a34:	d1f4      	bne.n	8002a20 <st_mat_gemm_f32+0xd0>
 8002a36:	4610      	mov	r0, r2
 8002a38:	b009      	add	sp, #36	@ 0x24
 8002a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a3e:	f8dd 8000 	ldr.w	r8, [sp]
 8002a42:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002a46:	9308      	str	r3, [sp, #32]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	f8ad a002 	strh.w	sl, [sp, #2]
 8002a4e:	f8ad 4000 	strh.w	r4, [sp]
 8002a52:	9b08      	ldr	r3, [sp, #32]
 8002a54:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8002a58:	f8cd c00c 	str.w	ip, [sp, #12]
 8002a5c:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8002a60:	9a01      	ldr	r2, [sp, #4]
 8002a62:	9b06      	ldr	r3, [sp, #24]
 8002a64:	f8ad e008 	strh.w	lr, [sp, #8]
 8002a68:	9607      	str	r6, [sp, #28]
 8002a6a:	00b4      	lsls	r4, r6, #2
 8002a6c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002a70:	b246      	sxtb	r6, r0
 8002a72:	2e00      	cmp	r6, #0
 8002a74:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8002a78:	bf0c      	ite	eq
 8002a7a:	9e07      	ldreq	r6, [sp, #28]
 8002a7c:	f8bd 6008 	ldrhne.w	r6, [sp, #8]
 8002a80:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 8002b24 <.text_11>
 8002a84:	b2b7      	uxth	r7, r6
 8002a86:	b1a7      	cbz	r7, 8002ab2 <st_mat_gemm_f32+0x162>
 8002a88:	b247      	sxtb	r7, r0
 8002a8a:	2f00      	cmp	r7, #0
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2704      	moveq	r7, #4
 8002a90:	4627      	movne	r7, r4
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	edde 1a00 	vldr	s3, [lr]
 8002a98:	ed93 2a00 	vldr	s4, [r3]
 8002a9c:	44be      	add	lr, r7
 8002a9e:	bf0c      	ite	eq
 8002aa0:	008f      	lsleq	r7, r1, #2
 8002aa2:	2704      	movne	r7, #4
 8002aa4:	19db      	adds	r3, r3, r7
 8002aa6:	1e76      	subs	r6, r6, #1
 8002aa8:	b2b7      	uxth	r7, r6
 8002aaa:	2f00      	cmp	r7, #0
 8002aac:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002ab0:	d1ea      	bne.n	8002a88 <st_mat_gemm_f32+0x138>
 8002ab2:	ee20 1a01 	vmul.f32	s2, s0, s2
 8002ab6:	edd8 1a00 	vldr	s3, [r8]
 8002aba:	1e52      	subs	r2, r2, #1
 8002abc:	ee00 1aa1 	vmla.f32	s2, s1, s3
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	002b      	movs	r3, r5
 8002ac4:	ed8a 1a00 	vstr	s2, [sl]
 8002ac8:	bf0e      	itee	eq
 8002aca:	1a8b      	subeq	r3, r1, r2
 8002acc:	ebab 0302 	subne.w	r3, fp, r2
 8002ad0:	434b      	mulne	r3, r1
 8002ad2:	2a00      	cmp	r2, #0
 8002ad4:	f10a 0a04 	add.w	sl, sl, #4
 8002ad8:	44c8      	add	r8, r9
 8002ada:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8002ade:	d1c7      	bne.n	8002a70 <st_mat_gemm_f32+0x120>
 8002ae0:	f8bd a002 	ldrh.w	sl, [sp, #2]
 8002ae4:	9b01      	ldr	r3, [sp, #4]
 8002ae6:	9e07      	ldr	r6, [sp, #28]
 8002ae8:	9a03      	ldr	r2, [sp, #12]
 8002aea:	f8bd e008 	ldrh.w	lr, [sp, #8]
 8002aee:	f8cd c014 	str.w	ip, [sp, #20]
 8002af2:	4453      	add	r3, sl
 8002af4:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002af8:	b243      	sxtb	r3, r0
 8002afa:	b103      	cbz	r3, 8002afe <st_mat_gemm_f32+0x1ae>
 8002afc:	2404      	movs	r4, #4
 8002afe:	eb02 0c04 	add.w	ip, r2, r4
 8002b02:	9a04      	ldr	r2, [sp, #16]
 8002b04:	f8bd 4000 	ldrh.w	r4, [sp]
 8002b08:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8002b0c:	1e62      	subs	r2, r4, #1
 8002b0e:	f8ad 2000 	strh.w	r2, [sp]
 8002b12:	f8bd 2000 	ldrh.w	r2, [sp]
 8002b16:	2a00      	cmp	r2, #0
 8002b18:	d19b      	bne.n	8002a52 <st_mat_gemm_f32+0x102>
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	b009      	add	sp, #36	@ 0x24
 8002b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002b24 <.text_11>:
 8002b24:	00000000 	.word	0x00000000

08002b28 <forward_gemm>:
 8002b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	b08b      	sub	sp, #44	@ 0x2c
 8002b2e:	6996      	ldr	r6, [r2, #24]
 8002b30:	8831      	ldrh	r1, [r6, #0]
 8002b32:	2900      	cmp	r1, #0
 8002b34:	bf19      	ittee	ne
 8002b36:	6870      	ldrne	r0, [r6, #4]
 8002b38:	f100 0c04 	addne.w	ip, r0, #4
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	f103 0c04 	addeq.w	ip, r3, #4
 8002b42:	f8dc 0000 	ldr.w	r0, [ip]
 8002b46:	2800      	cmp	r0, #0
 8002b48:	bf14      	ite	ne
 8002b4a:	6805      	ldrne	r5, [r0, #0]
 8002b4c:	2500      	moveq	r5, #0
 8002b4e:	2900      	cmp	r1, #0
 8002b50:	bf1d      	ittte	ne
 8002b52:	6873      	ldrne	r3, [r6, #4]
 8002b54:	2b00      	cmpne	r3, #0
 8002b56:	f8b3 e000 	ldrhne.w	lr, [r3]
 8002b5a:	f04f 0e00 	moveq.w	lr, #0
 8002b5e:	2902      	cmp	r1, #2
 8002b60:	bfa6      	itte	ge
 8002b62:	6873      	ldrge	r3, [r6, #4]
 8002b64:	3310      	addge	r3, #16
 8002b66:	2304      	movlt	r3, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf14      	ite	ne
 8002b6e:	681f      	ldrne	r7, [r3, #0]
 8002b70:	2700      	moveq	r7, #0
 8002b72:	2300      	movs	r3, #0
 8002b74:	2400      	movs	r4, #0
 8002b76:	f1be 0f03 	cmp.w	lr, #3
 8002b7a:	d105      	bne.n	8002b88 <forward_gemm+0x60>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d020      	beq.n	8002bc2 <forward_gemm+0x9a>
 8002b80:	6843      	ldr	r3, [r0, #4]
 8002b82:	d01e      	beq.n	8002bc2 <forward_gemm+0x9a>
 8002b84:	6884      	ldr	r4, [r0, #8]
 8002b86:	e01c      	b.n	8002bc2 <forward_gemm+0x9a>
 8002b88:	f1be 0f02 	cmp.w	lr, #2
 8002b8c:	d10a      	bne.n	8002ba4 <forward_gemm+0x7c>
 8002b8e:	b100      	cbz	r0, 8002b92 <forward_gemm+0x6a>
 8002b90:	6843      	ldr	r3, [r0, #4]
 8002b92:	2902      	cmp	r1, #2
 8002b94:	bfc6      	itte	gt
 8002b96:	6870      	ldrgt	r0, [r6, #4]
 8002b98:	301c      	addgt	r0, #28
 8002b9a:	2004      	movle	r0, #4
 8002b9c:	6800      	ldr	r0, [r0, #0]
 8002b9e:	b180      	cbz	r0, 8002bc2 <forward_gemm+0x9a>
 8002ba0:	6804      	ldr	r4, [r0, #0]
 8002ba2:	e00e      	b.n	8002bc2 <forward_gemm+0x9a>
 8002ba4:	f1be 0f01 	cmp.w	lr, #1
 8002ba8:	d10b      	bne.n	8002bc2 <forward_gemm+0x9a>
 8002baa:	2902      	cmp	r1, #2
 8002bac:	bfc6      	itte	gt
 8002bae:	6870      	ldrgt	r0, [r6, #4]
 8002bb0:	f100 011c 	addgt.w	r1, r0, #28
 8002bb4:	2104      	movle	r1, #4
 8002bb6:	6808      	ldr	r0, [r1, #0]
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	d002      	beq.n	8002bc2 <forward_gemm+0x9a>
 8002bbc:	6803      	ldr	r3, [r0, #0]
 8002bbe:	bf18      	it	ne
 8002bc0:	6844      	ldrne	r4, [r0, #4]
 8002bc2:	68e0      	ldr	r0, [r4, #12]
 8002bc4:	68c1      	ldr	r1, [r0, #12]
 8002bc6:	6846      	ldr	r6, [r0, #4]
 8002bc8:	69b8      	ldr	r0, [r7, #24]
 8002bca:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	6847      	ldr	r7, [r0, #4]
 8002bd2:	68c0      	ldr	r0, [r0, #12]
 8002bd4:	f8ad 0020 	strh.w	r0, [sp, #32]
 8002bd8:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8002bdc:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 8002be0:	69a8      	ldr	r0, [r5, #24]
 8002be2:	6887      	ldr	r7, [r0, #8]
 8002be4:	68e8      	ldr	r0, [r5, #12]
 8002be6:	6845      	ldr	r5, [r0, #4]
 8002be8:	68c0      	ldr	r0, [r0, #12]
 8002bea:	f8ad 0018 	strh.w	r0, [sp, #24]
 8002bee:	f8ad 501a 	strh.w	r5, [sp, #26]
 8002bf2:	9707      	str	r7, [sp, #28]
 8002bf4:	6998      	ldr	r0, [r3, #24]
 8002bf6:	6885      	ldr	r5, [r0, #8]
 8002bf8:	68d8      	ldr	r0, [r3, #12]
 8002bfa:	6843      	ldr	r3, [r0, #4]
 8002bfc:	68c7      	ldr	r7, [r0, #12]
 8002bfe:	f8ad 7010 	strh.w	r7, [sp, #16]
 8002c02:	f8ad 3012 	strh.w	r3, [sp, #18]
 8002c06:	9505      	str	r5, [sp, #20]
 8002c08:	69a0      	ldr	r0, [r4, #24]
 8002c0a:	6883      	ldr	r3, [r0, #8]
 8002c0c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8002c10:	f8ad 600a 	strh.w	r6, [sp, #10]
 8002c14:	a908      	add	r1, sp, #32
 8002c16:	9303      	str	r3, [sp, #12]
 8002c18:	9101      	str	r1, [sp, #4]
 8002c1a:	a904      	add	r1, sp, #16
 8002c1c:	f992 0025 	ldrsb.w	r0, [r2, #37]	@ 0x25
 8002c20:	9000      	str	r0, [sp, #0]
 8002c22:	a806      	add	r0, sp, #24
 8002c24:	f992 3024 	ldrsb.w	r3, [r2, #36]	@ 0x24
 8002c28:	edd2 0a08 	vldr	s1, [r2, #32]
 8002c2c:	ed92 0a07 	vldr	s0, [r2, #28]
 8002c30:	aa02      	add	r2, sp, #8
 8002c32:	f7ff fe8d 	bl	8002950 <st_mat_gemm_f32>
 8002c36:	b00b      	add	sp, #44	@ 0x2c
 8002c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c3c <forward_matmul>:
 8002c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c40:	b08b      	sub	sp, #44	@ 0x2c
 8002c42:	6984      	ldr	r4, [r0, #24]
 8002c44:	8822      	ldrh	r2, [r4, #0]
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	bf1a      	itte	ne
 8002c4a:	6860      	ldrne	r0, [r4, #4]
 8002c4c:	1d03      	addne	r3, r0, #4
 8002c4e:	2304      	moveq	r3, #4
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	2900      	cmp	r1, #0
 8002c54:	bf14      	ite	ne
 8002c56:	6808      	ldrne	r0, [r1, #0]
 8002c58:	2000      	moveq	r0, #0
 8002c5a:	2900      	cmp	r1, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 8002c62:	f04f 0b00 	moveq.w	fp, #0
 8002c66:	2a02      	cmp	r2, #2
 8002c68:	bfa6      	itte	ge
 8002c6a:	6861      	ldrge	r1, [r4, #4]
 8002c6c:	3110      	addge	r1, #16
 8002c6e:	2104      	movlt	r1, #4
 8002c70:	6809      	ldr	r1, [r1, #0]
 8002c72:	2900      	cmp	r1, #0
 8002c74:	bf14      	ite	ne
 8002c76:	680b      	ldrne	r3, [r1, #0]
 8002c78:	2300      	moveq	r3, #0
 8002c7a:	f1bb 0f00 	cmp.w	fp, #0
 8002c7e:	d10c      	bne.n	8002c9a <forward_matmul+0x5e>
 8002c80:	2a02      	cmp	r2, #2
 8002c82:	bfc6      	itte	gt
 8002c84:	6861      	ldrgt	r1, [r4, #4]
 8002c86:	311c      	addgt	r1, #28
 8002c88:	2104      	movle	r1, #4
 8002c8a:	6809      	ldr	r1, [r1, #0]
 8002c8c:	b109      	cbz	r1, 8002c92 <forward_matmul+0x56>
 8002c8e:	f8d1 b000 	ldr.w	fp, [r1]
 8002c92:	f8db 100c 	ldr.w	r1, [fp, #12]
 8002c96:	680a      	ldr	r2, [r1, #0]
 8002c98:	e002      	b.n	8002ca0 <forward_matmul+0x64>
 8002c9a:	f8db 100c 	ldr.w	r1, [fp, #12]
 8002c9e:	684a      	ldr	r2, [r1, #4]
 8002ca0:	6899      	ldr	r1, [r3, #8]
 8002ca2:	68c4      	ldr	r4, [r0, #12]
 8002ca4:	f8db 900c 	ldr.w	r9, [fp, #12]
 8002ca8:	68dd      	ldr	r5, [r3, #12]
 8002caa:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8002cae:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8002cb2:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002cb6:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002cba:	68ef      	ldr	r7, [r5, #12]
 8002cbc:	0a09      	lsrs	r1, r1, #8
 8002cbe:	2904      	cmp	r1, #4
 8002cc0:	68a1      	ldr	r1, [r4, #8]
 8002cc2:	bfcc      	ite	gt
 8002cc4:	692e      	ldrgt	r6, [r5, #16]
 8002cc6:	2601      	movle	r6, #1
 8002cc8:	9706      	str	r7, [sp, #24]
 8002cca:	fb01 f50e 	mul.w	r5, r1, lr
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	68e7      	ldr	r7, [r4, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	434f      	muls	r7, r1
 8002cd6:	fb0e f707 	mul.w	r7, lr, r7
 8002cda:	970a      	str	r7, [sp, #40]	@ 0x28
 8002cdc:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002ce0:	fb08 f404 	mul.w	r4, r8, r4
 8002ce4:	4354      	muls	r4, r2
 8002ce6:	2e00      	cmp	r6, #0
 8002ce8:	9409      	str	r4, [sp, #36]	@ 0x24
 8002cea:	fb08 f802 	mul.w	r8, r8, r2
 8002cee:	d074      	beq.n	8002dda <forward_matmul+0x19e>
 8002cf0:	2400      	movs	r4, #0
 8002cf2:	46a1      	mov	r9, r4
 8002cf4:	9602      	str	r6, [sp, #8]
 8002cf6:	9e06      	ldr	r6, [sp, #24]
 8002cf8:	2e00      	cmp	r6, #0
 8002cfa:	d064      	beq.n	8002dc6 <forward_matmul+0x18a>
 8002cfc:	9f06      	ldr	r7, [sp, #24]
 8002cfe:	9701      	str	r7, [sp, #4]
 8002d00:	f8cd c00c 	str.w	ip, [sp, #12]
 8002d04:	2600      	movs	r6, #0
 8002d06:	9505      	str	r5, [sp, #20]
 8002d08:	9d03      	ldr	r5, [sp, #12]
 8002d0a:	2d00      	cmp	r5, #0
 8002d0c:	d051      	beq.n	8002db2 <forward_matmul+0x176>
 8002d0e:	9500      	str	r5, [sp, #0]
 8002d10:	f8cd a010 	str.w	sl, [sp, #16]
 8002d14:	9207      	str	r2, [sp, #28]
 8002d16:	f04f 0a00 	mov.w	sl, #0
 8002d1a:	9a04      	ldr	r2, [sp, #16]
 8002d1c:	2a00      	cmp	r2, #0
 8002d1e:	d03f      	beq.n	8002da0 <forward_matmul+0x164>
 8002d20:	f04f 0c00 	mov.w	ip, #0
 8002d24:	9008      	str	r0, [sp, #32]
 8002d26:	9808      	ldr	r0, [sp, #32]
 8002d28:	6985      	ldr	r5, [r0, #24]
 8002d2a:	68a8      	ldr	r0, [r5, #8]
 8002d2c:	f8db 7018 	ldr.w	r7, [fp, #24]
 8002d30:	4420      	add	r0, r4
 8002d32:	4430      	add	r0, r6
 8002d34:	eb00 050c 	add.w	r5, r0, ip
 8002d38:	68b8      	ldr	r0, [r7, #8]
 8002d3a:	4448      	add	r0, r9
 8002d3c:	4450      	add	r0, sl
 8002d3e:	eb00 070c 	add.w	r7, r0, ip
 8002d42:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002de0 <.text_14>
 8002d46:	b319      	cbz	r1, 8002d90 <forward_matmul+0x154>
 8002d48:	07c8      	lsls	r0, r1, #31
 8002d4a:	d509      	bpl.n	8002d60 <forward_matmul+0x124>
 8002d4c:	edd5 0a00 	vldr	s1, [r5]
 8002d50:	ed97 1a00 	vldr	s2, [r7]
 8002d54:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002d58:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002d5c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002d60:	0848      	lsrs	r0, r1, #1
 8002d62:	d015      	beq.n	8002d90 <forward_matmul+0x154>
 8002d64:	edd5 0a00 	vldr	s1, [r5]
 8002d68:	ed97 1a00 	vldr	s2, [r7]
 8002d6c:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002d70:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002d74:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002d78:	edd5 0a00 	vldr	s1, [r5]
 8002d7c:	ed97 1a00 	vldr	s2, [r7]
 8002d80:	1e40      	subs	r0, r0, #1
 8002d82:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002d86:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002d8a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002d8e:	d1e9      	bne.n	8002d64 <forward_matmul+0x128>
 8002d90:	ed83 0a00 	vstr	s0, [r3]
 8002d94:	1d1b      	adds	r3, r3, #4
 8002d96:	1e52      	subs	r2, r2, #1
 8002d98:	f10c 0c04 	add.w	ip, ip, #4
 8002d9c:	d1c3      	bne.n	8002d26 <forward_matmul+0xea>
 8002d9e:	9808      	ldr	r0, [sp, #32]
 8002da0:	9d00      	ldr	r5, [sp, #0]
 8002da2:	9a07      	ldr	r2, [sp, #28]
 8002da4:	1e6d      	subs	r5, r5, #1
 8002da6:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8002daa:	9500      	str	r5, [sp, #0]
 8002dac:	d1b5      	bne.n	8002d1a <forward_matmul+0xde>
 8002dae:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002db2:	9f01      	ldr	r7, [sp, #4]
 8002db4:	9d05      	ldr	r5, [sp, #20]
 8002db6:	1e7f      	subs	r7, r7, #1
 8002db8:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8002dbc:	9701      	str	r7, [sp, #4]
 8002dbe:	d1a3      	bne.n	8002d08 <forward_matmul+0xcc>
 8002dc0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002dc4:	9d05      	ldr	r5, [sp, #20]
 8002dc6:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8002dc8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8002dca:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 8002dce:	9e02      	ldr	r6, [sp, #8]
 8002dd0:	1e76      	subs	r6, r6, #1
 8002dd2:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8002dd6:	9602      	str	r6, [sp, #8]
 8002dd8:	d18d      	bne.n	8002cf6 <forward_matmul+0xba>
 8002dda:	b00b      	add	sp, #44	@ 0x2c
 8002ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002de0 <.text_14>:
 8002de0:	00000000 	.word	0x00000000

08002de4 <.text_15>:
 8002de4:	01821040 	.word	0x01821040

08002de8 <.text_16>:
 8002de8:	01d01040 	.word	0x01d01040

08002dec <.text_17>:
 8002dec:	01e81040 	.word	0x01e81040

08002df0 <ai_shape_get_size>:
 8002df0:	b470      	push	{r4, r5, r6}
 8002df2:	4601      	mov	r1, r0
 8002df4:	f04f 0201 	mov.w	r2, #1
 8002df8:	680b      	ldr	r3, [r1, #0]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	d01e      	beq.n	8002e3c <ai_shape_get_size+0x4c>
 8002dfe:	684c      	ldr	r4, [r1, #4]
 8002e00:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8002e04:	4618      	mov	r0, r3
 8002e06:	1f0d      	subs	r5, r1, #4
 8002e08:	f010 0103 	ands.w	r1, r0, #3
 8002e0c:	f000 8006 	beq.w	8002e1c <ai_shape_get_size+0x2c>
 8002e10:	f855 6904 	ldr.w	r6, [r5], #-4
 8002e14:	1e5b      	subs	r3, r3, #1
 8002e16:	4372      	muls	r2, r6
 8002e18:	1e49      	subs	r1, r1, #1
 8002e1a:	d1f9      	bne.n	8002e10 <ai_shape_get_size+0x20>
 8002e1c:	0880      	lsrs	r0, r0, #2
 8002e1e:	d00d      	beq.n	8002e3c <ai_shape_get_size+0x4c>
 8002e20:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8002e24:	3910      	subs	r1, #16
 8002e26:	68cb      	ldr	r3, [r1, #12]
 8002e28:	688c      	ldr	r4, [r1, #8]
 8002e2a:	684d      	ldr	r5, [r1, #4]
 8002e2c:	f851 6910 	ldr.w	r6, [r1], #-16
 8002e30:	4363      	muls	r3, r4
 8002e32:	436b      	muls	r3, r5
 8002e34:	4373      	muls	r3, r6
 8002e36:	435a      	muls	r2, r3
 8002e38:	1e40      	subs	r0, r0, #1
 8002e3a:	d1f4      	bne.n	8002e26 <ai_shape_get_size+0x36>
 8002e3c:	bc70      	pop	{r4, r5, r6}
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4770      	bx	lr
	...

08002e44 <_forward_lite_nl_relu_thresholded_if32of32>:
 8002e44:	ed93 0a00 	vldr	s0, [r3]
 8002e48:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002e4c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002e50:	1f1b      	subs	r3, r3, #4
 8002e52:	1f00      	subs	r0, r0, #4
 8002e54:	428b      	cmp	r3, r1
 8002e56:	d30e      	bcc.n	8002e76 <_forward_lite_nl_relu_thresholded_if32of32+0x32>
 8002e58:	edd3 0a00 	vldr	s1, [r3]
 8002e5c:	eeb4 0a60 	vcmp.f32	s0, s1
 8002e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e64:	bfa8      	it	ge
 8002e66:	eddf 0a04 	vldrge	s1, [pc, #16]	@ 8002e78 <.text_4>
 8002e6a:	edc0 0a00 	vstr	s1, [r0]
 8002e6e:	1f1b      	subs	r3, r3, #4
 8002e70:	1f00      	subs	r0, r0, #4
 8002e72:	428b      	cmp	r3, r1
 8002e74:	d2f0      	bcs.n	8002e58 <_forward_lite_nl_relu_thresholded_if32of32+0x14>
 8002e76:	4770      	bx	lr

08002e78 <.text_4>:
 8002e78:	00000000 	.word	0x00000000

08002e7c <_forward_lite_nl_hardmax_if32of32>:
 8002e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e80:	b081      	sub	sp, #4
 8002e82:	4681      	mov	r9, r0
 8002e84:	ed2d 8b02 	vpush	{d8}
 8002e88:	685f      	ldr	r7, [r3, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	4378      	muls	r0, r7
 8002e8e:	2300      	movs	r3, #0
 8002e90:	2800      	cmp	r0, #0
 8002e92:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8002e96:	d068      	beq.n	8002f6a <_forward_lite_nl_hardmax_if32of32+0xee>
 8002e98:	460c      	mov	r4, r1
 8002e9a:	4680      	mov	r8, r0
 8002e9c:	1c58      	adds	r0, r3, #1
 8002e9e:	18fe      	adds	r6, r7, r3
 8002ea0:	42b0      	cmp	r0, r6
 8002ea2:	461d      	mov	r5, r3
 8002ea4:	d254      	bcs.n	8002f50 <_forward_lite_nl_hardmax_if32of32+0xd4>
 8002ea6:	1e7a      	subs	r2, r7, #1
 8002ea8:	f012 0103 	ands.w	r1, r2, #3
 8002eac:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 8002eb0:	f000 8011 	beq.w	8002ed6 <_forward_lite_nl_hardmax_if32of32+0x5a>
 8002eb4:	eb04 0e85 	add.w	lr, r4, r5, lsl #2
 8002eb8:	eddc 0a00 	vldr	s1, [ip]
 8002ebc:	ed9e 0a00 	vldr	s0, [lr]
 8002ec0:	eeb4 0a60 	vcmp.f32	s0, s1
 8002ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec8:	bf48      	it	mi
 8002eca:	4605      	movmi	r5, r0
 8002ecc:	1c40      	adds	r0, r0, #1
 8002ece:	1e49      	subs	r1, r1, #1
 8002ed0:	f10c 0c04 	add.w	ip, ip, #4
 8002ed4:	d1ee      	bne.n	8002eb4 <_forward_lite_nl_hardmax_if32of32+0x38>
 8002ed6:	0892      	lsrs	r2, r2, #2
 8002ed8:	d03a      	beq.n	8002f50 <_forward_lite_nl_hardmax_if32of32+0xd4>
 8002eda:	4601      	mov	r1, r0
 8002edc:	ea4f 0002 	mov.w	r0, r2
 8002ee0:	eb04 0285 	add.w	r2, r4, r5, lsl #2
 8002ee4:	ed9c 0a00 	vldr	s0, [ip]
 8002ee8:	edd2 0a00 	vldr	s1, [r2]
 8002eec:	eef4 0a40 	vcmp.f32	s1, s0
 8002ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef4:	bf48      	it	mi
 8002ef6:	460d      	movmi	r5, r1
 8002ef8:	eb04 0285 	add.w	r2, r4, r5, lsl #2
 8002efc:	eddc 0a01 	vldr	s1, [ip, #4]
 8002f00:	ed92 0a00 	vldr	s0, [r2]
 8002f04:	1c49      	adds	r1, r1, #1
 8002f06:	eeb4 0a60 	vcmp.f32	s0, s1
 8002f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0e:	bf48      	it	mi
 8002f10:	460d      	movmi	r5, r1
 8002f12:	eb04 0285 	add.w	r2, r4, r5, lsl #2
 8002f16:	ed9c 0a02 	vldr	s0, [ip, #8]
 8002f1a:	edd2 0a00 	vldr	s1, [r2]
 8002f1e:	1c49      	adds	r1, r1, #1
 8002f20:	eef4 0a40 	vcmp.f32	s1, s0
 8002f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f28:	bf48      	it	mi
 8002f2a:	460d      	movmi	r5, r1
 8002f2c:	eb04 0285 	add.w	r2, r4, r5, lsl #2
 8002f30:	eddc 0a03 	vldr	s1, [ip, #12]
 8002f34:	ed92 0a00 	vldr	s0, [r2]
 8002f38:	1c49      	adds	r1, r1, #1
 8002f3a:	eeb4 0a60 	vcmp.f32	s0, s1
 8002f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f42:	bf48      	it	mi
 8002f44:	460d      	movmi	r5, r1
 8002f46:	1c49      	adds	r1, r1, #1
 8002f48:	1e40      	subs	r0, r0, #1
 8002f4a:	f10c 0c10 	add.w	ip, ip, #16
 8002f4e:	d1c7      	bne.n	8002ee0 <_forward_lite_nl_hardmax_if32of32+0x64>
 8002f50:	00ba      	lsls	r2, r7, #2
 8002f52:	eb09 0183 	add.w	r1, r9, r3, lsl #2
 8002f56:	2000      	movs	r0, #0
 8002f58:	f008 fec4 	bl	800bce4 <st_int8_fill>
 8002f5c:	eb09 0185 	add.w	r1, r9, r5, lsl #2
 8002f60:	4633      	mov	r3, r6
 8002f62:	4543      	cmp	r3, r8
 8002f64:	ed81 8a00 	vstr	s16, [r1]
 8002f68:	d398      	bcc.n	8002e9c <_forward_lite_nl_hardmax_if32of32+0x20>
 8002f6a:	ecbd 8b02 	vpop	{d8}
 8002f6e:	b001      	add	sp, #4
 8002f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002f74 <nl_func_acos_array_f32>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	6983      	ldr	r3, [r0, #24]
 8002f78:	6988      	ldr	r0, [r1, #24]
 8002f7a:	6884      	ldr	r4, [r0, #8]
 8002f7c:	6899      	ldr	r1, [r3, #8]
 8002f7e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8002f82:	1f05      	subs	r5, r0, #4
 8002f84:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8002f88:	1f06      	subs	r6, r0, #4
 8002f8a:	42a5      	cmp	r5, r4
 8002f8c:	f0c0 800a 	bcc.w	8002fa4 <nl_func_acos_array_f32+0x30>
 8002f90:	ed95 0a00 	vldr	s0, [r5]
 8002f94:	f014 f888 	bl	80170a8 <acosf>
 8002f98:	ed86 0a00 	vstr	s0, [r6]
 8002f9c:	1f2d      	subs	r5, r5, #4
 8002f9e:	1f36      	subs	r6, r6, #4
 8002fa0:	42a5      	cmp	r5, r4
 8002fa2:	d2f5      	bcs.n	8002f90 <nl_func_acos_array_f32+0x1c>
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fa8 <forward_acos>:
 8002fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002faa:	b081      	sub	sp, #4
 8002fac:	6982      	ldr	r2, [r0, #24]
 8002fae:	8811      	ldrh	r1, [r2, #0]
 8002fb0:	2900      	cmp	r1, #0
 8002fb2:	bf1a      	itte	ne
 8002fb4:	6850      	ldrne	r0, [r2, #4]
 8002fb6:	1d00      	addne	r0, r0, #4
 8002fb8:	2004      	moveq	r0, #4
 8002fba:	f04f 0401 	mov.w	r4, #1
 8002fbe:	6800      	ldr	r0, [r0, #0]
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	bf14      	ite	ne
 8002fc4:	6803      	ldrne	r3, [r0, #0]
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	2902      	cmp	r1, #2
 8002fca:	bfa6      	itte	ge
 8002fcc:	6850      	ldrge	r0, [r2, #4]
 8002fce:	3010      	addge	r0, #16
 8002fd0:	2004      	movlt	r0, #4
 8002fd2:	6800      	ldr	r0, [r0, #0]
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	bf19      	ittee	ne
 8002fd8:	6800      	ldrne	r0, [r0, #0]
 8002fda:	f100 0518 	addne.w	r5, r0, #24
 8002fde:	2100      	moveq	r1, #0
 8002fe0:	f101 0518 	addeq.w	r5, r1, #24
 8002fe4:	f103 0108 	add.w	r1, r3, #8
 8002fe8:	680a      	ldr	r2, [r1, #0]
 8002fea:	0a12      	lsrs	r2, r2, #8
 8002fec:	d01e      	beq.n	800302c <forward_acos+0x84>
 8002fee:	684e      	ldr	r6, [r1, #4]
 8002ff0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	1f0f      	subs	r7, r1, #4
 8002ff8:	f010 0103 	ands.w	r1, r0, #3
 8002ffc:	d006      	beq.n	800300c <forward_acos+0x64>
 8002ffe:	1e52      	subs	r2, r2, #1
 8003000:	f857 c904 	ldr.w	ip, [r7], #-4
 8003004:	1e49      	subs	r1, r1, #1
 8003006:	fb0c f404 	mul.w	r4, ip, r4
 800300a:	d1f8      	bne.n	8002ffe <forward_acos+0x56>
 800300c:	0880      	lsrs	r0, r0, #2
 800300e:	d00d      	beq.n	800302c <forward_acos+0x84>
 8003010:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003014:	3910      	subs	r1, #16
 8003016:	68ca      	ldr	r2, [r1, #12]
 8003018:	688e      	ldr	r6, [r1, #8]
 800301a:	684f      	ldr	r7, [r1, #4]
 800301c:	4372      	muls	r2, r6
 800301e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003022:	437a      	muls	r2, r7
 8003024:	4372      	muls	r2, r6
 8003026:	4354      	muls	r4, r2
 8003028:	1e40      	subs	r0, r0, #1
 800302a:	d1f4      	bne.n	8003016 <forward_acos+0x6e>
 800302c:	6998      	ldr	r0, [r3, #24]
 800302e:	6829      	ldr	r1, [r5, #0]
 8003030:	6885      	ldr	r5, [r0, #8]
 8003032:	6889      	ldr	r1, [r1, #8]
 8003034:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8003038:	1f06      	subs	r6, r0, #4
 800303a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800303e:	1f04      	subs	r4, r0, #4
 8003040:	42ae      	cmp	r6, r5
 8003042:	d309      	bcc.n	8003058 <forward_acos+0xb0>
 8003044:	ed96 0a00 	vldr	s0, [r6]
 8003048:	f014 f82e 	bl	80170a8 <acosf>
 800304c:	ed84 0a00 	vstr	s0, [r4]
 8003050:	1f36      	subs	r6, r6, #4
 8003052:	1f24      	subs	r4, r4, #4
 8003054:	42ae      	cmp	r6, r5
 8003056:	d2f5      	bcs.n	8003044 <forward_acos+0x9c>
 8003058:	b001      	add	sp, #4
 800305a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800305c <nl_func_acosh_array_f32>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	6983      	ldr	r3, [r0, #24]
 8003060:	6988      	ldr	r0, [r1, #24]
 8003062:	6884      	ldr	r4, [r0, #8]
 8003064:	6899      	ldr	r1, [r3, #8]
 8003066:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 800306a:	1f05      	subs	r5, r0, #4
 800306c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8003070:	1f06      	subs	r6, r0, #4
 8003072:	42a5      	cmp	r5, r4
 8003074:	f0c0 800a 	bcc.w	800308c <nl_func_acosh_array_f32+0x30>
 8003078:	ed95 0a00 	vldr	s0, [r5]
 800307c:	f014 f840 	bl	8017100 <acoshf>
 8003080:	ed86 0a00 	vstr	s0, [r6]
 8003084:	1f2d      	subs	r5, r5, #4
 8003086:	1f36      	subs	r6, r6, #4
 8003088:	42a5      	cmp	r5, r4
 800308a:	d2f5      	bcs.n	8003078 <nl_func_acosh_array_f32+0x1c>
 800308c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003090 <forward_acosh>:
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b081      	sub	sp, #4
 8003094:	6982      	ldr	r2, [r0, #24]
 8003096:	8811      	ldrh	r1, [r2, #0]
 8003098:	2900      	cmp	r1, #0
 800309a:	bf1a      	itte	ne
 800309c:	6850      	ldrne	r0, [r2, #4]
 800309e:	1d00      	addne	r0, r0, #4
 80030a0:	2004      	moveq	r0, #4
 80030a2:	f04f 0401 	mov.w	r4, #1
 80030a6:	6800      	ldr	r0, [r0, #0]
 80030a8:	2800      	cmp	r0, #0
 80030aa:	bf14      	ite	ne
 80030ac:	6803      	ldrne	r3, [r0, #0]
 80030ae:	2300      	moveq	r3, #0
 80030b0:	2902      	cmp	r1, #2
 80030b2:	bfa6      	itte	ge
 80030b4:	6850      	ldrge	r0, [r2, #4]
 80030b6:	3010      	addge	r0, #16
 80030b8:	2004      	movlt	r0, #4
 80030ba:	6800      	ldr	r0, [r0, #0]
 80030bc:	2800      	cmp	r0, #0
 80030be:	bf19      	ittee	ne
 80030c0:	6800      	ldrne	r0, [r0, #0]
 80030c2:	f100 0518 	addne.w	r5, r0, #24
 80030c6:	2100      	moveq	r1, #0
 80030c8:	f101 0518 	addeq.w	r5, r1, #24
 80030cc:	f103 0108 	add.w	r1, r3, #8
 80030d0:	680a      	ldr	r2, [r1, #0]
 80030d2:	0a12      	lsrs	r2, r2, #8
 80030d4:	d01e      	beq.n	8003114 <forward_acosh+0x84>
 80030d6:	684e      	ldr	r6, [r1, #4]
 80030d8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030dc:	4610      	mov	r0, r2
 80030de:	1f0f      	subs	r7, r1, #4
 80030e0:	f010 0103 	ands.w	r1, r0, #3
 80030e4:	d006      	beq.n	80030f4 <forward_acosh+0x64>
 80030e6:	1e52      	subs	r2, r2, #1
 80030e8:	f857 c904 	ldr.w	ip, [r7], #-4
 80030ec:	1e49      	subs	r1, r1, #1
 80030ee:	fb0c f404 	mul.w	r4, ip, r4
 80030f2:	d1f8      	bne.n	80030e6 <forward_acosh+0x56>
 80030f4:	0880      	lsrs	r0, r0, #2
 80030f6:	d00d      	beq.n	8003114 <forward_acosh+0x84>
 80030f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030fc:	3910      	subs	r1, #16
 80030fe:	68ca      	ldr	r2, [r1, #12]
 8003100:	688e      	ldr	r6, [r1, #8]
 8003102:	684f      	ldr	r7, [r1, #4]
 8003104:	4372      	muls	r2, r6
 8003106:	f851 6910 	ldr.w	r6, [r1], #-16
 800310a:	437a      	muls	r2, r7
 800310c:	4372      	muls	r2, r6
 800310e:	4354      	muls	r4, r2
 8003110:	1e40      	subs	r0, r0, #1
 8003112:	d1f4      	bne.n	80030fe <forward_acosh+0x6e>
 8003114:	6998      	ldr	r0, [r3, #24]
 8003116:	6829      	ldr	r1, [r5, #0]
 8003118:	6885      	ldr	r5, [r0, #8]
 800311a:	6889      	ldr	r1, [r1, #8]
 800311c:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8003120:	1f06      	subs	r6, r0, #4
 8003122:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003126:	1f04      	subs	r4, r0, #4
 8003128:	42ae      	cmp	r6, r5
 800312a:	d309      	bcc.n	8003140 <forward_acosh+0xb0>
 800312c:	ed96 0a00 	vldr	s0, [r6]
 8003130:	f013 ffe6 	bl	8017100 <acoshf>
 8003134:	ed84 0a00 	vstr	s0, [r4]
 8003138:	1f36      	subs	r6, r6, #4
 800313a:	1f24      	subs	r4, r4, #4
 800313c:	42ae      	cmp	r6, r5
 800313e:	d2f5      	bcs.n	800312c <forward_acosh+0x9c>
 8003140:	b001      	add	sp, #4
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003144 <nl_func_asin_array_f32>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	6983      	ldr	r3, [r0, #24]
 8003148:	6988      	ldr	r0, [r1, #24]
 800314a:	6884      	ldr	r4, [r0, #8]
 800314c:	6899      	ldr	r1, [r3, #8]
 800314e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8003152:	1f05      	subs	r5, r0, #4
 8003154:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8003158:	1f06      	subs	r6, r0, #4
 800315a:	42a5      	cmp	r5, r4
 800315c:	f0c0 800a 	bcc.w	8003174 <nl_func_asin_array_f32+0x30>
 8003160:	ed95 0a00 	vldr	s0, [r5]
 8003164:	f013 ffec 	bl	8017140 <asinf>
 8003168:	ed86 0a00 	vstr	s0, [r6]
 800316c:	1f2d      	subs	r5, r5, #4
 800316e:	1f36      	subs	r6, r6, #4
 8003170:	42a5      	cmp	r5, r4
 8003172:	d2f5      	bcs.n	8003160 <nl_func_asin_array_f32+0x1c>
 8003174:	bd70      	pop	{r4, r5, r6, pc}
	...

08003178 <forward_asin>:
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317a:	b081      	sub	sp, #4
 800317c:	6982      	ldr	r2, [r0, #24]
 800317e:	8811      	ldrh	r1, [r2, #0]
 8003180:	2900      	cmp	r1, #0
 8003182:	bf1a      	itte	ne
 8003184:	6850      	ldrne	r0, [r2, #4]
 8003186:	1d00      	addne	r0, r0, #4
 8003188:	2004      	moveq	r0, #4
 800318a:	f04f 0401 	mov.w	r4, #1
 800318e:	6800      	ldr	r0, [r0, #0]
 8003190:	2800      	cmp	r0, #0
 8003192:	bf14      	ite	ne
 8003194:	6803      	ldrne	r3, [r0, #0]
 8003196:	2300      	moveq	r3, #0
 8003198:	2902      	cmp	r1, #2
 800319a:	bfa6      	itte	ge
 800319c:	6850      	ldrge	r0, [r2, #4]
 800319e:	3010      	addge	r0, #16
 80031a0:	2004      	movlt	r0, #4
 80031a2:	6800      	ldr	r0, [r0, #0]
 80031a4:	2800      	cmp	r0, #0
 80031a6:	bf19      	ittee	ne
 80031a8:	6800      	ldrne	r0, [r0, #0]
 80031aa:	f100 0518 	addne.w	r5, r0, #24
 80031ae:	2100      	moveq	r1, #0
 80031b0:	f101 0518 	addeq.w	r5, r1, #24
 80031b4:	f103 0108 	add.w	r1, r3, #8
 80031b8:	680a      	ldr	r2, [r1, #0]
 80031ba:	0a12      	lsrs	r2, r2, #8
 80031bc:	d01e      	beq.n	80031fc <forward_asin+0x84>
 80031be:	684e      	ldr	r6, [r1, #4]
 80031c0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031c4:	4610      	mov	r0, r2
 80031c6:	1f0f      	subs	r7, r1, #4
 80031c8:	f010 0103 	ands.w	r1, r0, #3
 80031cc:	d006      	beq.n	80031dc <forward_asin+0x64>
 80031ce:	1e52      	subs	r2, r2, #1
 80031d0:	f857 c904 	ldr.w	ip, [r7], #-4
 80031d4:	1e49      	subs	r1, r1, #1
 80031d6:	fb0c f404 	mul.w	r4, ip, r4
 80031da:	d1f8      	bne.n	80031ce <forward_asin+0x56>
 80031dc:	0880      	lsrs	r0, r0, #2
 80031de:	d00d      	beq.n	80031fc <forward_asin+0x84>
 80031e0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031e4:	3910      	subs	r1, #16
 80031e6:	68ca      	ldr	r2, [r1, #12]
 80031e8:	688e      	ldr	r6, [r1, #8]
 80031ea:	684f      	ldr	r7, [r1, #4]
 80031ec:	4372      	muls	r2, r6
 80031ee:	f851 6910 	ldr.w	r6, [r1], #-16
 80031f2:	437a      	muls	r2, r7
 80031f4:	4372      	muls	r2, r6
 80031f6:	4354      	muls	r4, r2
 80031f8:	1e40      	subs	r0, r0, #1
 80031fa:	d1f4      	bne.n	80031e6 <forward_asin+0x6e>
 80031fc:	6998      	ldr	r0, [r3, #24]
 80031fe:	6829      	ldr	r1, [r5, #0]
 8003200:	6885      	ldr	r5, [r0, #8]
 8003202:	6889      	ldr	r1, [r1, #8]
 8003204:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8003208:	1f06      	subs	r6, r0, #4
 800320a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800320e:	1f04      	subs	r4, r0, #4
 8003210:	42ae      	cmp	r6, r5
 8003212:	d309      	bcc.n	8003228 <forward_asin+0xb0>
 8003214:	ed96 0a00 	vldr	s0, [r6]
 8003218:	f013 ff92 	bl	8017140 <asinf>
 800321c:	ed84 0a00 	vstr	s0, [r4]
 8003220:	1f36      	subs	r6, r6, #4
 8003222:	1f24      	subs	r4, r4, #4
 8003224:	42ae      	cmp	r6, r5
 8003226:	d2f5      	bcs.n	8003214 <forward_asin+0x9c>
 8003228:	b001      	add	sp, #4
 800322a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800322c <nl_func_asinh_array_f32>:
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	6983      	ldr	r3, [r0, #24]
 8003230:	6988      	ldr	r0, [r1, #24]
 8003232:	6884      	ldr	r4, [r0, #8]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 800323a:	1f05      	subs	r5, r0, #4
 800323c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8003240:	1f06      	subs	r6, r0, #4
 8003242:	42a5      	cmp	r5, r4
 8003244:	f0c0 800a 	bcc.w	800325c <nl_func_asinh_array_f32+0x30>
 8003248:	ed95 0a00 	vldr	s0, [r5]
 800324c:	f014 f902 	bl	8017454 <asinhf>
 8003250:	ed86 0a00 	vstr	s0, [r6]
 8003254:	1f2d      	subs	r5, r5, #4
 8003256:	1f36      	subs	r6, r6, #4
 8003258:	42a5      	cmp	r5, r4
 800325a:	d2f5      	bcs.n	8003248 <nl_func_asinh_array_f32+0x1c>
 800325c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003260 <forward_asinh>:
 8003260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003262:	b081      	sub	sp, #4
 8003264:	6982      	ldr	r2, [r0, #24]
 8003266:	8811      	ldrh	r1, [r2, #0]
 8003268:	2900      	cmp	r1, #0
 800326a:	bf1a      	itte	ne
 800326c:	6850      	ldrne	r0, [r2, #4]
 800326e:	1d00      	addne	r0, r0, #4
 8003270:	2004      	moveq	r0, #4
 8003272:	f04f 0401 	mov.w	r4, #1
 8003276:	6800      	ldr	r0, [r0, #0]
 8003278:	2800      	cmp	r0, #0
 800327a:	bf14      	ite	ne
 800327c:	6803      	ldrne	r3, [r0, #0]
 800327e:	2300      	moveq	r3, #0
 8003280:	2902      	cmp	r1, #2
 8003282:	bfa6      	itte	ge
 8003284:	6850      	ldrge	r0, [r2, #4]
 8003286:	3010      	addge	r0, #16
 8003288:	2004      	movlt	r0, #4
 800328a:	6800      	ldr	r0, [r0, #0]
 800328c:	2800      	cmp	r0, #0
 800328e:	bf19      	ittee	ne
 8003290:	6800      	ldrne	r0, [r0, #0]
 8003292:	f100 0518 	addne.w	r5, r0, #24
 8003296:	2100      	moveq	r1, #0
 8003298:	f101 0518 	addeq.w	r5, r1, #24
 800329c:	f103 0108 	add.w	r1, r3, #8
 80032a0:	680a      	ldr	r2, [r1, #0]
 80032a2:	0a12      	lsrs	r2, r2, #8
 80032a4:	d01e      	beq.n	80032e4 <forward_asinh+0x84>
 80032a6:	684e      	ldr	r6, [r1, #4]
 80032a8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80032ac:	4610      	mov	r0, r2
 80032ae:	1f0f      	subs	r7, r1, #4
 80032b0:	f010 0103 	ands.w	r1, r0, #3
 80032b4:	d006      	beq.n	80032c4 <forward_asinh+0x64>
 80032b6:	1e52      	subs	r2, r2, #1
 80032b8:	f857 c904 	ldr.w	ip, [r7], #-4
 80032bc:	1e49      	subs	r1, r1, #1
 80032be:	fb0c f404 	mul.w	r4, ip, r4
 80032c2:	d1f8      	bne.n	80032b6 <forward_asinh+0x56>
 80032c4:	0880      	lsrs	r0, r0, #2
 80032c6:	d00d      	beq.n	80032e4 <forward_asinh+0x84>
 80032c8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80032cc:	3910      	subs	r1, #16
 80032ce:	68ca      	ldr	r2, [r1, #12]
 80032d0:	688e      	ldr	r6, [r1, #8]
 80032d2:	684f      	ldr	r7, [r1, #4]
 80032d4:	4372      	muls	r2, r6
 80032d6:	f851 6910 	ldr.w	r6, [r1], #-16
 80032da:	437a      	muls	r2, r7
 80032dc:	4372      	muls	r2, r6
 80032de:	4354      	muls	r4, r2
 80032e0:	1e40      	subs	r0, r0, #1
 80032e2:	d1f4      	bne.n	80032ce <forward_asinh+0x6e>
 80032e4:	6998      	ldr	r0, [r3, #24]
 80032e6:	6829      	ldr	r1, [r5, #0]
 80032e8:	6885      	ldr	r5, [r0, #8]
 80032ea:	6889      	ldr	r1, [r1, #8]
 80032ec:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 80032f0:	1f06      	subs	r6, r0, #4
 80032f2:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80032f6:	1f04      	subs	r4, r0, #4
 80032f8:	42ae      	cmp	r6, r5
 80032fa:	d309      	bcc.n	8003310 <forward_asinh+0xb0>
 80032fc:	ed96 0a00 	vldr	s0, [r6]
 8003300:	f014 f8a8 	bl	8017454 <asinhf>
 8003304:	ed84 0a00 	vstr	s0, [r4]
 8003308:	1f36      	subs	r6, r6, #4
 800330a:	1f24      	subs	r4, r4, #4
 800330c:	42ae      	cmp	r6, r5
 800330e:	d2f5      	bcs.n	80032fc <forward_asinh+0x9c>
 8003310:	b001      	add	sp, #4
 8003312:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003314 <nl_func_atan_array_f32>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	6983      	ldr	r3, [r0, #24]
 8003318:	6988      	ldr	r0, [r1, #24]
 800331a:	6884      	ldr	r4, [r0, #8]
 800331c:	6899      	ldr	r1, [r3, #8]
 800331e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8003322:	1f05      	subs	r5, r0, #4
 8003324:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8003328:	1f06      	subs	r6, r0, #4
 800332a:	42a5      	cmp	r5, r4
 800332c:	f0c0 800a 	bcc.w	8003344 <nl_func_atan_array_f32+0x30>
 8003330:	ed95 0a00 	vldr	s0, [r5]
 8003334:	f014 f8f6 	bl	8017524 <atanf>
 8003338:	ed86 0a00 	vstr	s0, [r6]
 800333c:	1f2d      	subs	r5, r5, #4
 800333e:	1f36      	subs	r6, r6, #4
 8003340:	42a5      	cmp	r5, r4
 8003342:	d2f5      	bcs.n	8003330 <nl_func_atan_array_f32+0x1c>
 8003344:	bd70      	pop	{r4, r5, r6, pc}
	...

08003348 <forward_atan>:
 8003348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800334a:	b081      	sub	sp, #4
 800334c:	6982      	ldr	r2, [r0, #24]
 800334e:	8811      	ldrh	r1, [r2, #0]
 8003350:	2900      	cmp	r1, #0
 8003352:	bf1a      	itte	ne
 8003354:	6850      	ldrne	r0, [r2, #4]
 8003356:	1d00      	addne	r0, r0, #4
 8003358:	2004      	moveq	r0, #4
 800335a:	f04f 0401 	mov.w	r4, #1
 800335e:	6800      	ldr	r0, [r0, #0]
 8003360:	2800      	cmp	r0, #0
 8003362:	bf14      	ite	ne
 8003364:	6803      	ldrne	r3, [r0, #0]
 8003366:	2300      	moveq	r3, #0
 8003368:	2902      	cmp	r1, #2
 800336a:	bfa6      	itte	ge
 800336c:	6850      	ldrge	r0, [r2, #4]
 800336e:	3010      	addge	r0, #16
 8003370:	2004      	movlt	r0, #4
 8003372:	6800      	ldr	r0, [r0, #0]
 8003374:	2800      	cmp	r0, #0
 8003376:	bf19      	ittee	ne
 8003378:	6800      	ldrne	r0, [r0, #0]
 800337a:	f100 0518 	addne.w	r5, r0, #24
 800337e:	2100      	moveq	r1, #0
 8003380:	f101 0518 	addeq.w	r5, r1, #24
 8003384:	f103 0108 	add.w	r1, r3, #8
 8003388:	680a      	ldr	r2, [r1, #0]
 800338a:	0a12      	lsrs	r2, r2, #8
 800338c:	d01e      	beq.n	80033cc <forward_atan+0x84>
 800338e:	684e      	ldr	r6, [r1, #4]
 8003390:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003394:	4610      	mov	r0, r2
 8003396:	1f0f      	subs	r7, r1, #4
 8003398:	f010 0103 	ands.w	r1, r0, #3
 800339c:	d006      	beq.n	80033ac <forward_atan+0x64>
 800339e:	1e52      	subs	r2, r2, #1
 80033a0:	f857 c904 	ldr.w	ip, [r7], #-4
 80033a4:	1e49      	subs	r1, r1, #1
 80033a6:	fb0c f404 	mul.w	r4, ip, r4
 80033aa:	d1f8      	bne.n	800339e <forward_atan+0x56>
 80033ac:	0880      	lsrs	r0, r0, #2
 80033ae:	d00d      	beq.n	80033cc <forward_atan+0x84>
 80033b0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80033b4:	3910      	subs	r1, #16
 80033b6:	68ca      	ldr	r2, [r1, #12]
 80033b8:	688e      	ldr	r6, [r1, #8]
 80033ba:	684f      	ldr	r7, [r1, #4]
 80033bc:	4372      	muls	r2, r6
 80033be:	f851 6910 	ldr.w	r6, [r1], #-16
 80033c2:	437a      	muls	r2, r7
 80033c4:	4372      	muls	r2, r6
 80033c6:	4354      	muls	r4, r2
 80033c8:	1e40      	subs	r0, r0, #1
 80033ca:	d1f4      	bne.n	80033b6 <forward_atan+0x6e>
 80033cc:	6998      	ldr	r0, [r3, #24]
 80033ce:	6829      	ldr	r1, [r5, #0]
 80033d0:	6885      	ldr	r5, [r0, #8]
 80033d2:	6889      	ldr	r1, [r1, #8]
 80033d4:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 80033d8:	1f06      	subs	r6, r0, #4
 80033da:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80033de:	1f04      	subs	r4, r0, #4
 80033e0:	42ae      	cmp	r6, r5
 80033e2:	d309      	bcc.n	80033f8 <forward_atan+0xb0>
 80033e4:	ed96 0a00 	vldr	s0, [r6]
 80033e8:	f014 f89c 	bl	8017524 <atanf>
 80033ec:	ed84 0a00 	vstr	s0, [r4]
 80033f0:	1f36      	subs	r6, r6, #4
 80033f2:	1f24      	subs	r4, r4, #4
 80033f4:	42ae      	cmp	r6, r5
 80033f6:	d2f5      	bcs.n	80033e4 <forward_atan+0x9c>
 80033f8:	b001      	add	sp, #4
 80033fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033fc <nl_func_atanh_array_f32>:
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	6983      	ldr	r3, [r0, #24]
 8003400:	6988      	ldr	r0, [r1, #24]
 8003402:	6884      	ldr	r4, [r0, #8]
 8003404:	6899      	ldr	r1, [r3, #8]
 8003406:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 800340a:	1f05      	subs	r5, r0, #4
 800340c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8003410:	1f06      	subs	r6, r0, #4
 8003412:	42a5      	cmp	r5, r4
 8003414:	f0c0 800a 	bcc.w	800342c <nl_func_atanh_array_f32+0x30>
 8003418:	ed95 0a00 	vldr	s0, [r5]
 800341c:	f013 febc 	bl	8017198 <atanhf>
 8003420:	ed86 0a00 	vstr	s0, [r6]
 8003424:	1f2d      	subs	r5, r5, #4
 8003426:	1f36      	subs	r6, r6, #4
 8003428:	42a5      	cmp	r5, r4
 800342a:	d2f5      	bcs.n	8003418 <nl_func_atanh_array_f32+0x1c>
 800342c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003430 <forward_atanh>:
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b081      	sub	sp, #4
 8003434:	6982      	ldr	r2, [r0, #24]
 8003436:	8811      	ldrh	r1, [r2, #0]
 8003438:	2900      	cmp	r1, #0
 800343a:	bf1a      	itte	ne
 800343c:	6850      	ldrne	r0, [r2, #4]
 800343e:	1d00      	addne	r0, r0, #4
 8003440:	2004      	moveq	r0, #4
 8003442:	f04f 0401 	mov.w	r4, #1
 8003446:	6800      	ldr	r0, [r0, #0]
 8003448:	2800      	cmp	r0, #0
 800344a:	bf14      	ite	ne
 800344c:	6803      	ldrne	r3, [r0, #0]
 800344e:	2300      	moveq	r3, #0
 8003450:	2902      	cmp	r1, #2
 8003452:	bfa6      	itte	ge
 8003454:	6850      	ldrge	r0, [r2, #4]
 8003456:	3010      	addge	r0, #16
 8003458:	2004      	movlt	r0, #4
 800345a:	6800      	ldr	r0, [r0, #0]
 800345c:	2800      	cmp	r0, #0
 800345e:	bf19      	ittee	ne
 8003460:	6800      	ldrne	r0, [r0, #0]
 8003462:	f100 0518 	addne.w	r5, r0, #24
 8003466:	2100      	moveq	r1, #0
 8003468:	f101 0518 	addeq.w	r5, r1, #24
 800346c:	f103 0108 	add.w	r1, r3, #8
 8003470:	680a      	ldr	r2, [r1, #0]
 8003472:	0a12      	lsrs	r2, r2, #8
 8003474:	d01e      	beq.n	80034b4 <forward_atanh+0x84>
 8003476:	684e      	ldr	r6, [r1, #4]
 8003478:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800347c:	4610      	mov	r0, r2
 800347e:	1f0f      	subs	r7, r1, #4
 8003480:	f010 0103 	ands.w	r1, r0, #3
 8003484:	d006      	beq.n	8003494 <forward_atanh+0x64>
 8003486:	1e52      	subs	r2, r2, #1
 8003488:	f857 c904 	ldr.w	ip, [r7], #-4
 800348c:	1e49      	subs	r1, r1, #1
 800348e:	fb0c f404 	mul.w	r4, ip, r4
 8003492:	d1f8      	bne.n	8003486 <forward_atanh+0x56>
 8003494:	0880      	lsrs	r0, r0, #2
 8003496:	d00d      	beq.n	80034b4 <forward_atanh+0x84>
 8003498:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800349c:	3910      	subs	r1, #16
 800349e:	68ca      	ldr	r2, [r1, #12]
 80034a0:	688e      	ldr	r6, [r1, #8]
 80034a2:	684f      	ldr	r7, [r1, #4]
 80034a4:	4372      	muls	r2, r6
 80034a6:	f851 6910 	ldr.w	r6, [r1], #-16
 80034aa:	437a      	muls	r2, r7
 80034ac:	4372      	muls	r2, r6
 80034ae:	4354      	muls	r4, r2
 80034b0:	1e40      	subs	r0, r0, #1
 80034b2:	d1f4      	bne.n	800349e <forward_atanh+0x6e>
 80034b4:	6998      	ldr	r0, [r3, #24]
 80034b6:	6829      	ldr	r1, [r5, #0]
 80034b8:	6885      	ldr	r5, [r0, #8]
 80034ba:	6889      	ldr	r1, [r1, #8]
 80034bc:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 80034c0:	1f06      	subs	r6, r0, #4
 80034c2:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80034c6:	1f04      	subs	r4, r0, #4
 80034c8:	42ae      	cmp	r6, r5
 80034ca:	d309      	bcc.n	80034e0 <forward_atanh+0xb0>
 80034cc:	ed96 0a00 	vldr	s0, [r6]
 80034d0:	f013 fe62 	bl	8017198 <atanhf>
 80034d4:	ed84 0a00 	vstr	s0, [r4]
 80034d8:	1f36      	subs	r6, r6, #4
 80034da:	1f24      	subs	r4, r4, #4
 80034dc:	42ae      	cmp	r6, r5
 80034de:	d2f5      	bcs.n	80034cc <forward_atanh+0x9c>
 80034e0:	b001      	add	sp, #4
 80034e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034e4 <nl_func_cos_array_f32>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	6983      	ldr	r3, [r0, #24]
 80034e8:	6988      	ldr	r0, [r1, #24]
 80034ea:	6884      	ldr	r4, [r0, #8]
 80034ec:	6899      	ldr	r1, [r3, #8]
 80034ee:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 80034f2:	1f05      	subs	r5, r0, #4
 80034f4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80034f8:	1f06      	subs	r6, r0, #4
 80034fa:	42a5      	cmp	r5, r4
 80034fc:	f0c0 800a 	bcc.w	8003514 <nl_func_cos_array_f32+0x30>
 8003500:	ed95 0a00 	vldr	s0, [r5]
 8003504:	f014 f8e2 	bl	80176cc <cosf>
 8003508:	ed86 0a00 	vstr	s0, [r6]
 800350c:	1f2d      	subs	r5, r5, #4
 800350e:	1f36      	subs	r6, r6, #4
 8003510:	42a5      	cmp	r5, r4
 8003512:	d2f5      	bcs.n	8003500 <nl_func_cos_array_f32+0x1c>
 8003514:	bd70      	pop	{r4, r5, r6, pc}
	...

08003518 <forward_cos>:
 8003518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800351a:	b081      	sub	sp, #4
 800351c:	6982      	ldr	r2, [r0, #24]
 800351e:	8811      	ldrh	r1, [r2, #0]
 8003520:	2900      	cmp	r1, #0
 8003522:	bf1a      	itte	ne
 8003524:	6850      	ldrne	r0, [r2, #4]
 8003526:	1d00      	addne	r0, r0, #4
 8003528:	2004      	moveq	r0, #4
 800352a:	f04f 0401 	mov.w	r4, #1
 800352e:	6800      	ldr	r0, [r0, #0]
 8003530:	2800      	cmp	r0, #0
 8003532:	bf14      	ite	ne
 8003534:	6803      	ldrne	r3, [r0, #0]
 8003536:	2300      	moveq	r3, #0
 8003538:	2902      	cmp	r1, #2
 800353a:	bfa6      	itte	ge
 800353c:	6850      	ldrge	r0, [r2, #4]
 800353e:	3010      	addge	r0, #16
 8003540:	2004      	movlt	r0, #4
 8003542:	6800      	ldr	r0, [r0, #0]
 8003544:	2800      	cmp	r0, #0
 8003546:	bf19      	ittee	ne
 8003548:	6800      	ldrne	r0, [r0, #0]
 800354a:	f100 0518 	addne.w	r5, r0, #24
 800354e:	2100      	moveq	r1, #0
 8003550:	f101 0518 	addeq.w	r5, r1, #24
 8003554:	f103 0108 	add.w	r1, r3, #8
 8003558:	680a      	ldr	r2, [r1, #0]
 800355a:	0a12      	lsrs	r2, r2, #8
 800355c:	d01e      	beq.n	800359c <forward_cos+0x84>
 800355e:	684e      	ldr	r6, [r1, #4]
 8003560:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003564:	4610      	mov	r0, r2
 8003566:	1f0f      	subs	r7, r1, #4
 8003568:	f010 0103 	ands.w	r1, r0, #3
 800356c:	d006      	beq.n	800357c <forward_cos+0x64>
 800356e:	1e52      	subs	r2, r2, #1
 8003570:	f857 c904 	ldr.w	ip, [r7], #-4
 8003574:	1e49      	subs	r1, r1, #1
 8003576:	fb0c f404 	mul.w	r4, ip, r4
 800357a:	d1f8      	bne.n	800356e <forward_cos+0x56>
 800357c:	0880      	lsrs	r0, r0, #2
 800357e:	d00d      	beq.n	800359c <forward_cos+0x84>
 8003580:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003584:	3910      	subs	r1, #16
 8003586:	68ca      	ldr	r2, [r1, #12]
 8003588:	688e      	ldr	r6, [r1, #8]
 800358a:	684f      	ldr	r7, [r1, #4]
 800358c:	4372      	muls	r2, r6
 800358e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003592:	437a      	muls	r2, r7
 8003594:	4372      	muls	r2, r6
 8003596:	4354      	muls	r4, r2
 8003598:	1e40      	subs	r0, r0, #1
 800359a:	d1f4      	bne.n	8003586 <forward_cos+0x6e>
 800359c:	6998      	ldr	r0, [r3, #24]
 800359e:	6829      	ldr	r1, [r5, #0]
 80035a0:	6885      	ldr	r5, [r0, #8]
 80035a2:	6889      	ldr	r1, [r1, #8]
 80035a4:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 80035a8:	1f06      	subs	r6, r0, #4
 80035aa:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80035ae:	1f04      	subs	r4, r0, #4
 80035b0:	42ae      	cmp	r6, r5
 80035b2:	d309      	bcc.n	80035c8 <forward_cos+0xb0>
 80035b4:	ed96 0a00 	vldr	s0, [r6]
 80035b8:	f014 f888 	bl	80176cc <cosf>
 80035bc:	ed84 0a00 	vstr	s0, [r4]
 80035c0:	1f36      	subs	r6, r6, #4
 80035c2:	1f24      	subs	r4, r4, #4
 80035c4:	42ae      	cmp	r6, r5
 80035c6:	d2f5      	bcs.n	80035b4 <forward_cos+0x9c>
 80035c8:	b001      	add	sp, #4
 80035ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035cc <nl_func_cosh_array_f32>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	6983      	ldr	r3, [r0, #24]
 80035d0:	6988      	ldr	r0, [r1, #24]
 80035d2:	6884      	ldr	r4, [r0, #8]
 80035d4:	6899      	ldr	r1, [r3, #8]
 80035d6:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 80035da:	1f05      	subs	r5, r0, #4
 80035dc:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80035e0:	1f06      	subs	r6, r0, #4
 80035e2:	42a5      	cmp	r5, r4
 80035e4:	f0c0 800a 	bcc.w	80035fc <nl_func_cosh_array_f32+0x30>
 80035e8:	ed95 0a00 	vldr	s0, [r5]
 80035ec:	f013 fe04 	bl	80171f8 <coshf>
 80035f0:	ed86 0a00 	vstr	s0, [r6]
 80035f4:	1f2d      	subs	r5, r5, #4
 80035f6:	1f36      	subs	r6, r6, #4
 80035f8:	42a5      	cmp	r5, r4
 80035fa:	d2f5      	bcs.n	80035e8 <nl_func_cosh_array_f32+0x1c>
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08003600 <forward_cosh>:
 8003600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003602:	b081      	sub	sp, #4
 8003604:	6982      	ldr	r2, [r0, #24]
 8003606:	8811      	ldrh	r1, [r2, #0]
 8003608:	2900      	cmp	r1, #0
 800360a:	bf1a      	itte	ne
 800360c:	6850      	ldrne	r0, [r2, #4]
 800360e:	1d00      	addne	r0, r0, #4
 8003610:	2004      	moveq	r0, #4
 8003612:	f04f 0401 	mov.w	r4, #1
 8003616:	6800      	ldr	r0, [r0, #0]
 8003618:	2800      	cmp	r0, #0
 800361a:	bf14      	ite	ne
 800361c:	6803      	ldrne	r3, [r0, #0]
 800361e:	2300      	moveq	r3, #0
 8003620:	2902      	cmp	r1, #2
 8003622:	bfa6      	itte	ge
 8003624:	6850      	ldrge	r0, [r2, #4]
 8003626:	3010      	addge	r0, #16
 8003628:	2004      	movlt	r0, #4
 800362a:	6800      	ldr	r0, [r0, #0]
 800362c:	2800      	cmp	r0, #0
 800362e:	bf19      	ittee	ne
 8003630:	6800      	ldrne	r0, [r0, #0]
 8003632:	f100 0518 	addne.w	r5, r0, #24
 8003636:	2100      	moveq	r1, #0
 8003638:	f101 0518 	addeq.w	r5, r1, #24
 800363c:	f103 0108 	add.w	r1, r3, #8
 8003640:	680a      	ldr	r2, [r1, #0]
 8003642:	0a12      	lsrs	r2, r2, #8
 8003644:	d01e      	beq.n	8003684 <forward_cosh+0x84>
 8003646:	684e      	ldr	r6, [r1, #4]
 8003648:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800364c:	4610      	mov	r0, r2
 800364e:	1f0f      	subs	r7, r1, #4
 8003650:	f010 0103 	ands.w	r1, r0, #3
 8003654:	d006      	beq.n	8003664 <forward_cosh+0x64>
 8003656:	1e52      	subs	r2, r2, #1
 8003658:	f857 c904 	ldr.w	ip, [r7], #-4
 800365c:	1e49      	subs	r1, r1, #1
 800365e:	fb0c f404 	mul.w	r4, ip, r4
 8003662:	d1f8      	bne.n	8003656 <forward_cosh+0x56>
 8003664:	0880      	lsrs	r0, r0, #2
 8003666:	d00d      	beq.n	8003684 <forward_cosh+0x84>
 8003668:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800366c:	3910      	subs	r1, #16
 800366e:	68ca      	ldr	r2, [r1, #12]
 8003670:	688e      	ldr	r6, [r1, #8]
 8003672:	684f      	ldr	r7, [r1, #4]
 8003674:	4372      	muls	r2, r6
 8003676:	f851 6910 	ldr.w	r6, [r1], #-16
 800367a:	437a      	muls	r2, r7
 800367c:	4372      	muls	r2, r6
 800367e:	4354      	muls	r4, r2
 8003680:	1e40      	subs	r0, r0, #1
 8003682:	d1f4      	bne.n	800366e <forward_cosh+0x6e>
 8003684:	6998      	ldr	r0, [r3, #24]
 8003686:	6829      	ldr	r1, [r5, #0]
 8003688:	6885      	ldr	r5, [r0, #8]
 800368a:	6889      	ldr	r1, [r1, #8]
 800368c:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8003690:	1f06      	subs	r6, r0, #4
 8003692:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003696:	1f04      	subs	r4, r0, #4
 8003698:	42ae      	cmp	r6, r5
 800369a:	d309      	bcc.n	80036b0 <forward_cosh+0xb0>
 800369c:	ed96 0a00 	vldr	s0, [r6]
 80036a0:	f013 fdaa 	bl	80171f8 <coshf>
 80036a4:	ed84 0a00 	vstr	s0, [r4]
 80036a8:	1f36      	subs	r6, r6, #4
 80036aa:	1f24      	subs	r4, r4, #4
 80036ac:	42ae      	cmp	r6, r5
 80036ae:	d2f5      	bcs.n	800369c <forward_cosh+0x9c>
 80036b0:	b001      	add	sp, #4
 80036b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036b4 <nl_func_erf_array_f32>:
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	6983      	ldr	r3, [r0, #24]
 80036b8:	6988      	ldr	r0, [r1, #24]
 80036ba:	6884      	ldr	r4, [r0, #8]
 80036bc:	6899      	ldr	r1, [r3, #8]
 80036be:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 80036c2:	1f05      	subs	r5, r0, #4
 80036c4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80036c8:	1f06      	subs	r6, r0, #4
 80036ca:	42a5      	cmp	r5, r4
 80036cc:	f0c0 800a 	bcc.w	80036e4 <nl_func_erf_array_f32+0x30>
 80036d0:	ed95 0a00 	vldr	s0, [r5]
 80036d4:	f014 f83e 	bl	8017754 <erff>
 80036d8:	ed86 0a00 	vstr	s0, [r6]
 80036dc:	1f2d      	subs	r5, r5, #4
 80036de:	1f36      	subs	r6, r6, #4
 80036e0:	42a5      	cmp	r5, r4
 80036e2:	d2f5      	bcs.n	80036d0 <nl_func_erf_array_f32+0x1c>
 80036e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080036e8 <forward_erf>:
 80036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ea:	b081      	sub	sp, #4
 80036ec:	6982      	ldr	r2, [r0, #24]
 80036ee:	8811      	ldrh	r1, [r2, #0]
 80036f0:	2900      	cmp	r1, #0
 80036f2:	bf1a      	itte	ne
 80036f4:	6850      	ldrne	r0, [r2, #4]
 80036f6:	1d00      	addne	r0, r0, #4
 80036f8:	2004      	moveq	r0, #4
 80036fa:	f04f 0401 	mov.w	r4, #1
 80036fe:	6800      	ldr	r0, [r0, #0]
 8003700:	2800      	cmp	r0, #0
 8003702:	bf14      	ite	ne
 8003704:	6803      	ldrne	r3, [r0, #0]
 8003706:	2300      	moveq	r3, #0
 8003708:	2902      	cmp	r1, #2
 800370a:	bfa6      	itte	ge
 800370c:	6850      	ldrge	r0, [r2, #4]
 800370e:	3010      	addge	r0, #16
 8003710:	2004      	movlt	r0, #4
 8003712:	6800      	ldr	r0, [r0, #0]
 8003714:	2800      	cmp	r0, #0
 8003716:	bf19      	ittee	ne
 8003718:	6800      	ldrne	r0, [r0, #0]
 800371a:	f100 0518 	addne.w	r5, r0, #24
 800371e:	2100      	moveq	r1, #0
 8003720:	f101 0518 	addeq.w	r5, r1, #24
 8003724:	f103 0108 	add.w	r1, r3, #8
 8003728:	680a      	ldr	r2, [r1, #0]
 800372a:	0a12      	lsrs	r2, r2, #8
 800372c:	d01e      	beq.n	800376c <forward_erf+0x84>
 800372e:	684e      	ldr	r6, [r1, #4]
 8003730:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003734:	4610      	mov	r0, r2
 8003736:	1f0f      	subs	r7, r1, #4
 8003738:	f010 0103 	ands.w	r1, r0, #3
 800373c:	d006      	beq.n	800374c <forward_erf+0x64>
 800373e:	1e52      	subs	r2, r2, #1
 8003740:	f857 c904 	ldr.w	ip, [r7], #-4
 8003744:	1e49      	subs	r1, r1, #1
 8003746:	fb0c f404 	mul.w	r4, ip, r4
 800374a:	d1f8      	bne.n	800373e <forward_erf+0x56>
 800374c:	0880      	lsrs	r0, r0, #2
 800374e:	d00d      	beq.n	800376c <forward_erf+0x84>
 8003750:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003754:	3910      	subs	r1, #16
 8003756:	68ca      	ldr	r2, [r1, #12]
 8003758:	688e      	ldr	r6, [r1, #8]
 800375a:	684f      	ldr	r7, [r1, #4]
 800375c:	4372      	muls	r2, r6
 800375e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003762:	437a      	muls	r2, r7
 8003764:	4372      	muls	r2, r6
 8003766:	4354      	muls	r4, r2
 8003768:	1e40      	subs	r0, r0, #1
 800376a:	d1f4      	bne.n	8003756 <forward_erf+0x6e>
 800376c:	6998      	ldr	r0, [r3, #24]
 800376e:	6829      	ldr	r1, [r5, #0]
 8003770:	6885      	ldr	r5, [r0, #8]
 8003772:	6889      	ldr	r1, [r1, #8]
 8003774:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8003778:	1f06      	subs	r6, r0, #4
 800377a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800377e:	1f04      	subs	r4, r0, #4
 8003780:	42ae      	cmp	r6, r5
 8003782:	d309      	bcc.n	8003798 <forward_erf+0xb0>
 8003784:	ed96 0a00 	vldr	s0, [r6]
 8003788:	f013 ffe4 	bl	8017754 <erff>
 800378c:	ed84 0a00 	vstr	s0, [r4]
 8003790:	1f36      	subs	r6, r6, #4
 8003792:	1f24      	subs	r4, r4, #4
 8003794:	42ae      	cmp	r6, r5
 8003796:	d2f5      	bcs.n	8003784 <forward_erf+0x9c>
 8003798:	b001      	add	sp, #4
 800379a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800379c <nl_func_log_array_f32>:
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	6983      	ldr	r3, [r0, #24]
 80037a0:	6988      	ldr	r0, [r1, #24]
 80037a2:	6884      	ldr	r4, [r0, #8]
 80037a4:	6899      	ldr	r1, [r3, #8]
 80037a6:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 80037aa:	1f05      	subs	r5, r0, #4
 80037ac:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80037b0:	1f06      	subs	r6, r0, #4
 80037b2:	42a5      	cmp	r5, r4
 80037b4:	f0c0 800a 	bcc.w	80037cc <nl_func_log_array_f32+0x30>
 80037b8:	ed95 0a00 	vldr	s0, [r5]
 80037bc:	f013 fd9a 	bl	80172f4 <logf>
 80037c0:	ed86 0a00 	vstr	s0, [r6]
 80037c4:	1f2d      	subs	r5, r5, #4
 80037c6:	1f36      	subs	r6, r6, #4
 80037c8:	42a5      	cmp	r5, r4
 80037ca:	d2f5      	bcs.n	80037b8 <nl_func_log_array_f32+0x1c>
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080037d0 <forward_log>:
 80037d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d2:	b081      	sub	sp, #4
 80037d4:	6982      	ldr	r2, [r0, #24]
 80037d6:	8811      	ldrh	r1, [r2, #0]
 80037d8:	2900      	cmp	r1, #0
 80037da:	bf1a      	itte	ne
 80037dc:	6850      	ldrne	r0, [r2, #4]
 80037de:	1d00      	addne	r0, r0, #4
 80037e0:	2004      	moveq	r0, #4
 80037e2:	f04f 0401 	mov.w	r4, #1
 80037e6:	6800      	ldr	r0, [r0, #0]
 80037e8:	2800      	cmp	r0, #0
 80037ea:	bf14      	ite	ne
 80037ec:	6803      	ldrne	r3, [r0, #0]
 80037ee:	2300      	moveq	r3, #0
 80037f0:	2902      	cmp	r1, #2
 80037f2:	bfa6      	itte	ge
 80037f4:	6850      	ldrge	r0, [r2, #4]
 80037f6:	3010      	addge	r0, #16
 80037f8:	2004      	movlt	r0, #4
 80037fa:	6800      	ldr	r0, [r0, #0]
 80037fc:	2800      	cmp	r0, #0
 80037fe:	bf19      	ittee	ne
 8003800:	6800      	ldrne	r0, [r0, #0]
 8003802:	f100 0518 	addne.w	r5, r0, #24
 8003806:	2100      	moveq	r1, #0
 8003808:	f101 0518 	addeq.w	r5, r1, #24
 800380c:	f103 0108 	add.w	r1, r3, #8
 8003810:	680a      	ldr	r2, [r1, #0]
 8003812:	0a12      	lsrs	r2, r2, #8
 8003814:	d01e      	beq.n	8003854 <forward_log+0x84>
 8003816:	684e      	ldr	r6, [r1, #4]
 8003818:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800381c:	4610      	mov	r0, r2
 800381e:	1f0f      	subs	r7, r1, #4
 8003820:	f010 0103 	ands.w	r1, r0, #3
 8003824:	d006      	beq.n	8003834 <forward_log+0x64>
 8003826:	1e52      	subs	r2, r2, #1
 8003828:	f857 c904 	ldr.w	ip, [r7], #-4
 800382c:	1e49      	subs	r1, r1, #1
 800382e:	fb0c f404 	mul.w	r4, ip, r4
 8003832:	d1f8      	bne.n	8003826 <forward_log+0x56>
 8003834:	0880      	lsrs	r0, r0, #2
 8003836:	d00d      	beq.n	8003854 <forward_log+0x84>
 8003838:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800383c:	3910      	subs	r1, #16
 800383e:	68ca      	ldr	r2, [r1, #12]
 8003840:	688e      	ldr	r6, [r1, #8]
 8003842:	684f      	ldr	r7, [r1, #4]
 8003844:	4372      	muls	r2, r6
 8003846:	f851 6910 	ldr.w	r6, [r1], #-16
 800384a:	437a      	muls	r2, r7
 800384c:	4372      	muls	r2, r6
 800384e:	4354      	muls	r4, r2
 8003850:	1e40      	subs	r0, r0, #1
 8003852:	d1f4      	bne.n	800383e <forward_log+0x6e>
 8003854:	6998      	ldr	r0, [r3, #24]
 8003856:	6829      	ldr	r1, [r5, #0]
 8003858:	6885      	ldr	r5, [r0, #8]
 800385a:	6889      	ldr	r1, [r1, #8]
 800385c:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8003860:	1f06      	subs	r6, r0, #4
 8003862:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003866:	1f04      	subs	r4, r0, #4
 8003868:	42ae      	cmp	r6, r5
 800386a:	d309      	bcc.n	8003880 <forward_log+0xb0>
 800386c:	ed96 0a00 	vldr	s0, [r6]
 8003870:	f013 fd40 	bl	80172f4 <logf>
 8003874:	ed84 0a00 	vstr	s0, [r4]
 8003878:	1f36      	subs	r6, r6, #4
 800387a:	1f24      	subs	r4, r4, #4
 800387c:	42ae      	cmp	r6, r5
 800387e:	d2f5      	bcs.n	800386c <forward_log+0x9c>
 8003880:	b001      	add	sp, #4
 8003882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003884 <nl_func_logistic_array_f32>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	6983      	ldr	r3, [r0, #24]
 8003888:	6988      	ldr	r0, [r1, #24]
 800388a:	6884      	ldr	r4, [r0, #8]
 800388c:	6899      	ldr	r1, [r3, #8]
 800388e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8003892:	1f05      	subs	r5, r0, #4
 8003894:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8003898:	1f06      	subs	r6, r0, #4
 800389a:	42a5      	cmp	r5, r4
 800389c:	f0c0 802a 	bcc.w	80038f4 <nl_func_logistic_array_f32+0x70>
 80038a0:	ed95 0a00 	vldr	s0, [r5]
 80038a4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80038a8:	eef0 0ac0 	vabs.f32	s1, s0
 80038ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b0:	eeb1 0a60 	vneg.f32	s0, s1
 80038b4:	d50e      	bpl.n	80038d4 <nl_func_logistic_array_f32+0x50>
 80038b6:	f013 fcc7 	bl	8017248 <expf>
 80038ba:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80038be:	ee30 0a20 	vadd.f32	s0, s0, s1
 80038c2:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80038c6:	ee81 1a00 	vdiv.f32	s2, s2, s0
 80038ca:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80038ce:	ee31 0ac1 	vsub.f32	s0, s3, s2
 80038d2:	e009      	b.n	80038e8 <nl_func_logistic_array_f32+0x64>
 80038d4:	f013 fcb8 	bl	8017248 <expf>
 80038d8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80038dc:	ee30 0a20 	vadd.f32	s0, s0, s1
 80038e0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80038e4:	ee81 0a00 	vdiv.f32	s0, s2, s0
 80038e8:	ed86 0a00 	vstr	s0, [r6]
 80038ec:	1f2d      	subs	r5, r5, #4
 80038ee:	1f36      	subs	r6, r6, #4
 80038f0:	42a5      	cmp	r5, r4
 80038f2:	d2d5      	bcs.n	80038a0 <nl_func_logistic_array_f32+0x1c>
 80038f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080038f8 <forward_logistic>:
 80038f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fa:	b081      	sub	sp, #4
 80038fc:	6982      	ldr	r2, [r0, #24]
 80038fe:	8811      	ldrh	r1, [r2, #0]
 8003900:	2900      	cmp	r1, #0
 8003902:	bf1a      	itte	ne
 8003904:	6850      	ldrne	r0, [r2, #4]
 8003906:	1d00      	addne	r0, r0, #4
 8003908:	2004      	moveq	r0, #4
 800390a:	f04f 0401 	mov.w	r4, #1
 800390e:	6800      	ldr	r0, [r0, #0]
 8003910:	2800      	cmp	r0, #0
 8003912:	bf14      	ite	ne
 8003914:	6803      	ldrne	r3, [r0, #0]
 8003916:	2300      	moveq	r3, #0
 8003918:	2902      	cmp	r1, #2
 800391a:	bfa6      	itte	ge
 800391c:	6850      	ldrge	r0, [r2, #4]
 800391e:	3010      	addge	r0, #16
 8003920:	2004      	movlt	r0, #4
 8003922:	6800      	ldr	r0, [r0, #0]
 8003924:	2800      	cmp	r0, #0
 8003926:	bf19      	ittee	ne
 8003928:	6800      	ldrne	r0, [r0, #0]
 800392a:	f100 0518 	addne.w	r5, r0, #24
 800392e:	2100      	moveq	r1, #0
 8003930:	f101 0518 	addeq.w	r5, r1, #24
 8003934:	f103 0108 	add.w	r1, r3, #8
 8003938:	680a      	ldr	r2, [r1, #0]
 800393a:	0a12      	lsrs	r2, r2, #8
 800393c:	d01e      	beq.n	800397c <forward_logistic+0x84>
 800393e:	684e      	ldr	r6, [r1, #4]
 8003940:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003944:	4610      	mov	r0, r2
 8003946:	1f0f      	subs	r7, r1, #4
 8003948:	f010 0103 	ands.w	r1, r0, #3
 800394c:	d006      	beq.n	800395c <forward_logistic+0x64>
 800394e:	1e52      	subs	r2, r2, #1
 8003950:	f857 c904 	ldr.w	ip, [r7], #-4
 8003954:	1e49      	subs	r1, r1, #1
 8003956:	fb0c f404 	mul.w	r4, ip, r4
 800395a:	d1f8      	bne.n	800394e <forward_logistic+0x56>
 800395c:	0880      	lsrs	r0, r0, #2
 800395e:	d00d      	beq.n	800397c <forward_logistic+0x84>
 8003960:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003964:	3910      	subs	r1, #16
 8003966:	68ca      	ldr	r2, [r1, #12]
 8003968:	688e      	ldr	r6, [r1, #8]
 800396a:	684f      	ldr	r7, [r1, #4]
 800396c:	4372      	muls	r2, r6
 800396e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003972:	437a      	muls	r2, r7
 8003974:	4372      	muls	r2, r6
 8003976:	4354      	muls	r4, r2
 8003978:	1e40      	subs	r0, r0, #1
 800397a:	d1f4      	bne.n	8003966 <forward_logistic+0x6e>
 800397c:	6998      	ldr	r0, [r3, #24]
 800397e:	6829      	ldr	r1, [r5, #0]
 8003980:	6885      	ldr	r5, [r0, #8]
 8003982:	6889      	ldr	r1, [r1, #8]
 8003984:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8003988:	1f06      	subs	r6, r0, #4
 800398a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800398e:	1f04      	subs	r4, r0, #4
 8003990:	42ae      	cmp	r6, r5
 8003992:	d329      	bcc.n	80039e8 <forward_logistic+0xf0>
 8003994:	ed96 0a00 	vldr	s0, [r6]
 8003998:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800399c:	eef0 0ac0 	vabs.f32	s1, s0
 80039a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a4:	eeb1 0a60 	vneg.f32	s0, s1
 80039a8:	d50e      	bpl.n	80039c8 <forward_logistic+0xd0>
 80039aa:	f013 fc4d 	bl	8017248 <expf>
 80039ae:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80039b2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80039b6:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80039ba:	ee81 1a00 	vdiv.f32	s2, s2, s0
 80039be:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80039c2:	ee31 0ac1 	vsub.f32	s0, s3, s2
 80039c6:	e009      	b.n	80039dc <forward_logistic+0xe4>
 80039c8:	f013 fc3e 	bl	8017248 <expf>
 80039cc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80039d0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80039d4:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80039d8:	ee81 0a00 	vdiv.f32	s0, s2, s0
 80039dc:	ed84 0a00 	vstr	s0, [r4]
 80039e0:	1f36      	subs	r6, r6, #4
 80039e2:	1f24      	subs	r4, r4, #4
 80039e4:	42ae      	cmp	r6, r5
 80039e6:	d2d5      	bcs.n	8003994 <forward_logistic+0x9c>
 80039e8:	b001      	add	sp, #4
 80039ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039ec <nl_func_rsqrt_array_f32>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	6980      	ldr	r0, [r0, #24]
 80039f0:	698c      	ldr	r4, [r1, #24]
 80039f2:	6880      	ldr	r0, [r0, #8]
 80039f4:	68a1      	ldr	r1, [r4, #8]
 80039f6:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80039fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80039fe:	1f1d      	subs	r5, r3, #4
 8003a00:	1f16      	subs	r6, r2, #4
 8003a02:	428d      	cmp	r5, r1
 8003a04:	f0c0 800f 	bcc.w	8003a26 <nl_func_rsqrt_array_f32+0x3a>
 8003a08:	ed95 0a00 	vldr	s0, [r5]
 8003a0c:	f004 f956 	bl	8007cbc <ai_math_sqrt>
 8003a10:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003a14:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8003a18:	edc6 0a00 	vstr	s1, [r6]
 8003a1c:	1f2d      	subs	r5, r5, #4
 8003a1e:	68a0      	ldr	r0, [r4, #8]
 8003a20:	1f36      	subs	r6, r6, #4
 8003a22:	4285      	cmp	r5, r0
 8003a24:	d2f0      	bcs.n	8003a08 <nl_func_rsqrt_array_f32+0x1c>
 8003a26:	bd70      	pop	{r4, r5, r6, pc}

08003a28 <forward_rsqrt>:
 8003a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2a:	b081      	sub	sp, #4
 8003a2c:	6982      	ldr	r2, [r0, #24]
 8003a2e:	8811      	ldrh	r1, [r2, #0]
 8003a30:	2900      	cmp	r1, #0
 8003a32:	bf1a      	itte	ne
 8003a34:	6850      	ldrne	r0, [r2, #4]
 8003a36:	1d00      	addne	r0, r0, #4
 8003a38:	2004      	moveq	r0, #4
 8003a3a:	f04f 0401 	mov.w	r4, #1
 8003a3e:	6800      	ldr	r0, [r0, #0]
 8003a40:	2800      	cmp	r0, #0
 8003a42:	bf14      	ite	ne
 8003a44:	6803      	ldrne	r3, [r0, #0]
 8003a46:	2300      	moveq	r3, #0
 8003a48:	2902      	cmp	r1, #2
 8003a4a:	bfa6      	itte	ge
 8003a4c:	6850      	ldrge	r0, [r2, #4]
 8003a4e:	3010      	addge	r0, #16
 8003a50:	2004      	movlt	r0, #4
 8003a52:	6800      	ldr	r0, [r0, #0]
 8003a54:	2800      	cmp	r0, #0
 8003a56:	bf19      	ittee	ne
 8003a58:	6800      	ldrne	r0, [r0, #0]
 8003a5a:	f100 0518 	addne.w	r5, r0, #24
 8003a5e:	2100      	moveq	r1, #0
 8003a60:	f101 0518 	addeq.w	r5, r1, #24
 8003a64:	f103 0108 	add.w	r1, r3, #8
 8003a68:	680a      	ldr	r2, [r1, #0]
 8003a6a:	0a12      	lsrs	r2, r2, #8
 8003a6c:	d01e      	beq.n	8003aac <forward_rsqrt+0x84>
 8003a6e:	684e      	ldr	r6, [r1, #4]
 8003a70:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a74:	4610      	mov	r0, r2
 8003a76:	1f0f      	subs	r7, r1, #4
 8003a78:	f010 0103 	ands.w	r1, r0, #3
 8003a7c:	d006      	beq.n	8003a8c <forward_rsqrt+0x64>
 8003a7e:	1e52      	subs	r2, r2, #1
 8003a80:	f857 c904 	ldr.w	ip, [r7], #-4
 8003a84:	1e49      	subs	r1, r1, #1
 8003a86:	fb0c f404 	mul.w	r4, ip, r4
 8003a8a:	d1f8      	bne.n	8003a7e <forward_rsqrt+0x56>
 8003a8c:	0880      	lsrs	r0, r0, #2
 8003a8e:	d00d      	beq.n	8003aac <forward_rsqrt+0x84>
 8003a90:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a94:	3910      	subs	r1, #16
 8003a96:	68ca      	ldr	r2, [r1, #12]
 8003a98:	688e      	ldr	r6, [r1, #8]
 8003a9a:	684f      	ldr	r7, [r1, #4]
 8003a9c:	4372      	muls	r2, r6
 8003a9e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003aa2:	437a      	muls	r2, r7
 8003aa4:	4372      	muls	r2, r6
 8003aa6:	4354      	muls	r4, r2
 8003aa8:	1e40      	subs	r0, r0, #1
 8003aaa:	d1f4      	bne.n	8003a96 <forward_rsqrt+0x6e>
 8003aac:	6828      	ldr	r0, [r5, #0]
 8003aae:	699d      	ldr	r5, [r3, #24]
 8003ab0:	68a9      	ldr	r1, [r5, #8]
 8003ab2:	6880      	ldr	r0, [r0, #8]
 8003ab4:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8003ab8:	1f16      	subs	r6, r2, #4
 8003aba:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8003abe:	1f14      	subs	r4, r2, #4
 8003ac0:	428e      	cmp	r6, r1
 8003ac2:	d30e      	bcc.n	8003ae2 <forward_rsqrt+0xba>
 8003ac4:	ed96 0a00 	vldr	s0, [r6]
 8003ac8:	f004 f8f8 	bl	8007cbc <ai_math_sqrt>
 8003acc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003ad0:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8003ad4:	edc4 0a00 	vstr	s1, [r4]
 8003ad8:	1f36      	subs	r6, r6, #4
 8003ada:	68a8      	ldr	r0, [r5, #8]
 8003adc:	1f24      	subs	r4, r4, #4
 8003ade:	4286      	cmp	r6, r0
 8003ae0:	d2f0      	bcs.n	8003ac4 <forward_rsqrt+0x9c>
 8003ae2:	b001      	add	sp, #4
 8003ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003ae8 <nl_func_sin_array_f32>:
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	6983      	ldr	r3, [r0, #24]
 8003aec:	6988      	ldr	r0, [r1, #24]
 8003aee:	6884      	ldr	r4, [r0, #8]
 8003af0:	6899      	ldr	r1, [r3, #8]
 8003af2:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8003af6:	1f05      	subs	r5, r0, #4
 8003af8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8003afc:	1f06      	subs	r6, r0, #4
 8003afe:	42a5      	cmp	r5, r4
 8003b00:	f0c0 800a 	bcc.w	8003b18 <nl_func_sin_array_f32+0x30>
 8003b04:	ed95 0a00 	vldr	s0, [r5]
 8003b08:	f014 f804 	bl	8017b14 <sinf>
 8003b0c:	ed86 0a00 	vstr	s0, [r6]
 8003b10:	1f2d      	subs	r5, r5, #4
 8003b12:	1f36      	subs	r6, r6, #4
 8003b14:	42a5      	cmp	r5, r4
 8003b16:	d2f5      	bcs.n	8003b04 <nl_func_sin_array_f32+0x1c>
 8003b18:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b1c <forward_sin>:
 8003b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1e:	b081      	sub	sp, #4
 8003b20:	6982      	ldr	r2, [r0, #24]
 8003b22:	8811      	ldrh	r1, [r2, #0]
 8003b24:	2900      	cmp	r1, #0
 8003b26:	bf1a      	itte	ne
 8003b28:	6850      	ldrne	r0, [r2, #4]
 8003b2a:	1d00      	addne	r0, r0, #4
 8003b2c:	2004      	moveq	r0, #4
 8003b2e:	f04f 0401 	mov.w	r4, #1
 8003b32:	6800      	ldr	r0, [r0, #0]
 8003b34:	2800      	cmp	r0, #0
 8003b36:	bf14      	ite	ne
 8003b38:	6803      	ldrne	r3, [r0, #0]
 8003b3a:	2300      	moveq	r3, #0
 8003b3c:	2902      	cmp	r1, #2
 8003b3e:	bfa6      	itte	ge
 8003b40:	6850      	ldrge	r0, [r2, #4]
 8003b42:	3010      	addge	r0, #16
 8003b44:	2004      	movlt	r0, #4
 8003b46:	6800      	ldr	r0, [r0, #0]
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	bf19      	ittee	ne
 8003b4c:	6800      	ldrne	r0, [r0, #0]
 8003b4e:	f100 0518 	addne.w	r5, r0, #24
 8003b52:	2100      	moveq	r1, #0
 8003b54:	f101 0518 	addeq.w	r5, r1, #24
 8003b58:	f103 0108 	add.w	r1, r3, #8
 8003b5c:	680a      	ldr	r2, [r1, #0]
 8003b5e:	0a12      	lsrs	r2, r2, #8
 8003b60:	d01e      	beq.n	8003ba0 <forward_sin+0x84>
 8003b62:	684e      	ldr	r6, [r1, #4]
 8003b64:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b68:	4610      	mov	r0, r2
 8003b6a:	1f0f      	subs	r7, r1, #4
 8003b6c:	f010 0103 	ands.w	r1, r0, #3
 8003b70:	d006      	beq.n	8003b80 <forward_sin+0x64>
 8003b72:	1e52      	subs	r2, r2, #1
 8003b74:	f857 c904 	ldr.w	ip, [r7], #-4
 8003b78:	1e49      	subs	r1, r1, #1
 8003b7a:	fb0c f404 	mul.w	r4, ip, r4
 8003b7e:	d1f8      	bne.n	8003b72 <forward_sin+0x56>
 8003b80:	0880      	lsrs	r0, r0, #2
 8003b82:	d00d      	beq.n	8003ba0 <forward_sin+0x84>
 8003b84:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b88:	3910      	subs	r1, #16
 8003b8a:	68ca      	ldr	r2, [r1, #12]
 8003b8c:	688e      	ldr	r6, [r1, #8]
 8003b8e:	684f      	ldr	r7, [r1, #4]
 8003b90:	4372      	muls	r2, r6
 8003b92:	f851 6910 	ldr.w	r6, [r1], #-16
 8003b96:	437a      	muls	r2, r7
 8003b98:	4372      	muls	r2, r6
 8003b9a:	4354      	muls	r4, r2
 8003b9c:	1e40      	subs	r0, r0, #1
 8003b9e:	d1f4      	bne.n	8003b8a <forward_sin+0x6e>
 8003ba0:	6998      	ldr	r0, [r3, #24]
 8003ba2:	6829      	ldr	r1, [r5, #0]
 8003ba4:	6885      	ldr	r5, [r0, #8]
 8003ba6:	6889      	ldr	r1, [r1, #8]
 8003ba8:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8003bac:	1f06      	subs	r6, r0, #4
 8003bae:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003bb2:	1f04      	subs	r4, r0, #4
 8003bb4:	42ae      	cmp	r6, r5
 8003bb6:	d309      	bcc.n	8003bcc <forward_sin+0xb0>
 8003bb8:	ed96 0a00 	vldr	s0, [r6]
 8003bbc:	f013 ffaa 	bl	8017b14 <sinf>
 8003bc0:	ed84 0a00 	vstr	s0, [r4]
 8003bc4:	1f36      	subs	r6, r6, #4
 8003bc6:	1f24      	subs	r4, r4, #4
 8003bc8:	42ae      	cmp	r6, r5
 8003bca:	d2f5      	bcs.n	8003bb8 <forward_sin+0x9c>
 8003bcc:	b001      	add	sp, #4
 8003bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bd0 <nl_func_sinh_array_f32>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	6983      	ldr	r3, [r0, #24]
 8003bd4:	6988      	ldr	r0, [r1, #24]
 8003bd6:	6884      	ldr	r4, [r0, #8]
 8003bd8:	6899      	ldr	r1, [r3, #8]
 8003bda:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8003bde:	1f05      	subs	r5, r0, #4
 8003be0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8003be4:	1f06      	subs	r6, r0, #4
 8003be6:	42a5      	cmp	r5, r4
 8003be8:	f0c0 800a 	bcc.w	8003c00 <nl_func_sinh_array_f32+0x30>
 8003bec:	ed95 0a00 	vldr	s0, [r5]
 8003bf0:	f013 fc06 	bl	8017400 <sinhf>
 8003bf4:	ed86 0a00 	vstr	s0, [r6]
 8003bf8:	1f2d      	subs	r5, r5, #4
 8003bfa:	1f36      	subs	r6, r6, #4
 8003bfc:	42a5      	cmp	r5, r4
 8003bfe:	d2f5      	bcs.n	8003bec <nl_func_sinh_array_f32+0x1c>
 8003c00:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c04 <forward_sinh>:
 8003c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c06:	b081      	sub	sp, #4
 8003c08:	6982      	ldr	r2, [r0, #24]
 8003c0a:	8811      	ldrh	r1, [r2, #0]
 8003c0c:	2900      	cmp	r1, #0
 8003c0e:	bf1a      	itte	ne
 8003c10:	6850      	ldrne	r0, [r2, #4]
 8003c12:	1d00      	addne	r0, r0, #4
 8003c14:	2004      	moveq	r0, #4
 8003c16:	f04f 0401 	mov.w	r4, #1
 8003c1a:	6800      	ldr	r0, [r0, #0]
 8003c1c:	2800      	cmp	r0, #0
 8003c1e:	bf14      	ite	ne
 8003c20:	6803      	ldrne	r3, [r0, #0]
 8003c22:	2300      	moveq	r3, #0
 8003c24:	2902      	cmp	r1, #2
 8003c26:	bfa6      	itte	ge
 8003c28:	6850      	ldrge	r0, [r2, #4]
 8003c2a:	3010      	addge	r0, #16
 8003c2c:	2004      	movlt	r0, #4
 8003c2e:	6800      	ldr	r0, [r0, #0]
 8003c30:	2800      	cmp	r0, #0
 8003c32:	bf19      	ittee	ne
 8003c34:	6800      	ldrne	r0, [r0, #0]
 8003c36:	f100 0518 	addne.w	r5, r0, #24
 8003c3a:	2100      	moveq	r1, #0
 8003c3c:	f101 0518 	addeq.w	r5, r1, #24
 8003c40:	f103 0108 	add.w	r1, r3, #8
 8003c44:	680a      	ldr	r2, [r1, #0]
 8003c46:	0a12      	lsrs	r2, r2, #8
 8003c48:	d01e      	beq.n	8003c88 <forward_sinh+0x84>
 8003c4a:	684e      	ldr	r6, [r1, #4]
 8003c4c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c50:	4610      	mov	r0, r2
 8003c52:	1f0f      	subs	r7, r1, #4
 8003c54:	f010 0103 	ands.w	r1, r0, #3
 8003c58:	d006      	beq.n	8003c68 <forward_sinh+0x64>
 8003c5a:	1e52      	subs	r2, r2, #1
 8003c5c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003c60:	1e49      	subs	r1, r1, #1
 8003c62:	fb0c f404 	mul.w	r4, ip, r4
 8003c66:	d1f8      	bne.n	8003c5a <forward_sinh+0x56>
 8003c68:	0880      	lsrs	r0, r0, #2
 8003c6a:	d00d      	beq.n	8003c88 <forward_sinh+0x84>
 8003c6c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c70:	3910      	subs	r1, #16
 8003c72:	68ca      	ldr	r2, [r1, #12]
 8003c74:	688e      	ldr	r6, [r1, #8]
 8003c76:	684f      	ldr	r7, [r1, #4]
 8003c78:	4372      	muls	r2, r6
 8003c7a:	f851 6910 	ldr.w	r6, [r1], #-16
 8003c7e:	437a      	muls	r2, r7
 8003c80:	4372      	muls	r2, r6
 8003c82:	4354      	muls	r4, r2
 8003c84:	1e40      	subs	r0, r0, #1
 8003c86:	d1f4      	bne.n	8003c72 <forward_sinh+0x6e>
 8003c88:	6998      	ldr	r0, [r3, #24]
 8003c8a:	6829      	ldr	r1, [r5, #0]
 8003c8c:	6885      	ldr	r5, [r0, #8]
 8003c8e:	6889      	ldr	r1, [r1, #8]
 8003c90:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8003c94:	1f06      	subs	r6, r0, #4
 8003c96:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003c9a:	1f04      	subs	r4, r0, #4
 8003c9c:	42ae      	cmp	r6, r5
 8003c9e:	d309      	bcc.n	8003cb4 <forward_sinh+0xb0>
 8003ca0:	ed96 0a00 	vldr	s0, [r6]
 8003ca4:	f013 fbac 	bl	8017400 <sinhf>
 8003ca8:	ed84 0a00 	vstr	s0, [r4]
 8003cac:	1f36      	subs	r6, r6, #4
 8003cae:	1f24      	subs	r4, r4, #4
 8003cb0:	42ae      	cmp	r6, r5
 8003cb2:	d2f5      	bcs.n	8003ca0 <forward_sinh+0x9c>
 8003cb4:	b001      	add	sp, #4
 8003cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cb8 <nl_func_tan_array_f32>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	6983      	ldr	r3, [r0, #24]
 8003cbc:	6988      	ldr	r0, [r1, #24]
 8003cbe:	6884      	ldr	r4, [r0, #8]
 8003cc0:	6899      	ldr	r1, [r3, #8]
 8003cc2:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8003cc6:	1f05      	subs	r5, r0, #4
 8003cc8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8003ccc:	1f06      	subs	r6, r0, #4
 8003cce:	42a5      	cmp	r5, r4
 8003cd0:	f0c0 800a 	bcc.w	8003ce8 <nl_func_tan_array_f32+0x30>
 8003cd4:	ed95 0a00 	vldr	s0, [r5]
 8003cd8:	f013 ff62 	bl	8017ba0 <tanf>
 8003cdc:	ed86 0a00 	vstr	s0, [r6]
 8003ce0:	1f2d      	subs	r5, r5, #4
 8003ce2:	1f36      	subs	r6, r6, #4
 8003ce4:	42a5      	cmp	r5, r4
 8003ce6:	d2f5      	bcs.n	8003cd4 <nl_func_tan_array_f32+0x1c>
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cec <forward_tan>:
 8003cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cee:	b081      	sub	sp, #4
 8003cf0:	6982      	ldr	r2, [r0, #24]
 8003cf2:	8811      	ldrh	r1, [r2, #0]
 8003cf4:	2900      	cmp	r1, #0
 8003cf6:	bf1a      	itte	ne
 8003cf8:	6850      	ldrne	r0, [r2, #4]
 8003cfa:	1d00      	addne	r0, r0, #4
 8003cfc:	2004      	moveq	r0, #4
 8003cfe:	f04f 0401 	mov.w	r4, #1
 8003d02:	6800      	ldr	r0, [r0, #0]
 8003d04:	2800      	cmp	r0, #0
 8003d06:	bf14      	ite	ne
 8003d08:	6803      	ldrne	r3, [r0, #0]
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	2902      	cmp	r1, #2
 8003d0e:	bfa6      	itte	ge
 8003d10:	6850      	ldrge	r0, [r2, #4]
 8003d12:	3010      	addge	r0, #16
 8003d14:	2004      	movlt	r0, #4
 8003d16:	6800      	ldr	r0, [r0, #0]
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	bf19      	ittee	ne
 8003d1c:	6800      	ldrne	r0, [r0, #0]
 8003d1e:	f100 0518 	addne.w	r5, r0, #24
 8003d22:	2100      	moveq	r1, #0
 8003d24:	f101 0518 	addeq.w	r5, r1, #24
 8003d28:	f103 0108 	add.w	r1, r3, #8
 8003d2c:	680a      	ldr	r2, [r1, #0]
 8003d2e:	0a12      	lsrs	r2, r2, #8
 8003d30:	d01e      	beq.n	8003d70 <forward_tan+0x84>
 8003d32:	684e      	ldr	r6, [r1, #4]
 8003d34:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d38:	4610      	mov	r0, r2
 8003d3a:	1f0f      	subs	r7, r1, #4
 8003d3c:	f010 0103 	ands.w	r1, r0, #3
 8003d40:	d006      	beq.n	8003d50 <forward_tan+0x64>
 8003d42:	1e52      	subs	r2, r2, #1
 8003d44:	f857 c904 	ldr.w	ip, [r7], #-4
 8003d48:	1e49      	subs	r1, r1, #1
 8003d4a:	fb0c f404 	mul.w	r4, ip, r4
 8003d4e:	d1f8      	bne.n	8003d42 <forward_tan+0x56>
 8003d50:	0880      	lsrs	r0, r0, #2
 8003d52:	d00d      	beq.n	8003d70 <forward_tan+0x84>
 8003d54:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d58:	3910      	subs	r1, #16
 8003d5a:	68ca      	ldr	r2, [r1, #12]
 8003d5c:	688e      	ldr	r6, [r1, #8]
 8003d5e:	684f      	ldr	r7, [r1, #4]
 8003d60:	4372      	muls	r2, r6
 8003d62:	f851 6910 	ldr.w	r6, [r1], #-16
 8003d66:	437a      	muls	r2, r7
 8003d68:	4372      	muls	r2, r6
 8003d6a:	4354      	muls	r4, r2
 8003d6c:	1e40      	subs	r0, r0, #1
 8003d6e:	d1f4      	bne.n	8003d5a <forward_tan+0x6e>
 8003d70:	6998      	ldr	r0, [r3, #24]
 8003d72:	6829      	ldr	r1, [r5, #0]
 8003d74:	6885      	ldr	r5, [r0, #8]
 8003d76:	6889      	ldr	r1, [r1, #8]
 8003d78:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8003d7c:	1f06      	subs	r6, r0, #4
 8003d7e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003d82:	1f04      	subs	r4, r0, #4
 8003d84:	42ae      	cmp	r6, r5
 8003d86:	d309      	bcc.n	8003d9c <forward_tan+0xb0>
 8003d88:	ed96 0a00 	vldr	s0, [r6]
 8003d8c:	f013 ff08 	bl	8017ba0 <tanf>
 8003d90:	ed84 0a00 	vstr	s0, [r4]
 8003d94:	1f36      	subs	r6, r6, #4
 8003d96:	1f24      	subs	r4, r4, #4
 8003d98:	42ae      	cmp	r6, r5
 8003d9a:	d2f5      	bcs.n	8003d88 <forward_tan+0x9c>
 8003d9c:	b001      	add	sp, #4
 8003d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003da0 <nl_func_square_array_f32>:
 8003da0:	6983      	ldr	r3, [r0, #24]
 8003da2:	6988      	ldr	r0, [r1, #24]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	6880      	ldr	r0, [r0, #8]
 8003da8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003dac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003db0:	1f09      	subs	r1, r1, #4
 8003db2:	1f12      	subs	r2, r2, #4
 8003db4:	4281      	cmp	r1, r0
 8003db6:	d329      	bcc.n	8003e0c <nl_func_square_array_f32+0x6c>
 8003db8:	ed91 0a00 	vldr	s0, [r1]
 8003dbc:	1f09      	subs	r1, r1, #4
 8003dbe:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003dc2:	4281      	cmp	r1, r0
 8003dc4:	ed82 0a00 	vstr	s0, [r2]
 8003dc8:	d320      	bcc.n	8003e0c <nl_func_square_array_f32+0x6c>
 8003dca:	edd1 0a00 	vldr	s1, [r1]
 8003dce:	1f13      	subs	r3, r2, #4
 8003dd0:	1f09      	subs	r1, r1, #4
 8003dd2:	ee60 0aa0 	vmul.f32	s1, s1, s1
 8003dd6:	4281      	cmp	r1, r0
 8003dd8:	edc3 0a00 	vstr	s1, [r3]
 8003ddc:	d316      	bcc.n	8003e0c <nl_func_square_array_f32+0x6c>
 8003dde:	ed91 0a00 	vldr	s0, [r1]
 8003de2:	f1a2 0308 	sub.w	r3, r2, #8
 8003de6:	1f09      	subs	r1, r1, #4
 8003de8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003dec:	4281      	cmp	r1, r0
 8003dee:	ed83 0a00 	vstr	s0, [r3]
 8003df2:	d30b      	bcc.n	8003e0c <nl_func_square_array_f32+0x6c>
 8003df4:	edd1 0a00 	vldr	s1, [r1]
 8003df8:	f1a2 030c 	sub.w	r3, r2, #12
 8003dfc:	1f09      	subs	r1, r1, #4
 8003dfe:	3a10      	subs	r2, #16
 8003e00:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8003e04:	4281      	cmp	r1, r0
 8003e06:	ed83 0a00 	vstr	s0, [r3]
 8003e0a:	d2d5      	bcs.n	8003db8 <nl_func_square_array_f32+0x18>
 8003e0c:	4770      	bx	lr
	...

08003e10 <forward_square>:
 8003e10:	b4f0      	push	{r4, r5, r6, r7}
 8003e12:	6982      	ldr	r2, [r0, #24]
 8003e14:	8811      	ldrh	r1, [r2, #0]
 8003e16:	2900      	cmp	r1, #0
 8003e18:	bf1a      	itte	ne
 8003e1a:	6850      	ldrne	r0, [r2, #4]
 8003e1c:	1d00      	addne	r0, r0, #4
 8003e1e:	2004      	moveq	r0, #4
 8003e20:	f04f 0401 	mov.w	r4, #1
 8003e24:	6800      	ldr	r0, [r0, #0]
 8003e26:	2800      	cmp	r0, #0
 8003e28:	bf14      	ite	ne
 8003e2a:	6803      	ldrne	r3, [r0, #0]
 8003e2c:	2300      	moveq	r3, #0
 8003e2e:	2902      	cmp	r1, #2
 8003e30:	bfa6      	itte	ge
 8003e32:	6850      	ldrge	r0, [r2, #4]
 8003e34:	3010      	addge	r0, #16
 8003e36:	2004      	movlt	r0, #4
 8003e38:	6800      	ldr	r0, [r0, #0]
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	bf19      	ittee	ne
 8003e3e:	6800      	ldrne	r0, [r0, #0]
 8003e40:	f100 0518 	addne.w	r5, r0, #24
 8003e44:	2100      	moveq	r1, #0
 8003e46:	f101 0518 	addeq.w	r5, r1, #24
 8003e4a:	f103 0108 	add.w	r1, r3, #8
 8003e4e:	680a      	ldr	r2, [r1, #0]
 8003e50:	0a12      	lsrs	r2, r2, #8
 8003e52:	d01e      	beq.n	8003e92 <forward_square+0x82>
 8003e54:	684e      	ldr	r6, [r1, #4]
 8003e56:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	1f0f      	subs	r7, r1, #4
 8003e5e:	f010 0103 	ands.w	r1, r0, #3
 8003e62:	d006      	beq.n	8003e72 <forward_square+0x62>
 8003e64:	1e52      	subs	r2, r2, #1
 8003e66:	f857 c904 	ldr.w	ip, [r7], #-4
 8003e6a:	1e49      	subs	r1, r1, #1
 8003e6c:	fb0c f404 	mul.w	r4, ip, r4
 8003e70:	d1f8      	bne.n	8003e64 <forward_square+0x54>
 8003e72:	0880      	lsrs	r0, r0, #2
 8003e74:	d00d      	beq.n	8003e92 <forward_square+0x82>
 8003e76:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e7a:	3910      	subs	r1, #16
 8003e7c:	68ca      	ldr	r2, [r1, #12]
 8003e7e:	688e      	ldr	r6, [r1, #8]
 8003e80:	684f      	ldr	r7, [r1, #4]
 8003e82:	4372      	muls	r2, r6
 8003e84:	f851 6910 	ldr.w	r6, [r1], #-16
 8003e88:	437a      	muls	r2, r7
 8003e8a:	4372      	muls	r2, r6
 8003e8c:	4354      	muls	r4, r2
 8003e8e:	1e40      	subs	r0, r0, #1
 8003e90:	d1f4      	bne.n	8003e7c <forward_square+0x6c>
 8003e92:	682a      	ldr	r2, [r5, #0]
 8003e94:	6998      	ldr	r0, [r3, #24]
 8003e96:	6892      	ldr	r2, [r2, #8]
 8003e98:	6880      	ldr	r0, [r0, #8]
 8003e9a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8003e9e:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8003ea2:	1f09      	subs	r1, r1, #4
 8003ea4:	1f1a      	subs	r2, r3, #4
 8003ea6:	4281      	cmp	r1, r0
 8003ea8:	f0c0 802a 	bcc.w	8003f00 <forward_square+0xf0>
 8003eac:	ed91 0a00 	vldr	s0, [r1]
 8003eb0:	1f09      	subs	r1, r1, #4
 8003eb2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003eb6:	4281      	cmp	r1, r0
 8003eb8:	ed82 0a00 	vstr	s0, [r2]
 8003ebc:	d320      	bcc.n	8003f00 <forward_square+0xf0>
 8003ebe:	edd1 0a00 	vldr	s1, [r1]
 8003ec2:	1f13      	subs	r3, r2, #4
 8003ec4:	1f09      	subs	r1, r1, #4
 8003ec6:	ee60 0aa0 	vmul.f32	s1, s1, s1
 8003eca:	4281      	cmp	r1, r0
 8003ecc:	edc3 0a00 	vstr	s1, [r3]
 8003ed0:	d316      	bcc.n	8003f00 <forward_square+0xf0>
 8003ed2:	ed91 0a00 	vldr	s0, [r1]
 8003ed6:	f1a2 0308 	sub.w	r3, r2, #8
 8003eda:	1f09      	subs	r1, r1, #4
 8003edc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003ee0:	4281      	cmp	r1, r0
 8003ee2:	ed83 0a00 	vstr	s0, [r3]
 8003ee6:	d30b      	bcc.n	8003f00 <forward_square+0xf0>
 8003ee8:	edd1 0a00 	vldr	s1, [r1]
 8003eec:	f1a2 030c 	sub.w	r3, r2, #12
 8003ef0:	1f09      	subs	r1, r1, #4
 8003ef2:	3a10      	subs	r2, #16
 8003ef4:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8003ef8:	4281      	cmp	r1, r0
 8003efa:	ed83 0a00 	vstr	s0, [r3]
 8003efe:	d2d5      	bcs.n	8003eac <forward_square+0x9c>
 8003f00:	bcf0      	pop	{r4, r5, r6, r7}
 8003f02:	4770      	bx	lr

08003f04 <nl_func_abs_array_f32>:
 8003f04:	6983      	ldr	r3, [r0, #24]
 8003f06:	6988      	ldr	r0, [r1, #24]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	6880      	ldr	r0, [r0, #8]
 8003f0c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003f10:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003f14:	1f09      	subs	r1, r1, #4
 8003f16:	1f12      	subs	r2, r2, #4
 8003f18:	4281      	cmp	r1, r0
 8003f1a:	d307      	bcc.n	8003f2c <nl_func_abs_array_f32+0x28>
 8003f1c:	f851 3904 	ldr.w	r3, [r1], #-4
 8003f20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f24:	4281      	cmp	r1, r0
 8003f26:	f842 3904 	str.w	r3, [r2], #-4
 8003f2a:	d2f7      	bcs.n	8003f1c <nl_func_abs_array_f32+0x18>
 8003f2c:	4770      	bx	lr
	...

08003f30 <forward_abs>:
 8003f30:	b4f0      	push	{r4, r5, r6, r7}
 8003f32:	6982      	ldr	r2, [r0, #24]
 8003f34:	8811      	ldrh	r1, [r2, #0]
 8003f36:	2900      	cmp	r1, #0
 8003f38:	bf1a      	itte	ne
 8003f3a:	6850      	ldrne	r0, [r2, #4]
 8003f3c:	1d00      	addne	r0, r0, #4
 8003f3e:	2004      	moveq	r0, #4
 8003f40:	f04f 0401 	mov.w	r4, #1
 8003f44:	6800      	ldr	r0, [r0, #0]
 8003f46:	2800      	cmp	r0, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	6803      	ldrne	r3, [r0, #0]
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	2902      	cmp	r1, #2
 8003f50:	bfa6      	itte	ge
 8003f52:	6850      	ldrge	r0, [r2, #4]
 8003f54:	3010      	addge	r0, #16
 8003f56:	2004      	movlt	r0, #4
 8003f58:	6800      	ldr	r0, [r0, #0]
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	bf19      	ittee	ne
 8003f5e:	6800      	ldrne	r0, [r0, #0]
 8003f60:	f100 0518 	addne.w	r5, r0, #24
 8003f64:	2100      	moveq	r1, #0
 8003f66:	f101 0518 	addeq.w	r5, r1, #24
 8003f6a:	f103 0108 	add.w	r1, r3, #8
 8003f6e:	680a      	ldr	r2, [r1, #0]
 8003f70:	0a12      	lsrs	r2, r2, #8
 8003f72:	d01e      	beq.n	8003fb2 <forward_abs+0x82>
 8003f74:	684e      	ldr	r6, [r1, #4]
 8003f76:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	1f0f      	subs	r7, r1, #4
 8003f7e:	f010 0103 	ands.w	r1, r0, #3
 8003f82:	d006      	beq.n	8003f92 <forward_abs+0x62>
 8003f84:	1e52      	subs	r2, r2, #1
 8003f86:	f857 c904 	ldr.w	ip, [r7], #-4
 8003f8a:	1e49      	subs	r1, r1, #1
 8003f8c:	fb0c f404 	mul.w	r4, ip, r4
 8003f90:	d1f8      	bne.n	8003f84 <forward_abs+0x54>
 8003f92:	0880      	lsrs	r0, r0, #2
 8003f94:	d00d      	beq.n	8003fb2 <forward_abs+0x82>
 8003f96:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f9a:	3910      	subs	r1, #16
 8003f9c:	68ca      	ldr	r2, [r1, #12]
 8003f9e:	688e      	ldr	r6, [r1, #8]
 8003fa0:	684f      	ldr	r7, [r1, #4]
 8003fa2:	4372      	muls	r2, r6
 8003fa4:	f851 6910 	ldr.w	r6, [r1], #-16
 8003fa8:	437a      	muls	r2, r7
 8003faa:	4372      	muls	r2, r6
 8003fac:	4354      	muls	r4, r2
 8003fae:	1e40      	subs	r0, r0, #1
 8003fb0:	d1f4      	bne.n	8003f9c <forward_abs+0x6c>
 8003fb2:	682a      	ldr	r2, [r5, #0]
 8003fb4:	6998      	ldr	r0, [r3, #24]
 8003fb6:	6892      	ldr	r2, [r2, #8]
 8003fb8:	6880      	ldr	r0, [r0, #8]
 8003fba:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8003fbe:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8003fc2:	1f09      	subs	r1, r1, #4
 8003fc4:	1f1a      	subs	r2, r3, #4
 8003fc6:	4281      	cmp	r1, r0
 8003fc8:	f0c0 8008 	bcc.w	8003fdc <forward_abs+0xac>
 8003fcc:	f851 4904 	ldr.w	r4, [r1], #-4
 8003fd0:	f024 4300 	bic.w	r3, r4, #2147483648	@ 0x80000000
 8003fd4:	4281      	cmp	r1, r0
 8003fd6:	f842 3904 	str.w	r3, [r2], #-4
 8003fda:	d2f7      	bcs.n	8003fcc <forward_abs+0x9c>
 8003fdc:	bcf0      	pop	{r4, r5, r6, r7}
 8003fde:	4770      	bx	lr

08003fe0 <nl_func_ceil_array_f32>:
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	6983      	ldr	r3, [r0, #24]
 8003fe4:	6988      	ldr	r0, [r1, #24]
 8003fe6:	6884      	ldr	r4, [r0, #8]
 8003fe8:	6899      	ldr	r1, [r3, #8]
 8003fea:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8003fee:	1f05      	subs	r5, r0, #4
 8003ff0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8003ff4:	1f06      	subs	r6, r0, #4
 8003ff6:	42a5      	cmp	r5, r4
 8003ff8:	f0c0 800a 	bcc.w	8004010 <nl_func_ceil_array_f32+0x30>
 8003ffc:	ed95 0a00 	vldr	s0, [r5]
 8004000:	f014 f8e0 	bl	80181c4 <ceilf>
 8004004:	ed86 0a00 	vstr	s0, [r6]
 8004008:	1f2d      	subs	r5, r5, #4
 800400a:	1f36      	subs	r6, r6, #4
 800400c:	42a5      	cmp	r5, r4
 800400e:	d2f5      	bcs.n	8003ffc <nl_func_ceil_array_f32+0x1c>
 8004010:	bd70      	pop	{r4, r5, r6, pc}
	...

08004014 <forward_ceil>:
 8004014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004016:	b081      	sub	sp, #4
 8004018:	6982      	ldr	r2, [r0, #24]
 800401a:	8811      	ldrh	r1, [r2, #0]
 800401c:	2900      	cmp	r1, #0
 800401e:	bf1a      	itte	ne
 8004020:	6850      	ldrne	r0, [r2, #4]
 8004022:	1d00      	addne	r0, r0, #4
 8004024:	2004      	moveq	r0, #4
 8004026:	f04f 0401 	mov.w	r4, #1
 800402a:	6800      	ldr	r0, [r0, #0]
 800402c:	2800      	cmp	r0, #0
 800402e:	bf14      	ite	ne
 8004030:	6803      	ldrne	r3, [r0, #0]
 8004032:	2300      	moveq	r3, #0
 8004034:	2902      	cmp	r1, #2
 8004036:	bfa6      	itte	ge
 8004038:	6850      	ldrge	r0, [r2, #4]
 800403a:	3010      	addge	r0, #16
 800403c:	2004      	movlt	r0, #4
 800403e:	6800      	ldr	r0, [r0, #0]
 8004040:	2800      	cmp	r0, #0
 8004042:	bf19      	ittee	ne
 8004044:	6800      	ldrne	r0, [r0, #0]
 8004046:	f100 0518 	addne.w	r5, r0, #24
 800404a:	2100      	moveq	r1, #0
 800404c:	f101 0518 	addeq.w	r5, r1, #24
 8004050:	f103 0108 	add.w	r1, r3, #8
 8004054:	680a      	ldr	r2, [r1, #0]
 8004056:	0a12      	lsrs	r2, r2, #8
 8004058:	d01e      	beq.n	8004098 <forward_ceil+0x84>
 800405a:	684e      	ldr	r6, [r1, #4]
 800405c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004060:	4610      	mov	r0, r2
 8004062:	1f0f      	subs	r7, r1, #4
 8004064:	f010 0103 	ands.w	r1, r0, #3
 8004068:	d006      	beq.n	8004078 <forward_ceil+0x64>
 800406a:	1e52      	subs	r2, r2, #1
 800406c:	f857 c904 	ldr.w	ip, [r7], #-4
 8004070:	1e49      	subs	r1, r1, #1
 8004072:	fb0c f404 	mul.w	r4, ip, r4
 8004076:	d1f8      	bne.n	800406a <forward_ceil+0x56>
 8004078:	0880      	lsrs	r0, r0, #2
 800407a:	d00d      	beq.n	8004098 <forward_ceil+0x84>
 800407c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004080:	3910      	subs	r1, #16
 8004082:	68ca      	ldr	r2, [r1, #12]
 8004084:	688e      	ldr	r6, [r1, #8]
 8004086:	684f      	ldr	r7, [r1, #4]
 8004088:	4372      	muls	r2, r6
 800408a:	f851 6910 	ldr.w	r6, [r1], #-16
 800408e:	437a      	muls	r2, r7
 8004090:	4372      	muls	r2, r6
 8004092:	4354      	muls	r4, r2
 8004094:	1e40      	subs	r0, r0, #1
 8004096:	d1f4      	bne.n	8004082 <forward_ceil+0x6e>
 8004098:	6998      	ldr	r0, [r3, #24]
 800409a:	6829      	ldr	r1, [r5, #0]
 800409c:	6885      	ldr	r5, [r0, #8]
 800409e:	6889      	ldr	r1, [r1, #8]
 80040a0:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 80040a4:	1f06      	subs	r6, r0, #4
 80040a6:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80040aa:	1f04      	subs	r4, r0, #4
 80040ac:	42ae      	cmp	r6, r5
 80040ae:	d309      	bcc.n	80040c4 <forward_ceil+0xb0>
 80040b0:	ed96 0a00 	vldr	s0, [r6]
 80040b4:	f014 f886 	bl	80181c4 <ceilf>
 80040b8:	ed84 0a00 	vstr	s0, [r4]
 80040bc:	1f36      	subs	r6, r6, #4
 80040be:	1f24      	subs	r4, r4, #4
 80040c0:	42ae      	cmp	r6, r5
 80040c2:	d2f5      	bcs.n	80040b0 <forward_ceil+0x9c>
 80040c4:	b001      	add	sp, #4
 80040c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040c8 <nl_func_floor_array_f32>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	6983      	ldr	r3, [r0, #24]
 80040cc:	6988      	ldr	r0, [r1, #24]
 80040ce:	6884      	ldr	r4, [r0, #8]
 80040d0:	6899      	ldr	r1, [r3, #8]
 80040d2:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 80040d6:	1f05      	subs	r5, r0, #4
 80040d8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80040dc:	1f06      	subs	r6, r0, #4
 80040de:	42a5      	cmp	r5, r4
 80040e0:	f0c0 800a 	bcc.w	80040f8 <nl_func_floor_array_f32+0x30>
 80040e4:	ed95 0a00 	vldr	s0, [r5]
 80040e8:	f014 f8ae 	bl	8018248 <floorf>
 80040ec:	ed86 0a00 	vstr	s0, [r6]
 80040f0:	1f2d      	subs	r5, r5, #4
 80040f2:	1f36      	subs	r6, r6, #4
 80040f4:	42a5      	cmp	r5, r4
 80040f6:	d2f5      	bcs.n	80040e4 <nl_func_floor_array_f32+0x1c>
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080040fc <forward_floor>:
 80040fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fe:	b081      	sub	sp, #4
 8004100:	6982      	ldr	r2, [r0, #24]
 8004102:	8811      	ldrh	r1, [r2, #0]
 8004104:	2900      	cmp	r1, #0
 8004106:	bf1a      	itte	ne
 8004108:	6850      	ldrne	r0, [r2, #4]
 800410a:	1d00      	addne	r0, r0, #4
 800410c:	2004      	moveq	r0, #4
 800410e:	f04f 0401 	mov.w	r4, #1
 8004112:	6800      	ldr	r0, [r0, #0]
 8004114:	2800      	cmp	r0, #0
 8004116:	bf14      	ite	ne
 8004118:	6803      	ldrne	r3, [r0, #0]
 800411a:	2300      	moveq	r3, #0
 800411c:	2902      	cmp	r1, #2
 800411e:	bfa6      	itte	ge
 8004120:	6850      	ldrge	r0, [r2, #4]
 8004122:	3010      	addge	r0, #16
 8004124:	2004      	movlt	r0, #4
 8004126:	6800      	ldr	r0, [r0, #0]
 8004128:	2800      	cmp	r0, #0
 800412a:	bf19      	ittee	ne
 800412c:	6800      	ldrne	r0, [r0, #0]
 800412e:	f100 0518 	addne.w	r5, r0, #24
 8004132:	2100      	moveq	r1, #0
 8004134:	f101 0518 	addeq.w	r5, r1, #24
 8004138:	f103 0108 	add.w	r1, r3, #8
 800413c:	680a      	ldr	r2, [r1, #0]
 800413e:	0a12      	lsrs	r2, r2, #8
 8004140:	d01e      	beq.n	8004180 <forward_floor+0x84>
 8004142:	684e      	ldr	r6, [r1, #4]
 8004144:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004148:	4610      	mov	r0, r2
 800414a:	1f0f      	subs	r7, r1, #4
 800414c:	f010 0103 	ands.w	r1, r0, #3
 8004150:	d006      	beq.n	8004160 <forward_floor+0x64>
 8004152:	1e52      	subs	r2, r2, #1
 8004154:	f857 c904 	ldr.w	ip, [r7], #-4
 8004158:	1e49      	subs	r1, r1, #1
 800415a:	fb0c f404 	mul.w	r4, ip, r4
 800415e:	d1f8      	bne.n	8004152 <forward_floor+0x56>
 8004160:	0880      	lsrs	r0, r0, #2
 8004162:	d00d      	beq.n	8004180 <forward_floor+0x84>
 8004164:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004168:	3910      	subs	r1, #16
 800416a:	68ca      	ldr	r2, [r1, #12]
 800416c:	688e      	ldr	r6, [r1, #8]
 800416e:	684f      	ldr	r7, [r1, #4]
 8004170:	4372      	muls	r2, r6
 8004172:	f851 6910 	ldr.w	r6, [r1], #-16
 8004176:	437a      	muls	r2, r7
 8004178:	4372      	muls	r2, r6
 800417a:	4354      	muls	r4, r2
 800417c:	1e40      	subs	r0, r0, #1
 800417e:	d1f4      	bne.n	800416a <forward_floor+0x6e>
 8004180:	6998      	ldr	r0, [r3, #24]
 8004182:	6829      	ldr	r1, [r5, #0]
 8004184:	6885      	ldr	r5, [r0, #8]
 8004186:	6889      	ldr	r1, [r1, #8]
 8004188:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 800418c:	1f06      	subs	r6, r0, #4
 800418e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004192:	1f04      	subs	r4, r0, #4
 8004194:	42ae      	cmp	r6, r5
 8004196:	d309      	bcc.n	80041ac <forward_floor+0xb0>
 8004198:	ed96 0a00 	vldr	s0, [r6]
 800419c:	f014 f854 	bl	8018248 <floorf>
 80041a0:	ed84 0a00 	vstr	s0, [r4]
 80041a4:	1f36      	subs	r6, r6, #4
 80041a6:	1f24      	subs	r4, r4, #4
 80041a8:	42ae      	cmp	r6, r5
 80041aa:	d2f5      	bcs.n	8004198 <forward_floor+0x9c>
 80041ac:	b001      	add	sp, #4
 80041ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041b0 <nl_func_round_array_f32>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	6983      	ldr	r3, [r0, #24]
 80041b4:	6988      	ldr	r0, [r1, #24]
 80041b6:	6884      	ldr	r4, [r0, #8]
 80041b8:	6899      	ldr	r1, [r3, #8]
 80041ba:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 80041be:	1f05      	subs	r5, r0, #4
 80041c0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80041c4:	1f06      	subs	r6, r0, #4
 80041c6:	42a5      	cmp	r5, r4
 80041c8:	f0c0 800a 	bcc.w	80041e0 <nl_func_round_array_f32+0x30>
 80041cc:	ed95 0a00 	vldr	s0, [r5]
 80041d0:	f014 f87e 	bl	80182d0 <roundf>
 80041d4:	ed86 0a00 	vstr	s0, [r6]
 80041d8:	1f2d      	subs	r5, r5, #4
 80041da:	1f36      	subs	r6, r6, #4
 80041dc:	42a5      	cmp	r5, r4
 80041de:	d2f5      	bcs.n	80041cc <nl_func_round_array_f32+0x1c>
 80041e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080041e4 <forward_round>:
 80041e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e6:	b081      	sub	sp, #4
 80041e8:	6982      	ldr	r2, [r0, #24]
 80041ea:	8811      	ldrh	r1, [r2, #0]
 80041ec:	2900      	cmp	r1, #0
 80041ee:	bf1a      	itte	ne
 80041f0:	6850      	ldrne	r0, [r2, #4]
 80041f2:	1d00      	addne	r0, r0, #4
 80041f4:	2004      	moveq	r0, #4
 80041f6:	f04f 0401 	mov.w	r4, #1
 80041fa:	6800      	ldr	r0, [r0, #0]
 80041fc:	2800      	cmp	r0, #0
 80041fe:	bf14      	ite	ne
 8004200:	6803      	ldrne	r3, [r0, #0]
 8004202:	2300      	moveq	r3, #0
 8004204:	2902      	cmp	r1, #2
 8004206:	bfa6      	itte	ge
 8004208:	6850      	ldrge	r0, [r2, #4]
 800420a:	3010      	addge	r0, #16
 800420c:	2004      	movlt	r0, #4
 800420e:	6800      	ldr	r0, [r0, #0]
 8004210:	2800      	cmp	r0, #0
 8004212:	bf19      	ittee	ne
 8004214:	6800      	ldrne	r0, [r0, #0]
 8004216:	f100 0518 	addne.w	r5, r0, #24
 800421a:	2100      	moveq	r1, #0
 800421c:	f101 0518 	addeq.w	r5, r1, #24
 8004220:	f103 0108 	add.w	r1, r3, #8
 8004224:	680a      	ldr	r2, [r1, #0]
 8004226:	0a12      	lsrs	r2, r2, #8
 8004228:	d01e      	beq.n	8004268 <forward_round+0x84>
 800422a:	684e      	ldr	r6, [r1, #4]
 800422c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004230:	4610      	mov	r0, r2
 8004232:	1f0f      	subs	r7, r1, #4
 8004234:	f010 0103 	ands.w	r1, r0, #3
 8004238:	d006      	beq.n	8004248 <forward_round+0x64>
 800423a:	1e52      	subs	r2, r2, #1
 800423c:	f857 c904 	ldr.w	ip, [r7], #-4
 8004240:	1e49      	subs	r1, r1, #1
 8004242:	fb0c f404 	mul.w	r4, ip, r4
 8004246:	d1f8      	bne.n	800423a <forward_round+0x56>
 8004248:	0880      	lsrs	r0, r0, #2
 800424a:	d00d      	beq.n	8004268 <forward_round+0x84>
 800424c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004250:	3910      	subs	r1, #16
 8004252:	68ca      	ldr	r2, [r1, #12]
 8004254:	688e      	ldr	r6, [r1, #8]
 8004256:	684f      	ldr	r7, [r1, #4]
 8004258:	4372      	muls	r2, r6
 800425a:	f851 6910 	ldr.w	r6, [r1], #-16
 800425e:	437a      	muls	r2, r7
 8004260:	4372      	muls	r2, r6
 8004262:	4354      	muls	r4, r2
 8004264:	1e40      	subs	r0, r0, #1
 8004266:	d1f4      	bne.n	8004252 <forward_round+0x6e>
 8004268:	6998      	ldr	r0, [r3, #24]
 800426a:	6829      	ldr	r1, [r5, #0]
 800426c:	6885      	ldr	r5, [r0, #8]
 800426e:	6889      	ldr	r1, [r1, #8]
 8004270:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8004274:	1f06      	subs	r6, r0, #4
 8004276:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800427a:	1f04      	subs	r4, r0, #4
 800427c:	42ae      	cmp	r6, r5
 800427e:	d309      	bcc.n	8004294 <forward_round+0xb0>
 8004280:	ed96 0a00 	vldr	s0, [r6]
 8004284:	f014 f824 	bl	80182d0 <roundf>
 8004288:	ed84 0a00 	vstr	s0, [r4]
 800428c:	1f36      	subs	r6, r6, #4
 800428e:	1f24      	subs	r4, r4, #4
 8004290:	42ae      	cmp	r6, r5
 8004292:	d2f5      	bcs.n	8004280 <forward_round+0x9c>
 8004294:	b001      	add	sp, #4
 8004296:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004298 <nl_func_neg_array_f32>:
 8004298:	6983      	ldr	r3, [r0, #24]
 800429a:	6988      	ldr	r0, [r1, #24]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	6880      	ldr	r0, [r0, #8]
 80042a0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80042a4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80042a8:	1f09      	subs	r1, r1, #4
 80042aa:	1f12      	subs	r2, r2, #4
 80042ac:	4281      	cmp	r1, r0
 80042ae:	d32b      	bcc.n	8004308 <nl_func_neg_array_f32+0x70>
 80042b0:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80042b4:	edd1 0a00 	vldr	s1, [r1]
 80042b8:	1f09      	subs	r1, r1, #4
 80042ba:	ee60 0a80 	vmul.f32	s1, s1, s0
 80042be:	4281      	cmp	r1, r0
 80042c0:	edc2 0a00 	vstr	s1, [r2]
 80042c4:	d320      	bcc.n	8004308 <nl_func_neg_array_f32+0x70>
 80042c6:	ed91 1a00 	vldr	s2, [r1]
 80042ca:	1f13      	subs	r3, r2, #4
 80042cc:	1f09      	subs	r1, r1, #4
 80042ce:	ee21 1a00 	vmul.f32	s2, s2, s0
 80042d2:	4281      	cmp	r1, r0
 80042d4:	ed83 1a00 	vstr	s2, [r3]
 80042d8:	d316      	bcc.n	8004308 <nl_func_neg_array_f32+0x70>
 80042da:	edd1 0a00 	vldr	s1, [r1]
 80042de:	f1a2 0308 	sub.w	r3, r2, #8
 80042e2:	1f09      	subs	r1, r1, #4
 80042e4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80042e8:	4281      	cmp	r1, r0
 80042ea:	edc3 0a00 	vstr	s1, [r3]
 80042ee:	d30b      	bcc.n	8004308 <nl_func_neg_array_f32+0x70>
 80042f0:	ed91 1a00 	vldr	s2, [r1]
 80042f4:	f1a2 030c 	sub.w	r3, r2, #12
 80042f8:	1f09      	subs	r1, r1, #4
 80042fa:	3a10      	subs	r2, #16
 80042fc:	ee61 0a00 	vmul.f32	s1, s2, s0
 8004300:	4281      	cmp	r1, r0
 8004302:	edc3 0a00 	vstr	s1, [r3]
 8004306:	d2d5      	bcs.n	80042b4 <nl_func_neg_array_f32+0x1c>
 8004308:	4770      	bx	lr
	...

0800430c <forward_neg>:
 800430c:	b4f0      	push	{r4, r5, r6, r7}
 800430e:	6982      	ldr	r2, [r0, #24]
 8004310:	8811      	ldrh	r1, [r2, #0]
 8004312:	2900      	cmp	r1, #0
 8004314:	bf1a      	itte	ne
 8004316:	6850      	ldrne	r0, [r2, #4]
 8004318:	1d00      	addne	r0, r0, #4
 800431a:	2004      	moveq	r0, #4
 800431c:	f04f 0401 	mov.w	r4, #1
 8004320:	6800      	ldr	r0, [r0, #0]
 8004322:	2800      	cmp	r0, #0
 8004324:	bf14      	ite	ne
 8004326:	6803      	ldrne	r3, [r0, #0]
 8004328:	2300      	moveq	r3, #0
 800432a:	2902      	cmp	r1, #2
 800432c:	bfa6      	itte	ge
 800432e:	6850      	ldrge	r0, [r2, #4]
 8004330:	3010      	addge	r0, #16
 8004332:	2004      	movlt	r0, #4
 8004334:	6800      	ldr	r0, [r0, #0]
 8004336:	2800      	cmp	r0, #0
 8004338:	bf19      	ittee	ne
 800433a:	6800      	ldrne	r0, [r0, #0]
 800433c:	f100 0518 	addne.w	r5, r0, #24
 8004340:	2100      	moveq	r1, #0
 8004342:	f101 0518 	addeq.w	r5, r1, #24
 8004346:	f103 0108 	add.w	r1, r3, #8
 800434a:	680a      	ldr	r2, [r1, #0]
 800434c:	0a12      	lsrs	r2, r2, #8
 800434e:	d01e      	beq.n	800438e <forward_neg+0x82>
 8004350:	684e      	ldr	r6, [r1, #4]
 8004352:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004356:	4610      	mov	r0, r2
 8004358:	1f0f      	subs	r7, r1, #4
 800435a:	f010 0103 	ands.w	r1, r0, #3
 800435e:	d006      	beq.n	800436e <forward_neg+0x62>
 8004360:	1e52      	subs	r2, r2, #1
 8004362:	f857 c904 	ldr.w	ip, [r7], #-4
 8004366:	1e49      	subs	r1, r1, #1
 8004368:	fb0c f404 	mul.w	r4, ip, r4
 800436c:	d1f8      	bne.n	8004360 <forward_neg+0x54>
 800436e:	0880      	lsrs	r0, r0, #2
 8004370:	d00d      	beq.n	800438e <forward_neg+0x82>
 8004372:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004376:	3910      	subs	r1, #16
 8004378:	68ca      	ldr	r2, [r1, #12]
 800437a:	688e      	ldr	r6, [r1, #8]
 800437c:	684f      	ldr	r7, [r1, #4]
 800437e:	4372      	muls	r2, r6
 8004380:	f851 6910 	ldr.w	r6, [r1], #-16
 8004384:	437a      	muls	r2, r7
 8004386:	4372      	muls	r2, r6
 8004388:	4354      	muls	r4, r2
 800438a:	1e40      	subs	r0, r0, #1
 800438c:	d1f4      	bne.n	8004378 <forward_neg+0x6c>
 800438e:	682a      	ldr	r2, [r5, #0]
 8004390:	6998      	ldr	r0, [r3, #24]
 8004392:	6892      	ldr	r2, [r2, #8]
 8004394:	6880      	ldr	r0, [r0, #8]
 8004396:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 800439a:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800439e:	1f09      	subs	r1, r1, #4
 80043a0:	1f1a      	subs	r2, r3, #4
 80043a2:	4281      	cmp	r1, r0
 80043a4:	f0c0 802c 	bcc.w	8004400 <forward_neg+0xf4>
 80043a8:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80043ac:	edd1 0a00 	vldr	s1, [r1]
 80043b0:	1f09      	subs	r1, r1, #4
 80043b2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80043b6:	4281      	cmp	r1, r0
 80043b8:	edc2 0a00 	vstr	s1, [r2]
 80043bc:	d320      	bcc.n	8004400 <forward_neg+0xf4>
 80043be:	ed91 1a00 	vldr	s2, [r1]
 80043c2:	1f13      	subs	r3, r2, #4
 80043c4:	1f09      	subs	r1, r1, #4
 80043c6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80043ca:	4281      	cmp	r1, r0
 80043cc:	ed83 1a00 	vstr	s2, [r3]
 80043d0:	d316      	bcc.n	8004400 <forward_neg+0xf4>
 80043d2:	edd1 0a00 	vldr	s1, [r1]
 80043d6:	f1a2 0308 	sub.w	r3, r2, #8
 80043da:	1f09      	subs	r1, r1, #4
 80043dc:	ee60 0a80 	vmul.f32	s1, s1, s0
 80043e0:	4281      	cmp	r1, r0
 80043e2:	edc3 0a00 	vstr	s1, [r3]
 80043e6:	d30b      	bcc.n	8004400 <forward_neg+0xf4>
 80043e8:	ed91 1a00 	vldr	s2, [r1]
 80043ec:	f1a2 030c 	sub.w	r3, r2, #12
 80043f0:	1f09      	subs	r1, r1, #4
 80043f2:	3a10      	subs	r2, #16
 80043f4:	ee61 0a00 	vmul.f32	s1, s2, s0
 80043f8:	4281      	cmp	r1, r0
 80043fa:	edc3 0a00 	vstr	s1, [r3]
 80043fe:	d2d5      	bcs.n	80043ac <forward_neg+0xa0>
 8004400:	bcf0      	pop	{r4, r5, r6, r7}
 8004402:	4770      	bx	lr

08004404 <nl_func_reciprocal_array_f32>:
 8004404:	6983      	ldr	r3, [r0, #24]
 8004406:	6988      	ldr	r0, [r1, #24]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	6880      	ldr	r0, [r0, #8]
 800440c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004410:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004414:	1f09      	subs	r1, r1, #4
 8004416:	1f12      	subs	r2, r2, #4
 8004418:	4281      	cmp	r1, r0
 800441a:	d331      	bcc.n	8004480 <nl_func_reciprocal_array_f32+0x7c>
 800441c:	ed91 0a00 	vldr	s0, [r1]
 8004420:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8004424:	1f09      	subs	r1, r1, #4
 8004426:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800442a:	4281      	cmp	r1, r0
 800442c:	ed82 0a00 	vstr	s0, [r2]
 8004430:	d326      	bcc.n	8004480 <nl_func_reciprocal_array_f32+0x7c>
 8004432:	edd1 0a00 	vldr	s1, [r1]
 8004436:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800443a:	1f13      	subs	r3, r2, #4
 800443c:	1f09      	subs	r1, r1, #4
 800443e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004442:	4281      	cmp	r1, r0
 8004444:	ed83 0a00 	vstr	s0, [r3]
 8004448:	d31a      	bcc.n	8004480 <nl_func_reciprocal_array_f32+0x7c>
 800444a:	ed91 0a00 	vldr	s0, [r1]
 800444e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8004452:	f1a2 0308 	sub.w	r3, r2, #8
 8004456:	1f09      	subs	r1, r1, #4
 8004458:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800445c:	4281      	cmp	r1, r0
 800445e:	ed83 0a00 	vstr	s0, [r3]
 8004462:	d30d      	bcc.n	8004480 <nl_func_reciprocal_array_f32+0x7c>
 8004464:	edd1 0a00 	vldr	s1, [r1]
 8004468:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800446c:	f1a2 030c 	sub.w	r3, r2, #12
 8004470:	1f09      	subs	r1, r1, #4
 8004472:	3a10      	subs	r2, #16
 8004474:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004478:	4281      	cmp	r1, r0
 800447a:	ed83 0a00 	vstr	s0, [r3]
 800447e:	d2cd      	bcs.n	800441c <nl_func_reciprocal_array_f32+0x18>
 8004480:	4770      	bx	lr
	...

08004484 <forward_reciprocal>:
 8004484:	b4f0      	push	{r4, r5, r6, r7}
 8004486:	6982      	ldr	r2, [r0, #24]
 8004488:	8811      	ldrh	r1, [r2, #0]
 800448a:	2900      	cmp	r1, #0
 800448c:	bf1a      	itte	ne
 800448e:	6850      	ldrne	r0, [r2, #4]
 8004490:	1d00      	addne	r0, r0, #4
 8004492:	2004      	moveq	r0, #4
 8004494:	f04f 0401 	mov.w	r4, #1
 8004498:	6800      	ldr	r0, [r0, #0]
 800449a:	2800      	cmp	r0, #0
 800449c:	bf14      	ite	ne
 800449e:	6803      	ldrne	r3, [r0, #0]
 80044a0:	2300      	moveq	r3, #0
 80044a2:	2902      	cmp	r1, #2
 80044a4:	bfa6      	itte	ge
 80044a6:	6850      	ldrge	r0, [r2, #4]
 80044a8:	3010      	addge	r0, #16
 80044aa:	2004      	movlt	r0, #4
 80044ac:	6800      	ldr	r0, [r0, #0]
 80044ae:	2800      	cmp	r0, #0
 80044b0:	bf19      	ittee	ne
 80044b2:	6800      	ldrne	r0, [r0, #0]
 80044b4:	f100 0518 	addne.w	r5, r0, #24
 80044b8:	2100      	moveq	r1, #0
 80044ba:	f101 0518 	addeq.w	r5, r1, #24
 80044be:	f103 0108 	add.w	r1, r3, #8
 80044c2:	680a      	ldr	r2, [r1, #0]
 80044c4:	0a12      	lsrs	r2, r2, #8
 80044c6:	d01e      	beq.n	8004506 <forward_reciprocal+0x82>
 80044c8:	684e      	ldr	r6, [r1, #4]
 80044ca:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80044ce:	4610      	mov	r0, r2
 80044d0:	1f0f      	subs	r7, r1, #4
 80044d2:	f010 0103 	ands.w	r1, r0, #3
 80044d6:	d006      	beq.n	80044e6 <forward_reciprocal+0x62>
 80044d8:	1e52      	subs	r2, r2, #1
 80044da:	f857 c904 	ldr.w	ip, [r7], #-4
 80044de:	1e49      	subs	r1, r1, #1
 80044e0:	fb0c f404 	mul.w	r4, ip, r4
 80044e4:	d1f8      	bne.n	80044d8 <forward_reciprocal+0x54>
 80044e6:	0880      	lsrs	r0, r0, #2
 80044e8:	d00d      	beq.n	8004506 <forward_reciprocal+0x82>
 80044ea:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80044ee:	3910      	subs	r1, #16
 80044f0:	68ca      	ldr	r2, [r1, #12]
 80044f2:	688e      	ldr	r6, [r1, #8]
 80044f4:	684f      	ldr	r7, [r1, #4]
 80044f6:	4372      	muls	r2, r6
 80044f8:	f851 6910 	ldr.w	r6, [r1], #-16
 80044fc:	437a      	muls	r2, r7
 80044fe:	4372      	muls	r2, r6
 8004500:	4354      	muls	r4, r2
 8004502:	1e40      	subs	r0, r0, #1
 8004504:	d1f4      	bne.n	80044f0 <forward_reciprocal+0x6c>
 8004506:	682a      	ldr	r2, [r5, #0]
 8004508:	6998      	ldr	r0, [r3, #24]
 800450a:	6892      	ldr	r2, [r2, #8]
 800450c:	6880      	ldr	r0, [r0, #8]
 800450e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8004512:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8004516:	1f09      	subs	r1, r1, #4
 8004518:	1f1a      	subs	r2, r3, #4
 800451a:	4281      	cmp	r1, r0
 800451c:	f0c0 8032 	bcc.w	8004584 <forward_reciprocal+0x100>
 8004520:	ed91 0a00 	vldr	s0, [r1]
 8004524:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8004528:	1f09      	subs	r1, r1, #4
 800452a:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800452e:	4281      	cmp	r1, r0
 8004530:	ed82 0a00 	vstr	s0, [r2]
 8004534:	d326      	bcc.n	8004584 <forward_reciprocal+0x100>
 8004536:	edd1 0a00 	vldr	s1, [r1]
 800453a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800453e:	1f13      	subs	r3, r2, #4
 8004540:	1f09      	subs	r1, r1, #4
 8004542:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004546:	4281      	cmp	r1, r0
 8004548:	ed83 0a00 	vstr	s0, [r3]
 800454c:	d31a      	bcc.n	8004584 <forward_reciprocal+0x100>
 800454e:	ed91 0a00 	vldr	s0, [r1]
 8004552:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8004556:	f1a2 0308 	sub.w	r3, r2, #8
 800455a:	1f09      	subs	r1, r1, #4
 800455c:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8004560:	4281      	cmp	r1, r0
 8004562:	ed83 0a00 	vstr	s0, [r3]
 8004566:	d30d      	bcc.n	8004584 <forward_reciprocal+0x100>
 8004568:	edd1 0a00 	vldr	s1, [r1]
 800456c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004570:	f1a2 030c 	sub.w	r3, r2, #12
 8004574:	1f09      	subs	r1, r1, #4
 8004576:	3a10      	subs	r2, #16
 8004578:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800457c:	4281      	cmp	r1, r0
 800457e:	ed83 0a00 	vstr	s0, [r3]
 8004582:	d2cd      	bcs.n	8004520 <forward_reciprocal+0x9c>
 8004584:	bcf0      	pop	{r4, r5, r6, r7}
 8004586:	4770      	bx	lr

08004588 <nl_func_exp_array_f32>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	6983      	ldr	r3, [r0, #24]
 800458c:	6988      	ldr	r0, [r1, #24]
 800458e:	6884      	ldr	r4, [r0, #8]
 8004590:	6899      	ldr	r1, [r3, #8]
 8004592:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8004596:	1f05      	subs	r5, r0, #4
 8004598:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800459c:	1f06      	subs	r6, r0, #4
 800459e:	42a5      	cmp	r5, r4
 80045a0:	f0c0 800a 	bcc.w	80045b8 <nl_func_exp_array_f32+0x30>
 80045a4:	ed95 0a00 	vldr	s0, [r5]
 80045a8:	f012 fe4e 	bl	8017248 <expf>
 80045ac:	ed86 0a00 	vstr	s0, [r6]
 80045b0:	1f2d      	subs	r5, r5, #4
 80045b2:	1f36      	subs	r6, r6, #4
 80045b4:	42a5      	cmp	r5, r4
 80045b6:	d2f5      	bcs.n	80045a4 <nl_func_exp_array_f32+0x1c>
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080045bc <forward_exp>:
 80045bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045be:	b081      	sub	sp, #4
 80045c0:	6982      	ldr	r2, [r0, #24]
 80045c2:	8811      	ldrh	r1, [r2, #0]
 80045c4:	2900      	cmp	r1, #0
 80045c6:	bf1a      	itte	ne
 80045c8:	6850      	ldrne	r0, [r2, #4]
 80045ca:	1d00      	addne	r0, r0, #4
 80045cc:	2004      	moveq	r0, #4
 80045ce:	f04f 0401 	mov.w	r4, #1
 80045d2:	6800      	ldr	r0, [r0, #0]
 80045d4:	2800      	cmp	r0, #0
 80045d6:	bf14      	ite	ne
 80045d8:	6803      	ldrne	r3, [r0, #0]
 80045da:	2300      	moveq	r3, #0
 80045dc:	2902      	cmp	r1, #2
 80045de:	bfa6      	itte	ge
 80045e0:	6850      	ldrge	r0, [r2, #4]
 80045e2:	3010      	addge	r0, #16
 80045e4:	2004      	movlt	r0, #4
 80045e6:	6800      	ldr	r0, [r0, #0]
 80045e8:	2800      	cmp	r0, #0
 80045ea:	bf19      	ittee	ne
 80045ec:	6800      	ldrne	r0, [r0, #0]
 80045ee:	f100 0518 	addne.w	r5, r0, #24
 80045f2:	2100      	moveq	r1, #0
 80045f4:	f101 0518 	addeq.w	r5, r1, #24
 80045f8:	f103 0108 	add.w	r1, r3, #8
 80045fc:	680a      	ldr	r2, [r1, #0]
 80045fe:	0a12      	lsrs	r2, r2, #8
 8004600:	d01e      	beq.n	8004640 <forward_exp+0x84>
 8004602:	684e      	ldr	r6, [r1, #4]
 8004604:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004608:	4610      	mov	r0, r2
 800460a:	1f0f      	subs	r7, r1, #4
 800460c:	f010 0103 	ands.w	r1, r0, #3
 8004610:	d006      	beq.n	8004620 <forward_exp+0x64>
 8004612:	1e52      	subs	r2, r2, #1
 8004614:	f857 c904 	ldr.w	ip, [r7], #-4
 8004618:	1e49      	subs	r1, r1, #1
 800461a:	fb0c f404 	mul.w	r4, ip, r4
 800461e:	d1f8      	bne.n	8004612 <forward_exp+0x56>
 8004620:	0880      	lsrs	r0, r0, #2
 8004622:	d00d      	beq.n	8004640 <forward_exp+0x84>
 8004624:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004628:	3910      	subs	r1, #16
 800462a:	68ca      	ldr	r2, [r1, #12]
 800462c:	688e      	ldr	r6, [r1, #8]
 800462e:	684f      	ldr	r7, [r1, #4]
 8004630:	4372      	muls	r2, r6
 8004632:	f851 6910 	ldr.w	r6, [r1], #-16
 8004636:	437a      	muls	r2, r7
 8004638:	4372      	muls	r2, r6
 800463a:	4354      	muls	r4, r2
 800463c:	1e40      	subs	r0, r0, #1
 800463e:	d1f4      	bne.n	800462a <forward_exp+0x6e>
 8004640:	6998      	ldr	r0, [r3, #24]
 8004642:	6829      	ldr	r1, [r5, #0]
 8004644:	6885      	ldr	r5, [r0, #8]
 8004646:	6889      	ldr	r1, [r1, #8]
 8004648:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 800464c:	1f06      	subs	r6, r0, #4
 800464e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004652:	1f04      	subs	r4, r0, #4
 8004654:	42ae      	cmp	r6, r5
 8004656:	d309      	bcc.n	800466c <forward_exp+0xb0>
 8004658:	ed96 0a00 	vldr	s0, [r6]
 800465c:	f012 fdf4 	bl	8017248 <expf>
 8004660:	ed84 0a00 	vstr	s0, [r4]
 8004664:	1f36      	subs	r6, r6, #4
 8004666:	1f24      	subs	r4, r4, #4
 8004668:	42ae      	cmp	r6, r5
 800466a:	d2f5      	bcs.n	8004658 <forward_exp+0x9c>
 800466c:	b001      	add	sp, #4
 800466e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004670 <nl_func_sigmoid_array_f32>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	6983      	ldr	r3, [r0, #24]
 8004674:	6988      	ldr	r0, [r1, #24]
 8004676:	6884      	ldr	r4, [r0, #8]
 8004678:	6899      	ldr	r1, [r3, #8]
 800467a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 800467e:	1f05      	subs	r5, r0, #4
 8004680:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8004684:	1f06      	subs	r6, r0, #4
 8004686:	42a5      	cmp	r5, r4
 8004688:	f0c0 8014 	bcc.w	80046b4 <nl_func_sigmoid_array_f32+0x44>
 800468c:	ed95 0a00 	vldr	s0, [r5]
 8004690:	eeb1 0a40 	vneg.f32	s0, s0
 8004694:	f012 fdd8 	bl	8017248 <expf>
 8004698:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800469c:	ee70 0a20 	vadd.f32	s1, s0, s1
 80046a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80046a4:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80046a8:	ed86 0a00 	vstr	s0, [r6]
 80046ac:	1f2d      	subs	r5, r5, #4
 80046ae:	1f36      	subs	r6, r6, #4
 80046b0:	42a5      	cmp	r5, r4
 80046b2:	d2eb      	bcs.n	800468c <nl_func_sigmoid_array_f32+0x1c>
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080046b8 <forward_sigmoid>:
 80046b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ba:	b081      	sub	sp, #4
 80046bc:	6982      	ldr	r2, [r0, #24]
 80046be:	8811      	ldrh	r1, [r2, #0]
 80046c0:	2900      	cmp	r1, #0
 80046c2:	bf1a      	itte	ne
 80046c4:	6850      	ldrne	r0, [r2, #4]
 80046c6:	1d00      	addne	r0, r0, #4
 80046c8:	2004      	moveq	r0, #4
 80046ca:	f04f 0401 	mov.w	r4, #1
 80046ce:	6800      	ldr	r0, [r0, #0]
 80046d0:	2800      	cmp	r0, #0
 80046d2:	bf14      	ite	ne
 80046d4:	6803      	ldrne	r3, [r0, #0]
 80046d6:	2300      	moveq	r3, #0
 80046d8:	2902      	cmp	r1, #2
 80046da:	bfa6      	itte	ge
 80046dc:	6850      	ldrge	r0, [r2, #4]
 80046de:	3010      	addge	r0, #16
 80046e0:	2004      	movlt	r0, #4
 80046e2:	6800      	ldr	r0, [r0, #0]
 80046e4:	2800      	cmp	r0, #0
 80046e6:	bf19      	ittee	ne
 80046e8:	6800      	ldrne	r0, [r0, #0]
 80046ea:	f100 0518 	addne.w	r5, r0, #24
 80046ee:	2100      	moveq	r1, #0
 80046f0:	f101 0518 	addeq.w	r5, r1, #24
 80046f4:	f103 0108 	add.w	r1, r3, #8
 80046f8:	680a      	ldr	r2, [r1, #0]
 80046fa:	0a12      	lsrs	r2, r2, #8
 80046fc:	d01e      	beq.n	800473c <forward_sigmoid+0x84>
 80046fe:	684e      	ldr	r6, [r1, #4]
 8004700:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004704:	4610      	mov	r0, r2
 8004706:	1f0f      	subs	r7, r1, #4
 8004708:	f010 0103 	ands.w	r1, r0, #3
 800470c:	d006      	beq.n	800471c <forward_sigmoid+0x64>
 800470e:	1e52      	subs	r2, r2, #1
 8004710:	f857 c904 	ldr.w	ip, [r7], #-4
 8004714:	1e49      	subs	r1, r1, #1
 8004716:	fb0c f404 	mul.w	r4, ip, r4
 800471a:	d1f8      	bne.n	800470e <forward_sigmoid+0x56>
 800471c:	0880      	lsrs	r0, r0, #2
 800471e:	d00d      	beq.n	800473c <forward_sigmoid+0x84>
 8004720:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004724:	3910      	subs	r1, #16
 8004726:	68ca      	ldr	r2, [r1, #12]
 8004728:	688e      	ldr	r6, [r1, #8]
 800472a:	684f      	ldr	r7, [r1, #4]
 800472c:	4372      	muls	r2, r6
 800472e:	f851 6910 	ldr.w	r6, [r1], #-16
 8004732:	437a      	muls	r2, r7
 8004734:	4372      	muls	r2, r6
 8004736:	4354      	muls	r4, r2
 8004738:	1e40      	subs	r0, r0, #1
 800473a:	d1f4      	bne.n	8004726 <forward_sigmoid+0x6e>
 800473c:	6998      	ldr	r0, [r3, #24]
 800473e:	6829      	ldr	r1, [r5, #0]
 8004740:	6885      	ldr	r5, [r0, #8]
 8004742:	6889      	ldr	r1, [r1, #8]
 8004744:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8004748:	1f06      	subs	r6, r0, #4
 800474a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800474e:	1f04      	subs	r4, r0, #4
 8004750:	42ae      	cmp	r6, r5
 8004752:	d313      	bcc.n	800477c <forward_sigmoid+0xc4>
 8004754:	ed96 0a00 	vldr	s0, [r6]
 8004758:	eeb1 0a40 	vneg.f32	s0, s0
 800475c:	f012 fd74 	bl	8017248 <expf>
 8004760:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8004764:	ee70 0a20 	vadd.f32	s1, s0, s1
 8004768:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800476c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004770:	ed84 0a00 	vstr	s0, [r4]
 8004774:	1f36      	subs	r6, r6, #4
 8004776:	1f24      	subs	r4, r4, #4
 8004778:	42ae      	cmp	r6, r5
 800477a:	d2eb      	bcs.n	8004754 <forward_sigmoid+0x9c>
 800477c:	b001      	add	sp, #4
 800477e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004780 <nl_func_swish_array_f32>:
 8004780:	b570      	push	{r4, r5, r6, lr}
 8004782:	ed2d 8b02 	vpush	{d8}
 8004786:	6983      	ldr	r3, [r0, #24]
 8004788:	6988      	ldr	r0, [r1, #24]
 800478a:	6884      	ldr	r4, [r0, #8]
 800478c:	6899      	ldr	r1, [r3, #8]
 800478e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8004792:	1f05      	subs	r5, r0, #4
 8004794:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8004798:	1f06      	subs	r6, r0, #4
 800479a:	42a5      	cmp	r5, r4
 800479c:	f0c0 8016 	bcc.w	80047cc <nl_func_swish_array_f32+0x4c>
 80047a0:	ed95 8a00 	vldr	s16, [r5]
 80047a4:	eeb1 0a48 	vneg.f32	s0, s16
 80047a8:	f012 fd4e 	bl	8017248 <expf>
 80047ac:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80047b0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80047b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80047b8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80047bc:	ee20 0a08 	vmul.f32	s0, s0, s16
 80047c0:	ed86 0a00 	vstr	s0, [r6]
 80047c4:	1f2d      	subs	r5, r5, #4
 80047c6:	1f36      	subs	r6, r6, #4
 80047c8:	42a5      	cmp	r5, r4
 80047ca:	d2e9      	bcs.n	80047a0 <nl_func_swish_array_f32+0x20>
 80047cc:	ecbd 8b02 	vpop	{d8}
 80047d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080047d4 <forward_swish>:
 80047d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d6:	b081      	sub	sp, #4
 80047d8:	f04f 0401 	mov.w	r4, #1
 80047dc:	ed2d 8b02 	vpush	{d8}
 80047e0:	6982      	ldr	r2, [r0, #24]
 80047e2:	8811      	ldrh	r1, [r2, #0]
 80047e4:	2900      	cmp	r1, #0
 80047e6:	bf1a      	itte	ne
 80047e8:	6850      	ldrne	r0, [r2, #4]
 80047ea:	1d00      	addne	r0, r0, #4
 80047ec:	2004      	moveq	r0, #4
 80047ee:	6800      	ldr	r0, [r0, #0]
 80047f0:	2800      	cmp	r0, #0
 80047f2:	bf14      	ite	ne
 80047f4:	6803      	ldrne	r3, [r0, #0]
 80047f6:	2300      	moveq	r3, #0
 80047f8:	2902      	cmp	r1, #2
 80047fa:	bfa6      	itte	ge
 80047fc:	6850      	ldrge	r0, [r2, #4]
 80047fe:	3010      	addge	r0, #16
 8004800:	2004      	movlt	r0, #4
 8004802:	6800      	ldr	r0, [r0, #0]
 8004804:	2800      	cmp	r0, #0
 8004806:	bf19      	ittee	ne
 8004808:	6800      	ldrne	r0, [r0, #0]
 800480a:	f100 0518 	addne.w	r5, r0, #24
 800480e:	2100      	moveq	r1, #0
 8004810:	f101 0518 	addeq.w	r5, r1, #24
 8004814:	f103 0108 	add.w	r1, r3, #8
 8004818:	680a      	ldr	r2, [r1, #0]
 800481a:	0a12      	lsrs	r2, r2, #8
 800481c:	d01e      	beq.n	800485c <forward_swish+0x88>
 800481e:	684e      	ldr	r6, [r1, #4]
 8004820:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004824:	4610      	mov	r0, r2
 8004826:	1f0f      	subs	r7, r1, #4
 8004828:	f010 0103 	ands.w	r1, r0, #3
 800482c:	d006      	beq.n	800483c <forward_swish+0x68>
 800482e:	1e52      	subs	r2, r2, #1
 8004830:	f857 c904 	ldr.w	ip, [r7], #-4
 8004834:	1e49      	subs	r1, r1, #1
 8004836:	fb0c f404 	mul.w	r4, ip, r4
 800483a:	d1f8      	bne.n	800482e <forward_swish+0x5a>
 800483c:	0880      	lsrs	r0, r0, #2
 800483e:	d00d      	beq.n	800485c <forward_swish+0x88>
 8004840:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004844:	3910      	subs	r1, #16
 8004846:	68ca      	ldr	r2, [r1, #12]
 8004848:	688e      	ldr	r6, [r1, #8]
 800484a:	684f      	ldr	r7, [r1, #4]
 800484c:	4372      	muls	r2, r6
 800484e:	f851 6910 	ldr.w	r6, [r1], #-16
 8004852:	437a      	muls	r2, r7
 8004854:	4372      	muls	r2, r6
 8004856:	4354      	muls	r4, r2
 8004858:	1e40      	subs	r0, r0, #1
 800485a:	d1f4      	bne.n	8004846 <forward_swish+0x72>
 800485c:	6998      	ldr	r0, [r3, #24]
 800485e:	6829      	ldr	r1, [r5, #0]
 8004860:	6885      	ldr	r5, [r0, #8]
 8004862:	6889      	ldr	r1, [r1, #8]
 8004864:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8004868:	1f06      	subs	r6, r0, #4
 800486a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800486e:	1f04      	subs	r4, r0, #4
 8004870:	42ae      	cmp	r6, r5
 8004872:	d315      	bcc.n	80048a0 <forward_swish+0xcc>
 8004874:	ed96 8a00 	vldr	s16, [r6]
 8004878:	eeb1 0a48 	vneg.f32	s0, s16
 800487c:	f012 fce4 	bl	8017248 <expf>
 8004880:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8004884:	ee70 0a20 	vadd.f32	s1, s0, s1
 8004888:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800488c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004890:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004894:	ed84 0a00 	vstr	s0, [r4]
 8004898:	1f36      	subs	r6, r6, #4
 800489a:	1f24      	subs	r4, r4, #4
 800489c:	42ae      	cmp	r6, r5
 800489e:	d2e9      	bcs.n	8004874 <forward_swish+0xa0>
 80048a0:	ecbd 8b02 	vpop	{d8}
 80048a4:	b001      	add	sp, #4
 80048a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048a8 <nl_func_hard_swish_array_f32>:
 80048a8:	6983      	ldr	r3, [r0, #24]
 80048aa:	6988      	ldr	r0, [r1, #24]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	6880      	ldr	r0, [r0, #8]
 80048b0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80048b4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80048b8:	1f09      	subs	r1, r1, #4
 80048ba:	1f12      	subs	r2, r2, #4
 80048bc:	4281      	cmp	r1, r0
 80048be:	d323      	bcc.n	8004908 <nl_func_hard_swish_array_f32+0x60>
 80048c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80048c4:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8004b04 <.text_60>
 80048c8:	ed91 1a00 	vldr	s2, [r1]
 80048cc:	ed9f 2a8e 	vldr	s4, [pc, #568]	@ 8004b08 <.text_61>
 80048d0:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 80048d4:	ee41 1a02 	vmla.f32	s3, s2, s4
 80048d8:	eef4 1a60 	vcmp.f32	s3, s1
 80048dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e0:	da08      	bge.n	80048f4 <nl_func_hard_swish_array_f32+0x4c>
 80048e2:	eef5 1a40 	vcmp.f32	s3, #0.0
 80048e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ea:	d505      	bpl.n	80048f8 <nl_func_hard_swish_array_f32+0x50>
 80048ec:	eddf 1a87 	vldr	s3, [pc, #540]	@ 8004b0c <.text_62>
 80048f0:	e002      	b.n	80048f8 <nl_func_hard_swish_array_f32+0x50>
 80048f2:	bf00      	nop
 80048f4:	eef0 1a40 	vmov.f32	s3, s0
 80048f8:	ee21 1a21 	vmul.f32	s2, s2, s3
 80048fc:	ed82 1a00 	vstr	s2, [r2]
 8004900:	1f09      	subs	r1, r1, #4
 8004902:	1f12      	subs	r2, r2, #4
 8004904:	4281      	cmp	r1, r0
 8004906:	d2df      	bcs.n	80048c8 <nl_func_hard_swish_array_f32+0x20>
 8004908:	4770      	bx	lr
	...

0800490c <forward_hard_swish>:
 800490c:	b4f0      	push	{r4, r5, r6, r7}
 800490e:	6982      	ldr	r2, [r0, #24]
 8004910:	8811      	ldrh	r1, [r2, #0]
 8004912:	2900      	cmp	r1, #0
 8004914:	bf1a      	itte	ne
 8004916:	6850      	ldrne	r0, [r2, #4]
 8004918:	1d00      	addne	r0, r0, #4
 800491a:	2004      	moveq	r0, #4
 800491c:	f04f 0401 	mov.w	r4, #1
 8004920:	6800      	ldr	r0, [r0, #0]
 8004922:	2800      	cmp	r0, #0
 8004924:	bf14      	ite	ne
 8004926:	6803      	ldrne	r3, [r0, #0]
 8004928:	2300      	moveq	r3, #0
 800492a:	2902      	cmp	r1, #2
 800492c:	bfa6      	itte	ge
 800492e:	6850      	ldrge	r0, [r2, #4]
 8004930:	3010      	addge	r0, #16
 8004932:	2004      	movlt	r0, #4
 8004934:	6800      	ldr	r0, [r0, #0]
 8004936:	2800      	cmp	r0, #0
 8004938:	bf19      	ittee	ne
 800493a:	6800      	ldrne	r0, [r0, #0]
 800493c:	f100 0518 	addne.w	r5, r0, #24
 8004940:	2100      	moveq	r1, #0
 8004942:	f101 0518 	addeq.w	r5, r1, #24
 8004946:	f103 0108 	add.w	r1, r3, #8
 800494a:	680a      	ldr	r2, [r1, #0]
 800494c:	0a12      	lsrs	r2, r2, #8
 800494e:	d01e      	beq.n	800498e <forward_hard_swish+0x82>
 8004950:	684e      	ldr	r6, [r1, #4]
 8004952:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004956:	4610      	mov	r0, r2
 8004958:	1f0f      	subs	r7, r1, #4
 800495a:	f010 0103 	ands.w	r1, r0, #3
 800495e:	d006      	beq.n	800496e <forward_hard_swish+0x62>
 8004960:	1e52      	subs	r2, r2, #1
 8004962:	f857 c904 	ldr.w	ip, [r7], #-4
 8004966:	1e49      	subs	r1, r1, #1
 8004968:	fb0c f404 	mul.w	r4, ip, r4
 800496c:	d1f8      	bne.n	8004960 <forward_hard_swish+0x54>
 800496e:	0880      	lsrs	r0, r0, #2
 8004970:	d00d      	beq.n	800498e <forward_hard_swish+0x82>
 8004972:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004976:	3910      	subs	r1, #16
 8004978:	68ca      	ldr	r2, [r1, #12]
 800497a:	688e      	ldr	r6, [r1, #8]
 800497c:	684f      	ldr	r7, [r1, #4]
 800497e:	4372      	muls	r2, r6
 8004980:	f851 6910 	ldr.w	r6, [r1], #-16
 8004984:	437a      	muls	r2, r7
 8004986:	4372      	muls	r2, r6
 8004988:	4354      	muls	r4, r2
 800498a:	1e40      	subs	r0, r0, #1
 800498c:	d1f4      	bne.n	8004978 <forward_hard_swish+0x6c>
 800498e:	682a      	ldr	r2, [r5, #0]
 8004990:	6998      	ldr	r0, [r3, #24]
 8004992:	6892      	ldr	r2, [r2, #8]
 8004994:	6880      	ldr	r0, [r0, #8]
 8004996:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 800499a:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800499e:	1f09      	subs	r1, r1, #4
 80049a0:	1f1a      	subs	r2, r3, #4
 80049a2:	4281      	cmp	r1, r0
 80049a4:	f0c0 8024 	bcc.w	80049f0 <forward_hard_swish+0xe4>
 80049a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80049ac:	eddf 0a55 	vldr	s1, [pc, #340]	@ 8004b04 <.text_60>
 80049b0:	ed91 1a00 	vldr	s2, [r1]
 80049b4:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 8004b08 <.text_61>
 80049b8:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 80049bc:	ee41 1a02 	vmla.f32	s3, s2, s4
 80049c0:	eef4 1a60 	vcmp.f32	s3, s1
 80049c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c8:	da08      	bge.n	80049dc <forward_hard_swish+0xd0>
 80049ca:	eef5 1a40 	vcmp.f32	s3, #0.0
 80049ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d2:	d505      	bpl.n	80049e0 <forward_hard_swish+0xd4>
 80049d4:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 8004b0c <.text_62>
 80049d8:	e002      	b.n	80049e0 <forward_hard_swish+0xd4>
 80049da:	bf00      	nop
 80049dc:	eef0 1a40 	vmov.f32	s3, s0
 80049e0:	ee21 1a21 	vmul.f32	s2, s2, s3
 80049e4:	ed82 1a00 	vstr	s2, [r2]
 80049e8:	1f09      	subs	r1, r1, #4
 80049ea:	1f12      	subs	r2, r2, #4
 80049ec:	4281      	cmp	r1, r0
 80049ee:	d2df      	bcs.n	80049b0 <forward_hard_swish+0xa4>
 80049f0:	bcf0      	pop	{r4, r5, r6, r7}
 80049f2:	4770      	bx	lr

080049f4 <nl_func_sign_array_f32>:
 80049f4:	6983      	ldr	r3, [r0, #24]
 80049f6:	6988      	ldr	r0, [r1, #24]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	6880      	ldr	r0, [r0, #8]
 80049fc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004a00:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004a04:	1f09      	subs	r1, r1, #4
 8004a06:	1f12      	subs	r2, r2, #4
 8004a08:	4281      	cmp	r1, r0
 8004a0a:	d314      	bcc.n	8004a36 <nl_func_sign_array_f32+0x42>
 8004a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a10:	ed91 0a00 	vldr	s0, [r1]
 8004a14:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1c:	bfcc      	ite	gt
 8004a1e:	ed9f 0a3c 	vldrgt	s0, [pc, #240]	@ 8004b10 <.text_63>
 8004a22:	ee00 3a10 	vmovle	s0, r3
 8004a26:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004a2a:	ed82 0a00 	vstr	s0, [r2]
 8004a2e:	1f09      	subs	r1, r1, #4
 8004a30:	1f12      	subs	r2, r2, #4
 8004a32:	4281      	cmp	r1, r0
 8004a34:	d2ec      	bcs.n	8004a10 <nl_func_sign_array_f32+0x1c>
 8004a36:	4770      	bx	lr

08004a38 <forward_sign>:
 8004a38:	b4f0      	push	{r4, r5, r6, r7}
 8004a3a:	6982      	ldr	r2, [r0, #24]
 8004a3c:	8811      	ldrh	r1, [r2, #0]
 8004a3e:	2900      	cmp	r1, #0
 8004a40:	bf1a      	itte	ne
 8004a42:	6850      	ldrne	r0, [r2, #4]
 8004a44:	1d00      	addne	r0, r0, #4
 8004a46:	2004      	moveq	r0, #4
 8004a48:	f04f 0401 	mov.w	r4, #1
 8004a4c:	6800      	ldr	r0, [r0, #0]
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	bf14      	ite	ne
 8004a52:	6803      	ldrne	r3, [r0, #0]
 8004a54:	2300      	moveq	r3, #0
 8004a56:	2901      	cmp	r1, #1
 8004a58:	bfc6      	itte	gt
 8004a5a:	6850      	ldrgt	r0, [r2, #4]
 8004a5c:	3010      	addgt	r0, #16
 8004a5e:	2004      	movle	r0, #4
 8004a60:	6800      	ldr	r0, [r0, #0]
 8004a62:	2800      	cmp	r0, #0
 8004a64:	bf19      	ittee	ne
 8004a66:	6800      	ldrne	r0, [r0, #0]
 8004a68:	f100 0518 	addne.w	r5, r0, #24
 8004a6c:	2100      	moveq	r1, #0
 8004a6e:	f101 0518 	addeq.w	r5, r1, #24
 8004a72:	f103 0108 	add.w	r1, r3, #8
 8004a76:	680a      	ldr	r2, [r1, #0]
 8004a78:	0a12      	lsrs	r2, r2, #8
 8004a7a:	d01e      	beq.n	8004aba <forward_sign+0x82>
 8004a7c:	684e      	ldr	r6, [r1, #4]
 8004a7e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004a82:	4610      	mov	r0, r2
 8004a84:	1f0f      	subs	r7, r1, #4
 8004a86:	f010 0103 	ands.w	r1, r0, #3
 8004a8a:	d006      	beq.n	8004a9a <forward_sign+0x62>
 8004a8c:	1e52      	subs	r2, r2, #1
 8004a8e:	f857 c904 	ldr.w	ip, [r7], #-4
 8004a92:	1e49      	subs	r1, r1, #1
 8004a94:	fb0c f404 	mul.w	r4, ip, r4
 8004a98:	d1f8      	bne.n	8004a8c <forward_sign+0x54>
 8004a9a:	0880      	lsrs	r0, r0, #2
 8004a9c:	d00d      	beq.n	8004aba <forward_sign+0x82>
 8004a9e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004aa2:	3910      	subs	r1, #16
 8004aa4:	68ca      	ldr	r2, [r1, #12]
 8004aa6:	688e      	ldr	r6, [r1, #8]
 8004aa8:	684f      	ldr	r7, [r1, #4]
 8004aaa:	4372      	muls	r2, r6
 8004aac:	f851 6910 	ldr.w	r6, [r1], #-16
 8004ab0:	437a      	muls	r2, r7
 8004ab2:	4372      	muls	r2, r6
 8004ab4:	4354      	muls	r4, r2
 8004ab6:	1e40      	subs	r0, r0, #1
 8004ab8:	d1f4      	bne.n	8004aa4 <forward_sign+0x6c>
 8004aba:	682a      	ldr	r2, [r5, #0]
 8004abc:	6998      	ldr	r0, [r3, #24]
 8004abe:	6892      	ldr	r2, [r2, #8]
 8004ac0:	6880      	ldr	r0, [r0, #8]
 8004ac2:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8004ac6:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8004aca:	1f09      	subs	r1, r1, #4
 8004acc:	1f1a      	subs	r2, r3, #4
 8004ace:	4281      	cmp	r1, r0
 8004ad0:	f0c0 8015 	bcc.w	8004afe <forward_sign+0xc6>
 8004ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad8:	ed91 0a00 	vldr	s0, [r1]
 8004adc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae4:	bfcc      	ite	gt
 8004ae6:	ed9f 0a0a 	vldrgt	s0, [pc, #40]	@ 8004b10 <.text_63>
 8004aea:	ee00 3a10 	vmovle	s0, r3
 8004aee:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004af2:	ed82 0a00 	vstr	s0, [r2]
 8004af6:	1f09      	subs	r1, r1, #4
 8004af8:	1f12      	subs	r2, r2, #4
 8004afa:	4281      	cmp	r1, r0
 8004afc:	d2ec      	bcs.n	8004ad8 <forward_sign+0xa0>
 8004afe:	bcf0      	pop	{r4, r5, r6, r7}
 8004b00:	4770      	bx	lr
	...

08004b04 <.text_60>:
 8004b04:	3f800001 	.word	0x3f800001

08004b08 <.text_61>:
 8004b08:	3e2aaaab 	.word	0x3e2aaaab

08004b0c <.text_62>:
 8004b0c:	00000000 	.word	0x00000000

08004b10 <.text_63>:
 8004b10:	00000001 	.word	0x00000001

08004b14 <nl_func_sqrt_array_f32>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	6980      	ldr	r0, [r0, #24]
 8004b18:	698c      	ldr	r4, [r1, #24]
 8004b1a:	6880      	ldr	r0, [r0, #8]
 8004b1c:	68a1      	ldr	r1, [r4, #8]
 8004b1e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004b22:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004b26:	1f1d      	subs	r5, r3, #4
 8004b28:	1f16      	subs	r6, r2, #4
 8004b2a:	428d      	cmp	r5, r1
 8004b2c:	f0c0 800b 	bcc.w	8004b46 <nl_func_sqrt_array_f32+0x32>
 8004b30:	ed95 0a00 	vldr	s0, [r5]
 8004b34:	f003 f8c2 	bl	8007cbc <ai_math_sqrt>
 8004b38:	ed86 0a00 	vstr	s0, [r6]
 8004b3c:	1f2d      	subs	r5, r5, #4
 8004b3e:	68a0      	ldr	r0, [r4, #8]
 8004b40:	1f36      	subs	r6, r6, #4
 8004b42:	4285      	cmp	r5, r0
 8004b44:	d2f4      	bcs.n	8004b30 <nl_func_sqrt_array_f32+0x1c>
 8004b46:	bd70      	pop	{r4, r5, r6, pc}

08004b48 <forward_sqrt>:
 8004b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b4a:	b081      	sub	sp, #4
 8004b4c:	6982      	ldr	r2, [r0, #24]
 8004b4e:	8811      	ldrh	r1, [r2, #0]
 8004b50:	2900      	cmp	r1, #0
 8004b52:	bf1a      	itte	ne
 8004b54:	6850      	ldrne	r0, [r2, #4]
 8004b56:	1d00      	addne	r0, r0, #4
 8004b58:	2004      	moveq	r0, #4
 8004b5a:	f04f 0401 	mov.w	r4, #1
 8004b5e:	6800      	ldr	r0, [r0, #0]
 8004b60:	2800      	cmp	r0, #0
 8004b62:	bf14      	ite	ne
 8004b64:	6803      	ldrne	r3, [r0, #0]
 8004b66:	2300      	moveq	r3, #0
 8004b68:	2902      	cmp	r1, #2
 8004b6a:	bfa6      	itte	ge
 8004b6c:	6850      	ldrge	r0, [r2, #4]
 8004b6e:	3010      	addge	r0, #16
 8004b70:	2004      	movlt	r0, #4
 8004b72:	6800      	ldr	r0, [r0, #0]
 8004b74:	2800      	cmp	r0, #0
 8004b76:	bf19      	ittee	ne
 8004b78:	6800      	ldrne	r0, [r0, #0]
 8004b7a:	f100 0518 	addne.w	r5, r0, #24
 8004b7e:	2100      	moveq	r1, #0
 8004b80:	f101 0518 	addeq.w	r5, r1, #24
 8004b84:	f103 0108 	add.w	r1, r3, #8
 8004b88:	680a      	ldr	r2, [r1, #0]
 8004b8a:	0a12      	lsrs	r2, r2, #8
 8004b8c:	d01e      	beq.n	8004bcc <forward_sqrt+0x84>
 8004b8e:	684e      	ldr	r6, [r1, #4]
 8004b90:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004b94:	4610      	mov	r0, r2
 8004b96:	1f0f      	subs	r7, r1, #4
 8004b98:	f010 0103 	ands.w	r1, r0, #3
 8004b9c:	d006      	beq.n	8004bac <forward_sqrt+0x64>
 8004b9e:	1e52      	subs	r2, r2, #1
 8004ba0:	f857 c904 	ldr.w	ip, [r7], #-4
 8004ba4:	1e49      	subs	r1, r1, #1
 8004ba6:	fb0c f404 	mul.w	r4, ip, r4
 8004baa:	d1f8      	bne.n	8004b9e <forward_sqrt+0x56>
 8004bac:	0880      	lsrs	r0, r0, #2
 8004bae:	d00d      	beq.n	8004bcc <forward_sqrt+0x84>
 8004bb0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004bb4:	3910      	subs	r1, #16
 8004bb6:	68ca      	ldr	r2, [r1, #12]
 8004bb8:	688e      	ldr	r6, [r1, #8]
 8004bba:	684f      	ldr	r7, [r1, #4]
 8004bbc:	4372      	muls	r2, r6
 8004bbe:	f851 6910 	ldr.w	r6, [r1], #-16
 8004bc2:	437a      	muls	r2, r7
 8004bc4:	4372      	muls	r2, r6
 8004bc6:	4354      	muls	r4, r2
 8004bc8:	1e40      	subs	r0, r0, #1
 8004bca:	d1f4      	bne.n	8004bb6 <forward_sqrt+0x6e>
 8004bcc:	6828      	ldr	r0, [r5, #0]
 8004bce:	699d      	ldr	r5, [r3, #24]
 8004bd0:	68a9      	ldr	r1, [r5, #8]
 8004bd2:	6880      	ldr	r0, [r0, #8]
 8004bd4:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8004bd8:	1f16      	subs	r6, r2, #4
 8004bda:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8004bde:	1f14      	subs	r4, r2, #4
 8004be0:	428e      	cmp	r6, r1
 8004be2:	d30a      	bcc.n	8004bfa <forward_sqrt+0xb2>
 8004be4:	ed96 0a00 	vldr	s0, [r6]
 8004be8:	f003 f868 	bl	8007cbc <ai_math_sqrt>
 8004bec:	ed84 0a00 	vstr	s0, [r4]
 8004bf0:	1f36      	subs	r6, r6, #4
 8004bf2:	68a8      	ldr	r0, [r5, #8]
 8004bf4:	1f24      	subs	r4, r4, #4
 8004bf6:	4286      	cmp	r6, r0
 8004bf8:	d2f4      	bcs.n	8004be4 <forward_sqrt+0x9c>
 8004bfa:	b001      	add	sp, #4
 8004bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004c00 <nl_func_soft_plus_array_f32>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	6983      	ldr	r3, [r0, #24]
 8004c04:	6988      	ldr	r0, [r1, #24]
 8004c06:	6884      	ldr	r4, [r0, #8]
 8004c08:	6899      	ldr	r1, [r3, #8]
 8004c0a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8004c0e:	1f05      	subs	r5, r0, #4
 8004c10:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8004c14:	1f06      	subs	r6, r0, #4
 8004c16:	42a5      	cmp	r5, r4
 8004c18:	f0c0 8010 	bcc.w	8004c3c <nl_func_soft_plus_array_f32+0x3c>
 8004c1c:	ed95 0a00 	vldr	s0, [r5]
 8004c20:	f012 fb12 	bl	8017248 <expf>
 8004c24:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8004c28:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004c2c:	f012 fb62 	bl	80172f4 <logf>
 8004c30:	ed86 0a00 	vstr	s0, [r6]
 8004c34:	1f2d      	subs	r5, r5, #4
 8004c36:	1f36      	subs	r6, r6, #4
 8004c38:	42a5      	cmp	r5, r4
 8004c3a:	d2ef      	bcs.n	8004c1c <nl_func_soft_plus_array_f32+0x1c>
 8004c3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c40 <forward_soft_plus>:
 8004c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c42:	b081      	sub	sp, #4
 8004c44:	6982      	ldr	r2, [r0, #24]
 8004c46:	8811      	ldrh	r1, [r2, #0]
 8004c48:	2900      	cmp	r1, #0
 8004c4a:	bf1a      	itte	ne
 8004c4c:	6850      	ldrne	r0, [r2, #4]
 8004c4e:	1d00      	addne	r0, r0, #4
 8004c50:	2004      	moveq	r0, #4
 8004c52:	f04f 0401 	mov.w	r4, #1
 8004c56:	6800      	ldr	r0, [r0, #0]
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	bf14      	ite	ne
 8004c5c:	6803      	ldrne	r3, [r0, #0]
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	2902      	cmp	r1, #2
 8004c62:	bfa6      	itte	ge
 8004c64:	6850      	ldrge	r0, [r2, #4]
 8004c66:	3010      	addge	r0, #16
 8004c68:	2004      	movlt	r0, #4
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	bf19      	ittee	ne
 8004c70:	6800      	ldrne	r0, [r0, #0]
 8004c72:	f100 0518 	addne.w	r5, r0, #24
 8004c76:	2100      	moveq	r1, #0
 8004c78:	f101 0518 	addeq.w	r5, r1, #24
 8004c7c:	f103 0108 	add.w	r1, r3, #8
 8004c80:	680a      	ldr	r2, [r1, #0]
 8004c82:	0a12      	lsrs	r2, r2, #8
 8004c84:	d01e      	beq.n	8004cc4 <forward_soft_plus+0x84>
 8004c86:	684e      	ldr	r6, [r1, #4]
 8004c88:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	1f0f      	subs	r7, r1, #4
 8004c90:	f010 0103 	ands.w	r1, r0, #3
 8004c94:	d006      	beq.n	8004ca4 <forward_soft_plus+0x64>
 8004c96:	1e52      	subs	r2, r2, #1
 8004c98:	f857 c904 	ldr.w	ip, [r7], #-4
 8004c9c:	1e49      	subs	r1, r1, #1
 8004c9e:	fb0c f404 	mul.w	r4, ip, r4
 8004ca2:	d1f8      	bne.n	8004c96 <forward_soft_plus+0x56>
 8004ca4:	0880      	lsrs	r0, r0, #2
 8004ca6:	d00d      	beq.n	8004cc4 <forward_soft_plus+0x84>
 8004ca8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004cac:	3910      	subs	r1, #16
 8004cae:	68ca      	ldr	r2, [r1, #12]
 8004cb0:	688e      	ldr	r6, [r1, #8]
 8004cb2:	684f      	ldr	r7, [r1, #4]
 8004cb4:	4372      	muls	r2, r6
 8004cb6:	f851 6910 	ldr.w	r6, [r1], #-16
 8004cba:	437a      	muls	r2, r7
 8004cbc:	4372      	muls	r2, r6
 8004cbe:	4354      	muls	r4, r2
 8004cc0:	1e40      	subs	r0, r0, #1
 8004cc2:	d1f4      	bne.n	8004cae <forward_soft_plus+0x6e>
 8004cc4:	6998      	ldr	r0, [r3, #24]
 8004cc6:	6829      	ldr	r1, [r5, #0]
 8004cc8:	6885      	ldr	r5, [r0, #8]
 8004cca:	6889      	ldr	r1, [r1, #8]
 8004ccc:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8004cd0:	1f06      	subs	r6, r0, #4
 8004cd2:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004cd6:	1f04      	subs	r4, r0, #4
 8004cd8:	42ae      	cmp	r6, r5
 8004cda:	d30f      	bcc.n	8004cfc <forward_soft_plus+0xbc>
 8004cdc:	ed96 0a00 	vldr	s0, [r6]
 8004ce0:	f012 fab2 	bl	8017248 <expf>
 8004ce4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8004ce8:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004cec:	f012 fb02 	bl	80172f4 <logf>
 8004cf0:	ed84 0a00 	vstr	s0, [r4]
 8004cf4:	1f36      	subs	r6, r6, #4
 8004cf6:	1f24      	subs	r4, r4, #4
 8004cf8:	42ae      	cmp	r6, r5
 8004cfa:	d2ef      	bcs.n	8004cdc <forward_soft_plus+0x9c>
 8004cfc:	b001      	add	sp, #4
 8004cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d00 <nl_func_soft_sign_array_f32>:
 8004d00:	6983      	ldr	r3, [r0, #24]
 8004d02:	6988      	ldr	r0, [r1, #24]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	6880      	ldr	r0, [r0, #8]
 8004d08:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004d0c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004d10:	1f09      	subs	r1, r1, #4
 8004d12:	1f12      	subs	r2, r2, #4
 8004d14:	4281      	cmp	r1, r0
 8004d16:	d30f      	bcc.n	8004d38 <nl_func_soft_sign_array_f32+0x38>
 8004d18:	ed91 0a00 	vldr	s0, [r1]
 8004d1c:	eef0 0ac0 	vabs.f32	s1, s0
 8004d20:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004d24:	ee70 0a81 	vadd.f32	s1, s1, s2
 8004d28:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004d2c:	ed82 0a00 	vstr	s0, [r2]
 8004d30:	1f09      	subs	r1, r1, #4
 8004d32:	1f12      	subs	r2, r2, #4
 8004d34:	4281      	cmp	r1, r0
 8004d36:	d2ef      	bcs.n	8004d18 <nl_func_soft_sign_array_f32+0x18>
 8004d38:	4770      	bx	lr
	...

08004d3c <forward_soft_sign>:
 8004d3c:	b4f0      	push	{r4, r5, r6, r7}
 8004d3e:	6982      	ldr	r2, [r0, #24]
 8004d40:	8811      	ldrh	r1, [r2, #0]
 8004d42:	2900      	cmp	r1, #0
 8004d44:	bf1a      	itte	ne
 8004d46:	6850      	ldrne	r0, [r2, #4]
 8004d48:	1d00      	addne	r0, r0, #4
 8004d4a:	2004      	moveq	r0, #4
 8004d4c:	f04f 0401 	mov.w	r4, #1
 8004d50:	6800      	ldr	r0, [r0, #0]
 8004d52:	2800      	cmp	r0, #0
 8004d54:	bf14      	ite	ne
 8004d56:	6803      	ldrne	r3, [r0, #0]
 8004d58:	2300      	moveq	r3, #0
 8004d5a:	2902      	cmp	r1, #2
 8004d5c:	bfa6      	itte	ge
 8004d5e:	6850      	ldrge	r0, [r2, #4]
 8004d60:	3010      	addge	r0, #16
 8004d62:	2004      	movlt	r0, #4
 8004d64:	6800      	ldr	r0, [r0, #0]
 8004d66:	2800      	cmp	r0, #0
 8004d68:	bf19      	ittee	ne
 8004d6a:	6800      	ldrne	r0, [r0, #0]
 8004d6c:	f100 0518 	addne.w	r5, r0, #24
 8004d70:	2100      	moveq	r1, #0
 8004d72:	f101 0518 	addeq.w	r5, r1, #24
 8004d76:	f103 0108 	add.w	r1, r3, #8
 8004d7a:	680a      	ldr	r2, [r1, #0]
 8004d7c:	0a12      	lsrs	r2, r2, #8
 8004d7e:	d01e      	beq.n	8004dbe <forward_soft_sign+0x82>
 8004d80:	684e      	ldr	r6, [r1, #4]
 8004d82:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004d86:	4610      	mov	r0, r2
 8004d88:	1f0f      	subs	r7, r1, #4
 8004d8a:	f010 0103 	ands.w	r1, r0, #3
 8004d8e:	d006      	beq.n	8004d9e <forward_soft_sign+0x62>
 8004d90:	1e52      	subs	r2, r2, #1
 8004d92:	f857 c904 	ldr.w	ip, [r7], #-4
 8004d96:	1e49      	subs	r1, r1, #1
 8004d98:	fb0c f404 	mul.w	r4, ip, r4
 8004d9c:	d1f8      	bne.n	8004d90 <forward_soft_sign+0x54>
 8004d9e:	0880      	lsrs	r0, r0, #2
 8004da0:	d00d      	beq.n	8004dbe <forward_soft_sign+0x82>
 8004da2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004da6:	3910      	subs	r1, #16
 8004da8:	68ca      	ldr	r2, [r1, #12]
 8004daa:	688e      	ldr	r6, [r1, #8]
 8004dac:	684f      	ldr	r7, [r1, #4]
 8004dae:	4372      	muls	r2, r6
 8004db0:	f851 6910 	ldr.w	r6, [r1], #-16
 8004db4:	437a      	muls	r2, r7
 8004db6:	4372      	muls	r2, r6
 8004db8:	4354      	muls	r4, r2
 8004dba:	1e40      	subs	r0, r0, #1
 8004dbc:	d1f4      	bne.n	8004da8 <forward_soft_sign+0x6c>
 8004dbe:	682a      	ldr	r2, [r5, #0]
 8004dc0:	6998      	ldr	r0, [r3, #24]
 8004dc2:	6892      	ldr	r2, [r2, #8]
 8004dc4:	6880      	ldr	r0, [r0, #8]
 8004dc6:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8004dca:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8004dce:	1f09      	subs	r1, r1, #4
 8004dd0:	1f1a      	subs	r2, r3, #4
 8004dd2:	4281      	cmp	r1, r0
 8004dd4:	f0c0 8010 	bcc.w	8004df8 <forward_soft_sign+0xbc>
 8004dd8:	ed91 0a00 	vldr	s0, [r1]
 8004ddc:	eef0 0ac0 	vabs.f32	s1, s0
 8004de0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004de4:	ee70 0a81 	vadd.f32	s1, s1, s2
 8004de8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004dec:	ed82 0a00 	vstr	s0, [r2]
 8004df0:	1f09      	subs	r1, r1, #4
 8004df2:	1f12      	subs	r2, r2, #4
 8004df4:	4281      	cmp	r1, r0
 8004df6:	d2ef      	bcs.n	8004dd8 <forward_soft_sign+0x9c>
 8004df8:	bcf0      	pop	{r4, r5, r6, r7}
 8004dfa:	4770      	bx	lr

08004dfc <nl_func_tanh_array_f32>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	6983      	ldr	r3, [r0, #24]
 8004e00:	6988      	ldr	r0, [r1, #24]
 8004e02:	6884      	ldr	r4, [r0, #8]
 8004e04:	6899      	ldr	r1, [r3, #8]
 8004e06:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8004e0a:	1f05      	subs	r5, r0, #4
 8004e0c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8004e10:	1f06      	subs	r6, r0, #4
 8004e12:	42a5      	cmp	r5, r4
 8004e14:	f0c0 800a 	bcc.w	8004e2c <nl_func_tanh_array_f32+0x30>
 8004e18:	ed95 0a00 	vldr	s0, [r5]
 8004e1c:	f012 feec 	bl	8017bf8 <tanhf>
 8004e20:	ed86 0a00 	vstr	s0, [r6]
 8004e24:	1f2d      	subs	r5, r5, #4
 8004e26:	1f36      	subs	r6, r6, #4
 8004e28:	42a5      	cmp	r5, r4
 8004e2a:	d2f5      	bcs.n	8004e18 <nl_func_tanh_array_f32+0x1c>
 8004e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e30 <forward_tanh>:
 8004e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e32:	b081      	sub	sp, #4
 8004e34:	6982      	ldr	r2, [r0, #24]
 8004e36:	8811      	ldrh	r1, [r2, #0]
 8004e38:	2900      	cmp	r1, #0
 8004e3a:	bf1a      	itte	ne
 8004e3c:	6850      	ldrne	r0, [r2, #4]
 8004e3e:	1d00      	addne	r0, r0, #4
 8004e40:	2004      	moveq	r0, #4
 8004e42:	f04f 0401 	mov.w	r4, #1
 8004e46:	6800      	ldr	r0, [r0, #0]
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	bf14      	ite	ne
 8004e4c:	6803      	ldrne	r3, [r0, #0]
 8004e4e:	2300      	moveq	r3, #0
 8004e50:	2902      	cmp	r1, #2
 8004e52:	bfa6      	itte	ge
 8004e54:	6850      	ldrge	r0, [r2, #4]
 8004e56:	3010      	addge	r0, #16
 8004e58:	2004      	movlt	r0, #4
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	bf19      	ittee	ne
 8004e60:	6800      	ldrne	r0, [r0, #0]
 8004e62:	f100 0518 	addne.w	r5, r0, #24
 8004e66:	2100      	moveq	r1, #0
 8004e68:	f101 0518 	addeq.w	r5, r1, #24
 8004e6c:	f103 0108 	add.w	r1, r3, #8
 8004e70:	680a      	ldr	r2, [r1, #0]
 8004e72:	0a12      	lsrs	r2, r2, #8
 8004e74:	d01e      	beq.n	8004eb4 <forward_tanh+0x84>
 8004e76:	684e      	ldr	r6, [r1, #4]
 8004e78:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	1f0f      	subs	r7, r1, #4
 8004e80:	f010 0103 	ands.w	r1, r0, #3
 8004e84:	d006      	beq.n	8004e94 <forward_tanh+0x64>
 8004e86:	1e52      	subs	r2, r2, #1
 8004e88:	f857 c904 	ldr.w	ip, [r7], #-4
 8004e8c:	1e49      	subs	r1, r1, #1
 8004e8e:	fb0c f404 	mul.w	r4, ip, r4
 8004e92:	d1f8      	bne.n	8004e86 <forward_tanh+0x56>
 8004e94:	0880      	lsrs	r0, r0, #2
 8004e96:	d00d      	beq.n	8004eb4 <forward_tanh+0x84>
 8004e98:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004e9c:	3910      	subs	r1, #16
 8004e9e:	68ca      	ldr	r2, [r1, #12]
 8004ea0:	688e      	ldr	r6, [r1, #8]
 8004ea2:	684f      	ldr	r7, [r1, #4]
 8004ea4:	4372      	muls	r2, r6
 8004ea6:	f851 6910 	ldr.w	r6, [r1], #-16
 8004eaa:	437a      	muls	r2, r7
 8004eac:	4372      	muls	r2, r6
 8004eae:	4354      	muls	r4, r2
 8004eb0:	1e40      	subs	r0, r0, #1
 8004eb2:	d1f4      	bne.n	8004e9e <forward_tanh+0x6e>
 8004eb4:	6998      	ldr	r0, [r3, #24]
 8004eb6:	6829      	ldr	r1, [r5, #0]
 8004eb8:	6885      	ldr	r5, [r0, #8]
 8004eba:	6889      	ldr	r1, [r1, #8]
 8004ebc:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8004ec0:	1f06      	subs	r6, r0, #4
 8004ec2:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004ec6:	1f04      	subs	r4, r0, #4
 8004ec8:	42ae      	cmp	r6, r5
 8004eca:	d309      	bcc.n	8004ee0 <forward_tanh+0xb0>
 8004ecc:	ed96 0a00 	vldr	s0, [r6]
 8004ed0:	f012 fe92 	bl	8017bf8 <tanhf>
 8004ed4:	ed84 0a00 	vstr	s0, [r4]
 8004ed8:	1f36      	subs	r6, r6, #4
 8004eda:	1f24      	subs	r4, r4, #4
 8004edc:	42ae      	cmp	r6, r5
 8004ede:	d2f5      	bcs.n	8004ecc <forward_tanh+0x9c>
 8004ee0:	b001      	add	sp, #4
 8004ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ee4 <nl_func_relu_array_f32>:
 8004ee4:	6983      	ldr	r3, [r0, #24]
 8004ee6:	6988      	ldr	r0, [r1, #24]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	6880      	ldr	r0, [r0, #8]
 8004eec:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004ef0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004ef4:	1f09      	subs	r1, r1, #4
 8004ef6:	1f12      	subs	r2, r2, #4
 8004ef8:	4281      	cmp	r1, r0
 8004efa:	d30e      	bcc.n	8004f1a <nl_func_relu_array_f32+0x36>
 8004efc:	ed91 0a00 	vldr	s0, [r1]
 8004f00:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f08:	bf98      	it	ls
 8004f0a:	ed9f 0acd 	vldrls	s0, [pc, #820]	@ 8005240 <.text_82>
 8004f0e:	ed82 0a00 	vstr	s0, [r2]
 8004f12:	1f09      	subs	r1, r1, #4
 8004f14:	1f12      	subs	r2, r2, #4
 8004f16:	4281      	cmp	r1, r0
 8004f18:	d2f0      	bcs.n	8004efc <nl_func_relu_array_f32+0x18>
 8004f1a:	4770      	bx	lr

08004f1c <nl_func_not_array_bool>:
 8004f1c:	6983      	ldr	r3, [r0, #24]
 8004f1e:	6988      	ldr	r0, [r1, #24]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	6880      	ldr	r0, [r0, #8]
 8004f24:	1881      	adds	r1, r0, r2
 8004f26:	441a      	add	r2, r3
 8004f28:	1e49      	subs	r1, r1, #1
 8004f2a:	1e52      	subs	r2, r2, #1
 8004f2c:	4281      	cmp	r1, r0
 8004f2e:	d30b      	bcc.n	8004f48 <nl_func_not_array_bool+0x2c>
 8004f30:	f891 c000 	ldrb.w	ip, [r1]
 8004f34:	f1bc 0f01 	cmp.w	ip, #1
 8004f38:	bf14      	ite	ne
 8004f3a:	2301      	movne	r3, #1
 8004f3c:	2300      	moveq	r3, #0
 8004f3e:	1e49      	subs	r1, r1, #1
 8004f40:	4281      	cmp	r1, r0
 8004f42:	f802 3901 	strb.w	r3, [r2], #-1
 8004f46:	d2f3      	bcs.n	8004f30 <nl_func_not_array_bool+0x14>
 8004f48:	4770      	bx	lr

08004f4a <forward_not>:
 8004f4a:	b4f0      	push	{r4, r5, r6, r7}
 8004f4c:	6982      	ldr	r2, [r0, #24]
 8004f4e:	8811      	ldrh	r1, [r2, #0]
 8004f50:	2900      	cmp	r1, #0
 8004f52:	bf1a      	itte	ne
 8004f54:	6850      	ldrne	r0, [r2, #4]
 8004f56:	1d00      	addne	r0, r0, #4
 8004f58:	2004      	moveq	r0, #4
 8004f5a:	f04f 0401 	mov.w	r4, #1
 8004f5e:	6800      	ldr	r0, [r0, #0]
 8004f60:	2800      	cmp	r0, #0
 8004f62:	bf14      	ite	ne
 8004f64:	6803      	ldrne	r3, [r0, #0]
 8004f66:	2300      	moveq	r3, #0
 8004f68:	2901      	cmp	r1, #1
 8004f6a:	bfc6      	itte	gt
 8004f6c:	6850      	ldrgt	r0, [r2, #4]
 8004f6e:	3010      	addgt	r0, #16
 8004f70:	2004      	movle	r0, #4
 8004f72:	6800      	ldr	r0, [r0, #0]
 8004f74:	2800      	cmp	r0, #0
 8004f76:	bf19      	ittee	ne
 8004f78:	6800      	ldrne	r0, [r0, #0]
 8004f7a:	f100 0518 	addne.w	r5, r0, #24
 8004f7e:	2100      	moveq	r1, #0
 8004f80:	f101 0518 	addeq.w	r5, r1, #24
 8004f84:	f103 0108 	add.w	r1, r3, #8
 8004f88:	680a      	ldr	r2, [r1, #0]
 8004f8a:	0a12      	lsrs	r2, r2, #8
 8004f8c:	d01e      	beq.n	8004fcc <forward_not+0x82>
 8004f8e:	684e      	ldr	r6, [r1, #4]
 8004f90:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004f94:	4610      	mov	r0, r2
 8004f96:	1f0f      	subs	r7, r1, #4
 8004f98:	f010 0103 	ands.w	r1, r0, #3
 8004f9c:	d006      	beq.n	8004fac <forward_not+0x62>
 8004f9e:	1e52      	subs	r2, r2, #1
 8004fa0:	f857 c904 	ldr.w	ip, [r7], #-4
 8004fa4:	1e49      	subs	r1, r1, #1
 8004fa6:	fb0c f404 	mul.w	r4, ip, r4
 8004faa:	d1f8      	bne.n	8004f9e <forward_not+0x54>
 8004fac:	0880      	lsrs	r0, r0, #2
 8004fae:	d00d      	beq.n	8004fcc <forward_not+0x82>
 8004fb0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004fb4:	3910      	subs	r1, #16
 8004fb6:	68ca      	ldr	r2, [r1, #12]
 8004fb8:	688e      	ldr	r6, [r1, #8]
 8004fba:	684f      	ldr	r7, [r1, #4]
 8004fbc:	4372      	muls	r2, r6
 8004fbe:	f851 6910 	ldr.w	r6, [r1], #-16
 8004fc2:	437a      	muls	r2, r7
 8004fc4:	4372      	muls	r2, r6
 8004fc6:	4354      	muls	r4, r2
 8004fc8:	1e40      	subs	r0, r0, #1
 8004fca:	d1f4      	bne.n	8004fb6 <forward_not+0x6c>
 8004fcc:	682a      	ldr	r2, [r5, #0]
 8004fce:	6998      	ldr	r0, [r3, #24]
 8004fd0:	6892      	ldr	r2, [r2, #8]
 8004fd2:	6880      	ldr	r0, [r0, #8]
 8004fd4:	1901      	adds	r1, r0, r4
 8004fd6:	4422      	add	r2, r4
 8004fd8:	1e49      	subs	r1, r1, #1
 8004fda:	1e52      	subs	r2, r2, #1
 8004fdc:	4281      	cmp	r1, r0
 8004fde:	d309      	bcc.n	8004ff4 <forward_not+0xaa>
 8004fe0:	780b      	ldrb	r3, [r1, #0]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	bf14      	ite	ne
 8004fe6:	2301      	movne	r3, #1
 8004fe8:	2300      	moveq	r3, #0
 8004fea:	1e49      	subs	r1, r1, #1
 8004fec:	4281      	cmp	r1, r0
 8004fee:	f802 3901 	strb.w	r3, [r2], #-1
 8004ff2:	d2f5      	bcs.n	8004fe0 <forward_not+0x96>
 8004ff4:	bcf0      	pop	{r4, r5, r6, r7}
 8004ff6:	4770      	bx	lr

08004ff8 <nl_func_sm_channel_f32>:
 8004ff8:	698b      	ldr	r3, [r1, #24]
 8004ffa:	6899      	ldr	r1, [r3, #8]
 8004ffc:	6983      	ldr	r3, [r0, #24]
 8004ffe:	6898      	ldr	r0, [r3, #8]
 8005000:	f002 b826 	b.w	8007050 <forward_lite_nl_softmax_if32of32_kernel>

08005004 <nl_func_sm_array_f32>:
 8005004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005008:	b081      	sub	sp, #4
 800500a:	6989      	ldr	r1, [r1, #24]
 800500c:	6980      	ldr	r0, [r0, #24]
 800500e:	688f      	ldr	r7, [r1, #8]
 8005010:	9d08      	ldr	r5, [sp, #32]
 8005012:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8005014:	6884      	ldr	r4, [r0, #8]
 8005016:	eb07 0982 	add.w	r9, r7, r2, lsl #2
 800501a:	454f      	cmp	r7, r9
 800501c:	4698      	mov	r8, r3
 800501e:	d20a      	bcs.n	8005036 <nl_func_sm_array_f32+0x32>
 8005020:	4642      	mov	r2, r8
 8005022:	4639      	mov	r1, r7
 8005024:	4620      	mov	r0, r4
 8005026:	f002 f813 	bl	8007050 <forward_lite_nl_softmax_if32of32_kernel>
 800502a:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 800502e:	454f      	cmp	r7, r9
 8005030:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8005034:	d3f4      	bcc.n	8005020 <nl_func_sm_array_f32+0x1c>
 8005036:	b001      	add	sp, #4
 8005038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800503c <nl_func_sm_zero_channel_f32>:
 800503c:	698b      	ldr	r3, [r1, #24]
 800503e:	6899      	ldr	r1, [r3, #8]
 8005040:	6983      	ldr	r3, [r0, #24]
 8005042:	6898      	ldr	r0, [r3, #8]
 8005044:	f002 b89e 	b.w	8007184 <forward_lite_nl_softmax_zero_channel_if32of32_kernel>

08005048 <nl_func_probit_f32>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	0014      	movs	r4, r2
 800504c:	ed2d 8b02 	vpush	{d8}
 8005050:	d018      	beq.n	8005084 <nl_func_probit_f32+0x3c>
 8005052:	6989      	ldr	r1, [r1, #24]
 8005054:	6980      	ldr	r0, [r0, #24]
 8005056:	688d      	ldr	r5, [r1, #8]
 8005058:	f8d0 6008 	ldr.w	r6, [r0, #8]
 800505c:	ed9f 8ab7 	vldr	s16, [pc, #732]	@ 800533c <.text_86>
 8005060:	edd5 0a00 	vldr	s1, [r5]
 8005064:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8005068:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800506c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8005070:	f002 fe30 	bl	8007cd4 <ai_math_erfinv>
 8005074:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005078:	ed86 0a00 	vstr	s0, [r6]
 800507c:	1d36      	adds	r6, r6, #4
 800507e:	1d2d      	adds	r5, r5, #4
 8005080:	1e64      	subs	r4, r4, #1
 8005082:	d1ed      	bne.n	8005060 <nl_func_probit_f32+0x18>
 8005084:	ecbd 8b02 	vpop	{d8}
 8005088:	bd70      	pop	{r4, r5, r6, pc}
	...

0800508c <nl_func_clip_array_f32>:
 800508c:	ed93 0a00 	vldr	s0, [r3]
 8005090:	edd3 0a01 	vldr	s1, [r3, #4]
 8005094:	6983      	ldr	r3, [r0, #24]
 8005096:	6988      	ldr	r0, [r1, #24]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	6880      	ldr	r0, [r0, #8]
 800509c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80050a0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80050a4:	1f09      	subs	r1, r1, #4
 80050a6:	1f12      	subs	r2, r2, #4
 80050a8:	4281      	cmp	r1, r0
 80050aa:	d315      	bcc.n	80050d8 <nl_func_clip_array_f32+0x4c>
 80050ac:	ed91 1a00 	vldr	s2, [r1]
 80050b0:	eeb4 0a41 	vcmp.f32	s0, s2
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	bf58      	it	pl
 80050ba:	eeb0 1a40 	vmovpl.f32	s2, s0
 80050be:	eeb4 1a60 	vcmp.f32	s2, s1
 80050c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c6:	bf58      	it	pl
 80050c8:	eeb0 1a60 	vmovpl.f32	s2, s1
 80050cc:	ed82 1a00 	vstr	s2, [r2]
 80050d0:	1f09      	subs	r1, r1, #4
 80050d2:	1f12      	subs	r2, r2, #4
 80050d4:	4281      	cmp	r1, r0
 80050d6:	d2e9      	bcs.n	80050ac <nl_func_clip_array_f32+0x20>
 80050d8:	4770      	bx	lr
	...

080050dc <nl_func_hardmax_array_f32>:
 80050dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050e0:	b081      	sub	sp, #4
 80050e2:	2300      	movs	r3, #0
 80050e4:	ed2d 8b02 	vpush	{d8}
 80050e8:	6989      	ldr	r1, [r1, #24]
 80050ea:	6980      	ldr	r0, [r0, #24]
 80050ec:	6852      	ldr	r2, [r2, #4]
 80050ee:	688c      	ldr	r4, [r1, #8]
 80050f0:	6887      	ldr	r7, [r0, #8]
 80050f2:	68d0      	ldr	r0, [r2, #12]
 80050f4:	6891      	ldr	r1, [r2, #8]
 80050f6:	6856      	ldr	r6, [r2, #4]
 80050f8:	4348      	muls	r0, r1
 80050fa:	4370      	muls	r0, r6
 80050fc:	2800      	cmp	r0, #0
 80050fe:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8005102:	d066      	beq.n	80051d2 <nl_func_hardmax_array_f32+0xf6>
 8005104:	4680      	mov	r8, r0
 8005106:	1c58      	adds	r0, r3, #1
 8005108:	18f5      	adds	r5, r6, r3
 800510a:	42a8      	cmp	r0, r5
 800510c:	4699      	mov	r9, r3
 800510e:	d253      	bcs.n	80051b8 <nl_func_hardmax_array_f32+0xdc>
 8005110:	1e72      	subs	r2, r6, #1
 8005112:	f012 0103 	ands.w	r1, r2, #3
 8005116:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800511a:	d010      	beq.n	800513e <nl_func_hardmax_array_f32+0x62>
 800511c:	eb04 0e89 	add.w	lr, r4, r9, lsl #2
 8005120:	eddc 0a00 	vldr	s1, [ip]
 8005124:	ed9e 0a00 	vldr	s0, [lr]
 8005128:	eeb4 0a60 	vcmp.f32	s0, s1
 800512c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005130:	bf48      	it	mi
 8005132:	4681      	movmi	r9, r0
 8005134:	1c40      	adds	r0, r0, #1
 8005136:	1e49      	subs	r1, r1, #1
 8005138:	f10c 0c04 	add.w	ip, ip, #4
 800513c:	d1ee      	bne.n	800511c <nl_func_hardmax_array_f32+0x40>
 800513e:	0892      	lsrs	r2, r2, #2
 8005140:	d03a      	beq.n	80051b8 <nl_func_hardmax_array_f32+0xdc>
 8005142:	4601      	mov	r1, r0
 8005144:	ea4f 0002 	mov.w	r0, r2
 8005148:	eb04 0289 	add.w	r2, r4, r9, lsl #2
 800514c:	ed9c 0a00 	vldr	s0, [ip]
 8005150:	edd2 0a00 	vldr	s1, [r2]
 8005154:	eef4 0a40 	vcmp.f32	s1, s0
 8005158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515c:	bf48      	it	mi
 800515e:	4689      	movmi	r9, r1
 8005160:	eb04 0289 	add.w	r2, r4, r9, lsl #2
 8005164:	eddc 0a01 	vldr	s1, [ip, #4]
 8005168:	ed92 0a00 	vldr	s0, [r2]
 800516c:	1c49      	adds	r1, r1, #1
 800516e:	eeb4 0a60 	vcmp.f32	s0, s1
 8005172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005176:	bf48      	it	mi
 8005178:	4689      	movmi	r9, r1
 800517a:	eb04 0289 	add.w	r2, r4, r9, lsl #2
 800517e:	ed9c 0a02 	vldr	s0, [ip, #8]
 8005182:	edd2 0a00 	vldr	s1, [r2]
 8005186:	1c49      	adds	r1, r1, #1
 8005188:	eef4 0a40 	vcmp.f32	s1, s0
 800518c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005190:	bf48      	it	mi
 8005192:	4689      	movmi	r9, r1
 8005194:	eb04 0289 	add.w	r2, r4, r9, lsl #2
 8005198:	eddc 0a03 	vldr	s1, [ip, #12]
 800519c:	ed92 0a00 	vldr	s0, [r2]
 80051a0:	1c49      	adds	r1, r1, #1
 80051a2:	eeb4 0a60 	vcmp.f32	s0, s1
 80051a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051aa:	bf48      	it	mi
 80051ac:	4689      	movmi	r9, r1
 80051ae:	1c49      	adds	r1, r1, #1
 80051b0:	1e40      	subs	r0, r0, #1
 80051b2:	f10c 0c10 	add.w	ip, ip, #16
 80051b6:	d1c7      	bne.n	8005148 <nl_func_hardmax_array_f32+0x6c>
 80051b8:	00b2      	lsls	r2, r6, #2
 80051ba:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80051be:	2000      	movs	r0, #0
 80051c0:	f006 fd90 	bl	800bce4 <st_int8_fill>
 80051c4:	eb07 0189 	add.w	r1, r7, r9, lsl #2
 80051c8:	462b      	mov	r3, r5
 80051ca:	4543      	cmp	r3, r8
 80051cc:	ed81 8a00 	vstr	s16, [r1]
 80051d0:	d399      	bcc.n	8005106 <nl_func_hardmax_array_f32+0x2a>
 80051d2:	ecbd 8b02 	vpop	{d8}
 80051d6:	b001      	add	sp, #4
 80051d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080051dc <nl_func_hard_sigmoid_array_f32>:
 80051dc:	ed93 0a00 	vldr	s0, [r3]
 80051e0:	edd3 0a01 	vldr	s1, [r3, #4]
 80051e4:	6983      	ldr	r3, [r0, #24]
 80051e6:	6988      	ldr	r0, [r1, #24]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	6880      	ldr	r0, [r0, #8]
 80051ec:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80051f0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80051f4:	1f09      	subs	r1, r1, #4
 80051f6:	1f12      	subs	r2, r2, #4
 80051f8:	4281      	cmp	r1, r0
 80051fa:	d31f      	bcc.n	800523c <nl_func_hard_sigmoid_array_f32+0x60>
 80051fc:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8005200:	eddf 1aab 	vldr	s3, [pc, #684]	@ 80054b0 <.text_90>
 8005204:	edd1 2a00 	vldr	s5, [r1]
 8005208:	eeb0 2a60 	vmov.f32	s4, s1
 800520c:	ee02 2a80 	vmla.f32	s4, s5, s0
 8005210:	eeb4 2a61 	vcmp.f32	s4, s3
 8005214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005218:	da08      	bge.n	800522c <nl_func_hard_sigmoid_array_f32+0x50>
 800521a:	eeb5 2a40 	vcmp.f32	s4, #0.0
 800521e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005222:	d505      	bpl.n	8005230 <nl_func_hard_sigmoid_array_f32+0x54>
 8005224:	ed9f 2a06 	vldr	s4, [pc, #24]	@ 8005240 <.text_82>
 8005228:	e002      	b.n	8005230 <nl_func_hard_sigmoid_array_f32+0x54>
 800522a:	bf00      	nop
 800522c:	eeb0 2a41 	vmov.f32	s4, s2
 8005230:	ed82 2a00 	vstr	s4, [r2]
 8005234:	1f09      	subs	r1, r1, #4
 8005236:	1f12      	subs	r2, r2, #4
 8005238:	4281      	cmp	r1, r0
 800523a:	d2e3      	bcs.n	8005204 <nl_func_hard_sigmoid_array_f32+0x28>
 800523c:	4770      	bx	lr
	...

08005240 <.text_82>:
 8005240:	00000000 	.word	0x00000000

08005244 <nl_func_gelu_array_f32>:
 8005244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005246:	b081      	sub	sp, #4
 8005248:	ed2d 8b04 	vpush	{d8-d9}
 800524c:	6980      	ldr	r0, [r0, #24]
 800524e:	698d      	ldr	r5, [r1, #24]
 8005250:	781c      	ldrb	r4, [r3, #0]
 8005252:	68a9      	ldr	r1, [r5, #8]
 8005254:	6880      	ldr	r0, [r0, #8]
 8005256:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800525a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800525e:	1f1e      	subs	r6, r3, #4
 8005260:	1f17      	subs	r7, r2, #4
 8005262:	428e      	cmp	r6, r1
 8005264:	ed9f 8aca 	vldr	s16, [pc, #808]	@ 8005590 <.text_92>
 8005268:	eddf 8aca 	vldr	s17, [pc, #808]	@ 8005594 <.text_93>
 800526c:	d339      	bcc.n	80052e2 <nl_func_gelu_array_f32+0x9e>
 800526e:	b1ec      	cbz	r4, 80052ac <nl_func_gelu_array_f32+0x68>
 8005270:	eeb0 0a68 	vmov.f32	s0, s17
 8005274:	f002 fd22 	bl	8007cbc <ai_math_sqrt>
 8005278:	ed96 9a00 	vldr	s18, [r6]
 800527c:	ee69 0a09 	vmul.f32	s1, s18, s18
 8005280:	ee60 0a89 	vmul.f32	s1, s1, s18
 8005284:	eeb0 1a49 	vmov.f32	s2, s18
 8005288:	ee00 1a88 	vmla.f32	s2, s1, s16
 800528c:	ee21 0a00 	vmul.f32	s0, s2, s0
 8005290:	f012 fcb2 	bl	8017bf8 <tanhf>
 8005294:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 8005298:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800529c:	ee69 1a21 	vmul.f32	s3, s18, s3
 80052a0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80052a4:	ee21 0a80 	vmul.f32	s0, s3, s0
 80052a8:	e014      	b.n	80052d4 <nl_func_gelu_array_f32+0x90>
 80052aa:	bf00      	nop
 80052ac:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80052b0:	f002 fd04 	bl	8007cbc <ai_math_sqrt>
 80052b4:	ed96 9a00 	vldr	s18, [r6]
 80052b8:	ee89 0a00 	vdiv.f32	s0, s18, s0
 80052bc:	f012 fa4a 	bl	8017754 <erff>
 80052c0:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80052c4:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80052c8:	ee69 0a20 	vmul.f32	s1, s18, s1
 80052cc:	ee30 0a01 	vadd.f32	s0, s0, s2
 80052d0:	ee20 0a80 	vmul.f32	s0, s1, s0
 80052d4:	ed87 0a00 	vstr	s0, [r7]
 80052d8:	1f36      	subs	r6, r6, #4
 80052da:	68a8      	ldr	r0, [r5, #8]
 80052dc:	1f3f      	subs	r7, r7, #4
 80052de:	4286      	cmp	r6, r0
 80052e0:	d2c5      	bcs.n	800526e <nl_func_gelu_array_f32+0x2a>
 80052e2:	ecbd 8b04 	vpop	{d8-d9}
 80052e6:	b001      	add	sp, #4
 80052e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052ea <nl_func_relu_generic_array_f32>:
 80052ea:	b410      	push	{r4}
 80052ec:	b081      	sub	sp, #4
 80052ee:	698c      	ldr	r4, [r1, #24]
 80052f0:	68a1      	ldr	r1, [r4, #8]
 80052f2:	6984      	ldr	r4, [r0, #24]
 80052f4:	68a0      	ldr	r0, [r4, #8]
 80052f6:	b001      	add	sp, #4
 80052f8:	bc10      	pop	{r4}
 80052fa:	f002 b837 	b.w	800736c <forward_lite_nl_relu_generic_if32of32_kernel>
	...

08005300 <nl_func_relu_thresholded_array_f32>:
 8005300:	ed93 0a00 	vldr	s0, [r3]
 8005304:	6983      	ldr	r3, [r0, #24]
 8005306:	6988      	ldr	r0, [r1, #24]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	6880      	ldr	r0, [r0, #8]
 800530c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8005310:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005314:	1f09      	subs	r1, r1, #4
 8005316:	1f12      	subs	r2, r2, #4
 8005318:	4281      	cmp	r1, r0
 800531a:	d30e      	bcc.n	800533a <nl_func_relu_thresholded_array_f32+0x3a>
 800531c:	edd1 0a00 	vldr	s1, [r1]
 8005320:	eeb4 0a60 	vcmp.f32	s0, s1
 8005324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005328:	bfa8      	it	ge
 800532a:	eddf 0aca 	vldrge	s1, [pc, #808]	@ 8005654 <.text_95>
 800532e:	edc2 0a00 	vstr	s1, [r2]
 8005332:	1f09      	subs	r1, r1, #4
 8005334:	1f12      	subs	r2, r2, #4
 8005336:	4281      	cmp	r1, r0
 8005338:	d2f0      	bcs.n	800531c <nl_func_relu_thresholded_array_f32+0x1c>
 800533a:	4770      	bx	lr

0800533c <.text_86>:
 800533c:	3fb504f3 	.word	0x3fb504f3

08005340 <nl_func_elu_array_f32>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	ed2d 8b04 	vpush	{d8-d9}
 8005346:	ed93 8a00 	vldr	s16, [r3]
 800534a:	6983      	ldr	r3, [r0, #24]
 800534c:	6988      	ldr	r0, [r1, #24]
 800534e:	6884      	ldr	r4, [r0, #8]
 8005350:	6899      	ldr	r1, [r3, #8]
 8005352:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8005356:	1f05      	subs	r5, r0, #4
 8005358:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800535c:	1f06      	subs	r6, r0, #4
 800535e:	42a5      	cmp	r5, r4
 8005360:	f0c0 802a 	bcc.w	80053b8 <nl_func_elu_array_f32+0x78>
 8005364:	edd5 8a00 	vldr	s17, [r5]
 8005368:	eef5 8a40 	vcmp.f32	s17, #0.0
 800536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005370:	bf4c      	ite	mi
 8005372:	ed9f 9ab8 	vldrmi	s18, [pc, #736]	@ 8005654 <.text_95>
 8005376:	eeb0 9a68 	vmovpl.f32	s18, s17
 800537a:	eeb0 0a68 	vmov.f32	s0, s17
 800537e:	f011 ff63 	bl	8017248 <expf>
 8005382:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8005386:	ee30 0a20 	vadd.f32	s0, s0, s1
 800538a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800538e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005396:	dc09      	bgt.n	80053ac <nl_func_elu_array_f32+0x6c>
 8005398:	eeb0 0a68 	vmov.f32	s0, s17
 800539c:	f011 ff54 	bl	8017248 <expf>
 80053a0:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80053a4:	ee30 0a20 	vadd.f32	s0, s0, s1
 80053a8:	ee00 9a08 	vmla.f32	s18, s0, s16
 80053ac:	ed86 9a00 	vstr	s18, [r6]
 80053b0:	1f2d      	subs	r5, r5, #4
 80053b2:	1f36      	subs	r6, r6, #4
 80053b4:	42a5      	cmp	r5, r4
 80053b6:	d2d5      	bcs.n	8005364 <nl_func_elu_array_f32+0x24>
 80053b8:	ecbd 8b04 	vpop	{d8-d9}
 80053bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080053c0 <nl_func_selu_array_f32>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	ed2d 8b04 	vpush	{d8-d9}
 80053c6:	ed93 8a00 	vldr	s16, [r3]
 80053ca:	edd3 8a01 	vldr	s17, [r3, #4]
 80053ce:	6983      	ldr	r3, [r0, #24]
 80053d0:	6988      	ldr	r0, [r1, #24]
 80053d2:	6884      	ldr	r4, [r0, #8]
 80053d4:	6899      	ldr	r1, [r3, #8]
 80053d6:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 80053da:	1f05      	subs	r5, r0, #4
 80053dc:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80053e0:	1f06      	subs	r6, r0, #4
 80053e2:	42a5      	cmp	r5, r4
 80053e4:	f0c0 802c 	bcc.w	8005440 <nl_func_selu_array_f32+0x80>
 80053e8:	ed95 9a00 	vldr	s18, [r5]
 80053ec:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80053f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f4:	bf4c      	ite	mi
 80053f6:	eddf 9a97 	vldrmi	s19, [pc, #604]	@ 8005654 <.text_95>
 80053fa:	eef0 9a49 	vmovpl.f32	s19, s18
 80053fe:	eeb0 0a49 	vmov.f32	s0, s18
 8005402:	f011 ff21 	bl	8017248 <expf>
 8005406:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800540a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800540e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005412:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541a:	dc09      	bgt.n	8005430 <nl_func_selu_array_f32+0x70>
 800541c:	eeb0 0a49 	vmov.f32	s0, s18
 8005420:	f011 ff12 	bl	8017248 <expf>
 8005424:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8005428:	ee30 0a20 	vadd.f32	s0, s0, s1
 800542c:	ee40 9a08 	vmla.f32	s19, s0, s16
 8005430:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8005434:	ed86 0a00 	vstr	s0, [r6]
 8005438:	1f2d      	subs	r5, r5, #4
 800543a:	1f36      	subs	r6, r6, #4
 800543c:	42a5      	cmp	r5, r4
 800543e:	d2d3      	bcs.n	80053e8 <nl_func_selu_array_f32+0x28>
 8005440:	ecbd 8b04 	vpop	{d8-d9}
 8005444:	bd70      	pop	{r4, r5, r6, pc}
	...

08005448 <nl_func_prelu_array_f32>:
 8005448:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800544c:	6988      	ldr	r0, [r1, #24]
 800544e:	f8dc c008 	ldr.w	ip, [ip, #8]
 8005452:	6880      	ldr	r0, [r0, #8]
 8005454:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005458:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800545c:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8005460:	1f1b      	subs	r3, r3, #4
 8005462:	1f09      	subs	r1, r1, #4
 8005464:	1f12      	subs	r2, r2, #4
 8005466:	4281      	cmp	r1, r0
 8005468:	f0c0 8021 	bcc.w	80054ae <nl_func_prelu_array_f32+0x66>
 800546c:	ed91 0a00 	vldr	s0, [r1]
 8005470:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005478:	bf4c      	ite	mi
 800547a:	eddf 0a76 	vldrmi	s1, [pc, #472]	@ 8005654 <.text_95>
 800547e:	eef0 0a40 	vmovpl.f32	s1, s0
 8005482:	eeb1 0a40 	vneg.f32	s0, s0
 8005486:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548e:	bf48      	it	mi
 8005490:	ed9f 0a70 	vldrmi	s0, [pc, #448]	@ 8005654 <.text_95>
 8005494:	1f09      	subs	r1, r1, #4
 8005496:	469c      	mov	ip, r3
 8005498:	f1ac 0304 	sub.w	r3, ip, #4
 800549c:	ed9c 1a00 	vldr	s2, [ip]
 80054a0:	ee41 0a40 	vmls.f32	s1, s2, s0
 80054a4:	edc2 0a00 	vstr	s1, [r2]
 80054a8:	1f12      	subs	r2, r2, #4
 80054aa:	4281      	cmp	r1, r0
 80054ac:	d2de      	bcs.n	800546c <nl_func_prelu_array_f32+0x24>
 80054ae:	4770      	bx	lr

080054b0 <.text_90>:
 80054b0:	3f800001 	.word	0x3f800001

080054b4 <forward_gelu>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	4604      	mov	r4, r0
 80054b8:	ed2d 8b04 	vpush	{d8-d9}
 80054bc:	69a2      	ldr	r2, [r4, #24]
 80054be:	8811      	ldrh	r1, [r2, #0]
 80054c0:	2900      	cmp	r1, #0
 80054c2:	bf1a      	itte	ne
 80054c4:	6850      	ldrne	r0, [r2, #4]
 80054c6:	1d00      	addne	r0, r0, #4
 80054c8:	2004      	moveq	r0, #4
 80054ca:	6800      	ldr	r0, [r0, #0]
 80054cc:	2800      	cmp	r0, #0
 80054ce:	bf14      	ite	ne
 80054d0:	6805      	ldrne	r5, [r0, #0]
 80054d2:	2500      	moveq	r5, #0
 80054d4:	2902      	cmp	r1, #2
 80054d6:	bfa6      	itte	ge
 80054d8:	6850      	ldrge	r0, [r2, #4]
 80054da:	3010      	addge	r0, #16
 80054dc:	2004      	movlt	r0, #4
 80054de:	6800      	ldr	r0, [r0, #0]
 80054e0:	2800      	cmp	r0, #0
 80054e2:	bf19      	ittee	ne
 80054e4:	6800      	ldrne	r0, [r0, #0]
 80054e6:	f100 0618 	addne.w	r6, r0, #24
 80054ea:	2100      	moveq	r1, #0
 80054ec:	f101 0618 	addeq.w	r6, r1, #24
 80054f0:	f105 0008 	add.w	r0, r5, #8
 80054f4:	f7fd fc7c 	bl	8002df0 <ai_shape_get_size>
 80054f8:	69a9      	ldr	r1, [r5, #24]
 80054fa:	688d      	ldr	r5, [r1, #8]
 80054fc:	69e1      	ldr	r1, [r4, #28]
 80054fe:	688a      	ldr	r2, [r1, #8]
 8005500:	ed92 9a00 	vldr	s18, [r2]
 8005504:	6832      	ldr	r2, [r6, #0]
 8005506:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 800550a:	1f0c      	subs	r4, r1, #4
 800550c:	6891      	ldr	r1, [r2, #8]
 800550e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8005512:	1f06      	subs	r6, r0, #4
 8005514:	42ac      	cmp	r4, r5
 8005516:	d337      	bcc.n	8005588 <forward_gelu+0xd4>
 8005518:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 8005590 <.text_92>
 800551c:	eddf 8a1d 	vldr	s17, [pc, #116]	@ 8005594 <.text_93>
 8005520:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005528:	d014      	beq.n	8005554 <forward_gelu+0xa0>
 800552a:	eeb0 0a68 	vmov.f32	s0, s17
 800552e:	f002 fbc5 	bl	8007cbc <ai_math_sqrt>
 8005532:	edd4 0a00 	vldr	s1, [r4]
 8005536:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800553a:	ee60 9a81 	vmul.f32	s19, s1, s2
 800553e:	ee20 1aa0 	vmul.f32	s2, s1, s1
 8005542:	ee21 1a20 	vmul.f32	s2, s2, s1
 8005546:	ee41 0a08 	vmla.f32	s1, s2, s16
 800554a:	ee20 0a80 	vmul.f32	s0, s1, s0
 800554e:	f012 fb53 	bl	8017bf8 <tanhf>
 8005552:	e00d      	b.n	8005570 <forward_gelu+0xbc>
 8005554:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8005558:	f002 fbb0 	bl	8007cbc <ai_math_sqrt>
 800555c:	edd4 0a00 	vldr	s1, [r4]
 8005560:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005564:	ee60 9a81 	vmul.f32	s19, s1, s2
 8005568:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800556c:	f012 f8f2 	bl	8017754 <erff>
 8005570:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8005574:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005578:	ee29 0a80 	vmul.f32	s0, s19, s0
 800557c:	ed86 0a00 	vstr	s0, [r6]
 8005580:	1f24      	subs	r4, r4, #4
 8005582:	1f36      	subs	r6, r6, #4
 8005584:	42ac      	cmp	r4, r5
 8005586:	d2cb      	bcs.n	8005520 <forward_gelu+0x6c>
 8005588:	ecbd 8b04 	vpop	{d8-d9}
 800558c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005590 <.text_92>:
 8005590:	3d372713 	.word	0x3d372713

08005594 <.text_93>:
 8005594:	3f22f983 	.word	0x3f22f983

08005598 <forward_relu>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	4604      	mov	r4, r0
 800559c:	69a2      	ldr	r2, [r4, #24]
 800559e:	8811      	ldrh	r1, [r2, #0]
 80055a0:	2900      	cmp	r1, #0
 80055a2:	bf1a      	itte	ne
 80055a4:	6850      	ldrne	r0, [r2, #4]
 80055a6:	1d00      	addne	r0, r0, #4
 80055a8:	2004      	moveq	r0, #4
 80055aa:	6800      	ldr	r0, [r0, #0]
 80055ac:	2800      	cmp	r0, #0
 80055ae:	bf14      	ite	ne
 80055b0:	6805      	ldrne	r5, [r0, #0]
 80055b2:	2500      	moveq	r5, #0
 80055b4:	2902      	cmp	r1, #2
 80055b6:	bfa6      	itte	ge
 80055b8:	6850      	ldrge	r0, [r2, #4]
 80055ba:	3010      	addge	r0, #16
 80055bc:	2004      	movlt	r0, #4
 80055be:	6800      	ldr	r0, [r0, #0]
 80055c0:	2800      	cmp	r0, #0
 80055c2:	bf19      	ittee	ne
 80055c4:	6800      	ldrne	r0, [r0, #0]
 80055c6:	f100 0618 	addne.w	r6, r0, #24
 80055ca:	2100      	moveq	r1, #0
 80055cc:	f101 0618 	addeq.w	r6, r1, #24
 80055d0:	69e0      	ldr	r0, [r4, #28]
 80055d2:	b9f8      	cbnz	r0, 8005614 <forward_relu+0x7c>
 80055d4:	f105 0008 	add.w	r0, r5, #8
 80055d8:	f7fd fc0a 	bl	8002df0 <ai_shape_get_size>
 80055dc:	69a9      	ldr	r1, [r5, #24]
 80055de:	6833      	ldr	r3, [r6, #0]
 80055e0:	6889      	ldr	r1, [r1, #8]
 80055e2:	689c      	ldr	r4, [r3, #8]
 80055e4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80055e8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80055ec:	1f12      	subs	r2, r2, #4
 80055ee:	1f00      	subs	r0, r0, #4
 80055f0:	428a      	cmp	r2, r1
 80055f2:	d32e      	bcc.n	8005652 <forward_relu+0xba>
 80055f4:	ed92 0a00 	vldr	s0, [r2]
 80055f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80055fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005600:	bf98      	it	ls
 8005602:	ed9f 0a14 	vldrls	s0, [pc, #80]	@ 8005654 <.text_95>
 8005606:	ed80 0a00 	vstr	s0, [r0]
 800560a:	1f12      	subs	r2, r2, #4
 800560c:	1f00      	subs	r0, r0, #4
 800560e:	428a      	cmp	r2, r1
 8005610:	d2f0      	bcs.n	80055f4 <forward_relu+0x5c>
 8005612:	bd70      	pop	{r4, r5, r6, pc}
 8005614:	6840      	ldr	r0, [r0, #4]
 8005616:	2801      	cmp	r0, #1
 8005618:	f105 0008 	add.w	r0, r5, #8
 800561c:	d10c      	bne.n	8005638 <forward_relu+0xa0>
 800561e:	f7fd fbe7 	bl	8002df0 <ai_shape_get_size>
 8005622:	4602      	mov	r2, r0
 8005624:	69e0      	ldr	r0, [r4, #28]
 8005626:	6883      	ldr	r3, [r0, #8]
 8005628:	69a8      	ldr	r0, [r5, #24]
 800562a:	6834      	ldr	r4, [r6, #0]
 800562c:	6881      	ldr	r1, [r0, #8]
 800562e:	68a0      	ldr	r0, [r4, #8]
 8005630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005634:	f7fd bc06 	b.w	8002e44 <_forward_lite_nl_relu_thresholded_if32of32>
 8005638:	f7fd fbda 	bl	8002df0 <ai_shape_get_size>
 800563c:	69e1      	ldr	r1, [r4, #28]
 800563e:	6834      	ldr	r4, [r6, #0]
 8005640:	688b      	ldr	r3, [r1, #8]
 8005642:	4602      	mov	r2, r0
 8005644:	69a8      	ldr	r0, [r5, #24]
 8005646:	6881      	ldr	r1, [r0, #8]
 8005648:	68a0      	ldr	r0, [r4, #8]
 800564a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800564e:	f001 be8d 	b.w	800736c <forward_lite_nl_relu_generic_if32of32_kernel>
 8005652:	bd70      	pop	{r4, r5, r6, pc}

08005654 <.text_95>:
 8005654:	00000000 	.word	0x00000000

08005658 <forward_relu_thresholded>:
 8005658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800565a:	4602      	mov	r2, r0
 800565c:	f04f 0601 	mov.w	r6, #1
 8005660:	6993      	ldr	r3, [r2, #24]
 8005662:	8819      	ldrh	r1, [r3, #0]
 8005664:	2900      	cmp	r1, #0
 8005666:	bf1a      	itte	ne
 8005668:	6858      	ldrne	r0, [r3, #4]
 800566a:	1d00      	addne	r0, r0, #4
 800566c:	2004      	moveq	r0, #4
 800566e:	6800      	ldr	r0, [r0, #0]
 8005670:	2800      	cmp	r0, #0
 8005672:	bf14      	ite	ne
 8005674:	6804      	ldrne	r4, [r0, #0]
 8005676:	2400      	moveq	r4, #0
 8005678:	2902      	cmp	r1, #2
 800567a:	bfa6      	itte	ge
 800567c:	6858      	ldrge	r0, [r3, #4]
 800567e:	3010      	addge	r0, #16
 8005680:	2004      	movlt	r0, #4
 8005682:	6800      	ldr	r0, [r0, #0]
 8005684:	2800      	cmp	r0, #0
 8005686:	bf19      	ittee	ne
 8005688:	6800      	ldrne	r0, [r0, #0]
 800568a:	f100 0518 	addne.w	r5, r0, #24
 800568e:	2100      	moveq	r1, #0
 8005690:	f101 0518 	addeq.w	r5, r1, #24
 8005694:	f104 0108 	add.w	r1, r4, #8
 8005698:	680b      	ldr	r3, [r1, #0]
 800569a:	0a1b      	lsrs	r3, r3, #8
 800569c:	d01f      	beq.n	80056de <forward_relu_thresholded+0x86>
 800569e:	684f      	ldr	r7, [r1, #4]
 80056a0:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80056a4:	4618      	mov	r0, r3
 80056a6:	f1a1 0c04 	sub.w	ip, r1, #4
 80056aa:	f010 0103 	ands.w	r1, r0, #3
 80056ae:	d006      	beq.n	80056be <forward_relu_thresholded+0x66>
 80056b0:	1e5b      	subs	r3, r3, #1
 80056b2:	f85c e904 	ldr.w	lr, [ip], #-4
 80056b6:	1e49      	subs	r1, r1, #1
 80056b8:	fb0e f606 	mul.w	r6, lr, r6
 80056bc:	d1f8      	bne.n	80056b0 <forward_relu_thresholded+0x58>
 80056be:	0880      	lsrs	r0, r0, #2
 80056c0:	d00d      	beq.n	80056de <forward_relu_thresholded+0x86>
 80056c2:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80056c6:	3910      	subs	r1, #16
 80056c8:	68cb      	ldr	r3, [r1, #12]
 80056ca:	688f      	ldr	r7, [r1, #8]
 80056cc:	437b      	muls	r3, r7
 80056ce:	684f      	ldr	r7, [r1, #4]
 80056d0:	437b      	muls	r3, r7
 80056d2:	f851 7910 	ldr.w	r7, [r1], #-16
 80056d6:	437b      	muls	r3, r7
 80056d8:	435e      	muls	r6, r3
 80056da:	1e40      	subs	r0, r0, #1
 80056dc:	d1f4      	bne.n	80056c8 <forward_relu_thresholded+0x70>
 80056de:	69d1      	ldr	r1, [r2, #28]
 80056e0:	688a      	ldr	r2, [r1, #8]
 80056e2:	ed92 0a00 	vldr	s0, [r2]
 80056e6:	69a0      	ldr	r0, [r4, #24]
 80056e8:	682a      	ldr	r2, [r5, #0]
 80056ea:	6880      	ldr	r0, [r0, #8]
 80056ec:	6893      	ldr	r3, [r2, #8]
 80056ee:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 80056f2:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 80056f6:	1f09      	subs	r1, r1, #4
 80056f8:	1f22      	subs	r2, r4, #4
 80056fa:	4281      	cmp	r1, r0
 80056fc:	f0c0 800f 	bcc.w	800571e <forward_relu_thresholded+0xc6>
 8005700:	edd1 0a00 	vldr	s1, [r1]
 8005704:	eeb4 0a60 	vcmp.f32	s0, s1
 8005708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570c:	bfa8      	it	ge
 800570e:	eddf 0aa2 	vldrge	s1, [pc, #648]	@ 8005998 <.text_100>
 8005712:	edc2 0a00 	vstr	s1, [r2]
 8005716:	1f09      	subs	r1, r1, #4
 8005718:	1f12      	subs	r2, r2, #4
 800571a:	4281      	cmp	r1, r0
 800571c:	d2f0      	bcs.n	8005700 <forward_relu_thresholded+0xa8>
 800571e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005720 <forward_hard_sigmoid>:
 8005720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005722:	4602      	mov	r2, r0
 8005724:	f04f 0601 	mov.w	r6, #1
 8005728:	6993      	ldr	r3, [r2, #24]
 800572a:	8819      	ldrh	r1, [r3, #0]
 800572c:	2900      	cmp	r1, #0
 800572e:	bf1a      	itte	ne
 8005730:	6858      	ldrne	r0, [r3, #4]
 8005732:	1d00      	addne	r0, r0, #4
 8005734:	2004      	moveq	r0, #4
 8005736:	6800      	ldr	r0, [r0, #0]
 8005738:	2800      	cmp	r0, #0
 800573a:	bf14      	ite	ne
 800573c:	6804      	ldrne	r4, [r0, #0]
 800573e:	2400      	moveq	r4, #0
 8005740:	2902      	cmp	r1, #2
 8005742:	bfa6      	itte	ge
 8005744:	6858      	ldrge	r0, [r3, #4]
 8005746:	3010      	addge	r0, #16
 8005748:	2004      	movlt	r0, #4
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	2800      	cmp	r0, #0
 800574e:	bf19      	ittee	ne
 8005750:	6800      	ldrne	r0, [r0, #0]
 8005752:	f100 0518 	addne.w	r5, r0, #24
 8005756:	2100      	moveq	r1, #0
 8005758:	f101 0518 	addeq.w	r5, r1, #24
 800575c:	f104 0108 	add.w	r1, r4, #8
 8005760:	680b      	ldr	r3, [r1, #0]
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	d01f      	beq.n	80057a6 <forward_hard_sigmoid+0x86>
 8005766:	684f      	ldr	r7, [r1, #4]
 8005768:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800576c:	4618      	mov	r0, r3
 800576e:	f1a1 0c04 	sub.w	ip, r1, #4
 8005772:	f010 0103 	ands.w	r1, r0, #3
 8005776:	d006      	beq.n	8005786 <forward_hard_sigmoid+0x66>
 8005778:	1e5b      	subs	r3, r3, #1
 800577a:	f85c e904 	ldr.w	lr, [ip], #-4
 800577e:	1e49      	subs	r1, r1, #1
 8005780:	fb0e f606 	mul.w	r6, lr, r6
 8005784:	d1f8      	bne.n	8005778 <forward_hard_sigmoid+0x58>
 8005786:	0880      	lsrs	r0, r0, #2
 8005788:	d00d      	beq.n	80057a6 <forward_hard_sigmoid+0x86>
 800578a:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800578e:	3910      	subs	r1, #16
 8005790:	68cb      	ldr	r3, [r1, #12]
 8005792:	688f      	ldr	r7, [r1, #8]
 8005794:	437b      	muls	r3, r7
 8005796:	684f      	ldr	r7, [r1, #4]
 8005798:	437b      	muls	r3, r7
 800579a:	f851 7910 	ldr.w	r7, [r1], #-16
 800579e:	437b      	muls	r3, r7
 80057a0:	435e      	muls	r6, r3
 80057a2:	1e40      	subs	r0, r0, #1
 80057a4:	d1f4      	bne.n	8005790 <forward_hard_sigmoid+0x70>
 80057a6:	69d0      	ldr	r0, [r2, #28]
 80057a8:	6881      	ldr	r1, [r0, #8]
 80057aa:	69a0      	ldr	r0, [r4, #24]
 80057ac:	682a      	ldr	r2, [r5, #0]
 80057ae:	6880      	ldr	r0, [r0, #8]
 80057b0:	6893      	ldr	r3, [r2, #8]
 80057b2:	ed91 0a00 	vldr	s0, [r1]
 80057b6:	edd1 0a01 	vldr	s1, [r1, #4]
 80057ba:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 80057be:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 80057c2:	1f09      	subs	r1, r1, #4
 80057c4:	1f22      	subs	r2, r4, #4
 80057c6:	4281      	cmp	r1, r0
 80057c8:	f0c0 8020 	bcc.w	800580c <forward_hard_sigmoid+0xec>
 80057cc:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80057d0:	eddf 1a72 	vldr	s3, [pc, #456]	@ 800599c <.text_101>
 80057d4:	edd1 2a00 	vldr	s5, [r1]
 80057d8:	eeb0 2a60 	vmov.f32	s4, s1
 80057dc:	ee02 2a80 	vmla.f32	s4, s5, s0
 80057e0:	eeb4 2a61 	vcmp.f32	s4, s3
 80057e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e8:	da08      	bge.n	80057fc <forward_hard_sigmoid+0xdc>
 80057ea:	eeb5 2a40 	vcmp.f32	s4, #0.0
 80057ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f2:	d505      	bpl.n	8005800 <forward_hard_sigmoid+0xe0>
 80057f4:	ed9f 2a68 	vldr	s4, [pc, #416]	@ 8005998 <.text_100>
 80057f8:	e002      	b.n	8005800 <forward_hard_sigmoid+0xe0>
 80057fa:	bf00      	nop
 80057fc:	eeb0 2a41 	vmov.f32	s4, s2
 8005800:	ed82 2a00 	vstr	s4, [r2]
 8005804:	1f09      	subs	r1, r1, #4
 8005806:	1f12      	subs	r2, r2, #4
 8005808:	4281      	cmp	r1, r0
 800580a:	d2e3      	bcs.n	80057d4 <forward_hard_sigmoid+0xb4>
 800580c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005810 <forward_elu>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	4604      	mov	r4, r0
 8005814:	ed2d 8b04 	vpush	{d8-d9}
 8005818:	69a2      	ldr	r2, [r4, #24]
 800581a:	8811      	ldrh	r1, [r2, #0]
 800581c:	2900      	cmp	r1, #0
 800581e:	bf1a      	itte	ne
 8005820:	6850      	ldrne	r0, [r2, #4]
 8005822:	1d00      	addne	r0, r0, #4
 8005824:	2004      	moveq	r0, #4
 8005826:	6800      	ldr	r0, [r0, #0]
 8005828:	2800      	cmp	r0, #0
 800582a:	bf14      	ite	ne
 800582c:	6805      	ldrne	r5, [r0, #0]
 800582e:	2500      	moveq	r5, #0
 8005830:	2902      	cmp	r1, #2
 8005832:	bfa6      	itte	ge
 8005834:	6850      	ldrge	r0, [r2, #4]
 8005836:	3010      	addge	r0, #16
 8005838:	2004      	movlt	r0, #4
 800583a:	6800      	ldr	r0, [r0, #0]
 800583c:	2800      	cmp	r0, #0
 800583e:	bf19      	ittee	ne
 8005840:	6800      	ldrne	r0, [r0, #0]
 8005842:	f100 0618 	addne.w	r6, r0, #24
 8005846:	2100      	moveq	r1, #0
 8005848:	f101 0618 	addeq.w	r6, r1, #24
 800584c:	f105 0008 	add.w	r0, r5, #8
 8005850:	f7fd face 	bl	8002df0 <ai_shape_get_size>
 8005854:	69a9      	ldr	r1, [r5, #24]
 8005856:	688d      	ldr	r5, [r1, #8]
 8005858:	69e1      	ldr	r1, [r4, #28]
 800585a:	688a      	ldr	r2, [r1, #8]
 800585c:	ed92 8a00 	vldr	s16, [r2]
 8005860:	6832      	ldr	r2, [r6, #0]
 8005862:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8005866:	1f0c      	subs	r4, r1, #4
 8005868:	6891      	ldr	r1, [r2, #8]
 800586a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800586e:	1f06      	subs	r6, r0, #4
 8005870:	42ac      	cmp	r4, r5
 8005872:	d329      	bcc.n	80058c8 <forward_elu+0xb8>
 8005874:	edd4 8a00 	vldr	s17, [r4]
 8005878:	eef5 8a40 	vcmp.f32	s17, #0.0
 800587c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005880:	bf4c      	ite	mi
 8005882:	ed9f 9a45 	vldrmi	s18, [pc, #276]	@ 8005998 <.text_100>
 8005886:	eeb0 9a68 	vmovpl.f32	s18, s17
 800588a:	eeb0 0a68 	vmov.f32	s0, s17
 800588e:	f011 fcdb 	bl	8017248 <expf>
 8005892:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8005896:	ee30 0a20 	vadd.f32	s0, s0, s1
 800589a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800589e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80058a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a6:	dc09      	bgt.n	80058bc <forward_elu+0xac>
 80058a8:	eeb0 0a68 	vmov.f32	s0, s17
 80058ac:	f011 fccc 	bl	8017248 <expf>
 80058b0:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80058b4:	ee30 0a20 	vadd.f32	s0, s0, s1
 80058b8:	ee00 9a08 	vmla.f32	s18, s0, s16
 80058bc:	ed86 9a00 	vstr	s18, [r6]
 80058c0:	1f24      	subs	r4, r4, #4
 80058c2:	1f36      	subs	r6, r6, #4
 80058c4:	42ac      	cmp	r4, r5
 80058c6:	d2d5      	bcs.n	8005874 <forward_elu+0x64>
 80058c8:	ecbd 8b04 	vpop	{d8-d9}
 80058cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080058d0 <forward_selu>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	4604      	mov	r4, r0
 80058d4:	ed2d 8b04 	vpush	{d8-d9}
 80058d8:	69a2      	ldr	r2, [r4, #24]
 80058da:	8811      	ldrh	r1, [r2, #0]
 80058dc:	2900      	cmp	r1, #0
 80058de:	bf1a      	itte	ne
 80058e0:	6850      	ldrne	r0, [r2, #4]
 80058e2:	1d00      	addne	r0, r0, #4
 80058e4:	2004      	moveq	r0, #4
 80058e6:	6800      	ldr	r0, [r0, #0]
 80058e8:	2800      	cmp	r0, #0
 80058ea:	bf14      	ite	ne
 80058ec:	6805      	ldrne	r5, [r0, #0]
 80058ee:	2500      	moveq	r5, #0
 80058f0:	2902      	cmp	r1, #2
 80058f2:	bfa6      	itte	ge
 80058f4:	6850      	ldrge	r0, [r2, #4]
 80058f6:	3010      	addge	r0, #16
 80058f8:	2004      	movlt	r0, #4
 80058fa:	6800      	ldr	r0, [r0, #0]
 80058fc:	2800      	cmp	r0, #0
 80058fe:	bf19      	ittee	ne
 8005900:	6800      	ldrne	r0, [r0, #0]
 8005902:	f100 0618 	addne.w	r6, r0, #24
 8005906:	2100      	moveq	r1, #0
 8005908:	f101 0618 	addeq.w	r6, r1, #24
 800590c:	f105 0008 	add.w	r0, r5, #8
 8005910:	f7fd fa6e 	bl	8002df0 <ai_shape_get_size>
 8005914:	69e1      	ldr	r1, [r4, #28]
 8005916:	69aa      	ldr	r2, [r5, #24]
 8005918:	6889      	ldr	r1, [r1, #8]
 800591a:	6894      	ldr	r4, [r2, #8]
 800591c:	ed91 8a00 	vldr	s16, [r1]
 8005920:	edd1 8a01 	vldr	s17, [r1, #4]
 8005924:	6832      	ldr	r2, [r6, #0]
 8005926:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 800592a:	1f0d      	subs	r5, r1, #4
 800592c:	6891      	ldr	r1, [r2, #8]
 800592e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8005932:	1f06      	subs	r6, r0, #4
 8005934:	42a5      	cmp	r5, r4
 8005936:	d32b      	bcc.n	8005990 <forward_selu+0xc0>
 8005938:	ed95 9a00 	vldr	s18, [r5]
 800593c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005944:	bf4c      	ite	mi
 8005946:	eddf 9a14 	vldrmi	s19, [pc, #80]	@ 8005998 <.text_100>
 800594a:	eef0 9a49 	vmovpl.f32	s19, s18
 800594e:	eeb0 0a49 	vmov.f32	s0, s18
 8005952:	f011 fc79 	bl	8017248 <expf>
 8005956:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800595a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800595e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005962:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800596a:	dc09      	bgt.n	8005980 <forward_selu+0xb0>
 800596c:	eeb0 0a49 	vmov.f32	s0, s18
 8005970:	f011 fc6a 	bl	8017248 <expf>
 8005974:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8005978:	ee30 0a20 	vadd.f32	s0, s0, s1
 800597c:	ee40 9a08 	vmla.f32	s19, s0, s16
 8005980:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8005984:	ed86 0a00 	vstr	s0, [r6]
 8005988:	1f2d      	subs	r5, r5, #4
 800598a:	1f36      	subs	r6, r6, #4
 800598c:	42a5      	cmp	r5, r4
 800598e:	d2d3      	bcs.n	8005938 <forward_selu+0x68>
 8005990:	ecbd 8b04 	vpop	{d8-d9}
 8005994:	bd70      	pop	{r4, r5, r6, pc}
	...

08005998 <.text_100>:
 8005998:	00000000 	.word	0x00000000

0800599c <.text_101>:
 800599c:	3f800001 	.word	0x3f800001

080059a0 <forward_prelu>:
 80059a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a4:	6984      	ldr	r4, [r0, #24]
 80059a6:	8821      	ldrh	r1, [r4, #0]
 80059a8:	2900      	cmp	r1, #0
 80059aa:	bf1a      	itte	ne
 80059ac:	6860      	ldrne	r0, [r4, #4]
 80059ae:	1d00      	addne	r0, r0, #4
 80059b0:	2004      	moveq	r0, #4
 80059b2:	6800      	ldr	r0, [r0, #0]
 80059b4:	2800      	cmp	r0, #0
 80059b6:	bf1a      	itte	ne
 80059b8:	6800      	ldrne	r0, [r0, #0]
 80059ba:	f100 0218 	addne.w	r2, r0, #24
 80059be:	2218      	moveq	r2, #24
 80059c0:	2902      	cmp	r1, #2
 80059c2:	bfa6      	itte	ge
 80059c4:	6860      	ldrge	r0, [r4, #4]
 80059c6:	3010      	addge	r0, #16
 80059c8:	2004      	movlt	r0, #4
 80059ca:	6800      	ldr	r0, [r0, #0]
 80059cc:	2800      	cmp	r0, #0
 80059ce:	bf1a      	itte	ne
 80059d0:	6800      	ldrne	r0, [r0, #0]
 80059d2:	f100 0318 	addne.w	r3, r0, #24
 80059d6:	2318      	moveq	r3, #24
 80059d8:	2902      	cmp	r1, #2
 80059da:	bfc6      	itte	gt
 80059dc:	6860      	ldrgt	r0, [r4, #4]
 80059de:	301c      	addgt	r0, #28
 80059e0:	2004      	movle	r0, #4
 80059e2:	6800      	ldr	r0, [r0, #0]
 80059e4:	2800      	cmp	r0, #0
 80059e6:	bf19      	ittee	ne
 80059e8:	6800      	ldrne	r0, [r0, #0]
 80059ea:	3018      	addne	r0, #24
 80059ec:	2104      	moveq	r1, #4
 80059ee:	f101 0014 	addeq.w	r0, r1, #20
 80059f2:	6800      	ldr	r0, [r0, #0]
 80059f4:	6811      	ldr	r1, [r2, #0]
 80059f6:	6884      	ldr	r4, [r0, #8]
 80059f8:	688d      	ldr	r5, [r1, #8]
 80059fa:	6846      	ldr	r6, [r0, #4]
 80059fc:	6848      	ldr	r0, [r1, #4]
 80059fe:	6819      	ldr	r1, [r3, #0]
 8005a00:	1e76      	subs	r6, r6, #1
 8005a02:	eb05 0880 	add.w	r8, r5, r0, lsl #2
 8005a06:	688f      	ldr	r7, [r1, #8]
 8005a08:	4545      	cmp	r5, r8
 8005a0a:	d20b      	bcs.n	8005a24 <forward_prelu+0x84>
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	4632      	mov	r2, r6
 8005a10:	4629      	mov	r1, r5
 8005a12:	4638      	mov	r0, r7
 8005a14:	f001 fc6a 	bl	80072ec <forward_lite_nl_prelu_if32of32_kernel>
 8005a18:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8005a1c:	4545      	cmp	r5, r8
 8005a1e:	eb07 0786 	add.w	r7, r7, r6, lsl #2
 8005a22:	d3f3      	bcc.n	8005a0c <forward_prelu+0x6c>
 8005a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a28 <forward_clip>:
 8005a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	f04f 0601 	mov.w	r6, #1
 8005a30:	6993      	ldr	r3, [r2, #24]
 8005a32:	8819      	ldrh	r1, [r3, #0]
 8005a34:	2900      	cmp	r1, #0
 8005a36:	bf1a      	itte	ne
 8005a38:	6858      	ldrne	r0, [r3, #4]
 8005a3a:	1d00      	addne	r0, r0, #4
 8005a3c:	2004      	moveq	r0, #4
 8005a3e:	6800      	ldr	r0, [r0, #0]
 8005a40:	2800      	cmp	r0, #0
 8005a42:	bf14      	ite	ne
 8005a44:	6804      	ldrne	r4, [r0, #0]
 8005a46:	2400      	moveq	r4, #0
 8005a48:	2902      	cmp	r1, #2
 8005a4a:	bfa6      	itte	ge
 8005a4c:	6858      	ldrge	r0, [r3, #4]
 8005a4e:	3010      	addge	r0, #16
 8005a50:	2004      	movlt	r0, #4
 8005a52:	6800      	ldr	r0, [r0, #0]
 8005a54:	2800      	cmp	r0, #0
 8005a56:	bf19      	ittee	ne
 8005a58:	6800      	ldrne	r0, [r0, #0]
 8005a5a:	f100 0518 	addne.w	r5, r0, #24
 8005a5e:	2100      	moveq	r1, #0
 8005a60:	f101 0518 	addeq.w	r5, r1, #24
 8005a64:	f104 0108 	add.w	r1, r4, #8
 8005a68:	680b      	ldr	r3, [r1, #0]
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	d01f      	beq.n	8005aae <forward_clip+0x86>
 8005a6e:	684f      	ldr	r7, [r1, #4]
 8005a70:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f1a1 0c04 	sub.w	ip, r1, #4
 8005a7a:	f010 0103 	ands.w	r1, r0, #3
 8005a7e:	d006      	beq.n	8005a8e <forward_clip+0x66>
 8005a80:	1e5b      	subs	r3, r3, #1
 8005a82:	f85c e904 	ldr.w	lr, [ip], #-4
 8005a86:	1e49      	subs	r1, r1, #1
 8005a88:	fb0e f606 	mul.w	r6, lr, r6
 8005a8c:	d1f8      	bne.n	8005a80 <forward_clip+0x58>
 8005a8e:	0880      	lsrs	r0, r0, #2
 8005a90:	d00d      	beq.n	8005aae <forward_clip+0x86>
 8005a92:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8005a96:	3910      	subs	r1, #16
 8005a98:	68cb      	ldr	r3, [r1, #12]
 8005a9a:	688f      	ldr	r7, [r1, #8]
 8005a9c:	437b      	muls	r3, r7
 8005a9e:	684f      	ldr	r7, [r1, #4]
 8005aa0:	437b      	muls	r3, r7
 8005aa2:	f851 7910 	ldr.w	r7, [r1], #-16
 8005aa6:	437b      	muls	r3, r7
 8005aa8:	435e      	muls	r6, r3
 8005aaa:	1e40      	subs	r0, r0, #1
 8005aac:	d1f4      	bne.n	8005a98 <forward_clip+0x70>
 8005aae:	69d0      	ldr	r0, [r2, #28]
 8005ab0:	6881      	ldr	r1, [r0, #8]
 8005ab2:	69a0      	ldr	r0, [r4, #24]
 8005ab4:	682a      	ldr	r2, [r5, #0]
 8005ab6:	6880      	ldr	r0, [r0, #8]
 8005ab8:	6893      	ldr	r3, [r2, #8]
 8005aba:	ed91 0a00 	vldr	s0, [r1]
 8005abe:	edd1 0a01 	vldr	s1, [r1, #4]
 8005ac2:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 8005ac6:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8005aca:	1f09      	subs	r1, r1, #4
 8005acc:	1f22      	subs	r2, r4, #4
 8005ace:	4281      	cmp	r1, r0
 8005ad0:	f0c0 8016 	bcc.w	8005b00 <forward_clip+0xd8>
 8005ad4:	ed91 1a00 	vldr	s2, [r1]
 8005ad8:	eeb4 0a41 	vcmp.f32	s0, s2
 8005adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae0:	bf58      	it	pl
 8005ae2:	eeb0 1a40 	vmovpl.f32	s2, s0
 8005ae6:	eeb4 1a60 	vcmp.f32	s2, s1
 8005aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aee:	bf58      	it	pl
 8005af0:	eeb0 1a60 	vmovpl.f32	s2, s1
 8005af4:	ed82 1a00 	vstr	s2, [r2]
 8005af8:	1f09      	subs	r1, r1, #4
 8005afa:	1f12      	subs	r2, r2, #4
 8005afc:	4281      	cmp	r1, r0
 8005afe:	d2e9      	bcs.n	8005ad4 <forward_clip+0xac>
 8005b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b02 <forward_sm>:
 8005b02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b06:	b081      	sub	sp, #4
 8005b08:	6982      	ldr	r2, [r0, #24]
 8005b0a:	8811      	ldrh	r1, [r2, #0]
 8005b0c:	2900      	cmp	r1, #0
 8005b0e:	bf1a      	itte	ne
 8005b10:	6850      	ldrne	r0, [r2, #4]
 8005b12:	1d00      	addne	r0, r0, #4
 8005b14:	2004      	moveq	r0, #4
 8005b16:	f04f 0601 	mov.w	r6, #1
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	bf14      	ite	ne
 8005b20:	6803      	ldrne	r3, [r0, #0]
 8005b22:	2300      	moveq	r3, #0
 8005b24:	2902      	cmp	r1, #2
 8005b26:	bfa6      	itte	ge
 8005b28:	6850      	ldrge	r0, [r2, #4]
 8005b2a:	3010      	addge	r0, #16
 8005b2c:	2004      	movlt	r0, #4
 8005b2e:	f103 0108 	add.w	r1, r3, #8
 8005b32:	6800      	ldr	r0, [r0, #0]
 8005b34:	680a      	ldr	r2, [r1, #0]
 8005b36:	2800      	cmp	r0, #0
 8005b38:	bf14      	ite	ne
 8005b3a:	f8d0 c000 	ldrne.w	ip, [r0]
 8005b3e:	f04f 0c00 	moveq.w	ip, #0
 8005b42:	68d8      	ldr	r0, [r3, #12]
 8005b44:	6844      	ldr	r4, [r0, #4]
 8005b46:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8005b4a:	6845      	ldr	r5, [r0, #4]
 8005b4c:	0a12      	lsrs	r2, r2, #8
 8005b4e:	d01f      	beq.n	8005b90 <forward_sm+0x8e>
 8005b50:	684f      	ldr	r7, [r1, #4]
 8005b52:	eb07 0182 	add.w	r1, r7, r2, lsl #2
 8005b56:	4610      	mov	r0, r2
 8005b58:	f1a1 0e04 	sub.w	lr, r1, #4
 8005b5c:	f010 0103 	ands.w	r1, r0, #3
 8005b60:	d006      	beq.n	8005b70 <forward_sm+0x6e>
 8005b62:	1e52      	subs	r2, r2, #1
 8005b64:	f85e 8904 	ldr.w	r8, [lr], #-4
 8005b68:	1e49      	subs	r1, r1, #1
 8005b6a:	fb08 f606 	mul.w	r6, r8, r6
 8005b6e:	d1f8      	bne.n	8005b62 <forward_sm+0x60>
 8005b70:	0880      	lsrs	r0, r0, #2
 8005b72:	d00d      	beq.n	8005b90 <forward_sm+0x8e>
 8005b74:	eb07 0182 	add.w	r1, r7, r2, lsl #2
 8005b78:	3910      	subs	r1, #16
 8005b7a:	68ca      	ldr	r2, [r1, #12]
 8005b7c:	688f      	ldr	r7, [r1, #8]
 8005b7e:	437a      	muls	r2, r7
 8005b80:	684f      	ldr	r7, [r1, #4]
 8005b82:	437a      	muls	r2, r7
 8005b84:	f851 7910 	ldr.w	r7, [r1], #-16
 8005b88:	437a      	muls	r2, r7
 8005b8a:	4356      	muls	r6, r2
 8005b8c:	1e40      	subs	r0, r0, #1
 8005b8e:	d1f4      	bne.n	8005b7a <forward_sm+0x78>
 8005b90:	6998      	ldr	r0, [r3, #24]
 8005b92:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8005b96:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8005b9a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8005b9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8005ba2:	45b0      	cmp	r8, r6
 8005ba4:	d20a      	bcs.n	8005bbc <forward_sm+0xba>
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	4641      	mov	r1, r8
 8005baa:	4648      	mov	r0, r9
 8005bac:	f001 fa50 	bl	8007050 <forward_lite_nl_softmax_if32of32_kernel>
 8005bb0:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8005bb4:	45b0      	cmp	r8, r6
 8005bb6:	eb09 0985 	add.w	r9, r9, r5, lsl #2
 8005bba:	d3f4      	bcc.n	8005ba6 <forward_sm+0xa4>
 8005bbc:	b001      	add	sp, #4
 8005bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005bc2 <forward_hardmax>:
 8005bc2:	b530      	push	{r4, r5, lr}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	6982      	ldr	r2, [r0, #24]
 8005bc8:	8811      	ldrh	r1, [r2, #0]
 8005bca:	2900      	cmp	r1, #0
 8005bcc:	bf1a      	itte	ne
 8005bce:	6850      	ldrne	r0, [r2, #4]
 8005bd0:	1d00      	addne	r0, r0, #4
 8005bd2:	2004      	moveq	r0, #4
 8005bd4:	6800      	ldr	r0, [r0, #0]
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	bf14      	ite	ne
 8005bda:	6804      	ldrne	r4, [r0, #0]
 8005bdc:	2400      	moveq	r4, #0
 8005bde:	2902      	cmp	r1, #2
 8005be0:	bfa6      	itte	ge
 8005be2:	6850      	ldrge	r0, [r2, #4]
 8005be4:	3010      	addge	r0, #16
 8005be6:	2004      	movlt	r0, #4
 8005be8:	6800      	ldr	r0, [r0, #0]
 8005bea:	2800      	cmp	r0, #0
 8005bec:	bf19      	ittee	ne
 8005bee:	6800      	ldrne	r0, [r0, #0]
 8005bf0:	f100 0518 	addne.w	r5, r0, #24
 8005bf4:	2100      	moveq	r1, #0
 8005bf6:	f101 0518 	addeq.w	r5, r1, #24
 8005bfa:	68e1      	ldr	r1, [r4, #12]
 8005bfc:	68ca      	ldr	r2, [r1, #12]
 8005bfe:	6888      	ldr	r0, [r1, #8]
 8005c00:	4342      	muls	r2, r0
 8005c02:	9200      	str	r2, [sp, #0]
 8005c04:	f104 0008 	add.w	r0, r4, #8
 8005c08:	6849      	ldr	r1, [r1, #4]
 8005c0a:	9101      	str	r1, [sp, #4]
 8005c0c:	f7fd f8f0 	bl	8002df0 <ai_shape_get_size>
 8005c10:	4602      	mov	r2, r0
 8005c12:	69a0      	ldr	r0, [r4, #24]
 8005c14:	682c      	ldr	r4, [r5, #0]
 8005c16:	6881      	ldr	r1, [r0, #8]
 8005c18:	68a0      	ldr	r0, [r4, #8]
 8005c1a:	466b      	mov	r3, sp
 8005c1c:	f7fd f92e 	bl	8002e7c <_forward_lite_nl_hardmax_if32of32>
 8005c20:	b003      	add	sp, #12
 8005c22:	bd30      	pop	{r4, r5, pc}

08005c24 <get_conv2d_scratch_size>:
 8005c24:	b4f0      	push	{r4, r5, r6, r7}
 8005c26:	b081      	sub	sp, #4
 8005c28:	2400      	movs	r4, #0
 8005c2a:	9e07      	ldr	r6, [sp, #28]
 8005c2c:	fb01 f500 	mul.w	r5, r1, r0
 8005c30:	0037      	movs	r7, r6
 8005c32:	b2ad      	uxth	r5, r5
 8005c34:	bf14      	ite	ne
 8005c36:	461f      	movne	r7, r3
 8005c38:	4617      	moveq	r7, r2
 8005c3a:	436f      	muls	r7, r5
 8005c3c:	436a      	muls	r2, r5
 8005c3e:	fb03 f502 	mul.w	r5, r3, r2
 8005c42:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8005c46:	f241 4501 	movw	r5, #5121	@ 0x1401
 8005c4a:	45ac      	cmp	ip, r5
 8005c4c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005c4e:	bfa8      	it	ge
 8005c50:	f44f 5ca0 	movge.w	ip, #5120	@ 0x1400
 8005c54:	b13d      	cbz	r5, 8005c66 <get_conv2d_scratch_size+0x42>
 8005c56:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8005c5a:	bf38      	it	cc
 8005c5c:	ea4f 0c42 	movcc.w	ip, r2, lsl #1
 8005c60:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005c64:	0054      	lsls	r4, r2, #1
 8005c66:	b186      	cbz	r6, 8005c8a <get_conv2d_scratch_size+0x66>
 8005c68:	9a08      	ldr	r2, [sp, #32]
 8005c6a:	b13a      	cbz	r2, 8005c7c <get_conv2d_scratch_size+0x58>
 8005c6c:	1c40      	adds	r0, r0, #1
 8005c6e:	4348      	muls	r0, r1
 8005c70:	4358      	muls	r0, r3
 8005c72:	0047      	lsls	r7, r0, #1
 8005c74:	1938      	adds	r0, r7, r4
 8005c76:	b001      	add	sp, #4
 8005c78:	bcf0      	pop	{r4, r5, r6, r7}
 8005c7a:	4770      	bx	lr
 8005c7c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8005c80:	1c7f      	adds	r7, r7, #1
 8005c82:	1938      	adds	r0, r7, r4
 8005c84:	b001      	add	sp, #4
 8005c86:	bcf0      	pop	{r4, r5, r6, r7}
 8005c88:	4770      	bx	lr
 8005c8a:	9806      	ldr	r0, [sp, #24]
 8005c8c:	b930      	cbnz	r0, 8005c9c <get_conv2d_scratch_size+0x78>
 8005c8e:	9805      	ldr	r0, [sp, #20]
 8005c90:	b120      	cbz	r0, 8005c9c <get_conv2d_scratch_size+0x78>
 8005c92:	00bf      	lsls	r7, r7, #2
 8005c94:	1938      	adds	r0, r7, r4
 8005c96:	b001      	add	sp, #4
 8005c98:	bcf0      	pop	{r4, r5, r6, r7}
 8005c9a:	4770      	bx	lr
 8005c9c:	18f8      	adds	r0, r7, r3
 8005c9e:	eb0c 0780 	add.w	r7, ip, r0, lsl #2
 8005ca2:	1938      	adds	r0, r7, r4
 8005ca4:	b001      	add	sp, #4
 8005ca6:	bcf0      	pop	{r4, r5, r6, r7}
 8005ca8:	4770      	bx	lr
	...

08005cac <fw_lite_conv2d_kernel_simple_opt_f32>:
 8005cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb0:	b081      	sub	sp, #4
 8005cb2:	ed2d 8b10 	vpush	{d8-d15}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 8005cba:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 8005cbc:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8005cbe:	436e      	muls	r6, r5
 8005cc0:	435e      	muls	r6, r3
 8005cc2:	2c00      	cmp	r4, #0
 8005cc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005cc8:	f000 80f8 	beq.w	8005ebc <fw_lite_conv2d_kernel_simple_opt_f32+0x210>
 8005ccc:	9106      	str	r1, [sp, #24]
 8005cce:	ed8d 0a05 	vstr	s0, [sp, #20]
 8005cd2:	9301      	str	r3, [sp, #4]
 8005cd4:	9524      	str	r5, [sp, #144]	@ 0x90
 8005cd6:	9604      	str	r6, [sp, #16]
 8005cd8:	9003      	str	r0, [sp, #12]
 8005cda:	9402      	str	r4, [sp, #8]
 8005cdc:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8005cde:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005ce0:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8005ce2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ce4:	9c01      	ldr	r4, [sp, #4]
 8005ce6:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 8005ce8:	eddd fa05 	vldr	s31, [sp, #20]
 8005cec:	4252      	negs	r2, r2
 8005cee:	bfd8      	it	le
 8005cf0:	2200      	movle	r2, #0
 8005cf2:	1a40      	subs	r0, r0, r1
 8005cf4:	4298      	cmp	r0, r3
 8005cf6:	bf3d      	ittte	cc
 8005cf8:	9922      	ldrcc	r1, [sp, #136]	@ 0x88
 8005cfa:	9828      	ldrcc	r0, [sp, #160]	@ 0xa0
 8005cfc:	1a08      	subcc	r0, r1, r0
 8005cfe:	4618      	movcs	r0, r3
 8005d00:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8005d02:	9906      	ldr	r1, [sp, #24]
 8005d04:	18d3      	adds	r3, r2, r3
 8005d06:	4363      	muls	r3, r4
 8005d08:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005d0c:	9904      	ldr	r1, [sp, #16]
 8005d0e:	4354      	muls	r4, r2
 8005d10:	1a82      	subs	r2, r0, r2
 8005d12:	9801      	ldr	r0, [sp, #4]
 8005d14:	1aad      	subs	r5, r5, r2
 8005d16:	4345      	muls	r5, r0
 8005d18:	4606      	mov	r6, r0
 8005d1a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005d1c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8005d20:	1a80      	subs	r0, r0, r2
 8005d22:	4346      	muls	r6, r0
 8005d24:	9901      	ldr	r1, [sp, #4]
 8005d26:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8005d28:	434a      	muls	r2, r1
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	f340 80b4 	ble.w	8005e98 <fw_lite_conv2d_kernel_simple_opt_f32+0x1ec>
 8005d30:	4601      	mov	r1, r0
 8005d32:	f022 0b0f 	bic.w	fp, r2, #15
 8005d36:	2000      	movs	r0, #0
 8005d38:	f022 070f 	bic.w	r7, r2, #15
 8005d3c:	2f00      	cmp	r7, #0
 8005d3e:	dd76      	ble.n	8005e2e <fw_lite_conv2d_kernel_simple_opt_f32+0x182>
 8005d40:	f103 0710 	add.w	r7, r3, #16
 8005d44:	f104 0810 	add.w	r8, r4, #16
 8005d48:	f107 0c10 	add.w	ip, r7, #16
 8005d4c:	f108 0910 	add.w	r9, r8, #16
 8005d50:	f10c 0e10 	add.w	lr, ip, #16
 8005d54:	f109 0a10 	add.w	sl, r9, #16
 8005d58:	edde 0a03 	vldr	s1, [lr, #12]
 8005d5c:	ed9a 0a03 	vldr	s0, [sl, #12]
 8005d60:	edcd 0a00 	vstr	s1, [sp]
 8005d64:	ed94 fa00 	vldr	s30, [r4]
 8005d68:	edd3 ea00 	vldr	s29, [r3]
 8005d6c:	ed94 ea01 	vldr	s28, [r4, #4]
 8005d70:	edd3 da01 	vldr	s27, [r3, #4]
 8005d74:	ed94 da02 	vldr	s26, [r4, #8]
 8005d78:	edd3 ca02 	vldr	s25, [r3, #8]
 8005d7c:	ed94 ca03 	vldr	s24, [r4, #12]
 8005d80:	edd3 ba03 	vldr	s23, [r3, #12]
 8005d84:	ed98 ba00 	vldr	s22, [r8]
 8005d88:	edd7 aa00 	vldr	s21, [r7]
 8005d8c:	ed98 aa01 	vldr	s20, [r8, #4]
 8005d90:	edd7 9a01 	vldr	s19, [r7, #4]
 8005d94:	ed98 9a02 	vldr	s18, [r8, #8]
 8005d98:	edd7 8a02 	vldr	s17, [r7, #8]
 8005d9c:	ed98 8a03 	vldr	s16, [r8, #12]
 8005da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005da4:	ed99 7a00 	vldr	s14, [r9]
 8005da8:	eddc 6a00 	vldr	s13, [ip]
 8005dac:	ed99 6a01 	vldr	s12, [r9, #4]
 8005db0:	eddc 5a01 	vldr	s11, [ip, #4]
 8005db4:	ed99 5a02 	vldr	s10, [r9, #8]
 8005db8:	eddc 4a02 	vldr	s9, [ip, #8]
 8005dbc:	ed99 4a03 	vldr	s8, [r9, #12]
 8005dc0:	eddc 3a03 	vldr	s7, [ip, #12]
 8005dc4:	ed9a 3a00 	vldr	s6, [sl]
 8005dc8:	edde 2a00 	vldr	s5, [lr]
 8005dcc:	ed9a 2a01 	vldr	s4, [sl, #4]
 8005dd0:	edde 1a01 	vldr	s3, [lr, #4]
 8005dd4:	ed9a 1a02 	vldr	s2, [sl, #8]
 8005dd8:	edde 0a02 	vldr	s1, [lr, #8]
 8005ddc:	ee4f fa2e 	vmla.f32	s31, s30, s29
 8005de0:	ee4e fa2d 	vmla.f32	s31, s28, s27
 8005de4:	ee4d fa2c 	vmla.f32	s31, s26, s25
 8005de8:	ee4c fa2b 	vmla.f32	s31, s24, s23
 8005dec:	ee4b fa2a 	vmla.f32	s31, s22, s21
 8005df0:	ee4a fa29 	vmla.f32	s31, s20, s19
 8005df4:	ee49 fa28 	vmla.f32	s31, s18, s17
 8005df8:	ee48 fa27 	vmla.f32	s31, s16, s15
 8005dfc:	ee47 fa26 	vmla.f32	s31, s14, s13
 8005e00:	ee46 fa25 	vmla.f32	s31, s12, s11
 8005e04:	ee45 fa24 	vmla.f32	s31, s10, s9
 8005e08:	ee44 fa23 	vmla.f32	s31, s8, s7
 8005e0c:	ee43 fa22 	vmla.f32	s31, s6, s5
 8005e10:	ee42 fa21 	vmla.f32	s31, s4, s3
 8005e14:	ee41 fa20 	vmla.f32	s31, s2, s1
 8005e18:	3010      	adds	r0, #16
 8005e1a:	eddd 0a00 	vldr	s1, [sp]
 8005e1e:	4558      	cmp	r0, fp
 8005e20:	ee40 fa20 	vmla.f32	s31, s0, s1
 8005e24:	f10e 0310 	add.w	r3, lr, #16
 8005e28:	f10a 0410 	add.w	r4, sl, #16
 8005e2c:	db88      	blt.n	8005d40 <fw_lite_conv2d_kernel_simple_opt_f32+0x94>
 8005e2e:	4290      	cmp	r0, r2
 8005e30:	da2b      	bge.n	8005e8a <fw_lite_conv2d_kernel_simple_opt_f32+0x1de>
 8005e32:	1c40      	adds	r0, r0, #1
 8005e34:	ed94 1a00 	vldr	s2, [r4]
 8005e38:	ed93 0a00 	vldr	s0, [r3]
 8005e3c:	1d1b      	adds	r3, r3, #4
 8005e3e:	1d24      	adds	r4, r4, #4
 8005e40:	4290      	cmp	r0, r2
 8005e42:	ee41 fa00 	vmla.f32	s31, s2, s0
 8005e46:	da20      	bge.n	8005e8a <fw_lite_conv2d_kernel_simple_opt_f32+0x1de>
 8005e48:	1c40      	adds	r0, r0, #1
 8005e4a:	edd4 1a00 	vldr	s3, [r4]
 8005e4e:	edd3 0a00 	vldr	s1, [r3]
 8005e52:	1d1b      	adds	r3, r3, #4
 8005e54:	1d24      	adds	r4, r4, #4
 8005e56:	4290      	cmp	r0, r2
 8005e58:	ee41 faa0 	vmla.f32	s31, s3, s1
 8005e5c:	da15      	bge.n	8005e8a <fw_lite_conv2d_kernel_simple_opt_f32+0x1de>
 8005e5e:	1c40      	adds	r0, r0, #1
 8005e60:	ed94 1a00 	vldr	s2, [r4]
 8005e64:	ed93 0a00 	vldr	s0, [r3]
 8005e68:	1d1b      	adds	r3, r3, #4
 8005e6a:	1d24      	adds	r4, r4, #4
 8005e6c:	4290      	cmp	r0, r2
 8005e6e:	ee41 fa00 	vmla.f32	s31, s2, s0
 8005e72:	da0a      	bge.n	8005e8a <fw_lite_conv2d_kernel_simple_opt_f32+0x1de>
 8005e74:	1c40      	adds	r0, r0, #1
 8005e76:	edd4 0a00 	vldr	s1, [r4]
 8005e7a:	edd3 1a00 	vldr	s3, [r3]
 8005e7e:	1d1b      	adds	r3, r3, #4
 8005e80:	1d24      	adds	r4, r4, #4
 8005e82:	4290      	cmp	r0, r2
 8005e84:	ee40 faa1 	vmla.f32	s31, s1, s3
 8005e88:	dbd3      	blt.n	8005e32 <fw_lite_conv2d_kernel_simple_opt_f32+0x186>
 8005e8a:	1e49      	subs	r1, r1, #1
 8005e8c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005e90:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8005e94:	f47f af4f 	bne.w	8005d36 <fw_lite_conv2d_kernel_simple_opt_f32+0x8a>
 8005e98:	9803      	ldr	r0, [sp, #12]
 8005e9a:	edc0 fa00 	vstr	s31, [r0]
 8005e9e:	9903      	ldr	r1, [sp, #12]
 8005ea0:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8005ea2:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8005ea6:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8005ea8:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 8005eac:	9203      	str	r2, [sp, #12]
 8005eae:	1841      	adds	r1, r0, r1
 8005eb0:	9802      	ldr	r0, [sp, #8]
 8005eb2:	9128      	str	r1, [sp, #160]	@ 0xa0
 8005eb4:	1e40      	subs	r0, r0, #1
 8005eb6:	9002      	str	r0, [sp, #8]
 8005eb8:	f47f af10 	bne.w	8005cdc <fw_lite_conv2d_kernel_simple_opt_f32+0x30>
 8005ebc:	b007      	add	sp, #28
 8005ebe:	ecbd 8b10 	vpop	{d8-d15}
 8005ec2:	b001      	add	sp, #4
 8005ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ec8 <fw_lite_conv2d_kernel_depthwise_f32>:
 8005ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ecc:	b086      	sub	sp, #24
 8005ece:	4615      	mov	r5, r2
 8005ed0:	4606      	mov	r6, r0
 8005ed2:	4689      	mov	r9, r1
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 8005eda:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8005ede:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 8005ee2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8005ee4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005ee6:	f8dd e050 	ldr.w	lr, [sp, #80]	@ 0x50
 8005eea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005eec:	f8dd b058 	ldr.w	fp, [sp, #88]	@ 0x58
 8005ef0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005ef2:	fbba f4f8 	udiv	r4, sl, r8
 8005ef6:	9400      	str	r4, [sp, #0]
 8005ef8:	1ac9      	subs	r1, r1, r3
 8005efa:	ebac 0400 	sub.w	r4, ip, r0
 8005efe:	fb08 fa04 	mul.w	sl, r8, r4
 8005f02:	1a3c      	subs	r4, r7, r0
 8005f04:	4379      	muls	r1, r7
 8005f06:	fb07 bb0e 	mla	fp, r7, lr, fp
 8005f0a:	eb05 078b 	add.w	r7, r5, fp, lsl #2
 8005f0e:	2a00      	cmp	r2, #0
 8005f10:	fb0c f50e 	mul.w	r5, ip, lr
 8005f14:	bf0c      	ite	eq
 8005f16:	ed9f 0ac6 	vldreq	s0, [pc, #792]	@ 8006230 <.text_5>
 8005f1a:	eeb7 0a00 	vmovne.f32	s0, #112	@ 0x3f800000  1.0
 8005f1e:	fb08 fc05 	mul.w	ip, r8, r5
 8005f22:	bf08      	it	eq
 8005f24:	4632      	moveq	r2, r6
 8005f26:	eb09 058c 	add.w	r5, r9, ip, lsl #2
 8005f2a:	eb05 0e88 	add.w	lr, r5, r8, lsl #2
 8005f2e:	4575      	cmp	r5, lr
 8005f30:	f04f 0900 	mov.w	r9, #0
 8005f34:	f8cd e004 	str.w	lr, [sp, #4]
 8005f38:	f080 808f 	bcs.w	800605a <fw_lite_conv2d_kernel_depthwise_f32+0x192>
 8005f3c:	f020 0b03 	bic.w	fp, r0, #3
 8005f40:	9605      	str	r6, [sp, #20]
 8005f42:	9204      	str	r2, [sp, #16]
 8005f44:	9a00      	ldr	r2, [sp, #0]
 8005f46:	2a00      	cmp	r2, #0
 8005f48:	f000 8082 	beq.w	8006050 <fw_lite_conv2d_kernel_depthwise_f32+0x188>
 8005f4c:	9a04      	ldr	r2, [sp, #16]
 8005f4e:	9e05      	ldr	r6, [sp, #20]
 8005f50:	9502      	str	r5, [sp, #8]
 8005f52:	eb02 0c89 	add.w	ip, r2, r9, lsl #2
 8005f56:	9a00      	ldr	r2, [sp, #0]
 8005f58:	9103      	str	r1, [sp, #12]
 8005f5a:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 8005f5e:	4665      	mov	r5, ip
 8005f60:	edd5 0a00 	vldr	s1, [r5]
 8005f64:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005f6e:	dd62      	ble.n	8006036 <fw_lite_conv2d_kernel_depthwise_f32+0x16e>
 8005f70:	4619      	mov	r1, r3
 8005f72:	46a4      	mov	ip, r4
 8005f74:	2400      	movs	r4, #0
 8005f76:	f1bb 0f00 	cmp.w	fp, #0
 8005f7a:	dd23      	ble.n	8005fc4 <fw_lite_conv2d_kernel_depthwise_f32+0xfc>
 8005f7c:	ed97 1a00 	vldr	s2, [r7]
 8005f80:	edde 1a00 	vldr	s3, [lr]
 8005f84:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8005f88:	ee41 0a21 	vmla.f32	s1, s2, s3
 8005f8c:	ed97 1a01 	vldr	s2, [r7, #4]
 8005f90:	edde 1a00 	vldr	s3, [lr]
 8005f94:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8005f98:	ee41 0a21 	vmla.f32	s1, s2, s3
 8005f9c:	ed97 1a02 	vldr	s2, [r7, #8]
 8005fa0:	edde 1a00 	vldr	s3, [lr]
 8005fa4:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8005fa8:	ee41 0a21 	vmla.f32	s1, s2, s3
 8005fac:	1d24      	adds	r4, r4, #4
 8005fae:	ed97 1a03 	vldr	s2, [r7, #12]
 8005fb2:	edde 1a00 	vldr	s3, [lr]
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	455c      	cmp	r4, fp
 8005fba:	ee41 0a21 	vmla.f32	s1, s2, s3
 8005fbe:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8005fc2:	dbdb      	blt.n	8005f7c <fw_lite_conv2d_kernel_depthwise_f32+0xb4>
 8005fc4:	4284      	cmp	r4, r0
 8005fc6:	da2f      	bge.n	8006028 <fw_lite_conv2d_kernel_depthwise_f32+0x160>
 8005fc8:	1c64      	adds	r4, r4, #1
 8005fca:	ed97 1a00 	vldr	s2, [r7]
 8005fce:	edde 1a00 	vldr	s3, [lr]
 8005fd2:	1d3f      	adds	r7, r7, #4
 8005fd4:	4284      	cmp	r4, r0
 8005fd6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8005fda:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8005fde:	da23      	bge.n	8006028 <fw_lite_conv2d_kernel_depthwise_f32+0x160>
 8005fe0:	1c64      	adds	r4, r4, #1
 8005fe2:	edd7 1a00 	vldr	s3, [r7]
 8005fe6:	ed9e 1a00 	vldr	s2, [lr]
 8005fea:	1d3f      	adds	r7, r7, #4
 8005fec:	4284      	cmp	r4, r0
 8005fee:	ee41 0a81 	vmla.f32	s1, s3, s2
 8005ff2:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8005ff6:	da17      	bge.n	8006028 <fw_lite_conv2d_kernel_depthwise_f32+0x160>
 8005ff8:	1c64      	adds	r4, r4, #1
 8005ffa:	ed97 1a00 	vldr	s2, [r7]
 8005ffe:	edde 1a00 	vldr	s3, [lr]
 8006002:	1d3f      	adds	r7, r7, #4
 8006004:	4284      	cmp	r4, r0
 8006006:	ee41 0a21 	vmla.f32	s1, s2, s3
 800600a:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 800600e:	da0b      	bge.n	8006028 <fw_lite_conv2d_kernel_depthwise_f32+0x160>
 8006010:	1c64      	adds	r4, r4, #1
 8006012:	edd7 1a00 	vldr	s3, [r7]
 8006016:	ed9e 1a00 	vldr	s2, [lr]
 800601a:	1d3f      	adds	r7, r7, #4
 800601c:	4284      	cmp	r4, r0
 800601e:	ee41 0a81 	vmla.f32	s1, s3, s2
 8006022:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8006026:	dbcf      	blt.n	8005fc8 <fw_lite_conv2d_kernel_depthwise_f32+0x100>
 8006028:	1e49      	subs	r1, r1, #1
 800602a:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 800602e:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8006032:	d19f      	bne.n	8005f74 <fw_lite_conv2d_kernel_depthwise_f32+0xac>
 8006034:	4664      	mov	r4, ip
 8006036:	9903      	ldr	r1, [sp, #12]
 8006038:	edc6 0a00 	vstr	s1, [r6]
 800603c:	1d36      	adds	r6, r6, #4
 800603e:	1d2d      	adds	r5, r5, #4
 8006040:	1e52      	subs	r2, r2, #1
 8006042:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8006046:	f109 0901 	add.w	r9, r9, #1
 800604a:	d189      	bne.n	8005f60 <fw_lite_conv2d_kernel_depthwise_f32+0x98>
 800604c:	9903      	ldr	r1, [sp, #12]
 800604e:	9d02      	ldr	r5, [sp, #8]
 8006050:	9a01      	ldr	r2, [sp, #4]
 8006052:	1d2d      	adds	r5, r5, #4
 8006054:	4295      	cmp	r5, r2
 8006056:	f4ff af75 	bcc.w	8005f44 <fw_lite_conv2d_kernel_depthwise_f32+0x7c>
 800605a:	b006      	add	sp, #24
 800605c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006060 <fw_lite_conv2d_kernel_group_f32>:
 8006060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006064:	b086      	sub	sp, #24
 8006066:	461d      	mov	r5, r3
 8006068:	f9bd 9054 	ldrsh.w	r9, [sp, #84]	@ 0x54
 800606c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800606e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006070:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	@ 0x58
 8006074:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 8006078:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800607a:	f8dd b068 	ldr.w	fp, [sp, #104]	@ 0x68
 800607e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006080:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8006082:	46ca      	mov	sl, r9
 8006084:	4656      	mov	r6, sl
 8006086:	ebaa 0c04 	sub.w	ip, sl, r4
 800608a:	fb94 f7f6 	sdiv	r7, r4, r6
 800608e:	fb06 c607 	mla	r6, r6, r7, ip
 8006092:	fb96 fcfa 	sdiv	ip, r6, sl
 8006096:	fb0a 661c 	mls	r6, sl, ip, r6
 800609a:	9601      	str	r6, [sp, #4]
 800609c:	4454      	add	r4, sl
 800609e:	4646      	mov	r6, r8
 80060a0:	eba6 070b 	sub.w	r7, r6, fp
 80060a4:	fb9b fcf6 	sdiv	ip, fp, r6
 80060a8:	fb06 7c0c 	mla	ip, r6, ip, r7
 80060ac:	fb9c f7f6 	sdiv	r7, ip, r6
 80060b0:	fb06 cc17 	mls	ip, r6, r7, ip
 80060b4:	f8cd c000 	str.w	ip, [sp]
 80060b8:	1e64      	subs	r4, r4, #1
 80060ba:	9f01      	ldr	r7, [sp, #4]
 80060bc:	1bc0      	subs	r0, r0, r7
 80060be:	4450      	add	r0, sl
 80060c0:	1e40      	subs	r0, r0, #1
 80060c2:	fb90 f0fa 	sdiv	r0, r0, sl
 80060c6:	9f00      	ldr	r7, [sp, #0]
 80060c8:	1bdb      	subs	r3, r3, r7
 80060ca:	fbb1 f7f2 	udiv	r7, r1, r2
 80060ce:	18f3      	adds	r3, r6, r3
 80060d0:	1e5b      	subs	r3, r3, #1
 80060d2:	fb93 fcf6 	sdiv	ip, r3, r6
 80060d6:	ebae 0e0c 	sub.w	lr, lr, ip
 80060da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80060dc:	9705      	str	r7, [sp, #20]
 80060de:	fbb3 f3f2 	udiv	r3, r3, r2
 80060e2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80060e4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80060e6:	fb01 f808 	mul.w	r8, r1, r8
 80060ea:	fb00 881a 	mls	r8, r0, sl, r8
 80060ee:	fb07 f808 	mul.w	r8, r7, r8
 80060f2:	fb07 f109 	mul.w	r1, r7, r9
 80060f6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80060f8:	435f      	muls	r7, r3
 80060fa:	fb0e fe07 	mul.w	lr, lr, r7
 80060fe:	eb06 070b 	add.w	r7, r6, fp
 8006102:	1e7f      	subs	r7, r7, #1
 8006104:	fb97 f6f6 	sdiv	r6, r7, r6
 8006108:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800610a:	eba1 0903 	sub.w	r9, r1, r3
 800610e:	fb94 f4fa 	sdiv	r4, r4, sl
 8006112:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006114:	fb07 4406 	mla	r4, r7, r6, r4
 8006118:	9f08      	ldr	r7, [sp, #32]
 800611a:	435c      	muls	r4, r3
 800611c:	1a09      	subs	r1, r1, r0
 800611e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8006122:	4359      	muls	r1, r3
 8006124:	2d00      	cmp	r5, #0
 8006126:	bf06      	itte	eq
 8006128:	ed9f 0a41 	vldreq	s0, [pc, #260]	@ 8006230 <.text_5>
 800612c:	9d06      	ldreq	r5, [sp, #24]
 800612e:	eeb7 0a00 	vmovne.f32	s0, #112	@ 0x3f800000  1.0
 8006132:	9503      	str	r5, [sp, #12]
 8006134:	9d00      	ldr	r5, [sp, #0]
 8006136:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8006138:	9e07      	ldr	r6, [sp, #28]
 800613a:	44ab      	add	fp, r5
 800613c:	9d01      	ldr	r5, [sp, #4]
 800613e:	fb07 570b 	mla	r7, r7, fp, r5
 8006142:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8006144:	436f      	muls	r7, r5
 8006146:	2500      	movs	r5, #0
 8006148:	2a00      	cmp	r2, #0
 800614a:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800614e:	d06c      	beq.n	800622a <fw_lite_conv2d_kernel_group_f32+0x1ca>
 8006150:	9200      	str	r2, [sp, #0]
 8006152:	9a05      	ldr	r2, [sp, #20]
 8006154:	2a00      	cmp	r2, #0
 8006156:	d062      	beq.n	800621e <fw_lite_conv2d_kernel_group_f32+0x1be>
 8006158:	9a03      	ldr	r2, [sp, #12]
 800615a:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800615e:	9a06      	ldr	r2, [sp, #24]
 8006160:	f8cd c004 	str.w	ip, [sp, #4]
 8006164:	eb02 0b85 	add.w	fp, r2, r5, lsl #2
 8006168:	9a05      	ldr	r2, [sp, #20]
 800616a:	f8cd e010 	str.w	lr, [sp, #16]
 800616e:	9602      	str	r6, [sp, #8]
 8006170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006174:	edda 0a00 	vldr	s1, [sl]
 8006178:	9e02      	ldr	r6, [sp, #8]
 800617a:	f1be 0f01 	cmp.w	lr, #1
 800617e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8006182:	db3b      	blt.n	80061fc <fw_lite_conv2d_kernel_group_f32+0x19c>
 8006184:	2801      	cmp	r0, #1
 8006186:	db32      	blt.n	80061ee <fw_lite_conv2d_kernel_group_f32+0x18e>
 8006188:	ea4f 0c00 	mov.w	ip, r0
 800618c:	eb06 0783 	add.w	r7, r6, r3, lsl #2
 8006190:	42be      	cmp	r6, r7
 8006192:	d227      	bcs.n	80061e4 <fw_lite_conv2d_kernel_group_f32+0x184>
 8006194:	ed94 2a00 	vldr	s4, [r4]
 8006198:	ed96 1a00 	vldr	s2, [r6]
 800619c:	1d36      	adds	r6, r6, #4
 800619e:	1d24      	adds	r4, r4, #4
 80061a0:	42be      	cmp	r6, r7
 80061a2:	ee42 0a01 	vmla.f32	s1, s4, s2
 80061a6:	d21d      	bcs.n	80061e4 <fw_lite_conv2d_kernel_group_f32+0x184>
 80061a8:	edd4 2a00 	vldr	s5, [r4]
 80061ac:	edd6 1a00 	vldr	s3, [r6]
 80061b0:	1d36      	adds	r6, r6, #4
 80061b2:	1d24      	adds	r4, r4, #4
 80061b4:	42be      	cmp	r6, r7
 80061b6:	ee42 0aa1 	vmla.f32	s1, s5, s3
 80061ba:	d213      	bcs.n	80061e4 <fw_lite_conv2d_kernel_group_f32+0x184>
 80061bc:	ed94 2a00 	vldr	s4, [r4]
 80061c0:	ed96 1a00 	vldr	s2, [r6]
 80061c4:	1d36      	adds	r6, r6, #4
 80061c6:	1d24      	adds	r4, r4, #4
 80061c8:	42be      	cmp	r6, r7
 80061ca:	ee42 0a01 	vmla.f32	s1, s4, s2
 80061ce:	d209      	bcs.n	80061e4 <fw_lite_conv2d_kernel_group_f32+0x184>
 80061d0:	edd4 1a00 	vldr	s3, [r4]
 80061d4:	edd6 2a00 	vldr	s5, [r6]
 80061d8:	1d36      	adds	r6, r6, #4
 80061da:	1d24      	adds	r4, r4, #4
 80061dc:	42be      	cmp	r6, r7
 80061de:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80061e2:	d3d7      	bcc.n	8006194 <fw_lite_conv2d_kernel_group_f32+0x134>
 80061e4:	f1bc 0c01 	subs.w	ip, ip, #1
 80061e8:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 80061ec:	d1ce      	bne.n	800618c <fw_lite_conv2d_kernel_group_f32+0x12c>
 80061ee:	f1be 0e01 	subs.w	lr, lr, #1
 80061f2:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 80061f6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80061fa:	d1c3      	bne.n	8006184 <fw_lite_conv2d_kernel_group_f32+0x124>
 80061fc:	9e04      	ldr	r6, [sp, #16]
 80061fe:	edcb 0a00 	vstr	s1, [fp]
 8006202:	1c6d      	adds	r5, r5, #1
 8006204:	1e52      	subs	r2, r2, #1
 8006206:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800620a:	f10b 0b04 	add.w	fp, fp, #4
 800620e:	f10a 0a04 	add.w	sl, sl, #4
 8006212:	d1ad      	bne.n	8006170 <fw_lite_conv2d_kernel_group_f32+0x110>
 8006214:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006218:	f8dd e010 	ldr.w	lr, [sp, #16]
 800621c:	9e02      	ldr	r6, [sp, #8]
 800621e:	9a00      	ldr	r2, [sp, #0]
 8006220:	1e52      	subs	r2, r2, #1
 8006222:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8006226:	9200      	str	r2, [sp, #0]
 8006228:	d193      	bne.n	8006152 <fw_lite_conv2d_kernel_group_f32+0xf2>
 800622a:	b009      	add	sp, #36	@ 0x24
 800622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006230 <.text_5>:
 8006230:	00000000 	.word	0x00000000

08006234 <_final_pooling_buffer_reorder>:
 8006234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006238:	b081      	sub	sp, #4
 800623a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 800623e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	@ 0x28
 8006242:	f9b1 5000 	ldrsh.w	r5, [r1]
 8006246:	f8d0 c000 	ldr.w	ip, [r0]
 800624a:	9c08      	ldr	r4, [sp, #32]
 800624c:	fb18 fe09 	smulbb	lr, r8, r9
 8006250:	fb05 f60e 	mul.w	r6, r5, lr
 8006254:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8006258:	f1ce 0e00 	rsb	lr, lr, #0
 800625c:	eb0c 060e 	add.w	r6, ip, lr
 8006260:	461f      	mov	r7, r3
 8006262:	42be      	cmp	r6, r7
 8006264:	bf38      	it	cc
 8006266:	eb06 0684 	addcc.w	r6, r6, r4, lsl #2
 800626a:	f9bd e02c 	ldrsh.w	lr, [sp, #44]	@ 0x2c
 800626e:	42b7      	cmp	r7, r6
 8006270:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006274:	d228      	bcs.n	80062c8 <_final_pooling_buffer_reorder+0x94>
 8006276:	4575      	cmp	r5, lr
 8006278:	d026      	beq.n	80062c8 <_final_pooling_buffer_reorder+0x94>
 800627a:	429e      	cmp	r6, r3
 800627c:	f080 8024 	bcs.w	80062c8 <_final_pooling_buffer_reorder+0x94>
 8006280:	ed96 0a00 	vldr	s0, [r6]
 8006284:	ed8c 0a00 	vstr	s0, [ip]
 8006288:	1d36      	adds	r6, r6, #4
 800628a:	429e      	cmp	r6, r3
 800628c:	f10c 0c04 	add.w	ip, ip, #4
 8006290:	d21a      	bcs.n	80062c8 <_final_pooling_buffer_reorder+0x94>
 8006292:	edd6 0a00 	vldr	s1, [r6]
 8006296:	edcc 0a00 	vstr	s1, [ip]
 800629a:	1d36      	adds	r6, r6, #4
 800629c:	429e      	cmp	r6, r3
 800629e:	f10c 0c04 	add.w	ip, ip, #4
 80062a2:	d211      	bcs.n	80062c8 <_final_pooling_buffer_reorder+0x94>
 80062a4:	ed96 0a00 	vldr	s0, [r6]
 80062a8:	ed8c 0a00 	vstr	s0, [ip]
 80062ac:	1d36      	adds	r6, r6, #4
 80062ae:	429e      	cmp	r6, r3
 80062b0:	f10c 0c04 	add.w	ip, ip, #4
 80062b4:	d208      	bcs.n	80062c8 <_final_pooling_buffer_reorder+0x94>
 80062b6:	edd6 0a00 	vldr	s1, [r6]
 80062ba:	edcc 0a00 	vstr	s1, [ip]
 80062be:	1d36      	adds	r6, r6, #4
 80062c0:	429e      	cmp	r6, r3
 80062c2:	f10c 0c04 	add.w	ip, ip, #4
 80062c6:	d3db      	bcc.n	8006280 <_final_pooling_buffer_reorder+0x4c>
 80062c8:	8817      	ldrh	r7, [r2, #0]
 80062ca:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	@ 0x30
 80062ce:	4477      	add	r7, lr
 80062d0:	1b7f      	subs	r7, r7, r5
 80062d2:	8017      	strh	r7, [r2, #0]
 80062d4:	1975      	adds	r5, r6, r5
 80062d6:	fb16 f209 	smulbb	r2, r6, r9
 80062da:	fb08 f602 	mul.w	r6, r8, r2
 80062de:	00a4      	lsls	r4, r4, #2
 80062e0:	eb0c 0286 	add.w	r2, ip, r6, lsl #2
 80062e4:	4264      	negs	r4, r4
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d30a      	bcc.n	8006300 <_final_pooling_buffer_reorder+0xcc>
 80062ea:	4422      	add	r2, r4
 80062ec:	429a      	cmp	r2, r3
 80062ee:	bf24      	itt	cs
 80062f0:	1912      	addcs	r2, r2, r4
 80062f2:	429a      	cmpcs	r2, r3
 80062f4:	bf21      	itttt	cs
 80062f6:	1912      	addcs	r2, r2, r4
 80062f8:	429a      	cmpcs	r2, r3
 80062fa:	1912      	addcs	r2, r2, r4
 80062fc:	429a      	cmpcs	r2, r3
 80062fe:	d2f4      	bcs.n	80062ea <_final_pooling_buffer_reorder+0xb6>
 8006300:	6002      	str	r2, [r0, #0]
 8006302:	800d      	strh	r5, [r1, #0]
 8006304:	b001      	add	sp, #4
 8006306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800630c <forward_lite_conv2d_if32of32wf32>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	b097      	sub	sp, #92	@ 0x5c
 8006312:	4680      	mov	r8, r0
 8006314:	4610      	mov	r0, r2
 8006316:	f8dd c098 	ldr.w	ip, [sp, #152]	@ 0x98
 800631a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 800631c:	4252      	negs	r2, r2
 800631e:	f1bc 0f00 	cmp.w	ip, #0
 8006322:	461c      	mov	r4, r3
 8006324:	468e      	mov	lr, r1
 8006326:	9209      	str	r2, [sp, #36]	@ 0x24
 8006328:	f000 80cd 	beq.w	80064c6 <forward_lite_conv2d_if32of32wf32+0x1ba>
 800632c:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800632e:	9d28      	ldr	r5, [sp, #160]	@ 0xa0
 8006330:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006332:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8006334:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8006336:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8006338:	f8dd b088 	ldr.w	fp, [sp, #136]	@ 0x88
 800633c:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8006340:	4249      	negs	r1, r1
 8006342:	f100 4c78 	add.w	ip, r0, #4160749568	@ 0xf8000000
 8006346:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
 800634a:	9111      	str	r1, [sp, #68]	@ 0x44
 800634c:	fb05 fa03 	mul.w	sl, r5, r3
 8006350:	940a      	str	r4, [sp, #40]	@ 0x28
 8006352:	9014      	str	r0, [sp, #80]	@ 0x50
 8006354:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
 8006358:	fb0b fb02 	mul.w	fp, fp, r2
 800635c:	fb06 fa0a 	mul.w	sl, r6, sl
 8006360:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8006362:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8006366:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 800636a:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 800636e:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 8006372:	4630      	mov	r0, r6
 8006374:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
 8006378:	970c      	str	r7, [sp, #48]	@ 0x30
 800637a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800637c:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 800637e:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8006382:	f8dd 80b4 	ldr.w	r8, [sp, #180]	@ 0xb4
 8006386:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8006388:	427f      	negs	r7, r7
 800638a:	bfd8      	it	le
 800638c:	2700      	movle	r7, #0
 800638e:	eba4 040e 	sub.w	r4, r4, lr
 8006392:	4544      	cmp	r4, r8
 8006394:	bf3a      	itte	cc
 8006396:	9c24      	ldrcc	r4, [sp, #144]	@ 0x90
 8006398:	eba4 090e 	subcc.w	r9, r4, lr
 800639c:	46c1      	movcs	r9, r8
 800639e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80063a0:	9402      	str	r4, [sp, #8]
 80063a2:	f8cd c004 	str.w	ip, [sp, #4]
 80063a6:	fb01 fa00 	mul.w	sl, r1, r0
 80063aa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80063ac:	9400      	str	r4, [sp, #0]
 80063ae:	eba9 0907 	sub.w	r9, r9, r7
 80063b2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80063b4:	f8dd e054 	ldr.w	lr, [sp, #84]	@ 0x54
 80063b8:	193c      	adds	r4, r7, r4
 80063ba:	fb04 f40a 	mul.w	r4, r4, sl
 80063be:	eb0e 0884 	add.w	r8, lr, r4, lsl #2
 80063c2:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 80063c6:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 80063c8:	b33c      	cbz	r4, 800641a <forward_lite_conv2d_if32of32wf32+0x10e>
 80063ca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80063cc:	f1b4 7f80 	cmp.w	r4, #16777216	@ 0x1000000
 80063d0:	d323      	bcc.n	800641a <forward_lite_conv2d_if32of32wf32+0x10e>
 80063d2:	9c00      	ldr	r4, [sp, #0]
 80063d4:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
 80063d8:	4574      	cmp	r4, lr
 80063da:	d260      	bcs.n	800649e <forward_lite_conv2d_if32of32wf32+0x192>
 80063dc:	9528      	str	r5, [sp, #160]	@ 0xa0
 80063de:	960e      	str	r6, [sp, #56]	@ 0x38
 80063e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80063e2:	f8dd b080 	ldr.w	fp, [sp, #128]	@ 0x80
 80063e6:	9d02      	ldr	r5, [sp, #8]
 80063e8:	9e01      	ldr	r6, [sp, #4]
 80063ea:	9f00      	ldr	r7, [sp, #0]
 80063ec:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 80063f0:	4674      	mov	r4, lr
 80063f2:	9021      	str	r0, [sp, #132]	@ 0x84
 80063f4:	9123      	str	r1, [sp, #140]	@ 0x8c
 80063f6:	9225      	str	r2, [sp, #148]	@ 0x94
 80063f8:	f8cd 309c 	str.w	r3, [sp, #156]	@ 0x9c
 80063fc:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8006400:	4659      	mov	r1, fp
 8006402:	4628      	mov	r0, r5
 8006404:	f005 fcd2 	bl	800bdac <st_int8_copy>
 8006408:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800640a:	2800      	cmp	r0, #0
 800640c:	bf1a      	itte	ne
 800640e:	ed96 0a00 	vldrne	s0, [r6]
 8006412:	1d36      	addne	r6, r6, #4
 8006414:	ed9f 0a3d 	vldreq	s0, [pc, #244]	@ 800650c <.text_8>
 8006418:	e058      	b.n	80064cc <forward_lite_conv2d_if32of32wf32+0x1c0>
 800641a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800641c:	f8dd b000 	ldr.w	fp, [sp]
 8006420:	45a3      	cmp	fp, r4
 8006422:	d23c      	bcs.n	800649e <forward_lite_conv2d_if32of32wf32+0x192>
 8006424:	9528      	str	r5, [sp, #160]	@ 0xa0
 8006426:	960e      	str	r6, [sp, #56]	@ 0x38
 8006428:	970d      	str	r7, [sp, #52]	@ 0x34
 800642a:	9d02      	ldr	r5, [sp, #8]
 800642c:	9e01      	ldr	r6, [sp, #4]
 800642e:	9f00      	ldr	r7, [sp, #0]
 8006430:	f8dd b080 	ldr.w	fp, [sp, #128]	@ 0x80
 8006434:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 8006438:	9021      	str	r0, [sp, #132]	@ 0x84
 800643a:	9123      	str	r1, [sp, #140]	@ 0x8c
 800643c:	9225      	str	r2, [sp, #148]	@ 0x94
 800643e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006440:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006442:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006444:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006446:	2800      	cmp	r0, #0
 8006448:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	@ 0xac
 800644c:	bf1a      	itte	ne
 800644e:	ed96 0a00 	vldrne	s0, [r6]
 8006452:	1d36      	addne	r6, r6, #4
 8006454:	ed9f 0a2d 	vldreq	s0, [pc, #180]	@ 800650c <.text_8>
 8006458:	9008      	str	r0, [sp, #32]
 800645a:	9107      	str	r1, [sp, #28]
 800645c:	f8cd 9018 	str.w	r9, [sp, #24]
 8006460:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006462:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8006464:	9005      	str	r0, [sp, #20]
 8006466:	9104      	str	r1, [sp, #16]
 8006468:	462a      	mov	r2, r5
 800646a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 800646c:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800646e:	9003      	str	r0, [sp, #12]
 8006470:	9102      	str	r1, [sp, #8]
 8006472:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 8006476:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8006478:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800647a:	9001      	str	r0, [sp, #4]
 800647c:	9100      	str	r1, [sp, #0]
 800647e:	4638      	mov	r0, r7
 8006480:	4641      	mov	r1, r8
 8006482:	f7ff fc13 	bl	8005cac <fw_lite_conv2d_kernel_simple_opt_f32>
 8006486:	1d3f      	adds	r7, r7, #4
 8006488:	42a7      	cmp	r7, r4
 800648a:	d3d9      	bcc.n	8006440 <forward_lite_conv2d_if32of32wf32+0x134>
 800648c:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8006490:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8006492:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8006494:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8006496:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006498:	9d28      	ldr	r5, [sp, #160]	@ 0xa0
 800649a:	f8cd b080 	str.w	fp, [sp, #128]	@ 0x80
 800649e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80064a0:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80064a2:	eb06 0487 	add.w	r4, r6, r7, lsl #2
 80064a6:	940f      	str	r4, [sp, #60]	@ 0x3c
 80064a8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80064aa:	f8bd 70b0 	ldrh.w	r7, [sp, #176]	@ 0xb0
 80064ae:	19f7      	adds	r7, r6, r7
 80064b0:	9709      	str	r7, [sp, #36]	@ 0x24
 80064b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064b4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80064b6:	eb06 0487 	add.w	r4, r6, r7, lsl #2
 80064ba:	940c      	str	r4, [sp, #48]	@ 0x30
 80064bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80064be:	1e7f      	subs	r7, r7, #1
 80064c0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80064c2:	f47f af5a 	bne.w	800637a <forward_lite_conv2d_if32of32wf32+0x6e>
 80064c6:	b017      	add	sp, #92	@ 0x5c
 80064c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064cc:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	@ 0xac
 80064d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80064d2:	9008      	str	r0, [sp, #32]
 80064d4:	9107      	str	r1, [sp, #28]
 80064d6:	f8cd 9018 	str.w	r9, [sp, #24]
 80064da:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80064dc:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80064de:	9005      	str	r0, [sp, #20]
 80064e0:	9104      	str	r1, [sp, #16]
 80064e2:	465a      	mov	r2, fp
 80064e4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80064e6:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80064e8:	9003      	str	r0, [sp, #12]
 80064ea:	9102      	str	r1, [sp, #8]
 80064ec:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 80064f0:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80064f2:	9922      	ldr	r1, [sp, #136]	@ 0x88
 80064f4:	9001      	str	r0, [sp, #4]
 80064f6:	9100      	str	r1, [sp, #0]
 80064f8:	4641      	mov	r1, r8
 80064fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80064fc:	4638      	mov	r0, r7
 80064fe:	f7ff fbd5 	bl	8005cac <fw_lite_conv2d_kernel_simple_opt_f32>
 8006502:	1d3f      	adds	r7, r7, #4
 8006504:	42a7      	cmp	r7, r4
 8006506:	f4ff af79 	bcc.w	80063fc <forward_lite_conv2d_if32of32wf32+0xf0>
 800650a:	e7bf      	b.n	800648c <forward_lite_conv2d_if32of32wf32+0x180>

0800650c <.text_8>:
 800650c:	00000000 	.word	0x00000000

08006510 <forward_lite_dw_if32of32wf32>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	b091      	sub	sp, #68	@ 0x44
 8006516:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 8006518:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 800651a:	9100      	str	r1, [sp, #0]
 800651c:	427f      	negs	r7, r7
 800651e:	2e00      	cmp	r6, #0
 8006520:	d074      	beq.n	800660c <forward_lite_dw_if32of32wf32+0xfc>
 8006522:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8006524:	f8dd 906c 	ldr.w	r9, [sp, #108]	@ 0x6c
 8006528:	f8dd 809c 	ldr.w	r8, [sp, #156]	@ 0x9c
 800652c:	900a      	str	r0, [sp, #40]	@ 0x28
 800652e:	4249      	negs	r1, r1
 8006530:	9110      	str	r1, [sp, #64]	@ 0x40
 8006532:	4610      	mov	r0, r2
 8006534:	4619      	mov	r1, r3
 8006536:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8006538:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800653a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800653c:	9709      	str	r7, [sp, #36]	@ 0x24
 800653e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006540:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006542:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8006544:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8006548:	f8dd e098 	ldr.w	lr, [sp, #152]	@ 0x98
 800654c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800654e:	426d      	negs	r5, r5
 8006550:	bfd8      	it	le
 8006552:	2500      	movle	r5, #0
 8006554:	eba6 060c 	sub.w	r6, r6, ip
 8006558:	4576      	cmp	r6, lr
 800655a:	bf3a      	itte	cc
 800655c:	9e1d      	ldrcc	r6, [sp, #116]	@ 0x74
 800655e:	eba6 0b0c 	subcc.w	fp, r6, ip
 8006562:	46f3      	movcs	fp, lr
 8006564:	9e1e      	ldr	r6, [sp, #120]	@ 0x78
 8006566:	2e00      	cmp	r6, #0
 8006568:	fb04 7c0c 	mla	ip, r4, ip, r7
 800656c:	d045      	beq.n	80065fa <forward_lite_dw_if32of32wf32+0xea>
 800656e:	46b6      	mov	lr, r6
 8006570:	ebab 0605 	sub.w	r6, fp, r5
 8006574:	960e      	str	r6, [sp, #56]	@ 0x38
 8006576:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006578:	900d      	str	r0, [sp, #52]	@ 0x34
 800657a:	9e00      	ldr	r6, [sp, #0]
 800657c:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8006580:	910c      	str	r1, [sp, #48]	@ 0x30
 8006582:	9220      	str	r2, [sp, #128]	@ 0x80
 8006584:	9321      	str	r3, [sp, #132]	@ 0x84
 8006586:	46e2      	mov	sl, ip
 8006588:	46f3      	mov	fp, lr
 800658a:	427a      	negs	r2, r7
 800658c:	bfd8      	it	le
 800658e:	2200      	movle	r2, #0
 8006590:	1be0      	subs	r0, r4, r7
 8006592:	4540      	cmp	r0, r8
 8006594:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006596:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006598:	bf34      	ite	cc
 800659a:	eba4 0c07 	subcc.w	ip, r4, r7
 800659e:	46c4      	movcs	ip, r8
 80065a0:	eb02 010a 	add.w	r1, r2, sl
 80065a4:	4359      	muls	r1, r3
 80065a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065aa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80065ac:	2800      	cmp	r0, #0
 80065ae:	bf14      	ite	ne
 80065b0:	4603      	movne	r3, r0
 80065b2:	2300      	moveq	r3, #0
 80065b4:	ebac 0002 	sub.w	r0, ip, r2
 80065b8:	9008      	str	r0, [sp, #32]
 80065ba:	9207      	str	r2, [sp, #28]
 80065bc:	197f      	adds	r7, r7, r5
 80065be:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80065c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80065c2:	9006      	str	r0, [sp, #24]
 80065c4:	9205      	str	r2, [sp, #20]
 80065c6:	44aa      	add	sl, r5
 80065c8:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80065ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80065cc:	9004      	str	r0, [sp, #16]
 80065ce:	9203      	str	r2, [sp, #12]
 80065d0:	9402      	str	r4, [sp, #8]
 80065d2:	f8cd 9004 	str.w	r9, [sp, #4]
 80065d6:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80065d8:	9000      	str	r0, [sp, #0]
 80065da:	4630      	mov	r0, r6
 80065dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80065de:	f7ff fc73 	bl	8005ec8 <fw_lite_conv2d_kernel_depthwise_f32>
 80065e2:	f1bb 0b01 	subs.w	fp, fp, #1
 80065e6:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 80065ea:	d1ce      	bne.n	800658a <forward_lite_dw_if32of32wf32+0x7a>
 80065ec:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80065ee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80065f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80065f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065f4:	9600      	str	r6, [sp, #0]
 80065f6:	f8ad 5090 	strh.w	r5, [sp, #144]	@ 0x90
 80065fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80065fc:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8006600:	19ae      	adds	r6, r5, r6
 8006602:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006604:	9609      	str	r6, [sp, #36]	@ 0x24
 8006606:	1e6d      	subs	r5, r5, #1
 8006608:	950b      	str	r5, [sp, #44]	@ 0x2c
 800660a:	d199      	bne.n	8006540 <forward_lite_dw_if32of32wf32+0x30>
 800660c:	b011      	add	sp, #68	@ 0x44
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006612 <forward_lite_conv2d_if32of32wf32_group>:
 8006612:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006616:	b095      	sub	sp, #84	@ 0x54
 8006618:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 800661a:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 800661c:	9100      	str	r1, [sp, #0]
 800661e:	4276      	negs	r6, r6
 8006620:	2c00      	cmp	r4, #0
 8006622:	f000 8081 	beq.w	8006728 <forward_lite_conv2d_if32of32wf32_group+0x116>
 8006626:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8006628:	f8dd 9080 	ldr.w	r9, [sp, #128]	@ 0x80
 800662c:	f8dd 80ac 	ldr.w	r8, [sp, #172]	@ 0xac
 8006630:	f8dd c0b8 	ldr.w	ip, [sp, #184]	@ 0xb8
 8006634:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006636:	4249      	negs	r1, r1
 8006638:	9113      	str	r1, [sp, #76]	@ 0x4c
 800663a:	920e      	str	r2, [sp, #56]	@ 0x38
 800663c:	930d      	str	r3, [sp, #52]	@ 0x34
 800663e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006640:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8006642:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8006644:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8006646:	960c      	str	r6, [sp, #48]	@ 0x30
 8006648:	9410      	str	r4, [sp, #64]	@ 0x40
 800664a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800664c:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 800664e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8006650:	f8dd e0a8 	ldr.w	lr, [sp, #168]	@ 0xa8
 8006654:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8006656:	4276      	negs	r6, r6
 8006658:	bfd8      	it	le
 800665a:	2600      	movle	r6, #0
 800665c:	1be4      	subs	r4, r4, r7
 800665e:	4574      	cmp	r4, lr
 8006660:	bf3a      	itte	cc
 8006662:	9c21      	ldrcc	r4, [sp, #132]	@ 0x84
 8006664:	1be7      	subcc	r7, r4, r7
 8006666:	4677      	movcs	r7, lr
 8006668:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 800666a:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
 800666e:	2c00      	cmp	r4, #0
 8006670:	fb09 5e0e 	mla	lr, r9, lr, r5
 8006674:	d04f      	beq.n	8006716 <forward_lite_conv2d_if32of32wf32_group+0x104>
 8006676:	1bbf      	subs	r7, r7, r6
 8006678:	9711      	str	r7, [sp, #68]	@ 0x44
 800667a:	9612      	str	r6, [sp, #72]	@ 0x48
 800667c:	46a2      	mov	sl, r4
 800667e:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 8006680:	9f00      	ldr	r7, [sp, #0]
 8006682:	f8bd 60a0 	ldrh.w	r6, [sp, #160]	@ 0xa0
 8006686:	9224      	str	r2, [sp, #144]	@ 0x90
 8006688:	9325      	str	r3, [sp, #148]	@ 0x94
 800668a:	f8ad 00b0 	strh.w	r0, [sp, #176]	@ 0xb0
 800668e:	f8ad 10b4 	strh.w	r1, [sp, #180]	@ 0xb4
 8006692:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 8006696:	46f3      	mov	fp, lr
 8006698:	4268      	negs	r0, r5
 800669a:	bfd8      	it	le
 800669c:	2000      	movle	r0, #0
 800669e:	eba9 0105 	sub.w	r1, r9, r5
 80066a2:	4541      	cmp	r1, r8
 80066a4:	bf28      	it	cs
 80066a6:	4641      	movcs	r1, r8
 80066a8:	1a09      	subs	r1, r1, r0
 80066aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80066ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80066ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80066b2:	9401      	str	r4, [sp, #4]
 80066b4:	4458      	add	r0, fp
 80066b6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80066b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80066ba:	f8dd c03c 	ldr.w	ip, [sp, #60]	@ 0x3c
 80066be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80066c2:	9208      	str	r2, [sp, #32]
 80066c4:	19ad      	adds	r5, r5, r6
 80066c6:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 80066c8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80066ca:	9107      	str	r1, [sp, #28]
 80066cc:	9206      	str	r2, [sp, #24]
 80066ce:	44b3      	add	fp, r6
 80066d0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80066d2:	f9bd 20b4 	ldrsh.w	r2, [sp, #180]	@ 0xb4
 80066d6:	9105      	str	r1, [sp, #20]
 80066d8:	9204      	str	r2, [sp, #16]
 80066da:	f9bd 10b0 	ldrsh.w	r1, [sp, #176]	@ 0xb0
 80066de:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80066e0:	9103      	str	r1, [sp, #12]
 80066e2:	9200      	str	r2, [sp, #0]
 80066e4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80066e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066e8:	4348      	muls	r0, r1
 80066ea:	eb0c 0180 	add.w	r1, ip, r0, lsl #2
 80066ee:	4638      	mov	r0, r7
 80066f0:	f7ff fcb6 	bl	8006060 <fw_lite_conv2d_kernel_group_f32>
 80066f4:	f1ba 0a01 	subs.w	sl, sl, #1
 80066f8:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 80066fc:	d1cc      	bne.n	8006698 <forward_lite_conv2d_if32of32wf32_group+0x86>
 80066fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006700:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8006702:	f8bd 00b0 	ldrh.w	r0, [sp, #176]	@ 0xb0
 8006706:	f8bd 10b4 	ldrh.w	r1, [sp, #180]	@ 0xb4
 800670a:	f8dd c0b8 	ldr.w	ip, [sp, #184]	@ 0xb8
 800670e:	941f      	str	r4, [sp, #124]	@ 0x7c
 8006710:	9700      	str	r7, [sp, #0]
 8006712:	f8ad 60a0 	strh.w	r6, [sp, #160]	@ 0xa0
 8006716:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006718:	f8bd 70a4 	ldrh.w	r7, [sp, #164]	@ 0xa4
 800671c:	19f7      	adds	r7, r6, r7
 800671e:	970c      	str	r7, [sp, #48]	@ 0x30
 8006720:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8006722:	1e64      	subs	r4, r4, #1
 8006724:	9410      	str	r4, [sp, #64]	@ 0x40
 8006726:	d190      	bne.n	800664a <forward_lite_conv2d_if32of32wf32_group+0x38>
 8006728:	b015      	add	sp, #84	@ 0x54
 800672a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006730 <forward_lite_conv2d_if32of32wf32_pool>:
 8006730:	e92d 4ffd 	stmdb	sp!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	b0a0      	sub	sp, #128	@ 0x80
 8006736:	9f2c      	ldr	r7, [sp, #176]	@ 0xb0
 8006738:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	@ 0xb8
 800673c:	f9bd 40c4 	ldrsh.w	r4, [sp, #196]	@ 0xc4
 8006740:	f9bd 30d0 	ldrsh.w	r3, [sp, #208]	@ 0xd0
 8006744:	f9bd 60d4 	ldrsh.w	r6, [sp, #212]	@ 0xd4
 8006748:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 800674a:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 800674c:	f9bd 512c 	ldrsh.w	r5, [sp, #300]	@ 0x12c
 8006750:	9111      	str	r1, [sp, #68]	@ 0x44
 8006752:	970a      	str	r7, [sp, #40]	@ 0x28
 8006754:	4252      	negs	r2, r2
 8006756:	9942      	ldr	r1, [sp, #264]	@ 0x108
 8006758:	910f      	str	r1, [sp, #60]	@ 0x3c
 800675a:	fb13 fb06 	smulbb	fp, r3, r6
 800675e:	f9bd 1100 	ldrsh.w	r1, [sp, #256]	@ 0x100
 8006762:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8006766:	950d      	str	r5, [sp, #52]	@ 0x34
 8006768:	2100      	movs	r1, #0
 800676a:	f8ad 1026 	strh.w	r1, [sp, #38]	@ 0x26
 800676e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006770:	468e      	mov	lr, r1
 8006772:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
 8006776:	f9bd 10fc 	ldrsh.w	r1, [sp, #252]	@ 0xfc
 800677a:	f9bd 211c 	ldrsh.w	r2, [sp, #284]	@ 0x11c
 800677e:	f9bd 90bc 	ldrsh.w	r9, [sp, #188]	@ 0xbc
 8006782:	fb11 f202 	smulbb	r2, r1, r2
 8006786:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006788:	fb09 f202 	mul.w	r2, r9, r2
 800678c:	1a65      	subs	r5, r4, r1
 800678e:	9510      	str	r5, [sp, #64]	@ 0x40
 8006790:	eb07 0182 	add.w	r1, r7, r2, lsl #2
 8006794:	911d      	str	r1, [sp, #116]	@ 0x74
 8006796:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 800679a:	fb08 f10b 	mul.w	r1, r8, fp
 800679e:	911c      	str	r1, [sp, #112]	@ 0x70
 80067a0:	f1cc 0c00 	rsb	ip, ip, #0
 80067a4:	f9bd 50c8 	ldrsh.w	r5, [sp, #200]	@ 0xc8
 80067a8:	f8cd c06c 	str.w	ip, [sp, #108]	@ 0x6c
 80067ac:	fb19 f505 	smulbb	r5, r9, r5
 80067b0:	951a      	str	r5, [sp, #104]	@ 0x68
 80067b2:	4240      	negs	r0, r0
 80067b4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80067b6:	f101 4178 	add.w	r1, r1, #4160749568	@ 0xf8000000
 80067ba:	9119      	str	r1, [sp, #100]	@ 0x64
 80067bc:	9018      	str	r0, [sp, #96]	@ 0x60
 80067be:	f9bd 00cc 	ldrsh.w	r0, [sp, #204]	@ 0xcc
 80067c2:	2800      	cmp	r0, #0
 80067c4:	f340 817f 	ble.w	8006ac6 <forward_lite_conv2d_if32of32wf32_pool+0x396>
 80067c8:	f8dd 9088 	ldr.w	r9, [sp, #136]	@ 0x88
 80067cc:	972c      	str	r7, [sp, #176]	@ 0xb0
 80067ce:	f8ad e02e 	strh.w	lr, [sp, #46]	@ 0x2e
 80067d2:	921e      	str	r2, [sp, #120]	@ 0x78
 80067d4:	f8ad 60d4 	strh.w	r6, [sp, #212]	@ 0xd4
 80067d8:	f8ad 80b8 	strh.w	r8, [sp, #184]	@ 0xb8
 80067dc:	f8ad 40c4 	strh.w	r4, [sp, #196]	@ 0xc4
 80067e0:	f8ad 30d0 	strh.w	r3, [sp, #208]	@ 0xd0
 80067e4:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	@ 0x2c
 80067e8:	2801      	cmp	r0, #1
 80067ea:	f2c0 80a9 	blt.w	8006940 <forward_lite_conv2d_if32of32wf32_pool+0x210>
 80067ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067f0:	f9bd 50c0 	ldrsh.w	r5, [sp, #192]	@ 0xc0
 80067f4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80067f6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80067f8:	f9bd 10e8 	ldrsh.w	r1, [sp, #232]	@ 0xe8
 80067fc:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 80067fe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8006800:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8006804:	4276      	negs	r6, r6
 8006806:	2e01      	cmp	r6, #1
 8006808:	bfb8      	it	lt
 800680a:	2600      	movlt	r6, #0
 800680c:	4288      	cmp	r0, r1
 800680e:	bfbd      	ittte	lt
 8006810:	f9bd 00c4 	ldrshlt.w	r0, [sp, #196]	@ 0xc4
 8006814:	9a0c      	ldrlt	r2, [sp, #48]	@ 0x30
 8006816:	1a82      	sublt	r2, r0, r2
 8006818:	460a      	movge	r2, r1
 800681a:	f9bd 10b8 	ldrsh.w	r1, [sp, #184]	@ 0xb8
 800681e:	fb11 f105 	smulbb	r1, r1, r5
 8006822:	19f7      	adds	r7, r6, r7
 8006824:	1b92      	subs	r2, r2, r6
 8006826:	4379      	muls	r1, r7
 8006828:	920e      	str	r2, [sp, #56]	@ 0x38
 800682a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800682e:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8006830:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006832:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8006834:	46ca      	mov	sl, r9
 8006836:	b124      	cbz	r4, 8006842 <forward_lite_conv2d_if32of32wf32_pool+0x112>
 8006838:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800683a:	f1b4 7f80 	cmp.w	r4, #16777216	@ 0x1000000
 800683e:	f080 80e7 	bcs.w	8006a10 <forward_lite_conv2d_if32of32wf32_pool+0x2e0>
 8006842:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	@ 0xbc
 8006846:	2c00      	cmp	r4, #0
 8006848:	dd41      	ble.n	80068ce <forward_lite_conv2d_if32of32wf32_pool+0x19e>
 800684a:	9614      	str	r6, [sp, #80]	@ 0x50
 800684c:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8006850:	f9bd 50d4 	ldrsh.w	r5, [sp, #212]	@ 0xd4
 8006854:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	@ 0xb8
 8006858:	f9bd 60bc 	ldrsh.w	r6, [sp, #188]	@ 0xbc
 800685c:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	@ 0xc0
 8006860:	9315      	str	r3, [sp, #84]	@ 0x54
 8006862:	b2a4      	uxth	r4, r4
 8006864:	4681      	mov	r9, r0
 8006866:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006868:	9212      	str	r2, [sp, #72]	@ 0x48
 800686a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800686c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800686e:	2800      	cmp	r0, #0
 8006870:	f8bd 00e0 	ldrh.w	r0, [sp, #224]	@ 0xe0
 8006874:	bf1a      	itte	ne
 8006876:	ed9a 0a00 	vldrne	s0, [sl]
 800687a:	f10a 0a04 	addne.w	sl, sl, #4
 800687e:	ed9f 0a93 	vldreq	s0, [pc, #588]	@ 8006acc <.text_12>
 8006882:	9008      	str	r0, [sp, #32]
 8006884:	9107      	str	r1, [sp, #28]
 8006886:	4643      	mov	r3, r8
 8006888:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800688a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800688c:	9006      	str	r0, [sp, #24]
 800688e:	9105      	str	r1, [sp, #20]
 8006890:	9504      	str	r5, [sp, #16]
 8006892:	f9bd 00d0 	ldrsh.w	r0, [sp, #208]	@ 0xd0
 8006896:	f9bd 20fc 	ldrsh.w	r2, [sp, #252]	@ 0xfc
 800689a:	9003      	str	r0, [sp, #12]
 800689c:	9202      	str	r2, [sp, #8]
 800689e:	9701      	str	r7, [sp, #4]
 80068a0:	9600      	str	r6, [sp, #0]
 80068a2:	464a      	mov	r2, r9
 80068a4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80068a6:	4658      	mov	r0, fp
 80068a8:	f7ff fa00 	bl	8005cac <fw_lite_conv2d_kernel_simple_opt_f32>
 80068ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80068ae:	1e64      	subs	r4, r4, #1
 80068b0:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 80068b4:	f10b 0b04 	add.w	fp, fp, #4
 80068b8:	d1d7      	bne.n	800686a <forward_lite_conv2d_if32of32wf32_pool+0x13a>
 80068ba:	f8ad 50d4 	strh.w	r5, [sp, #212]	@ 0xd4
 80068be:	f8ad 80b8 	strh.w	r8, [sp, #184]	@ 0xb8
 80068c2:	f8ad 60bc 	strh.w	r6, [sp, #188]	@ 0xbc
 80068c6:	f8ad 70c0 	strh.w	r7, [sp, #192]	@ 0xc0
 80068ca:	f8dd 9088 	ldr.w	r9, [sp, #136]	@ 0x88
 80068ce:	f9bd 00fc 	ldrsh.w	r0, [sp, #252]	@ 0xfc
 80068d2:	2800      	cmp	r0, #0
 80068d4:	dd2f      	ble.n	8006936 <forward_lite_conv2d_if32of32wf32_pool+0x206>
 80068d6:	b284      	uxth	r4, r0
 80068d8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80068da:	f9bd b0bc 	ldrsh.w	fp, [sp, #188]	@ 0xbc
 80068de:	f8dd 8104 	ldr.w	r8, [sp, #260]	@ 0x104
 80068e2:	f8dd a108 	ldr.w	sl, [sp, #264]	@ 0x108
 80068e6:	9e43      	ldr	r6, [sp, #268]	@ 0x10c
 80068e8:	9f44      	ldr	r7, [sp, #272]	@ 0x110
 80068ea:	9000      	str	r0, [sp, #0]
 80068ec:	f8dd 503c 	ldr.w	r5, [sp, #60]	@ 0x3c
 80068f0:	ea5f 0008 	movs.w	r0, r8
 80068f4:	d00b      	beq.n	800690e <forward_lite_conv2d_if32of32wf32_pool+0x1de>
 80068f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068f8:	4653      	mov	r3, sl
 80068fa:	465a      	mov	r2, fp
 80068fc:	4608      	mov	r0, r1
 80068fe:	47c0      	blx	r8
 8006900:	9800      	ldr	r0, [sp, #0]
 8006902:	44b2      	add	sl, r6
 8006904:	ebaa 0000 	sub.w	r0, sl, r0
 8006908:	42b8      	cmp	r0, r7
 800690a:	bfa8      	it	ge
 800690c:	46aa      	movge	sl, r5
 800690e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006910:	eb01 008b 	add.w	r0, r1, fp, lsl #2
 8006914:	900a      	str	r0, [sp, #40]	@ 0x28
 8006916:	4601      	mov	r1, r0
 8006918:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800691a:	4281      	cmp	r1, r0
 800691c:	d302      	bcc.n	8006924 <forward_lite_conv2d_if32of32wf32_pool+0x1f4>
 800691e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8006920:	4408      	add	r0, r1
 8006922:	900a      	str	r0, [sp, #40]	@ 0x28
 8006924:	1e64      	subs	r4, r4, #1
 8006926:	d1e3      	bne.n	80068f0 <forward_lite_conv2d_if32of32wf32_pool+0x1c0>
 8006928:	f8cd 8104 	str.w	r8, [sp, #260]	@ 0x104
 800692c:	f8cd a108 	str.w	sl, [sp, #264]	@ 0x108
 8006930:	9643      	str	r6, [sp, #268]	@ 0x10c
 8006932:	9744      	str	r7, [sp, #272]	@ 0x110
 8006934:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006936:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 800693a:	1c40      	adds	r0, r0, #1
 800693c:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8006940:	f8bd 002c 	ldrh.w	r0, [sp, #44]	@ 0x2c
 8006944:	1e41      	subs	r1, r0, #1
 8006946:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800694a:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	@ 0x2c
 800694e:	2800      	cmp	r0, #0
 8006950:	d514      	bpl.n	800697c <forward_lite_conv2d_if32of32wf32_pool+0x24c>
 8006952:	f9bd 0124 	ldrsh.w	r0, [sp, #292]	@ 0x124
 8006956:	f9bd 111c 	ldrsh.w	r1, [sp, #284]	@ 0x11c
 800695a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800695c:	9004      	str	r0, [sp, #16]
 800695e:	9103      	str	r1, [sp, #12]
 8006960:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8006964:	f9bd 00fc 	ldrsh.w	r0, [sp, #252]	@ 0xfc
 8006968:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	@ 0xbc
 800696c:	9002      	str	r0, [sp, #8]
 800696e:	9101      	str	r1, [sp, #4]
 8006970:	a909      	add	r1, sp, #36	@ 0x24
 8006972:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8006974:	9000      	str	r0, [sp, #0]
 8006976:	a80a      	add	r0, sp, #40	@ 0x28
 8006978:	f7ff fc5c 	bl	8006234 <_final_pooling_buffer_reorder>
 800697c:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	@ 0x24
 8006980:	f9bd 111c 	ldrsh.w	r1, [sp, #284]	@ 0x11c
 8006984:	4288      	cmp	r0, r1
 8006986:	f2c0 808d 	blt.w	8006aa4 <forward_lite_conv2d_if32of32wf32_pool+0x374>
 800698a:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 800698e:	f8bd 1124 	ldrh.w	r1, [sp, #292]	@ 0x124
 8006992:	f8bd 20c8 	ldrh.w	r2, [sp, #200]	@ 0xc8
 8006996:	f8bd 30bc 	ldrh.w	r3, [sp, #188]	@ 0xbc
 800699a:	9c45      	ldr	r4, [sp, #276]	@ 0x114
 800699c:	9206      	str	r2, [sp, #24]
 800699e:	1a40      	subs	r0, r0, r1
 80069a0:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 80069a4:	2101      	movs	r1, #1
 80069a6:	f8bd 002e 	ldrh.w	r0, [sp, #46]	@ 0x2e
 80069aa:	f9bd 211c 	ldrsh.w	r2, [sp, #284]	@ 0x11c
 80069ae:	9107      	str	r1, [sp, #28]
 80069b0:	1c40      	adds	r0, r0, #1
 80069b2:	f8ad 002e 	strh.w	r0, [sp, #46]	@ 0x2e
 80069b6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80069b8:	f8bd 1120 	ldrh.w	r1, [sp, #288]	@ 0x120
 80069bc:	9008      	str	r0, [sp, #32]
 80069be:	9104      	str	r1, [sp, #16]
 80069c0:	f8bd 0124 	ldrh.w	r0, [sp, #292]	@ 0x124
 80069c4:	f8bd 1128 	ldrh.w	r1, [sp, #296]	@ 0x128
 80069c8:	9005      	str	r0, [sp, #20]
 80069ca:	9102      	str	r1, [sp, #8]
 80069cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80069ce:	f8bd 1118 	ldrh.w	r1, [sp, #280]	@ 0x118
 80069d2:	9100      	str	r1, [sp, #0]
 80069d4:	b280      	uxth	r0, r0
 80069d6:	9003      	str	r0, [sp, #12]
 80069d8:	f8bd 011c 	ldrh.w	r0, [sp, #284]	@ 0x11c
 80069dc:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	@ 0xfc
 80069e0:	9001      	str	r0, [sp, #4]
 80069e2:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	@ 0x26
 80069e6:	1a12      	subs	r2, r2, r0
 80069e8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80069ea:	b292      	uxth	r2, r2
 80069ec:	47a0      	blx	r4
 80069ee:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80069f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069f2:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80069f6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80069f8:	f9bd 1124 	ldrsh.w	r1, [sp, #292]	@ 0x124
 80069fc:	9211      	str	r2, [sp, #68]	@ 0x44
 80069fe:	1a40      	subs	r0, r0, r1
 8006a00:	2801      	cmp	r0, #1
 8006a02:	db4d      	blt.n	8006aa0 <forward_lite_conv2d_if32of32wf32_pool+0x370>
 8006a04:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006a06:	f8bd 1124 	ldrh.w	r1, [sp, #292]	@ 0x124
 8006a0a:	1a40      	subs	r0, r0, r1
 8006a0c:	b200      	sxth	r0, r0
 8006a0e:	e048      	b.n	8006aa2 <forward_lite_conv2d_if32of32wf32_pool+0x372>
 8006a10:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	@ 0xbc
 8006a14:	2c00      	cmp	r4, #0
 8006a16:	f77f af5a 	ble.w	80068ce <forward_lite_conv2d_if32of32wf32_pool+0x19e>
 8006a1a:	f9bd 50fc 	ldrsh.w	r5, [sp, #252]	@ 0xfc
 8006a1e:	9517      	str	r5, [sp, #92]	@ 0x5c
 8006a20:	b2a4      	uxth	r4, r4
 8006a22:	f9bd 50d0 	ldrsh.w	r5, [sp, #208]	@ 0xd0
 8006a26:	9516      	str	r5, [sp, #88]	@ 0x58
 8006a28:	9614      	str	r6, [sp, #80]	@ 0x50
 8006a2a:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8006a2e:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	@ 0xb8
 8006a32:	f9bd 60bc 	ldrsh.w	r6, [sp, #188]	@ 0xbc
 8006a36:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	@ 0xc0
 8006a3a:	f9bd 50d4 	ldrsh.w	r5, [sp, #212]	@ 0xd4
 8006a3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a40:	4681      	mov	r9, r0
 8006a42:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006a44:	9212      	str	r2, [sp, #72]	@ 0x48
 8006a46:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a48:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8006a4a:	0092      	lsls	r2, r2, #2
 8006a4c:	4648      	mov	r0, r9
 8006a4e:	f005 f9ad 	bl	800bdac <st_int8_copy>
 8006a52:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8006a54:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f8bd 00e0 	ldrh.w	r0, [sp, #224]	@ 0xe0
 8006a5c:	bf1a      	itte	ne
 8006a5e:	ed9a 0a00 	vldrne	s0, [sl]
 8006a62:	f10a 0a04 	addne.w	sl, sl, #4
 8006a66:	ed9f 0a19 	vldreq	s0, [pc, #100]	@ 8006acc <.text_12>
 8006a6a:	9008      	str	r0, [sp, #32]
 8006a6c:	9107      	str	r1, [sp, #28]
 8006a6e:	4643      	mov	r3, r8
 8006a70:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8006a72:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8006a74:	9006      	str	r0, [sp, #24]
 8006a76:	9105      	str	r1, [sp, #20]
 8006a78:	9504      	str	r5, [sp, #16]
 8006a7a:	9701      	str	r7, [sp, #4]
 8006a7c:	9600      	str	r6, [sp, #0]
 8006a7e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006a80:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8006a82:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8006a84:	9102      	str	r1, [sp, #8]
 8006a86:	9003      	str	r0, [sp, #12]
 8006a88:	4658      	mov	r0, fp
 8006a8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006a8c:	f7ff f90e 	bl	8005cac <fw_lite_conv2d_kernel_simple_opt_f32>
 8006a90:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006a92:	1e64      	subs	r4, r4, #1
 8006a94:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8006a98:	f10b 0b04 	add.w	fp, fp, #4
 8006a9c:	d1d3      	bne.n	8006a46 <forward_lite_conv2d_if32of32wf32_pool+0x316>
 8006a9e:	e70c      	b.n	80068ba <forward_lite_conv2d_if32of32wf32_pool+0x18a>
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	900d      	str	r0, [sp, #52]	@ 0x34
 8006aa4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006aa6:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	@ 0xe4
 8006aaa:	1841      	adds	r1, r0, r1
 8006aac:	910c      	str	r1, [sp, #48]	@ 0x30
 8006aae:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006ab0:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	@ 0xe4
 8006ab4:	1a40      	subs	r0, r0, r1
 8006ab6:	9010      	str	r0, [sp, #64]	@ 0x40
 8006ab8:	f9bd 10cc 	ldrsh.w	r1, [sp, #204]	@ 0xcc
 8006abc:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	@ 0x2e
 8006ac0:	4288      	cmp	r0, r1
 8006ac2:	f6ff ae8f 	blt.w	80067e4 <forward_lite_conv2d_if32of32wf32_pool+0xb4>
 8006ac6:	b023      	add	sp, #140	@ 0x8c
 8006ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006acc <.text_12>:
 8006acc:	00000000 	.word	0x00000000

08006ad0 <forward_lite_dw_if32of32wf32_pool>:
 8006ad0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	b099      	sub	sp, #100	@ 0x64
 8006ad6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006ad8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006ada:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8006adc:	f9bd 40a8 	ldrsh.w	r4, [sp, #168]	@ 0xa8
 8006ae0:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8006ae2:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8006ae4:	f9bd 5110 	ldrsh.w	r5, [sp, #272]	@ 0x110
 8006ae8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aea:	9210      	str	r2, [sp, #64]	@ 0x40
 8006aec:	960e      	str	r6, [sp, #56]	@ 0x38
 8006aee:	2600      	movs	r6, #0
 8006af0:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	@ 0xe4
 8006af4:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8006af8:	950d      	str	r5, [sp, #52]	@ 0x34
 8006afa:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8006afe:	f8ad 602e 	strh.w	r6, [sp, #46]	@ 0x2e
 8006b02:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
 8006b06:	f9bd 20e0 	ldrsh.w	r2, [sp, #224]	@ 0xe0
 8006b0a:	f9bd 3100 	ldrsh.w	r3, [sp, #256]	@ 0x100
 8006b0e:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	@ 0xa0
 8006b12:	fb12 f303 	smulbb	r3, r2, r3
 8006b16:	436b      	muls	r3, r5
 8006b18:	4249      	negs	r1, r1
 8006b1a:	1a66      	subs	r6, r4, r1
 8006b1c:	960f      	str	r6, [sp, #60]	@ 0x3c
 8006b1e:	910c      	str	r1, [sp, #48]	@ 0x30
 8006b20:	0099      	lsls	r1, r3, #2
 8006b22:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 8006b24:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8006b28:	9216      	str	r2, [sp, #88]	@ 0x58
 8006b2a:	4249      	negs	r1, r1
 8006b2c:	f9bd 20ac 	ldrsh.w	r2, [sp, #172]	@ 0xac
 8006b30:	9115      	str	r1, [sp, #84]	@ 0x54
 8006b32:	fb15 f202 	smulbb	r2, r5, r2
 8006b36:	9214      	str	r2, [sp, #80]	@ 0x50
 8006b38:	4240      	negs	r0, r0
 8006b3a:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	@ 0xb0
 8006b3e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8006b40:	2a00      	cmp	r2, #0
 8006b42:	f340 811b 	ble.w	8006d7c <forward_lite_dw_if32of32wf32_pool+0x2ac>
 8006b46:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006b48:	f8ad 40a8 	strh.w	r4, [sp, #168]	@ 0xa8
 8006b4c:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	@ 0x2c
 8006b50:	2801      	cmp	r0, #1
 8006b52:	f2c0 8099 	blt.w	8006c88 <forward_lite_dw_if32of32wf32_pool+0x1b8>
 8006b56:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006b58:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8006b5a:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	@ 0xcc
 8006b5e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8006b62:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006b64:	4249      	negs	r1, r1
 8006b66:	2901      	cmp	r1, #1
 8006b68:	bfb8      	it	lt
 8006b6a:	2100      	movlt	r1, #0
 8006b6c:	4290      	cmp	r0, r2
 8006b6e:	da03      	bge.n	8006b78 <forward_lite_dw_if32of32wf32_pool+0xa8>
 8006b70:	f9bd 00a8 	ldrsh.w	r0, [sp, #168]	@ 0xa8
 8006b74:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b76:	1a82      	subs	r2, r0, r2
 8006b78:	f9bd 70a4 	ldrsh.w	r7, [sp, #164]	@ 0xa4
 8006b7c:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	@ 0xe0
 8006b80:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006b82:	f9bd 00a4 	ldrsh.w	r0, [sp, #164]	@ 0xa4
 8006b86:	1bbf      	subs	r7, r7, r6
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	fb00 6505 	mla	r5, r0, r5, r6
 8006b8e:	dd76      	ble.n	8006c7e <forward_lite_dw_if32of32wf32_pool+0x1ae>
 8006b90:	1a52      	subs	r2, r2, r1
 8006b92:	f9bd 90a0 	ldrsh.w	r9, [sp, #160]	@ 0xa0
 8006b96:	f8bd a0c4 	ldrh.w	sl, [sp, #196]	@ 0xc4
 8006b9a:	f9bd b09c 	ldrsh.w	fp, [sp, #156]	@ 0x9c
 8006b9e:	9211      	str	r2, [sp, #68]	@ 0x44
 8006ba0:	b29c      	uxth	r4, r3
 8006ba2:	9112      	str	r1, [sp, #72]	@ 0x48
 8006ba4:	4272      	negs	r2, r6
 8006ba6:	2a01      	cmp	r2, #1
 8006ba8:	f9bd 00d0 	ldrsh.w	r0, [sp, #208]	@ 0xd0
 8006bac:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8006bae:	bfb8      	it	lt
 8006bb0:	2200      	movlt	r2, #0
 8006bb2:	4287      	cmp	r7, r0
 8006bb4:	bfba      	itte	lt
 8006bb6:	f9bd 00a4 	ldrshlt.w	r0, [sp, #164]	@ 0xa4
 8006bba:	eba0 0c06 	sublt.w	ip, r0, r6
 8006bbe:	4684      	movge	ip, r0
 8006bc0:	1953      	adds	r3, r2, r5
 8006bc2:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8006bc4:	fb0b f303 	mul.w	r3, fp, r3
 8006bc8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	bf14      	ite	ne
 8006bd0:	4603      	movne	r3, r0
 8006bd2:	2300      	moveq	r3, #0
 8006bd4:	ebac 0002 	sub.w	r0, ip, r2
 8006bd8:	9008      	str	r0, [sp, #32]
 8006bda:	9207      	str	r2, [sp, #28]
 8006bdc:	4456      	add	r6, sl
 8006bde:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8006be0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006be2:	9006      	str	r0, [sp, #24]
 8006be4:	9205      	str	r2, [sp, #20]
 8006be6:	4455      	add	r5, sl
 8006be8:	f9bd 00b8 	ldrsh.w	r0, [sp, #184]	@ 0xb8
 8006bec:	f9bd 20b4 	ldrsh.w	r2, [sp, #180]	@ 0xb4
 8006bf0:	9004      	str	r0, [sp, #16]
 8006bf2:	9203      	str	r2, [sp, #12]
 8006bf4:	eba7 070a 	sub.w	r7, r7, sl
 8006bf8:	f9bd 00a4 	ldrsh.w	r0, [sp, #164]	@ 0xa4
 8006bfc:	9002      	str	r0, [sp, #8]
 8006bfe:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c02:	f8cd b000 	str.w	fp, [sp]
 8006c06:	4640      	mov	r0, r8
 8006c08:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006c0a:	f7ff f95d 	bl	8005ec8 <fw_lite_conv2d_kernel_depthwise_f32>
 8006c0e:	1e64      	subs	r4, r4, #1
 8006c10:	eb08 0889 	add.w	r8, r8, r9, lsl #2
 8006c14:	d1c6      	bne.n	8006ba4 <forward_lite_dw_if32of32wf32_pool+0xd4>
 8006c16:	f8ad a0c4 	strh.w	sl, [sp, #196]	@ 0xc4
 8006c1a:	f8ad 90a0 	strh.w	r9, [sp, #160]	@ 0xa0
 8006c1e:	f8ad b09c 	strh.w	fp, [sp, #156]	@ 0x9c
 8006c22:	46c8      	mov	r8, r9
 8006c24:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8006c26:	f9bd 40e0 	ldrsh.w	r4, [sp, #224]	@ 0xe0
 8006c2a:	9e3a      	ldr	r6, [sp, #232]	@ 0xe8
 8006c2c:	f8dd a0ec 	ldr.w	sl, [sp, #236]	@ 0xec
 8006c30:	9f3c      	ldr	r7, [sp, #240]	@ 0xf0
 8006c32:	9000      	str	r0, [sp, #0]
 8006c34:	b2a4      	uxth	r4, r4
 8006c36:	9d3d      	ldr	r5, [sp, #244]	@ 0xf4
 8006c38:	4681      	mov	r9, r0
 8006c3a:	0030      	movs	r0, r6
 8006c3c:	d00b      	beq.n	8006c56 <forward_lite_dw_if32of32wf32_pool+0x186>
 8006c3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c40:	4653      	mov	r3, sl
 8006c42:	4642      	mov	r2, r8
 8006c44:	4608      	mov	r0, r1
 8006c46:	47b0      	blx	r6
 8006c48:	9800      	ldr	r0, [sp, #0]
 8006c4a:	44ba      	add	sl, r7
 8006c4c:	ebaa 0000 	sub.w	r0, sl, r0
 8006c50:	42a8      	cmp	r0, r5
 8006c52:	bfa8      	it	ge
 8006c54:	46ca      	movge	sl, r9
 8006c56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c58:	eb01 0088 	add.w	r0, r1, r8, lsl #2
 8006c5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c5e:	4601      	mov	r1, r0
 8006c60:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8006c62:	4281      	cmp	r1, r0
 8006c64:	d302      	bcc.n	8006c6c <forward_lite_dw_if32of32wf32_pool+0x19c>
 8006c66:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8006c68:	4408      	add	r0, r1
 8006c6a:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c6c:	1e64      	subs	r4, r4, #1
 8006c6e:	d1e4      	bne.n	8006c3a <forward_lite_dw_if32of32wf32_pool+0x16a>
 8006c70:	963a      	str	r6, [sp, #232]	@ 0xe8
 8006c72:	f8cd a0ec 	str.w	sl, [sp, #236]	@ 0xec
 8006c76:	973c      	str	r7, [sp, #240]	@ 0xf0
 8006c78:	953d      	str	r5, [sp, #244]	@ 0xf4
 8006c7a:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 8006c7e:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 8006c82:	1c40      	adds	r0, r0, #1
 8006c84:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8006c88:	f8bd 002c 	ldrh.w	r0, [sp, #44]	@ 0x2c
 8006c8c:	1e41      	subs	r1, r0, #1
 8006c8e:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8006c92:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	@ 0x2c
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d514      	bpl.n	8006cc4 <forward_lite_dw_if32of32wf32_pool+0x1f4>
 8006c9a:	f9bd 0108 	ldrsh.w	r0, [sp, #264]	@ 0x108
 8006c9e:	f9bd 1100 	ldrsh.w	r1, [sp, #256]	@ 0x100
 8006ca2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006ca4:	9004      	str	r0, [sp, #16]
 8006ca6:	9103      	str	r1, [sp, #12]
 8006ca8:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8006cac:	f9bd 00e0 	ldrsh.w	r0, [sp, #224]	@ 0xe0
 8006cb0:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	@ 0xa0
 8006cb4:	9002      	str	r0, [sp, #8]
 8006cb6:	9101      	str	r1, [sp, #4]
 8006cb8:	a909      	add	r1, sp, #36	@ 0x24
 8006cba:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8006cbc:	9000      	str	r0, [sp, #0]
 8006cbe:	a80a      	add	r0, sp, #40	@ 0x28
 8006cc0:	f7ff fab8 	bl	8006234 <_final_pooling_buffer_reorder>
 8006cc4:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	@ 0x24
 8006cc8:	f9bd 1100 	ldrsh.w	r1, [sp, #256]	@ 0x100
 8006ccc:	4288      	cmp	r0, r1
 8006cce:	db44      	blt.n	8006d5a <forward_lite_dw_if32of32wf32_pool+0x28a>
 8006cd0:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 8006cd4:	f8bd 1108 	ldrh.w	r1, [sp, #264]	@ 0x108
 8006cd8:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	@ 0xac
 8006cdc:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	@ 0xa0
 8006ce0:	9c3e      	ldr	r4, [sp, #248]	@ 0xf8
 8006ce2:	9206      	str	r2, [sp, #24]
 8006ce4:	1a40      	subs	r0, r0, r1
 8006ce6:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8006cea:	2101      	movs	r1, #1
 8006cec:	f8bd 002e 	ldrh.w	r0, [sp, #46]	@ 0x2e
 8006cf0:	f9bd 2100 	ldrsh.w	r2, [sp, #256]	@ 0x100
 8006cf4:	9107      	str	r1, [sp, #28]
 8006cf6:	1c40      	adds	r0, r0, #1
 8006cf8:	f8ad 002e 	strh.w	r0, [sp, #46]	@ 0x2e
 8006cfc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006cfe:	f8bd 1104 	ldrh.w	r1, [sp, #260]	@ 0x104
 8006d02:	9008      	str	r0, [sp, #32]
 8006d04:	9104      	str	r1, [sp, #16]
 8006d06:	f8bd 0108 	ldrh.w	r0, [sp, #264]	@ 0x108
 8006d0a:	f8bd 110c 	ldrh.w	r1, [sp, #268]	@ 0x10c
 8006d0e:	9005      	str	r0, [sp, #20]
 8006d10:	9102      	str	r1, [sp, #8]
 8006d12:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006d14:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	@ 0xfc
 8006d18:	9100      	str	r1, [sp, #0]
 8006d1a:	b280      	uxth	r0, r0
 8006d1c:	9003      	str	r0, [sp, #12]
 8006d1e:	f8bd 0100 	ldrh.w	r0, [sp, #256]	@ 0x100
 8006d22:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	@ 0xe0
 8006d26:	9001      	str	r0, [sp, #4]
 8006d28:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	@ 0x26
 8006d2c:	1a12      	subs	r2, r2, r0
 8006d2e:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8006d30:	b292      	uxth	r2, r2
 8006d32:	47a0      	blx	r4
 8006d34:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006d36:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8006d38:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8006d3c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006d3e:	f9bd 1108 	ldrsh.w	r1, [sp, #264]	@ 0x108
 8006d42:	9210      	str	r2, [sp, #64]	@ 0x40
 8006d44:	1a40      	subs	r0, r0, r1
 8006d46:	2801      	cmp	r0, #1
 8006d48:	db05      	blt.n	8006d56 <forward_lite_dw_if32of32wf32_pool+0x286>
 8006d4a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006d4c:	f8bd 2108 	ldrh.w	r2, [sp, #264]	@ 0x108
 8006d50:	1a89      	subs	r1, r1, r2
 8006d52:	b209      	sxth	r1, r1
 8006d54:	e000      	b.n	8006d58 <forward_lite_dw_if32of32wf32_pool+0x288>
 8006d56:	2100      	movs	r1, #0
 8006d58:	910d      	str	r1, [sp, #52]	@ 0x34
 8006d5a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006d5c:	f8bd 10c8 	ldrh.w	r1, [sp, #200]	@ 0xc8
 8006d60:	1841      	adds	r1, r0, r1
 8006d62:	910c      	str	r1, [sp, #48]	@ 0x30
 8006d64:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8006d66:	f8bd 10c8 	ldrh.w	r1, [sp, #200]	@ 0xc8
 8006d6a:	1a40      	subs	r0, r0, r1
 8006d6c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006d6e:	f9bd 10b0 	ldrsh.w	r1, [sp, #176]	@ 0xb0
 8006d72:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	@ 0x2e
 8006d76:	4288      	cmp	r0, r1
 8006d78:	f6ff aee8 	blt.w	8006b4c <forward_lite_dw_if32of32wf32_pool+0x7c>
 8006d7c:	b01d      	add	sp, #116	@ 0x74
 8006d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006d84 <forward_lite_conv2d_if32of32wf32_group_pool>:
 8006d84:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	b09b      	sub	sp, #108	@ 0x6c
 8006d8a:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8006d8c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006d8e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006d90:	f9bd 4118 	ldrsh.w	r4, [sp, #280]	@ 0x118
 8006d94:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8006d96:	9d3d      	ldr	r5, [sp, #244]	@ 0xf4
 8006d98:	f9bd 60ec 	ldrsh.w	r6, [sp, #236]	@ 0xec
 8006d9c:	930d      	str	r3, [sp, #52]	@ 0x34
 8006d9e:	4249      	negs	r1, r1
 8006da0:	910f      	str	r1, [sp, #60]	@ 0x3c
 8006da2:	9214      	str	r2, [sp, #80]	@ 0x50
 8006da4:	f9bd 10e8 	ldrsh.w	r1, [sp, #232]	@ 0xe8
 8006da8:	f9bd 3108 	ldrsh.w	r3, [sp, #264]	@ 0x108
 8006dac:	f9bd 20a8 	ldrsh.w	r2, [sp, #168]	@ 0xa8
 8006db0:	9410      	str	r4, [sp, #64]	@ 0x40
 8006db2:	f8ad 4030 	strh.w	r4, [sp, #48]	@ 0x30
 8006db6:	fb11 f303 	smulbb	r3, r1, r3
 8006dba:	4353      	muls	r3, r2
 8006dbc:	f9bd 40b0 	ldrsh.w	r4, [sp, #176]	@ 0xb0
 8006dc0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006dc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dc4:	4240      	negs	r0, r0
 8006dc6:	9017      	str	r0, [sp, #92]	@ 0x5c
 8006dc8:	1a64      	subs	r4, r4, r1
 8006dca:	9511      	str	r5, [sp, #68]	@ 0x44
 8006dcc:	9412      	str	r4, [sp, #72]	@ 0x48
 8006dce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006dd0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006dd2:	f9bd 00b8 	ldrsh.w	r0, [sp, #184]	@ 0xb8
 8006dd6:	2500      	movs	r5, #0
 8006dd8:	eb03 0481 	add.w	r4, r3, r1, lsl #2
 8006ddc:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	@ 0xb4
 8006de0:	f8ad 6038 	strh.w	r6, [sp, #56]	@ 0x38
 8006de4:	0089      	lsls	r1, r1, #2
 8006de6:	4249      	negs	r1, r1
 8006de8:	fb12 f203 	smulbb	r2, r2, r3
 8006dec:	2800      	cmp	r0, #0
 8006dee:	f8ad 5032 	strh.w	r5, [sp, #50]	@ 0x32
 8006df2:	f8ad 503a 	strh.w	r5, [sp, #58]	@ 0x3a
 8006df6:	941a      	str	r4, [sp, #104]	@ 0x68
 8006df8:	9119      	str	r1, [sp, #100]	@ 0x64
 8006dfa:	9218      	str	r2, [sp, #96]	@ 0x60
 8006dfc:	f340 8124 	ble.w	8007048 <forward_lite_conv2d_if32of32wf32_group_pool+0x2c4>
 8006e00:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8006e04:	2801      	cmp	r0, #1
 8006e06:	f2c0 80a5 	blt.w	8006f54 <forward_lite_conv2d_if32of32wf32_group_pool+0x1d0>
 8006e0a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e0c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006e0e:	f9bd 20d4 	ldrsh.w	r2, [sp, #212]	@ 0xd4
 8006e12:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006e14:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8006e16:	4249      	negs	r1, r1
 8006e18:	2901      	cmp	r1, #1
 8006e1a:	bfb8      	it	lt
 8006e1c:	2100      	movlt	r1, #0
 8006e1e:	4290      	cmp	r0, r2
 8006e20:	da03      	bge.n	8006e2a <forward_lite_conv2d_if32of32wf32_group_pool+0xa6>
 8006e22:	f9bd 00b0 	ldrsh.w	r0, [sp, #176]	@ 0xb0
 8006e26:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006e28:	1a82      	subs	r2, r0, r2
 8006e2a:	f9bd 00ac 	ldrsh.w	r0, [sp, #172]	@ 0xac
 8006e2e:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	@ 0xe8
 8006e32:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8006e34:	eba0 0806 	sub.w	r8, r0, r6
 8006e38:	f9bd 00ac 	ldrsh.w	r0, [sp, #172]	@ 0xac
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	fb00 6707 	mla	r7, r0, r7, r6
 8006e42:	f340 8082 	ble.w	8006f4a <forward_lite_conv2d_if32of32wf32_group_pool+0x1c6>
 8006e46:	1a52      	subs	r2, r2, r1
 8006e48:	f9bd 90a8 	ldrsh.w	r9, [sp, #168]	@ 0xa8
 8006e4c:	f8bd a0cc 	ldrh.w	sl, [sp, #204]	@ 0xcc
 8006e50:	f9bd b0a4 	ldrsh.w	fp, [sp, #164]	@ 0xa4
 8006e54:	9215      	str	r2, [sp, #84]	@ 0x54
 8006e56:	b29c      	uxth	r4, r3
 8006e58:	9116      	str	r1, [sp, #88]	@ 0x58
 8006e5a:	4272      	negs	r2, r6
 8006e5c:	2a01      	cmp	r2, #1
 8006e5e:	f9bd 00d8 	ldrsh.w	r0, [sp, #216]	@ 0xd8
 8006e62:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8006e64:	bfb8      	it	lt
 8006e66:	2200      	movlt	r2, #0
 8006e68:	4580      	cmp	r8, r0
 8006e6a:	bfba      	itte	lt
 8006e6c:	f9bd 00ac 	ldrshlt.w	r0, [sp, #172]	@ 0xac
 8006e70:	eba0 0c06 	sublt.w	ip, r0, r6
 8006e74:	4684      	movge	ip, r0
 8006e76:	19d3      	adds	r3, r2, r7
 8006e78:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8006e7a:	fb0b f303 	mul.w	r3, fp, r3
 8006e7e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006e82:	2800      	cmp	r0, #0
 8006e84:	bf14      	ite	ne
 8006e86:	4603      	movne	r3, r0
 8006e88:	2300      	moveq	r3, #0
 8006e8a:	ebac 0002 	sub.w	r0, ip, r2
 8006e8e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006e90:	920a      	str	r2, [sp, #40]	@ 0x28
 8006e92:	4456      	add	r6, sl
 8006e94:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8006e96:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006e98:	9009      	str	r0, [sp, #36]	@ 0x24
 8006e9a:	9208      	str	r2, [sp, #32]
 8006e9c:	4457      	add	r7, sl
 8006e9e:	f9bd 00e4 	ldrsh.w	r0, [sp, #228]	@ 0xe4
 8006ea2:	f9bd 20c0 	ldrsh.w	r2, [sp, #192]	@ 0xc0
 8006ea6:	9007      	str	r0, [sp, #28]
 8006ea8:	9206      	str	r2, [sp, #24]
 8006eaa:	eba8 080a 	sub.w	r8, r8, sl
 8006eae:	f9bd 00bc 	ldrsh.w	r0, [sp, #188]	@ 0xbc
 8006eb2:	f9bd 20e0 	ldrsh.w	r2, [sp, #224]	@ 0xe0
 8006eb6:	9005      	str	r0, [sp, #20]
 8006eb8:	9204      	str	r2, [sp, #16]
 8006eba:	f9bd 00dc 	ldrsh.w	r0, [sp, #220]	@ 0xdc
 8006ebe:	9003      	str	r0, [sp, #12]
 8006ec0:	f9bd 00ac 	ldrsh.w	r0, [sp, #172]	@ 0xac
 8006ec4:	9002      	str	r0, [sp, #8]
 8006ec6:	f8cd 9004 	str.w	r9, [sp, #4]
 8006eca:	f8cd b000 	str.w	fp, [sp]
 8006ece:	4628      	mov	r0, r5
 8006ed0:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006ed2:	f7ff f8c5 	bl	8006060 <fw_lite_conv2d_kernel_group_f32>
 8006ed6:	1e64      	subs	r4, r4, #1
 8006ed8:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8006edc:	d1bd      	bne.n	8006e5a <forward_lite_conv2d_if32of32wf32_group_pool+0xd6>
 8006ede:	f8ad a0cc 	strh.w	sl, [sp, #204]	@ 0xcc
 8006ee2:	f8ad 90a8 	strh.w	r9, [sp, #168]	@ 0xa8
 8006ee6:	f8ad b0a4 	strh.w	fp, [sp, #164]	@ 0xa4
 8006eea:	464d      	mov	r5, r9
 8006eec:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8006eee:	f9bd 40e8 	ldrsh.w	r4, [sp, #232]	@ 0xe8
 8006ef2:	9e3c      	ldr	r6, [sp, #240]	@ 0xf0
 8006ef4:	f8dd a0f4 	ldr.w	sl, [sp, #244]	@ 0xf4
 8006ef8:	f8dd 80f8 	ldr.w	r8, [sp, #248]	@ 0xf8
 8006efc:	9000      	str	r0, [sp, #0]
 8006efe:	b2a4      	uxth	r4, r4
 8006f00:	9f3f      	ldr	r7, [sp, #252]	@ 0xfc
 8006f02:	4681      	mov	r9, r0
 8006f04:	0030      	movs	r0, r6
 8006f06:	d00b      	beq.n	8006f20 <forward_lite_conv2d_if32of32wf32_group_pool+0x19c>
 8006f08:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006f0a:	4653      	mov	r3, sl
 8006f0c:	462a      	mov	r2, r5
 8006f0e:	4608      	mov	r0, r1
 8006f10:	47b0      	blx	r6
 8006f12:	9800      	ldr	r0, [sp, #0]
 8006f14:	44c2      	add	sl, r8
 8006f16:	ebaa 0000 	sub.w	r0, sl, r0
 8006f1a:	42b8      	cmp	r0, r7
 8006f1c:	bfa8      	it	ge
 8006f1e:	46ca      	movge	sl, r9
 8006f20:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006f22:	eb01 0085 	add.w	r0, r1, r5, lsl #2
 8006f26:	900d      	str	r0, [sp, #52]	@ 0x34
 8006f28:	4601      	mov	r1, r0
 8006f2a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8006f2c:	4281      	cmp	r1, r0
 8006f2e:	d302      	bcc.n	8006f36 <forward_lite_conv2d_if32of32wf32_group_pool+0x1b2>
 8006f30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006f32:	4408      	add	r0, r1
 8006f34:	900d      	str	r0, [sp, #52]	@ 0x34
 8006f36:	1e64      	subs	r4, r4, #1
 8006f38:	d1e4      	bne.n	8006f04 <forward_lite_conv2d_if32of32wf32_group_pool+0x180>
 8006f3a:	963c      	str	r6, [sp, #240]	@ 0xf0
 8006f3c:	f8cd a0f4 	str.w	sl, [sp, #244]	@ 0xf4
 8006f40:	f8cd 80f8 	str.w	r8, [sp, #248]	@ 0xf8
 8006f44:	973f      	str	r7, [sp, #252]	@ 0xfc
 8006f46:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8006f4a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8006f4e:	1c40      	adds	r0, r0, #1
 8006f50:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8006f54:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8006f58:	1e41      	subs	r1, r0, #1
 8006f5a:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 8006f5e:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d514      	bpl.n	8006f90 <forward_lite_conv2d_if32of32wf32_group_pool+0x20c>
 8006f66:	f9bd 0110 	ldrsh.w	r0, [sp, #272]	@ 0x110
 8006f6a:	f9bd 1108 	ldrsh.w	r1, [sp, #264]	@ 0x108
 8006f6e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006f70:	9004      	str	r0, [sp, #16]
 8006f72:	9103      	str	r1, [sp, #12]
 8006f74:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8006f78:	f9bd 00e8 	ldrsh.w	r0, [sp, #232]	@ 0xe8
 8006f7c:	f9bd 10a8 	ldrsh.w	r1, [sp, #168]	@ 0xa8
 8006f80:	9002      	str	r0, [sp, #8]
 8006f82:	9101      	str	r1, [sp, #4]
 8006f84:	a90c      	add	r1, sp, #48	@ 0x30
 8006f86:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8006f88:	9000      	str	r0, [sp, #0]
 8006f8a:	a80d      	add	r0, sp, #52	@ 0x34
 8006f8c:	f7ff f952 	bl	8006234 <_final_pooling_buffer_reorder>
 8006f90:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	@ 0x30
 8006f94:	f9bd 1108 	ldrsh.w	r1, [sp, #264]	@ 0x108
 8006f98:	4288      	cmp	r0, r1
 8006f9a:	db44      	blt.n	8007026 <forward_lite_conv2d_if32of32wf32_group_pool+0x2a2>
 8006f9c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8006fa0:	f8bd 1110 	ldrh.w	r1, [sp, #272]	@ 0x110
 8006fa4:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	@ 0xb4
 8006fa8:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 8006fac:	9c40      	ldr	r4, [sp, #256]	@ 0x100
 8006fae:	9206      	str	r2, [sp, #24]
 8006fb0:	1a40      	subs	r0, r0, r1
 8006fb2:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8006fbc:	f9bd 2108 	ldrsh.w	r2, [sp, #264]	@ 0x108
 8006fc0:	9107      	str	r1, [sp, #28]
 8006fc2:	1c40      	adds	r0, r0, #1
 8006fc4:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8006fc8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8006fca:	f8bd 110c 	ldrh.w	r1, [sp, #268]	@ 0x10c
 8006fce:	9008      	str	r0, [sp, #32]
 8006fd0:	9104      	str	r1, [sp, #16]
 8006fd2:	f8bd 0110 	ldrh.w	r0, [sp, #272]	@ 0x110
 8006fd6:	f8bd 1114 	ldrh.w	r1, [sp, #276]	@ 0x114
 8006fda:	9005      	str	r0, [sp, #20]
 8006fdc:	9102      	str	r1, [sp, #8]
 8006fde:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006fe0:	f8bd 1104 	ldrh.w	r1, [sp, #260]	@ 0x104
 8006fe4:	9100      	str	r1, [sp, #0]
 8006fe6:	b280      	uxth	r0, r0
 8006fe8:	9003      	str	r0, [sp, #12]
 8006fea:	f8bd 0108 	ldrh.w	r0, [sp, #264]	@ 0x108
 8006fee:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	@ 0xe8
 8006ff2:	9001      	str	r0, [sp, #4]
 8006ff4:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	@ 0x32
 8006ff8:	1a12      	subs	r2, r2, r0
 8006ffa:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8006ffc:	b292      	uxth	r2, r2
 8006ffe:	47a0      	blx	r4
 8007000:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8007002:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8007004:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8007008:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800700a:	f9bd 1110 	ldrsh.w	r1, [sp, #272]	@ 0x110
 800700e:	9214      	str	r2, [sp, #80]	@ 0x50
 8007010:	1a40      	subs	r0, r0, r1
 8007012:	2801      	cmp	r0, #1
 8007014:	db05      	blt.n	8007022 <forward_lite_conv2d_if32of32wf32_group_pool+0x29e>
 8007016:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007018:	f8bd 2110 	ldrh.w	r2, [sp, #272]	@ 0x110
 800701c:	1a89      	subs	r1, r1, r2
 800701e:	b209      	sxth	r1, r1
 8007020:	e000      	b.n	8007024 <forward_lite_conv2d_if32of32wf32_group_pool+0x2a0>
 8007022:	2100      	movs	r1, #0
 8007024:	9110      	str	r1, [sp, #64]	@ 0x40
 8007026:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007028:	f8bd 10d0 	ldrh.w	r1, [sp, #208]	@ 0xd0
 800702c:	1841      	adds	r1, r0, r1
 800702e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8007030:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007032:	f8bd 10d0 	ldrh.w	r1, [sp, #208]	@ 0xd0
 8007036:	1a40      	subs	r0, r0, r1
 8007038:	9012      	str	r0, [sp, #72]	@ 0x48
 800703a:	f9bd 10b8 	ldrsh.w	r1, [sp, #184]	@ 0xb8
 800703e:	f9bd 003a 	ldrsh.w	r0, [sp, #58]	@ 0x3a
 8007042:	4288      	cmp	r0, r1
 8007044:	f6ff aedc 	blt.w	8006e00 <forward_lite_conv2d_if32of32wf32_group_pool+0x7c>
 8007048:	b01f      	add	sp, #124	@ 0x7c
 800704a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007050 <forward_lite_nl_softmax_if32of32_kernel>:
 8007050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007054:	460f      	mov	r7, r1
 8007056:	4614      	mov	r4, r2
 8007058:	ed2d 8b02 	vpush	{d8}
 800705c:	2c02      	cmp	r4, #2
 800705e:	4606      	mov	r6, r0
 8007060:	ed97 8a00 	vldr	s16, [r7]
 8007064:	eddf 8a9e 	vldr	s17, [pc, #632]	@ 80072e0 <.text_4>
 8007068:	d33d      	bcc.n	80070e6 <forward_lite_nl_softmax_if32of32_kernel+0x96>
 800706a:	1e61      	subs	r1, r4, #1
 800706c:	1d3a      	adds	r2, r7, #4
 800706e:	f011 0003 	ands.w	r0, r1, #3
 8007072:	d00c      	beq.n	800708e <forward_lite_nl_softmax_if32of32_kernel+0x3e>
 8007074:	ed92 0a00 	vldr	s0, [r2]
 8007078:	eeb4 0a48 	vcmp.f32	s0, s16
 800707c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007080:	bf58      	it	pl
 8007082:	eeb0 8a40 	vmovpl.f32	s16, s0
 8007086:	1e40      	subs	r0, r0, #1
 8007088:	f102 0204 	add.w	r2, r2, #4
 800708c:	d1f2      	bne.n	8007074 <forward_lite_nl_softmax_if32of32_kernel+0x24>
 800708e:	0889      	lsrs	r1, r1, #2
 8007090:	f000 802b 	beq.w	80070ea <forward_lite_nl_softmax_if32of32_kernel+0x9a>
 8007094:	ed92 0a00 	vldr	s0, [r2]
 8007098:	eeb4 0a48 	vcmp.f32	s0, s16
 800709c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a0:	bf58      	it	pl
 80070a2:	eeb0 8a40 	vmovpl.f32	s16, s0
 80070a6:	ed92 0a01 	vldr	s0, [r2, #4]
 80070aa:	eeb4 0a48 	vcmp.f32	s0, s16
 80070ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b2:	bf58      	it	pl
 80070b4:	eeb0 8a40 	vmovpl.f32	s16, s0
 80070b8:	ed92 0a02 	vldr	s0, [r2, #8]
 80070bc:	eeb4 0a48 	vcmp.f32	s0, s16
 80070c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c4:	bf58      	it	pl
 80070c6:	eeb0 8a40 	vmovpl.f32	s16, s0
 80070ca:	ed92 0a03 	vldr	s0, [r2, #12]
 80070ce:	eeb4 0a48 	vcmp.f32	s0, s16
 80070d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d6:	bf58      	it	pl
 80070d8:	eeb0 8a40 	vmovpl.f32	s16, s0
 80070dc:	1e49      	subs	r1, r1, #1
 80070de:	f102 0210 	add.w	r2, r2, #16
 80070e2:	d1d7      	bne.n	8007094 <forward_lite_nl_softmax_if32of32_kernel+0x44>
 80070e4:	e001      	b.n	80070ea <forward_lite_nl_softmax_if32of32_kernel+0x9a>
 80070e6:	2c00      	cmp	r4, #0
 80070e8:	d048      	beq.n	800717c <forward_lite_nl_softmax_if32of32_kernel+0x12c>
 80070ea:	46b0      	mov	r8, r6
 80070ec:	ea4f 0504 	mov.w	r5, r4
 80070f0:	ed97 0a00 	vldr	s0, [r7]
 80070f4:	ee30 0a48 	vsub.f32	s0, s0, s16
 80070f8:	f010 f8a6 	bl	8017248 <expf>
 80070fc:	1d3f      	adds	r7, r7, #4
 80070fe:	ed88 0a00 	vstr	s0, [r8]
 8007102:	1e6d      	subs	r5, r5, #1
 8007104:	ee78 8a80 	vadd.f32	s17, s17, s0
 8007108:	f108 0804 	add.w	r8, r8, #4
 800710c:	d1f0      	bne.n	80070f0 <forward_lite_nl_softmax_if32of32_kernel+0xa0>
 800710e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007116:	bf1e      	ittt	ne
 8007118:	eeb7 0a00 	vmovne.f32	s0, #112	@ 0x3f800000  1.0
 800711c:	ee80 0a28 	vdivne.f32	s0, s0, s17
 8007120:	2c00      	cmpne	r4, #0
 8007122:	d02b      	beq.n	800717c <forward_lite_nl_softmax_if32of32_kernel+0x12c>
 8007124:	f014 0003 	ands.w	r0, r4, #3
 8007128:	f000 800a 	beq.w	8007140 <forward_lite_nl_softmax_if32of32_kernel+0xf0>
 800712c:	edd6 0a00 	vldr	s1, [r6]
 8007130:	ee60 0a80 	vmul.f32	s1, s1, s0
 8007134:	edc6 0a00 	vstr	s1, [r6]
 8007138:	1e40      	subs	r0, r0, #1
 800713a:	f106 0604 	add.w	r6, r6, #4
 800713e:	d1f5      	bne.n	800712c <forward_lite_nl_softmax_if32of32_kernel+0xdc>
 8007140:	08a4      	lsrs	r4, r4, #2
 8007142:	d01b      	beq.n	800717c <forward_lite_nl_softmax_if32of32_kernel+0x12c>
 8007144:	edd6 0a00 	vldr	s1, [r6]
 8007148:	ee60 0a80 	vmul.f32	s1, s1, s0
 800714c:	edc6 0a00 	vstr	s1, [r6]
 8007150:	1e64      	subs	r4, r4, #1
 8007152:	ed96 1a01 	vldr	s2, [r6, #4]
 8007156:	edd6 0a02 	vldr	s1, [r6, #8]
 800715a:	ee21 1a00 	vmul.f32	s2, s2, s0
 800715e:	ed86 1a01 	vstr	s2, [r6, #4]
 8007162:	ee60 0a80 	vmul.f32	s1, s1, s0
 8007166:	ed96 1a03 	vldr	s2, [r6, #12]
 800716a:	edc6 0a02 	vstr	s1, [r6, #8]
 800716e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8007172:	ed86 1a03 	vstr	s2, [r6, #12]
 8007176:	f106 0610 	add.w	r6, r6, #16
 800717a:	d1e3      	bne.n	8007144 <forward_lite_nl_softmax_if32of32_kernel+0xf4>
 800717c:	ecbd 8b02 	vpop	{d8}
 8007180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007184 <forward_lite_nl_softmax_zero_channel_if32of32_kernel>:
 8007184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007188:	460f      	mov	r7, r1
 800718a:	4614      	mov	r4, r2
 800718c:	ed2d 8b06 	vpush	{d8-d10}
 8007190:	2c02      	cmp	r4, #2
 8007192:	4606      	mov	r6, r0
 8007194:	ed97 8a00 	vldr	s16, [r7]
 8007198:	eddf 8a51 	vldr	s17, [pc, #324]	@ 80072e0 <.text_4>
 800719c:	d33c      	bcc.n	8007218 <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0x94>
 800719e:	1e61      	subs	r1, r4, #1
 80071a0:	1d3a      	adds	r2, r7, #4
 80071a2:	f011 0003 	ands.w	r0, r1, #3
 80071a6:	d00c      	beq.n	80071c2 <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0x3e>
 80071a8:	ed92 0a00 	vldr	s0, [r2]
 80071ac:	eeb4 0a48 	vcmp.f32	s0, s16
 80071b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b4:	bf58      	it	pl
 80071b6:	eeb0 8a40 	vmovpl.f32	s16, s0
 80071ba:	1e40      	subs	r0, r0, #1
 80071bc:	f102 0204 	add.w	r2, r2, #4
 80071c0:	d1f2      	bne.n	80071a8 <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0x24>
 80071c2:	0889      	lsrs	r1, r1, #2
 80071c4:	f000 8028 	beq.w	8007218 <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0x94>
 80071c8:	ed92 0a00 	vldr	s0, [r2]
 80071cc:	eeb4 0a48 	vcmp.f32	s0, s16
 80071d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d4:	bf58      	it	pl
 80071d6:	eeb0 8a40 	vmovpl.f32	s16, s0
 80071da:	ed92 0a01 	vldr	s0, [r2, #4]
 80071de:	eeb4 0a48 	vcmp.f32	s0, s16
 80071e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e6:	bf58      	it	pl
 80071e8:	eeb0 8a40 	vmovpl.f32	s16, s0
 80071ec:	ed92 0a02 	vldr	s0, [r2, #8]
 80071f0:	eeb4 0a48 	vcmp.f32	s0, s16
 80071f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f8:	bf58      	it	pl
 80071fa:	eeb0 8a40 	vmovpl.f32	s16, s0
 80071fe:	ed92 0a03 	vldr	s0, [r2, #12]
 8007202:	eeb4 0a48 	vcmp.f32	s0, s16
 8007206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720a:	bf58      	it	pl
 800720c:	eeb0 8a40 	vmovpl.f32	s16, s0
 8007210:	1e49      	subs	r1, r1, #1
 8007212:	f102 0210 	add.w	r2, r2, #16
 8007216:	d1d7      	bne.n	80071c8 <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0x44>
 8007218:	eeb1 0a48 	vneg.f32	s0, s16
 800721c:	f010 f814 	bl	8017248 <expf>
 8007220:	2c00      	cmp	r4, #0
 8007222:	eeb0 9a40 	vmov.f32	s18, s0
 8007226:	d057      	beq.n	80072d8 <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0x154>
 8007228:	46b0      	mov	r8, r6
 800722a:	4625      	mov	r5, r4
 800722c:	eddf 9a2d 	vldr	s19, [pc, #180]	@ 80072e4 <.text_5>
 8007230:	ed9f aa2d 	vldr	s20, [pc, #180]	@ 80072e8 <.text_6>
 8007234:	ed97 0a00 	vldr	s0, [r7]
 8007238:	eeb4 0a4a 	vcmp.f32	s0, s20
 800723c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007240:	da04      	bge.n	800724c <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0xc8>
 8007242:	eeb4 0a69 	vcmp.f32	s0, s19
 8007246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724a:	d507      	bpl.n	800725c <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0xd8>
 800724c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007250:	f00f fffa 	bl	8017248 <expf>
 8007254:	ee78 8a80 	vadd.f32	s17, s17, s0
 8007258:	e002      	b.n	8007260 <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0xdc>
 800725a:	bf00      	nop
 800725c:	ee20 0a09 	vmul.f32	s0, s0, s18
 8007260:	1d3f      	adds	r7, r7, #4
 8007262:	ed88 0a00 	vstr	s0, [r8]
 8007266:	1e6d      	subs	r5, r5, #1
 8007268:	f108 0804 	add.w	r8, r8, #4
 800726c:	d1e2      	bne.n	8007234 <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0xb0>
 800726e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007276:	d02f      	beq.n	80072d8 <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0x154>
 8007278:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800727c:	f014 0003 	ands.w	r0, r4, #3
 8007280:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8007284:	f000 800a 	beq.w	800729c <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0x118>
 8007288:	edd6 0a00 	vldr	s1, [r6]
 800728c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8007290:	edc6 0a00 	vstr	s1, [r6]
 8007294:	1e40      	subs	r0, r0, #1
 8007296:	f106 0604 	add.w	r6, r6, #4
 800729a:	d1f5      	bne.n	8007288 <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0x104>
 800729c:	08a4      	lsrs	r4, r4, #2
 800729e:	d01b      	beq.n	80072d8 <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0x154>
 80072a0:	edd6 0a00 	vldr	s1, [r6]
 80072a4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80072a8:	edc6 0a00 	vstr	s1, [r6]
 80072ac:	1e64      	subs	r4, r4, #1
 80072ae:	ed96 1a01 	vldr	s2, [r6, #4]
 80072b2:	edd6 0a02 	vldr	s1, [r6, #8]
 80072b6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80072ba:	ed86 1a01 	vstr	s2, [r6, #4]
 80072be:	ee60 0a80 	vmul.f32	s1, s1, s0
 80072c2:	ed96 1a03 	vldr	s2, [r6, #12]
 80072c6:	edc6 0a02 	vstr	s1, [r6, #8]
 80072ca:	ee21 1a00 	vmul.f32	s2, s2, s0
 80072ce:	ed86 1a03 	vstr	s2, [r6, #12]
 80072d2:	f106 0610 	add.w	r6, r6, #16
 80072d6:	d1e3      	bne.n	80072a0 <forward_lite_nl_softmax_zero_channel_if32of32_kernel+0x11c>
 80072d8:	ecbd 8b06 	vpop	{d8-d10}
 80072dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072e0 <.text_4>:
 80072e0:	00000000 	.word	0x00000000

080072e4 <.text_5>:
 80072e4:	b3d6bf95 	.word	0xb3d6bf95

080072e8 <.text_6>:
 80072e8:	33d6bf96 	.word	0x33d6bf96

080072ec <forward_lite_nl_prelu_if32of32_kernel>:
 80072ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ee:	ed93 0a00 	vldr	s0, [r3]
 80072f2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80072f6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80072fa:	ee10 4a10 	vmov	r4, s0
 80072fe:	4291      	cmp	r1, r2
 8007300:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007304:	f080 8031 	bcs.w	800736a <forward_lite_nl_prelu_if32of32_kernel+0x7e>
 8007308:	ee10 3a10 	vmov	r3, s0
 800730c:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8007310:	1f37      	subs	r7, r6, #4
 8007312:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007316:	428f      	cmp	r7, r1
 8007318:	4625      	mov	r5, r4
 800731a:	f1a0 0c04 	sub.w	ip, r0, #4
 800731e:	d321      	bcc.n	8007364 <forward_lite_nl_prelu_if32of32_kernel+0x78>
 8007320:	ed97 0a00 	vldr	s0, [r7]
 8007324:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732c:	bf4c      	ite	mi
 800732e:	eddf 0a3c 	vldrmi	s1, [pc, #240]	@ 8007420 <.text_4>
 8007332:	eef0 0a40 	vmovpl.f32	s1, s0
 8007336:	eeb1 0a40 	vneg.f32	s0, s0
 800733a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800733e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007342:	bf48      	it	mi
 8007344:	ed9f 0a36 	vldrmi	s0, [pc, #216]	@ 8007420 <.text_4>
 8007348:	1f3f      	subs	r7, r7, #4
 800734a:	46ae      	mov	lr, r5
 800734c:	428f      	cmp	r7, r1
 800734e:	ed9e 1a00 	vldr	s2, [lr]
 8007352:	ee41 0a40 	vmls.f32	s1, s2, s0
 8007356:	edcc 0a00 	vstr	s1, [ip]
 800735a:	f1ae 0504 	sub.w	r5, lr, #4
 800735e:	f1ac 0c04 	sub.w	ip, ip, #4
 8007362:	d2dd      	bcs.n	8007320 <forward_lite_nl_prelu_if32of32_kernel+0x34>
 8007364:	4631      	mov	r1, r6
 8007366:	4291      	cmp	r1, r2
 8007368:	d3d0      	bcc.n	800730c <forward_lite_nl_prelu_if32of32_kernel+0x20>
 800736a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800736c <forward_lite_nl_relu_generic_if32of32_kernel>:
 800736c:	ed93 0a00 	vldr	s0, [r3]
 8007370:	edd3 0a01 	vldr	s1, [r3, #4]
 8007374:	ed93 1a02 	vldr	s2, [r3, #8]
 8007378:	1f00      	subs	r0, r0, #4
 800737a:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800737e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007382:	1f0b      	subs	r3, r1, #4
 8007384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007388:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800738c:	d52a      	bpl.n	80073e4 <forward_lite_nl_relu_generic_if32of32_kernel+0x78>
 800738e:	eef5 0a40 	vcmp.f32	s1, #0.0
 8007392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007396:	d013      	beq.n	80073c0 <forward_lite_nl_relu_generic_if32of32_kernel+0x54>
 8007398:	428a      	cmp	r2, r1
 800739a:	d310      	bcc.n	80073be <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 800739c:	ed92 1a00 	vldr	s2, [r2]
 80073a0:	eeb4 0a41 	vcmp.f32	s0, s2
 80073a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a8:	bfa4      	itt	ge
 80073aa:	ee31 1a40 	vsubge.f32	s2, s2, s0
 80073ae:	ee21 1a20 	vmulge.f32	s2, s2, s1
 80073b2:	ed80 1a00 	vstr	s2, [r0]
 80073b6:	1f12      	subs	r2, r2, #4
 80073b8:	1f00      	subs	r0, r0, #4
 80073ba:	428a      	cmp	r2, r1
 80073bc:	d2ee      	bcs.n	800739c <forward_lite_nl_relu_generic_if32of32_kernel+0x30>
 80073be:	4770      	bx	lr
 80073c0:	428a      	cmp	r2, r1
 80073c2:	d3fc      	bcc.n	80073be <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 80073c4:	edd2 0a00 	vldr	s1, [r2]
 80073c8:	eeb4 0a60 	vcmp.f32	s0, s1
 80073cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d0:	bfa8      	it	ge
 80073d2:	eddf 0a13 	vldrge	s1, [pc, #76]	@ 8007420 <.text_4>
 80073d6:	edc0 0a00 	vstr	s1, [r0]
 80073da:	1f12      	subs	r2, r2, #4
 80073dc:	1f00      	subs	r0, r0, #4
 80073de:	428a      	cmp	r2, r1
 80073e0:	d2f0      	bcs.n	80073c4 <forward_lite_nl_relu_generic_if32of32_kernel+0x58>
 80073e2:	4770      	bx	lr
 80073e4:	428a      	cmp	r2, r1
 80073e6:	d3ea      	bcc.n	80073be <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 80073e8:	edd2 1a00 	vldr	s3, [r2]
 80073ec:	eeb4 1a61 	vcmp.f32	s2, s3
 80073f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f4:	db0a      	blt.n	800740c <forward_lite_nl_relu_generic_if32of32_kernel+0xa0>
 80073f6:	eeb4 0a61 	vcmp.f32	s0, s3
 80073fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fe:	db07      	blt.n	8007410 <forward_lite_nl_relu_generic_if32of32_kernel+0xa4>
 8007400:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8007404:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8007408:	e002      	b.n	8007410 <forward_lite_nl_relu_generic_if32of32_kernel+0xa4>
 800740a:	bf00      	nop
 800740c:	eef0 1a41 	vmov.f32	s3, s2
 8007410:	edc0 1a00 	vstr	s3, [r0]
 8007414:	1f12      	subs	r2, r2, #4
 8007416:	1f00      	subs	r0, r0, #4
 8007418:	428a      	cmp	r2, r1
 800741a:	d2e5      	bcs.n	80073e8 <forward_lite_nl_relu_generic_if32of32_kernel+0x7c>
 800741c:	4770      	bx	lr
	...

08007420 <.text_4>:
 8007420:	00000000 	.word	0x00000000

08007424 <lite_decompress_ilutof32>:
 8007424:	b4f0      	push	{r4, r5, r6, r7}
 8007426:	4604      	mov	r4, r0
 8007428:	9805      	ldr	r0, [sp, #20]
 800742a:	9e04      	ldr	r6, [sp, #16]
 800742c:	2b04      	cmp	r3, #4
 800742e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007432:	d004      	beq.n	800743e <lite_decompress_ilutof32+0x1a>
 8007434:	2b08      	cmp	r3, #8
 8007436:	d03f      	beq.n	80074b8 <lite_decompress_ilutof32+0x94>
 8007438:	bcf0      	pop	{r4, r5, r6, r7}
 800743a:	4608      	mov	r0, r1
 800743c:	4770      	bx	lr
 800743e:	42ac      	cmp	r4, r5
 8007440:	d25c      	bcs.n	80074fc <lite_decompress_ilutof32+0xd8>
 8007442:	0870      	lsrs	r0, r6, #1
 8007444:	d02e      	beq.n	80074a4 <lite_decompress_ilutof32+0x80>
 8007446:	07c3      	lsls	r3, r0, #31
 8007448:	d50c      	bpl.n	8007464 <lite_decompress_ilutof32+0x40>
 800744a:	780f      	ldrb	r7, [r1, #0]
 800744c:	093f      	lsrs	r7, r7, #4
 800744e:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	f811 7b01 	ldrb.w	r7, [r1], #1
 8007458:	f007 070f 	and.w	r7, r7, #15
 800745c:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8007460:	6063      	str	r3, [r4, #4]
 8007462:	3408      	adds	r4, #8
 8007464:	0840      	lsrs	r0, r0, #1
 8007466:	d01d      	beq.n	80074a4 <lite_decompress_ilutof32+0x80>
 8007468:	780b      	ldrb	r3, [r1, #0]
 800746a:	091b      	lsrs	r3, r3, #4
 800746c:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8007470:	6027      	str	r7, [r4, #0]
 8007472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800747e:	6067      	str	r7, [r4, #4]
 8007480:	f104 0308 	add.w	r3, r4, #8
 8007484:	780c      	ldrb	r4, [r1, #0]
 8007486:	0924      	lsrs	r4, r4, #4
 8007488:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800748c:	601f      	str	r7, [r3, #0]
 800748e:	1e40      	subs	r0, r0, #1
 8007490:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007494:	f004 040f 	and.w	r4, r4, #15
 8007498:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800749c:	605f      	str	r7, [r3, #4]
 800749e:	f103 0408 	add.w	r4, r3, #8
 80074a2:	d1e1      	bne.n	8007468 <lite_decompress_ilutof32+0x44>
 80074a4:	07f0      	lsls	r0, r6, #31
 80074a6:	d5ca      	bpl.n	800743e <lite_decompress_ilutof32+0x1a>
 80074a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ac:	091b      	lsrs	r3, r3, #4
 80074ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80074b2:	f844 0b04 	str.w	r0, [r4], #4
 80074b6:	e7c2      	b.n	800743e <lite_decompress_ilutof32+0x1a>
 80074b8:	42ac      	cmp	r4, r5
 80074ba:	d21f      	bcs.n	80074fc <lite_decompress_ilutof32+0xd8>
 80074bc:	f811 0b01 	ldrb.w	r0, [r1], #1
 80074c0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80074c4:	6020      	str	r0, [r4, #0]
 80074c6:	1d20      	adds	r0, r4, #4
 80074c8:	42a8      	cmp	r0, r5
 80074ca:	bf3f      	itttt	cc
 80074cc:	f811 4b01 	ldrbcc.w	r4, [r1], #1
 80074d0:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 80074d4:	f840 3b04 	strcc.w	r3, [r0], #4
 80074d8:	42a8      	cmpcc	r0, r5
 80074da:	d20f      	bcs.n	80074fc <lite_decompress_ilutof32+0xd8>
 80074dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074e4:	f840 3b04 	str.w	r3, [r0], #4
 80074e8:	42a8      	cmp	r0, r5
 80074ea:	d207      	bcs.n	80074fc <lite_decompress_ilutof32+0xd8>
 80074ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074f0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80074f4:	6003      	str	r3, [r0, #0]
 80074f6:	1d04      	adds	r4, r0, #4
 80074f8:	42ac      	cmp	r4, r5
 80074fa:	d3df      	bcc.n	80074bc <lite_decompress_ilutof32+0x98>
 80074fc:	bcf0      	pop	{r4, r5, r6, r7}
 80074fe:	4608      	mov	r0, r1
 8007500:	4770      	bx	lr
	...

08007504 <forward_lite_dense_if32of32wf32>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	b081      	sub	sp, #4
 800750a:	4601      	mov	r1, r0
 800750c:	ed2d 8b10 	vpush	{d8-d15}
 8007510:	b087      	sub	sp, #28
 8007512:	684c      	ldr	r4, [r1, #4]
 8007514:	680d      	ldr	r5, [r1, #0]
 8007516:	6948      	ldr	r0, [r1, #20]
 8007518:	9001      	str	r0, [sp, #4]
 800751a:	4603      	mov	r3, r0
 800751c:	698a      	ldr	r2, [r1, #24]
 800751e:	4353      	muls	r3, r2
 8007520:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8007524:	4295      	cmp	r5, r2
 8007526:	f080 8130 	bcs.w	800778a <forward_lite_dense_if32of32wf32+0x286>
 800752a:	9102      	str	r1, [sp, #8]
 800752c:	9206      	str	r2, [sp, #24]
 800752e:	9802      	ldr	r0, [sp, #8]
 8007530:	6901      	ldr	r1, [r0, #16]
 8007532:	9802      	ldr	r0, [sp, #8]
 8007534:	9104      	str	r1, [sp, #16]
 8007536:	460e      	mov	r6, r1
 8007538:	6887      	ldr	r7, [r0, #8]
 800753a:	9801      	ldr	r0, [sp, #4]
 800753c:	46ae      	mov	lr, r5
 800753e:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8007542:	458e      	cmp	lr, r1
 8007544:	9103      	str	r1, [sp, #12]
 8007546:	f080 80d7 	bcs.w	80076f8 <forward_lite_dense_if32of32wf32+0x1f4>
 800754a:	9105      	str	r1, [sp, #20]
 800754c:	2e10      	cmp	r6, #16
 800754e:	4630      	mov	r0, r6
 8007550:	4622      	mov	r2, r4
 8007552:	463b      	mov	r3, r7
 8007554:	eddf faaf 	vldr	s31, [pc, #700]	@ 8007814 <.text_4>
 8007558:	f0c0 8077 	bcc.w	800764a <forward_lite_dense_if32of32wf32+0x146>
 800755c:	f102 0110 	add.w	r1, r2, #16
 8007560:	f103 0910 	add.w	r9, r3, #16
 8007564:	f101 0c10 	add.w	ip, r1, #16
 8007568:	f109 0a10 	add.w	sl, r9, #16
 800756c:	f10c 0810 	add.w	r8, ip, #16
 8007570:	f10a 0b10 	add.w	fp, sl, #16
 8007574:	edd8 0a03 	vldr	s1, [r8, #12]
 8007578:	ed9b 0a03 	vldr	s0, [fp, #12]
 800757c:	edcd 0a00 	vstr	s1, [sp]
 8007580:	ed93 fa00 	vldr	s30, [r3]
 8007584:	edd2 ea00 	vldr	s29, [r2]
 8007588:	ed93 ea01 	vldr	s28, [r3, #4]
 800758c:	edd2 da01 	vldr	s27, [r2, #4]
 8007590:	ed93 da02 	vldr	s26, [r3, #8]
 8007594:	edd2 ca02 	vldr	s25, [r2, #8]
 8007598:	ed93 ca03 	vldr	s24, [r3, #12]
 800759c:	edd2 ba03 	vldr	s23, [r2, #12]
 80075a0:	ed99 ba00 	vldr	s22, [r9]
 80075a4:	edd1 aa00 	vldr	s21, [r1]
 80075a8:	ed99 aa01 	vldr	s20, [r9, #4]
 80075ac:	edd1 9a01 	vldr	s19, [r1, #4]
 80075b0:	ed99 9a02 	vldr	s18, [r9, #8]
 80075b4:	edd1 8a02 	vldr	s17, [r1, #8]
 80075b8:	ed99 8a03 	vldr	s16, [r9, #12]
 80075bc:	edd1 7a03 	vldr	s15, [r1, #12]
 80075c0:	ed9a 7a00 	vldr	s14, [sl]
 80075c4:	eddc 6a00 	vldr	s13, [ip]
 80075c8:	ed9a 6a01 	vldr	s12, [sl, #4]
 80075cc:	eddc 5a01 	vldr	s11, [ip, #4]
 80075d0:	ed9a 5a02 	vldr	s10, [sl, #8]
 80075d4:	eddc 4a02 	vldr	s9, [ip, #8]
 80075d8:	ed9a 4a03 	vldr	s8, [sl, #12]
 80075dc:	eddc 3a03 	vldr	s7, [ip, #12]
 80075e0:	ed9b 3a00 	vldr	s6, [fp]
 80075e4:	edd8 2a00 	vldr	s5, [r8]
 80075e8:	ed9b 2a01 	vldr	s4, [fp, #4]
 80075ec:	edd8 1a01 	vldr	s3, [r8, #4]
 80075f0:	ed9b 1a02 	vldr	s2, [fp, #8]
 80075f4:	edd8 0a02 	vldr	s1, [r8, #8]
 80075f8:	ee4f fa2e 	vmla.f32	s31, s30, s29
 80075fc:	ee4e fa2d 	vmla.f32	s31, s28, s27
 8007600:	ee4d fa2c 	vmla.f32	s31, s26, s25
 8007604:	ee4c fa2b 	vmla.f32	s31, s24, s23
 8007608:	ee4b fa2a 	vmla.f32	s31, s22, s21
 800760c:	ee4a fa29 	vmla.f32	s31, s20, s19
 8007610:	ee49 fa28 	vmla.f32	s31, s18, s17
 8007614:	ee48 fa27 	vmla.f32	s31, s16, s15
 8007618:	ee47 fa26 	vmla.f32	s31, s14, s13
 800761c:	ee46 fa25 	vmla.f32	s31, s12, s11
 8007620:	ee45 fa24 	vmla.f32	s31, s10, s9
 8007624:	ee44 fa23 	vmla.f32	s31, s8, s7
 8007628:	ee43 fa22 	vmla.f32	s31, s6, s5
 800762c:	ee42 fa21 	vmla.f32	s31, s4, s3
 8007630:	ee41 fa20 	vmla.f32	s31, s2, s1
 8007634:	3810      	subs	r0, #16
 8007636:	eddd 0a00 	vldr	s1, [sp]
 800763a:	2810      	cmp	r0, #16
 800763c:	ee40 fa20 	vmla.f32	s31, s0, s1
 8007640:	f108 0210 	add.w	r2, r8, #16
 8007644:	f10b 0310 	add.w	r3, fp, #16
 8007648:	d288      	bcs.n	800755c <forward_lite_dense_if32of32wf32+0x58>
 800764a:	2804      	cmp	r0, #4
 800764c:	f0c0 801e 	bcc.w	800768c <forward_lite_dense_if32of32wf32+0x188>
 8007650:	edd3 0a00 	vldr	s1, [r3]
 8007654:	ed92 0a00 	vldr	s0, [r2]
 8007658:	edd3 1a01 	vldr	s3, [r3, #4]
 800765c:	ed92 1a01 	vldr	s2, [r2, #4]
 8007660:	edd3 3a02 	vldr	s7, [r3, #8]
 8007664:	ed92 2a02 	vldr	s4, [r2, #8]
 8007668:	edd3 6a03 	vldr	s13, [r3, #12]
 800766c:	ed92 5a03 	vldr	s10, [r2, #12]
 8007670:	ee40 fa80 	vmla.f32	s31, s1, s0
 8007674:	ee41 fa81 	vmla.f32	s31, s3, s2
 8007678:	3210      	adds	r2, #16
 800767a:	3310      	adds	r3, #16
 800767c:	1f00      	subs	r0, r0, #4
 800767e:	ee43 fa82 	vmla.f32	s31, s7, s4
 8007682:	2804      	cmp	r0, #4
 8007684:	ee46 fa85 	vmla.f32	s31, s13, s10
 8007688:	f080 8086 	bcs.w	8007798 <forward_lite_dense_if32of32wf32+0x294>
 800768c:	b350      	cbz	r0, 80076e4 <forward_lite_dense_if32of32wf32+0x1e0>
 800768e:	f010 0103 	ands.w	r1, r0, #3
 8007692:	d009      	beq.n	80076a8 <forward_lite_dense_if32of32wf32+0x1a4>
 8007694:	ed93 0a00 	vldr	s0, [r3]
 8007698:	edd2 0a00 	vldr	s1, [r2]
 800769c:	1d12      	adds	r2, r2, #4
 800769e:	1d1b      	adds	r3, r3, #4
 80076a0:	1e49      	subs	r1, r1, #1
 80076a2:	ee40 fa20 	vmla.f32	s31, s0, s1
 80076a6:	d1f5      	bne.n	8007694 <forward_lite_dense_if32of32wf32+0x190>
 80076a8:	0880      	lsrs	r0, r0, #2
 80076aa:	d01b      	beq.n	80076e4 <forward_lite_dense_if32of32wf32+0x1e0>
 80076ac:	ed93 1a00 	vldr	s2, [r3]
 80076b0:	ed92 0a00 	vldr	s0, [r2]
 80076b4:	edd3 0a01 	vldr	s1, [r3, #4]
 80076b8:	edd2 1a01 	vldr	s3, [r2, #4]
 80076bc:	ee41 fa00 	vmla.f32	s31, s2, s0
 80076c0:	ee40 faa1 	vmla.f32	s31, s1, s3
 80076c4:	ed93 1a02 	vldr	s2, [r3, #8]
 80076c8:	ed92 0a02 	vldr	s0, [r2, #8]
 80076cc:	edd3 0a03 	vldr	s1, [r3, #12]
 80076d0:	edd2 1a03 	vldr	s3, [r2, #12]
 80076d4:	3210      	adds	r2, #16
 80076d6:	3310      	adds	r3, #16
 80076d8:	ee41 fa00 	vmla.f32	s31, s2, s0
 80076dc:	1e40      	subs	r0, r0, #1
 80076de:	ee40 faa1 	vmla.f32	s31, s1, s3
 80076e2:	d1e3      	bne.n	80076ac <forward_lite_dense_if32of32wf32+0x1a8>
 80076e4:	edce fa00 	vstr	s31, [lr]
 80076e8:	f10e 0e04 	add.w	lr, lr, #4
 80076ec:	9805      	ldr	r0, [sp, #20]
 80076ee:	4586      	cmp	lr, r0
 80076f0:	eb07 0786 	add.w	r7, r7, r6, lsl #2
 80076f4:	f4ff af2a 	bcc.w	800754c <forward_lite_dense_if32of32wf32+0x48>
 80076f8:	9902      	ldr	r1, [sp, #8]
 80076fa:	68ca      	ldr	r2, [r1, #12]
 80076fc:	2a00      	cmp	r2, #0
 80076fe:	bf1c      	itt	ne
 8007700:	9801      	ldrne	r0, [sp, #4]
 8007702:	2800      	cmpne	r0, #0
 8007704:	d039      	beq.n	800777a <forward_lite_dense_if32of32wf32+0x276>
 8007706:	4601      	mov	r1, r0
 8007708:	f011 0003 	ands.w	r0, r1, #3
 800770c:	f000 800d 	beq.w	800772a <forward_lite_dense_if32of32wf32+0x226>
 8007710:	ed95 0a00 	vldr	s0, [r5]
 8007714:	edd2 0a00 	vldr	s1, [r2]
 8007718:	ee70 0a20 	vadd.f32	s1, s0, s1
 800771c:	edc5 0a00 	vstr	s1, [r5]
 8007720:	1e40      	subs	r0, r0, #1
 8007722:	1d12      	adds	r2, r2, #4
 8007724:	1d2d      	adds	r5, r5, #4
 8007726:	2800      	cmp	r0, #0
 8007728:	d1f2      	bne.n	8007710 <forward_lite_dense_if32of32wf32+0x20c>
 800772a:	0889      	lsrs	r1, r1, #2
 800772c:	f000 8025 	beq.w	800777a <forward_lite_dense_if32of32wf32+0x276>
 8007730:	ed95 1a00 	vldr	s2, [r5]
 8007734:	ed92 0a00 	vldr	s0, [r2]
 8007738:	ee31 0a00 	vadd.f32	s0, s2, s0
 800773c:	ed85 0a00 	vstr	s0, [r5]
 8007740:	edd5 1a01 	vldr	s3, [r5, #4]
 8007744:	edd2 0a01 	vldr	s1, [r2, #4]
 8007748:	ed95 1a02 	vldr	s2, [r5, #8]
 800774c:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8007750:	ed85 0a01 	vstr	s0, [r5, #4]
 8007754:	1e49      	subs	r1, r1, #1
 8007756:	ed92 0a02 	vldr	s0, [r2, #8]
 800775a:	edd5 0a03 	vldr	s1, [r5, #12]
 800775e:	ee31 0a00 	vadd.f32	s0, s2, s0
 8007762:	ed85 0a02 	vstr	s0, [r5, #8]
 8007766:	edd2 1a03 	vldr	s3, [r2, #12]
 800776a:	ee30 0aa1 	vadd.f32	s0, s1, s3
 800776e:	ed85 0a03 	vstr	s0, [r5, #12]
 8007772:	3210      	adds	r2, #16
 8007774:	3510      	adds	r5, #16
 8007776:	2900      	cmp	r1, #0
 8007778:	d1da      	bne.n	8007730 <forward_lite_dense_if32of32wf32+0x22c>
 800777a:	9804      	ldr	r0, [sp, #16]
 800777c:	9d03      	ldr	r5, [sp, #12]
 800777e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8007782:	9806      	ldr	r0, [sp, #24]
 8007784:	4285      	cmp	r5, r0
 8007786:	f4ff aed2 	bcc.w	800752e <forward_lite_dense_if32of32wf32+0x2a>
 800778a:	b007      	add	sp, #28
 800778c:	ecbd 8b10 	vpop	{d8-d15}
 8007790:	b001      	add	sp, #4
 8007792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007796:	bf00      	nop
 8007798:	edd3 0a00 	vldr	s1, [r3]
 800779c:	ed92 0a00 	vldr	s0, [r2]
 80077a0:	edd3 1a01 	vldr	s3, [r3, #4]
 80077a4:	ed92 1a01 	vldr	s2, [r2, #4]
 80077a8:	edd3 3a02 	vldr	s7, [r3, #8]
 80077ac:	ed92 2a02 	vldr	s4, [r2, #8]
 80077b0:	edd3 6a03 	vldr	s13, [r3, #12]
 80077b4:	ed92 5a03 	vldr	s10, [r2, #12]
 80077b8:	ee40 fa80 	vmla.f32	s31, s1, s0
 80077bc:	ee41 fa81 	vmla.f32	s31, s3, s2
 80077c0:	3210      	adds	r2, #16
 80077c2:	3310      	adds	r3, #16
 80077c4:	1f00      	subs	r0, r0, #4
 80077c6:	ee43 fa82 	vmla.f32	s31, s7, s4
 80077ca:	2804      	cmp	r0, #4
 80077cc:	ee46 fa85 	vmla.f32	s31, s13, s10
 80077d0:	f4ff af5c 	bcc.w	800768c <forward_lite_dense_if32of32wf32+0x188>
 80077d4:	edd3 2a00 	vldr	s5, [r3]
 80077d8:	edd2 7a00 	vldr	s15, [r2]
 80077dc:	ed93 4a01 	vldr	s8, [r3, #4]
 80077e0:	ed92 3a01 	vldr	s6, [r2, #4]
 80077e4:	edd3 5a02 	vldr	s11, [r3, #8]
 80077e8:	edd2 4a02 	vldr	s9, [r2, #8]
 80077ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80077f0:	ed92 6a03 	vldr	s12, [r2, #12]
 80077f4:	ee42 faa7 	vmla.f32	s31, s5, s15
 80077f8:	ee44 fa03 	vmla.f32	s31, s8, s6
 80077fc:	3210      	adds	r2, #16
 80077fe:	3310      	adds	r3, #16
 8007800:	1f00      	subs	r0, r0, #4
 8007802:	ee45 faa4 	vmla.f32	s31, s11, s9
 8007806:	2804      	cmp	r0, #4
 8007808:	ee47 fa06 	vmla.f32	s31, s14, s12
 800780c:	f4bf af20 	bcs.w	8007650 <forward_lite_dense_if32of32wf32+0x14c>
 8007810:	e73c      	b.n	800768c <forward_lite_dense_if32of32wf32+0x188>
	...

08007814 <.text_4>:
 8007814:	00000000 	.word	0x00000000

08007818 <forward_lite_dense_if32of32wf32_lut4>:
 8007818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	b081      	sub	sp, #4
 800781e:	4605      	mov	r5, r0
 8007820:	ed2d 8b02 	vpush	{d8}
 8007824:	b084      	sub	sp, #16
 8007826:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800782a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800782c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800782e:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 8007832:	4360      	muls	r0, r4
 8007834:	f1bb 0f00 	cmp.w	fp, #0
 8007838:	468a      	mov	sl, r1
 800783a:	4616      	mov	r6, r2
 800783c:	eb05 0780 	add.w	r7, r5, r0, lsl #2
 8007840:	d00a      	beq.n	8007858 <forward_lite_dense_if32of32wf32_lut4+0x40>
 8007842:	2240      	movs	r2, #64	@ 0x40
 8007844:	4659      	mov	r1, fp
 8007846:	4618      	mov	r0, r3
 8007848:	f004 fab0 	bl	800bdac <st_int8_copy>
 800784c:	9602      	str	r6, [sp, #8]
 800784e:	46a6      	mov	lr, r4
 8007850:	9701      	str	r7, [sp, #4]
 8007852:	f008 0401 	and.w	r4, r8, #1
 8007856:	e0fc      	b.n	8007a52 <forward_lite_dense_if32of32wf32_lut4+0x23a>
 8007858:	469b      	mov	fp, r3
 800785a:	e7f7      	b.n	800784c <forward_lite_dense_if32of32wf32_lut4+0x34>
 800785c:	eb05 098e 	add.w	r9, r5, lr, lsl #2
 8007860:	9b02      	ldr	r3, [sp, #8]
 8007862:	454d      	cmp	r5, r9
 8007864:	f080 80af 	bcs.w	80079c6 <forward_lite_dense_if32of32wf32_lut4+0x1ae>
 8007868:	ea4f 0058 	mov.w	r0, r8, lsr #1
 800786c:	0040      	lsls	r0, r0, #1
 800786e:	9000      	str	r0, [sp, #0]
 8007870:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
 8007874:	4659      	mov	r1, fp
 8007876:	9800      	ldr	r0, [sp, #0]
 8007878:	4652      	mov	r2, sl
 800787a:	f1bc 0f00 	cmp.w	ip, #0
 800787e:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
 8007882:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 8007a68 <.text_6>
 8007886:	d059      	beq.n	800793c <forward_lite_dense_if32of32wf32_lut4+0x124>
 8007888:	ea4f 000c 	mov.w	r0, ip
 800788c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007890:	ed92 8a00 	vldr	s16, [r2]
 8007894:	ed92 7a01 	vldr	s14, [r2, #4]
 8007898:	ed92 6a02 	vldr	s12, [r2, #8]
 800789c:	ed92 5a03 	vldr	s10, [r2, #12]
 80078a0:	ed92 4a04 	vldr	s8, [r2, #16]
 80078a4:	ed92 3a05 	vldr	s6, [r2, #20]
 80078a8:	ed92 2a06 	vldr	s4, [r2, #24]
 80078ac:	ed92 1a07 	vldr	s2, [r2, #28]
 80078b0:	f3c6 6703 	ubfx	r7, r6, #24, #4
 80078b4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80078b8:	3220      	adds	r2, #32
 80078ba:	edd7 0a00 	vldr	s1, [r7]
 80078be:	0f37      	lsrs	r7, r6, #28
 80078c0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80078c4:	edd7 1a00 	vldr	s3, [r7]
 80078c8:	f3c6 4703 	ubfx	r7, r6, #16, #4
 80078cc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80078d0:	edd7 2a00 	vldr	s5, [r7]
 80078d4:	0237      	lsls	r7, r6, #8
 80078d6:	0e3f      	lsrs	r7, r7, #24
 80078d8:	093f      	lsrs	r7, r7, #4
 80078da:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80078de:	edd7 3a00 	vldr	s7, [r7]
 80078e2:	0a37      	lsrs	r7, r6, #8
 80078e4:	f007 070f 	and.w	r7, r7, #15
 80078e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80078ec:	edd7 4a00 	vldr	s9, [r7]
 80078f0:	0437      	lsls	r7, r6, #16
 80078f2:	0e3f      	lsrs	r7, r7, #24
 80078f4:	093f      	lsrs	r7, r7, #4
 80078f6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80078fa:	edd7 5a00 	vldr	s11, [r7]
 80078fe:	f006 070f 	and.w	r7, r6, #15
 8007902:	f006 06ff 	and.w	r6, r6, #255	@ 0xff
 8007906:	0936      	lsrs	r6, r6, #4
 8007908:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800790c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007910:	edd6 7a00 	vldr	s15, [r6]
 8007914:	edd7 6a00 	vldr	s13, [r7]
 8007918:	ee07 0a88 	vmla.f32	s0, s15, s16
 800791c:	ee06 0a87 	vmla.f32	s0, s13, s14
 8007920:	ee05 0a86 	vmla.f32	s0, s11, s12
 8007924:	ee04 0a85 	vmla.f32	s0, s9, s10
 8007928:	ee03 0a84 	vmla.f32	s0, s7, s8
 800792c:	ee02 0a83 	vmla.f32	s0, s5, s6
 8007930:	ee01 0a82 	vmla.f32	s0, s3, s4
 8007934:	1e40      	subs	r0, r0, #1
 8007936:	ee00 0a81 	vmla.f32	s0, s1, s2
 800793a:	d1a7      	bne.n	800788c <forward_lite_dense_if32of32wf32_lut4+0x74>
 800793c:	455a      	cmp	r2, fp
 800793e:	d22f      	bcs.n	80079a0 <forward_lite_dense_if32of32wf32_lut4+0x188>
 8007940:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007944:	edd2 0a00 	vldr	s1, [r2]
 8007948:	edd2 1a01 	vldr	s3, [r2, #4]
 800794c:	f000 060f 	and.w	r6, r0, #15
 8007950:	0900      	lsrs	r0, r0, #4
 8007952:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8007956:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 800795a:	ed90 2a00 	vldr	s4, [r0]
 800795e:	ed97 1a00 	vldr	s2, [r7]
 8007962:	3208      	adds	r2, #8
 8007964:	ee02 0a20 	vmla.f32	s0, s4, s1
 8007968:	455a      	cmp	r2, fp
 800796a:	ee01 0a21 	vmla.f32	s0, s2, s3
 800796e:	d217      	bcs.n	80079a0 <forward_lite_dense_if32of32wf32_lut4+0x188>
 8007970:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007974:	ed92 2a00 	vldr	s4, [r2]
 8007978:	ed92 1a01 	vldr	s2, [r2, #4]
 800797c:	f000 060f 	and.w	r6, r0, #15
 8007980:	0900      	lsrs	r0, r0, #4
 8007982:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8007986:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 800798a:	edd0 1a00 	vldr	s3, [r0]
 800798e:	edd7 0a00 	vldr	s1, [r7]
 8007992:	3208      	adds	r2, #8
 8007994:	ee01 0a82 	vmla.f32	s0, s3, s4
 8007998:	455a      	cmp	r2, fp
 800799a:	ee00 0a81 	vmla.f32	s0, s1, s2
 800799e:	d3cf      	bcc.n	8007940 <forward_lite_dense_if32of32wf32_lut4+0x128>
 80079a0:	b154      	cbz	r4, 80079b8 <forward_lite_dense_if32of32wf32_lut4+0x1a0>
 80079a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80079a6:	ed92 1a00 	vldr	s2, [r2]
 80079aa:	0900      	lsrs	r0, r0, #4
 80079ac:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80079b0:	edd0 0a00 	vldr	s1, [r0]
 80079b4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80079b8:	ed85 0a00 	vstr	s0, [r5]
 80079bc:	1d2d      	adds	r5, r5, #4
 80079be:	454d      	cmp	r5, r9
 80079c0:	f4ff af59 	bcc.w	8007876 <forward_lite_dense_if32of32wf32_lut4+0x5e>
 80079c4:	468b      	mov	fp, r1
 80079c6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80079c8:	2800      	cmp	r0, #0
 80079ca:	bf1f      	itttt	ne
 80079cc:	ea4f 018e 	movne.w	r1, lr, lsl #2
 80079d0:	4249      	negne	r1, r1
 80079d2:	186a      	addne	r2, r5, r1
 80079d4:	f1be 0f00 	cmpne.w	lr, #0
 80079d8:	eb0a 0a88 	add.w	sl, sl, r8, lsl #2
 80079dc:	d039      	beq.n	8007a52 <forward_lite_dense_if32of32wf32_lut4+0x23a>
 80079de:	4603      	mov	r3, r0
 80079e0:	f01e 0003 	ands.w	r0, lr, #3
 80079e4:	f000 800d 	beq.w	8007a02 <forward_lite_dense_if32of32wf32_lut4+0x1ea>
 80079e8:	ed92 0a00 	vldr	s0, [r2]
 80079ec:	edd3 0a00 	vldr	s1, [r3]
 80079f0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80079f4:	edc2 0a00 	vstr	s1, [r2]
 80079f8:	1e40      	subs	r0, r0, #1
 80079fa:	1d1b      	adds	r3, r3, #4
 80079fc:	1d12      	adds	r2, r2, #4
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d1f2      	bne.n	80079e8 <forward_lite_dense_if32of32wf32_lut4+0x1d0>
 8007a02:	ea5f 009e 	movs.w	r0, lr, lsr #2
 8007a06:	d024      	beq.n	8007a52 <forward_lite_dense_if32of32wf32_lut4+0x23a>
 8007a08:	ed92 1a00 	vldr	s2, [r2]
 8007a0c:	ed93 0a00 	vldr	s0, [r3]
 8007a10:	ee31 0a00 	vadd.f32	s0, s2, s0
 8007a14:	ed82 0a00 	vstr	s0, [r2]
 8007a18:	edd2 1a01 	vldr	s3, [r2, #4]
 8007a1c:	edd3 0a01 	vldr	s1, [r3, #4]
 8007a20:	ed92 1a02 	vldr	s2, [r2, #8]
 8007a24:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8007a28:	ed82 0a01 	vstr	s0, [r2, #4]
 8007a2c:	1e40      	subs	r0, r0, #1
 8007a2e:	ed93 0a02 	vldr	s0, [r3, #8]
 8007a32:	edd2 0a03 	vldr	s1, [r2, #12]
 8007a36:	ee31 0a00 	vadd.f32	s0, s2, s0
 8007a3a:	ed82 0a02 	vstr	s0, [r2, #8]
 8007a3e:	edd3 1a03 	vldr	s3, [r3, #12]
 8007a42:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8007a46:	ed82 0a03 	vstr	s0, [r2, #12]
 8007a4a:	3310      	adds	r3, #16
 8007a4c:	3210      	adds	r2, #16
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d1da      	bne.n	8007a08 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8007a52:	9901      	ldr	r1, [sp, #4]
 8007a54:	428d      	cmp	r5, r1
 8007a56:	f4ff af01 	bcc.w	800785c <forward_lite_dense_if32of32wf32_lut4+0x44>
 8007a5a:	b004      	add	sp, #16
 8007a5c:	ecbd 8b02 	vpop	{d8}
 8007a60:	b001      	add	sp, #4
 8007a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007a68 <.text_6>:
 8007a68:	00000000 	.word	0x00000000

08007a6c <forward_lite_dense_if32of32wf32_lut8>:
 8007a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a70:	b081      	sub	sp, #4
 8007a72:	4607      	mov	r7, r0
 8007a74:	ed2d 8b02 	vpush	{d8}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8007a7c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007a7e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8007a80:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 8007a84:	4368      	muls	r0, r5
 8007a86:	468a      	mov	sl, r1
 8007a88:	4616      	mov	r6, r2
 8007a8a:	eb07 0880 	add.w	r8, r7, r0, lsl #2
 8007a8e:	b174      	cbz	r4, 8007aae <forward_lite_dense_if32of32wf32_lut8+0x42>
 8007a90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a94:	4621      	mov	r1, r4
 8007a96:	4618      	mov	r0, r3
 8007a98:	f004 f988 	bl	800bdac <st_int8_copy>
 8007a9c:	9601      	str	r6, [sp, #4]
 8007a9e:	46ce      	mov	lr, r9
 8007aa0:	46d4      	mov	ip, sl
 8007aa2:	462b      	mov	r3, r5
 8007aa4:	f8cd 8000 	str.w	r8, [sp]
 8007aa8:	f00e 0907 	and.w	r9, lr, #7
 8007aac:	e0f9      	b.n	8007ca2 <forward_lite_dense_if32of32wf32_lut8+0x236>
 8007aae:	461c      	mov	r4, r3
 8007ab0:	e7f4      	b.n	8007a9c <forward_lite_dense_if32of32wf32_lut8+0x30>
 8007ab2:	bf00      	nop
 8007ab4:	eb07 0583 	add.w	r5, r7, r3, lsl #2
 8007ab8:	9e01      	ldr	r6, [sp, #4]
 8007aba:	42af      	cmp	r7, r5
 8007abc:	f080 80ad 	bcs.w	8007c1a <forward_lite_dense_if32of32wf32_lut8+0x1ae>
 8007ac0:	ea4f 01de 	mov.w	r1, lr, lsr #3
 8007ac4:	2900      	cmp	r1, #0
 8007ac6:	4660      	mov	r0, ip
 8007ac8:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 8007cb8 <.text_8>
 8007acc:	d05b      	beq.n	8007b86 <forward_lite_dense_if32of32wf32_lut8+0x11a>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	ea4f 0001 	mov.w	r0, r1
 8007ad4:	ed92 8a00 	vldr	s16, [r2]
 8007ad8:	ed92 7a01 	vldr	s14, [r2, #4]
 8007adc:	ed92 6a02 	vldr	s12, [r2, #8]
 8007ae0:	ed92 5a03 	vldr	s10, [r2, #12]
 8007ae4:	f8d6 8000 	ldr.w	r8, [r6]
 8007ae8:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8007aec:	ed92 4a04 	vldr	s8, [r2, #16]
 8007af0:	ed92 3a05 	vldr	s6, [r2, #20]
 8007af4:	ed92 2a06 	vldr	s4, [r2, #24]
 8007af8:	ed92 1a07 	vldr	s2, [r2, #28]
 8007afc:	ea4f 6b1a 	mov.w	fp, sl, lsr #24
 8007b00:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8007b04:	3608      	adds	r6, #8
 8007b06:	eddb 0a00 	vldr	s1, [fp]
 8007b0a:	f3ca 4b07 	ubfx	fp, sl, #16, #8
 8007b0e:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8007b12:	3220      	adds	r2, #32
 8007b14:	eddb 1a00 	vldr	s3, [fp]
 8007b18:	f3ca 2b07 	ubfx	fp, sl, #8, #8
 8007b1c:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 8007b20:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8007b24:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8007b28:	edda 3a00 	vldr	s7, [sl]
 8007b2c:	eddb 2a00 	vldr	s5, [fp]
 8007b30:	ea4f 6a18 	mov.w	sl, r8, lsr #24
 8007b34:	eb04 0b8a 	add.w	fp, r4, sl, lsl #2
 8007b38:	f3c8 4a07 	ubfx	sl, r8, #16, #8
 8007b3c:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8007b40:	eddb 4a00 	vldr	s9, [fp]
 8007b44:	edda 5a00 	vldr	s11, [sl]
 8007b48:	f3c8 2a07 	ubfx	sl, r8, #8, #8
 8007b4c:	f008 08ff 	and.w	r8, r8, #255	@ 0xff
 8007b50:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8007b54:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8007b58:	edd8 7a00 	vldr	s15, [r8]
 8007b5c:	edda 6a00 	vldr	s13, [sl]
 8007b60:	ee07 0a88 	vmla.f32	s0, s15, s16
 8007b64:	ee06 0a87 	vmla.f32	s0, s13, s14
 8007b68:	ee05 0a86 	vmla.f32	s0, s11, s12
 8007b6c:	ee04 0a85 	vmla.f32	s0, s9, s10
 8007b70:	ee03 0a84 	vmla.f32	s0, s7, s8
 8007b74:	ee02 0a83 	vmla.f32	s0, s5, s6
 8007b78:	ee01 0a82 	vmla.f32	s0, s3, s4
 8007b7c:	1e40      	subs	r0, r0, #1
 8007b7e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8007b82:	d1a7      	bne.n	8007ad4 <forward_lite_dense_if32of32wf32_lut8+0x68>
 8007b84:	4610      	mov	r0, r2
 8007b86:	f01e 0f07 	tst.w	lr, #7
 8007b8a:	d040      	beq.n	8007c0e <forward_lite_dense_if32of32wf32_lut8+0x1a2>
 8007b8c:	f019 0203 	ands.w	r2, r9, #3
 8007b90:	f000 800d 	beq.w	8007bae <forward_lite_dense_if32of32wf32_lut8+0x142>
 8007b94:	f816 ab01 	ldrb.w	sl, [r6], #1
 8007b98:	ed90 1a00 	vldr	s2, [r0]
 8007b9c:	eb04 0b8a 	add.w	fp, r4, sl, lsl #2
 8007ba0:	1d00      	adds	r0, r0, #4
 8007ba2:	eddb 0a00 	vldr	s1, [fp]
 8007ba6:	1e52      	subs	r2, r2, #1
 8007ba8:	ee00 0a81 	vmla.f32	s0, s1, s2
 8007bac:	d1f2      	bne.n	8007b94 <forward_lite_dense_if32of32wf32_lut8+0x128>
 8007bae:	ea5f 0899 	movs.w	r8, r9, lsr #2
 8007bb2:	4642      	mov	r2, r8
 8007bb4:	f000 802b 	beq.w	8007c0e <forward_lite_dense_if32of32wf32_lut8+0x1a2>
 8007bb8:	f816 ab01 	ldrb.w	sl, [r6], #1
 8007bbc:	f816 8b01 	ldrb.w	r8, [r6], #1
 8007bc0:	ed90 1a00 	vldr	s2, [r0]
 8007bc4:	edd0 0a01 	vldr	s1, [r0, #4]
 8007bc8:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8007bcc:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8007bd0:	ed9a 2a00 	vldr	s4, [sl]
 8007bd4:	edd8 1a00 	vldr	s3, [r8]
 8007bd8:	f816 8b01 	ldrb.w	r8, [r6], #1
 8007bdc:	f816 ab01 	ldrb.w	sl, [r6], #1
 8007be0:	ee02 0a01 	vmla.f32	s0, s4, s2
 8007be4:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8007be8:	ee01 0aa0 	vmla.f32	s0, s3, s1
 8007bec:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8007bf0:	edd0 0a02 	vldr	s1, [r0, #8]
 8007bf4:	ed98 2a00 	vldr	s4, [r8]
 8007bf8:	ed90 1a03 	vldr	s2, [r0, #12]
 8007bfc:	edda 1a00 	vldr	s3, [sl]
 8007c00:	3010      	adds	r0, #16
 8007c02:	ee02 0a20 	vmla.f32	s0, s4, s1
 8007c06:	1e52      	subs	r2, r2, #1
 8007c08:	ee01 0a81 	vmla.f32	s0, s3, s2
 8007c0c:	d1d4      	bne.n	8007bb8 <forward_lite_dense_if32of32wf32_lut8+0x14c>
 8007c0e:	ed87 0a00 	vstr	s0, [r7]
 8007c12:	1d3f      	adds	r7, r7, #4
 8007c14:	42af      	cmp	r7, r5
 8007c16:	f4ff af55 	bcc.w	8007ac4 <forward_lite_dense_if32of32wf32_lut8+0x58>
 8007c1a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	bf1f      	itttt	ne
 8007c20:	0099      	lslne	r1, r3, #2
 8007c22:	4249      	negne	r1, r1
 8007c24:	187a      	addne	r2, r7, r1
 8007c26:	2b00      	cmpne	r3, #0
 8007c28:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8007c2c:	d039      	beq.n	8007ca2 <forward_lite_dense_if32of32wf32_lut8+0x236>
 8007c2e:	4605      	mov	r5, r0
 8007c30:	f013 0003 	ands.w	r0, r3, #3
 8007c34:	f000 800d 	beq.w	8007c52 <forward_lite_dense_if32of32wf32_lut8+0x1e6>
 8007c38:	ed92 0a00 	vldr	s0, [r2]
 8007c3c:	edd5 0a00 	vldr	s1, [r5]
 8007c40:	ee70 0a20 	vadd.f32	s1, s0, s1
 8007c44:	edc2 0a00 	vstr	s1, [r2]
 8007c48:	1e40      	subs	r0, r0, #1
 8007c4a:	1d2d      	adds	r5, r5, #4
 8007c4c:	1d12      	adds	r2, r2, #4
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d1f2      	bne.n	8007c38 <forward_lite_dense_if32of32wf32_lut8+0x1cc>
 8007c52:	0898      	lsrs	r0, r3, #2
 8007c54:	f000 8025 	beq.w	8007ca2 <forward_lite_dense_if32of32wf32_lut8+0x236>
 8007c58:	ed92 1a00 	vldr	s2, [r2]
 8007c5c:	ed95 0a00 	vldr	s0, [r5]
 8007c60:	ee31 0a00 	vadd.f32	s0, s2, s0
 8007c64:	ed82 0a00 	vstr	s0, [r2]
 8007c68:	edd2 1a01 	vldr	s3, [r2, #4]
 8007c6c:	edd5 0a01 	vldr	s1, [r5, #4]
 8007c70:	ed92 1a02 	vldr	s2, [r2, #8]
 8007c74:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8007c78:	ed82 0a01 	vstr	s0, [r2, #4]
 8007c7c:	1e40      	subs	r0, r0, #1
 8007c7e:	ed95 0a02 	vldr	s0, [r5, #8]
 8007c82:	edd2 0a03 	vldr	s1, [r2, #12]
 8007c86:	ee31 0a00 	vadd.f32	s0, s2, s0
 8007c8a:	ed82 0a02 	vstr	s0, [r2, #8]
 8007c8e:	edd5 1a03 	vldr	s3, [r5, #12]
 8007c92:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8007c96:	ed82 0a03 	vstr	s0, [r2, #12]
 8007c9a:	3510      	adds	r5, #16
 8007c9c:	3210      	adds	r2, #16
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d1da      	bne.n	8007c58 <forward_lite_dense_if32of32wf32_lut8+0x1ec>
 8007ca2:	9900      	ldr	r1, [sp, #0]
 8007ca4:	428f      	cmp	r7, r1
 8007ca6:	f4ff af05 	bcc.w	8007ab4 <forward_lite_dense_if32of32wf32_lut8+0x48>
 8007caa:	b002      	add	sp, #8
 8007cac:	ecbd 8b02 	vpop	{d8}
 8007cb0:	b001      	add	sp, #4
 8007cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007cb8 <.text_8>:
 8007cb8:	00000000 	.word	0x00000000

08007cbc <ai_math_sqrt>:
 8007cbc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc4:	db02      	blt.n	8007ccc <ai_math_sqrt+0x10>
 8007cc6:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007cca:	4770      	bx	lr
 8007ccc:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 8007eb0 <.text_16>
 8007cd0:	4770      	bx	lr
	...

08007cd4 <ai_math_erfinv>:
 8007cd4:	b500      	push	{lr}
 8007cd6:	b081      	sub	sp, #4
 8007cd8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8007cdc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007ce0:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8007ce4:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8007ce8:	ed2d 8b02 	vpush	{d8}
 8007cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf0:	ee30 0a01 	vadd.f32	s0, s0, s2
 8007cf4:	bfcc      	ite	gt
 8007cf6:	ed9f 8a6f 	vldrgt	s16, [pc, #444]	@ 8007eb4 <.text_17>
 8007cfa:	ed9f 8a6f 	vldrle	s16, [pc, #444]	@ 8007eb8 <.text_18>
 8007cfe:	ee20 0a80 	vmul.f32	s0, s1, s0
 8007d02:	f00f faf7 	bl	80172f4 <logf>
 8007d06:	eef0 0a40 	vmov.f32	s1, s0
 8007d0a:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 8007d0e:	eddf 8ac8 	vldr	s17, [pc, #800]	@ 8008030 <.text_20>
 8007d12:	ee40 8aa1 	vmla.f32	s17, s1, s3
 8007d16:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8007d1a:	ed9f 1ac6 	vldr	s2, [pc, #792]	@ 8008034 <.text_21>
 8007d1e:	ee00 0ac1 	vmls.f32	s0, s1, s2
 8007d22:	f7ff ffcb 	bl	8007cbc <ai_math_sqrt>
 8007d26:	ee30 0a68 	vsub.f32	s0, s0, s17
 8007d2a:	f7ff ffc7 	bl	8007cbc <ai_math_sqrt>
 8007d2e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8007d32:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007d36:	ecbd 8b02 	vpop	{d8}
 8007d3a:	b001      	add	sp, #4
 8007d3c:	bd00      	pop	{pc}

08007d3e <ai_math_exp>:
 8007d3e:	f00f ba83 	b.w	8017248 <expf>

08007d42 <ai_math_pow>:
 8007d42:	f00f bb05 	b.w	8017350 <powf>

08007d46 <ai_math_tanh>:
 8007d46:	f00f bf57 	b.w	8017bf8 <tanhf>

08007d4a <ai_math_cosh>:
 8007d4a:	f00f ba55 	b.w	80171f8 <coshf>
	...

08007d50 <ai_math_relu>:
 8007d50:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d58:	bf98      	it	ls
 8007d5a:	ed9f 0ab7 	vldrls	s0, [pc, #732]	@ 8008038 <.text_22>
 8007d5e:	4770      	bx	lr

08007d60 <ai_math_prelu>:
 8007d60:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d68:	bf98      	it	ls
 8007d6a:	ee20 0a20 	vmulls.f32	s0, s0, s1
 8007d6e:	4770      	bx	lr

08007d70 <ai_math_sigmoid>:
 8007d70:	b500      	push	{lr}
 8007d72:	b081      	sub	sp, #4
 8007d74:	eeb1 0a40 	vneg.f32	s0, s0
 8007d78:	f00f fa66 	bl	8017248 <expf>
 8007d7c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8007d80:	ee30 0a20 	vadd.f32	s0, s0, s1
 8007d84:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8007d88:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8007d8c:	b001      	add	sp, #4
 8007d8e:	bd00      	pop	{pc}

08007d90 <ai_math_hard_sigmoid>:
 8007d90:	eef0 0a40 	vmov.f32	s1, s0
 8007d94:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 800803c <.text_23>
 8007d98:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8007d9c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8007da0:	eddf 0aa7 	vldr	s1, [pc, #668]	@ 8008040 <.text_24>
 8007da4:	eeb4 0a60 	vcmp.f32	s0, s1
 8007da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dac:	da07      	bge.n	8007dbe <ai_math_hard_sigmoid+0x2e>
 8007dae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db6:	d504      	bpl.n	8007dc2 <ai_math_hard_sigmoid+0x32>
 8007db8:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8008038 <.text_22>
 8007dbc:	4770      	bx	lr
 8007dbe:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007dc2:	4770      	bx	lr

08007dc4 <ai_math_swish>:
 8007dc4:	b500      	push	{lr}
 8007dc6:	b081      	sub	sp, #4
 8007dc8:	ed2d 8b02 	vpush	{d8}
 8007dcc:	eeb0 8a40 	vmov.f32	s16, s0
 8007dd0:	eeb1 0a48 	vneg.f32	s0, s16
 8007dd4:	f00f fa38 	bl	8017248 <expf>
 8007dd8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8007ddc:	ee30 0a20 	vadd.f32	s0, s0, s1
 8007de0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8007de4:	ee81 1a00 	vdiv.f32	s2, s2, s0
 8007de8:	ee21 0a08 	vmul.f32	s0, s2, s16
 8007dec:	ecbd 8b02 	vpop	{d8}
 8007df0:	b001      	add	sp, #4
 8007df2:	bd00      	pop	{pc}

08007df4 <ai_math_hard_swish>:
 8007df4:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 8008044 <.text_25>
 8007df8:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8007dfc:	ee40 0a01 	vmla.f32	s1, s0, s2
 8007e00:	eddf 1a8f 	vldr	s3, [pc, #572]	@ 8008040 <.text_24>
 8007e04:	eef4 0a61 	vcmp.f32	s1, s3
 8007e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0c:	da09      	bge.n	8007e22 <ai_math_hard_swish+0x2e>
 8007e0e:	eef5 0a40 	vcmp.f32	s1, #0.0
 8007e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e16:	d506      	bpl.n	8007e26 <ai_math_hard_swish+0x32>
 8007e18:	eddf 0a87 	vldr	s1, [pc, #540]	@ 8008038 <.text_22>
 8007e1c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8007e20:	4770      	bx	lr
 8007e22:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8007e26:	ee20 0a20 	vmul.f32	s0, s0, s1
 8007e2a:	4770      	bx	lr

08007e2c <ai_math_gelu>:
 8007e2c:	b500      	push	{lr}
 8007e2e:	b081      	sub	sp, #4
 8007e30:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8007e34:	ed2d 8b02 	vpush	{d8}
 8007e38:	ee20 8a20 	vmul.f32	s16, s0, s1
 8007e3c:	b2c0      	uxtb	r0, r0
 8007e3e:	b1c8      	cbz	r0, 8007e74 <ai_math_gelu+0x48>
 8007e40:	eddf 0a81 	vldr	s1, [pc, #516]	@ 8008048 <.text_26>
 8007e44:	eef1 0ae0 	vsqrt.f32	s1, s1
 8007e48:	ee20 1a00 	vmul.f32	s2, s0, s0
 8007e4c:	ee21 1a00 	vmul.f32	s2, s2, s0
 8007e50:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 800804c <.text_27>
 8007e54:	ee01 0a21 	vmla.f32	s0, s2, s3
 8007e58:	ee20 0a20 	vmul.f32	s0, s0, s1
 8007e5c:	f00f fecc 	bl	8017bf8 <tanhf>
 8007e60:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8007e64:	ee70 0a20 	vadd.f32	s1, s0, s1
 8007e68:	ee28 0a20 	vmul.f32	s0, s16, s1
 8007e6c:	ecbd 8b02 	vpop	{d8}
 8007e70:	b001      	add	sp, #4
 8007e72:	bd00      	pop	{pc}
 8007e74:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8007e78:	eef1 0ae0 	vsqrt.f32	s1, s1
 8007e7c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8007e80:	f00f fc68 	bl	8017754 <erff>
 8007e84:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8007e88:	ee30 0a20 	vadd.f32	s0, s0, s1
 8007e8c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007e90:	ecbd 8b02 	vpop	{d8}
 8007e94:	b001      	add	sp, #4
 8007e96:	bd00      	pop	{pc}

08007e98 <ai_math_sign>:
 8007e98:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea0:	bfcc      	ite	gt
 8007ea2:	ed9f 0a04 	vldrgt	s0, [pc, #16]	@ 8007eb4 <.text_17>
 8007ea6:	ed9f 0a04 	vldrle	s0, [pc, #16]	@ 8007eb8 <.text_18>
 8007eaa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8007eae:	4770      	bx	lr

08007eb0 <.text_16>:
 8007eb0:	7fffffff 	.word	0x7fffffff

08007eb4 <.text_17>:
 8007eb4:	00000001 	.word	0x00000001

08007eb8 <.text_18>:
 8007eb8:	ffffffff 	.word	0xffffffff

08007ebc <ai_div_buffer_INT8>:
 8007ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec0:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 8007ec4:	9e08      	ldr	r6, [sp, #32]
 8007ec6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007ec8:	9d06      	ldr	r5, [sp, #24]
 8007eca:	9c07      	ldr	r4, [sp, #28]
 8007ecc:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8007ed0:	ed96 0a00 	vldr	s0, [r6]
 8007ed4:	edd7 0a00 	vldr	s1, [r7]
 8007ed8:	f994 4000 	ldrsb.w	r4, [r4]
 8007edc:	f99e e000 	ldrsb.w	lr, [lr]
 8007ee0:	ed95 1a00 	vldr	s2, [r5]
 8007ee4:	f99c 5000 	ldrsb.w	r5, [ip]
 8007ee8:	4680      	mov	r8, r0
 8007eea:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007eec:	ee60 0a20 	vmul.f32	s1, s0, s1
 8007ef0:	ee01 5a90 	vmov	s3, r5
 8007ef4:	eec1 0a20 	vdiv.f32	s1, s2, s1
 8007ef8:	eeb8 0ae1 	vcvt.f32.s32	s0, s3
 8007efc:	bb80      	cbnz	r0, 8007f60 <ai_div_buffer_INT8+0xa4>
 8007efe:	b36b      	cbz	r3, 8007f5c <ai_div_buffer_INT8+0xa0>
 8007f00:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 8008050 <.text_28>
 8007f04:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 8007f08:	f911 0b01 	ldrsb.w	r0, [r1], #1
 8007f0c:	f912 5b01 	ldrsb.w	r5, [r2], #1
 8007f10:	1b00      	subs	r0, r0, r4
 8007f12:	ee02 0a10 	vmov	s4, r0
 8007f16:	eba5 050e 	sub.w	r5, r5, lr
 8007f1a:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8007f1e:	ee02 5a90 	vmov	s5, r5
 8007f22:	ee22 2a20 	vmul.f32	s4, s4, s1
 8007f26:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8007f2a:	eec2 2a22 	vdiv.f32	s5, s4, s5
 8007f2e:	ee32 2a80 	vadd.f32	s4, s5, s0
 8007f32:	eeb5 2a40 	vcmp.f32	s4, #0.0
 8007f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3a:	bfcc      	ite	gt
 8007f3c:	eef0 2a61 	vmovgt.f32	s5, s3
 8007f40:	eef0 2a41 	vmovle.f32	s5, s2
 8007f44:	ee32 2a22 	vadd.f32	s4, s4, s5
 8007f48:	eebd 2ac2 	vcvt.s32.f32	s4, s4
 8007f4c:	ee12 0a10 	vmov	r0, s4
 8007f50:	f300 0007 	ssat	r0, #8, r0
 8007f54:	1e5b      	subs	r3, r3, #1
 8007f56:	f808 0b01 	strb.w	r0, [r8], #1
 8007f5a:	d1d5      	bne.n	8007f08 <ai_div_buffer_INT8+0x4c>
 8007f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f60:	2801      	cmp	r0, #1
 8007f62:	d132      	bne.n	8007fca <ai_div_buffer_INT8+0x10e>
 8007f64:	f991 0000 	ldrsb.w	r0, [r1]
 8007f68:	1b04      	subs	r4, r0, r4
 8007f6a:	ee01 4a10 	vmov	s2, r4
 8007f6e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	ee21 2a20 	vmul.f32	s4, s2, s1
 8007f78:	f43f aff0 	beq.w	8007f5c <ai_div_buffer_INT8+0xa0>
 8007f7c:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8008050 <.text_28>
 8007f80:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8007f84:	f912 0b01 	ldrsb.w	r0, [r2], #1
 8007f88:	eba0 000e 	sub.w	r0, r0, lr
 8007f8c:	ee01 0a90 	vmov	s3, r0
 8007f90:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8007f94:	eec2 1a21 	vdiv.f32	s3, s4, s3
 8007f98:	ee71 1a80 	vadd.f32	s3, s3, s0
 8007f9c:	eef5 1a40 	vcmp.f32	s3, #0.0
 8007fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa4:	bfcc      	ite	gt
 8007fa6:	eef0 2a41 	vmovgt.f32	s5, s2
 8007faa:	eef0 2a60 	vmovle.f32	s5, s1
 8007fae:	ee71 2aa2 	vadd.f32	s5, s3, s5
 8007fb2:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 8007fb6:	ee12 1a90 	vmov	r1, s5
 8007fba:	f301 0007 	ssat	r0, #8, r1
 8007fbe:	1e5b      	subs	r3, r3, #1
 8007fc0:	f808 0b01 	strb.w	r0, [r8], #1
 8007fc4:	d1de      	bne.n	8007f84 <ai_div_buffer_INT8+0xc8>
 8007fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fca:	f992 0000 	ldrsb.w	r0, [r2]
 8007fce:	eba0 0e0e 	sub.w	lr, r0, lr
 8007fd2:	ee01 ea10 	vmov	s2, lr
 8007fd6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	ee80 2a81 	vdiv.f32	s4, s1, s2
 8007fe0:	f43f afbc 	beq.w	8007f5c <ai_div_buffer_INT8+0xa0>
 8007fe4:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8008050 <.text_28>
 8007fe8:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8007fec:	f911 0b01 	ldrsb.w	r0, [r1], #1
 8007ff0:	1b00      	subs	r0, r0, r4
 8007ff2:	ee01 0a90 	vmov	s3, r0
 8007ff6:	eef8 2ae1 	vcvt.f32.s32	s5, s3
 8007ffa:	eef0 1a40 	vmov.f32	s3, s0
 8007ffe:	ee42 1a82 	vmla.f32	s3, s5, s4
 8008002:	eef5 1a40 	vcmp.f32	s3, #0.0
 8008006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800a:	bfcc      	ite	gt
 800800c:	eef0 2a41 	vmovgt.f32	s5, s2
 8008010:	eef0 2a60 	vmovle.f32	s5, s1
 8008014:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8008018:	eebd 3ac3 	vcvt.s32.f32	s6, s6
 800801c:	ee13 2a10 	vmov	r2, s6
 8008020:	f302 0007 	ssat	r0, #8, r2
 8008024:	1e5b      	subs	r3, r3, #1
 8008026:	f808 0b01 	strb.w	r0, [r8], #1
 800802a:	d1df      	bne.n	8007fec <ai_div_buffer_INT8+0x130>
 800802c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008030 <.text_20>:
 8008030:	408a9582 	.word	0x408a9582

08008034 <.text_21>:
 8008034:	40d9afe4 	.word	0x40d9afe4

08008038 <.text_22>:
 8008038:	00000000 	.word	0x00000000

0800803c <.text_23>:
 800803c:	3e4ccccd 	.word	0x3e4ccccd

08008040 <.text_24>:
 8008040:	3f800001 	.word	0x3f800001

08008044 <.text_25>:
 8008044:	3e2aaaab 	.word	0x3e2aaaab

08008048 <.text_26>:
 8008048:	3f22f983 	.word	0x3f22f983

0800804c <.text_27>:
 800804c:	3d372713 	.word	0x3d372713

08008050 <.text_28>:
 8008050:	befffffc 	.word	0xbefffffc

08008054 <ai_div_buffer_UINT8>:
 8008054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008056:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 800805a:	9f07      	ldr	r7, [sp, #28]
 800805c:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8008060:	9e05      	ldr	r6, [sp, #20]
 8008062:	9c06      	ldr	r4, [sp, #24]
 8008064:	9d08      	ldr	r5, [sp, #32]
 8008066:	ed97 0a00 	vldr	s0, [r7]
 800806a:	eddc 0a00 	vldr	s1, [ip]
 800806e:	ed96 1a00 	vldr	s2, [r6]
 8008072:	f89e 6000 	ldrb.w	r6, [lr]
 8008076:	ee60 0a20 	vmul.f32	s1, s0, s1
 800807a:	ee01 6a90 	vmov	s3, r6
 800807e:	7824      	ldrb	r4, [r4, #0]
 8008080:	782d      	ldrb	r5, [r5, #0]
 8008082:	ee81 0a20 	vdiv.f32	s0, s2, s1
 8008086:	eef8 1a61 	vcvt.f32.u32	s3, s3
 800808a:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800808e:	ee71 0a82 	vadd.f32	s1, s3, s4
 8008092:	b1eb      	cbz	r3, 80080d0 <ai_div_buffer_UINT8+0x7c>
 8008094:	f811 6b01 	ldrb.w	r6, [r1], #1
 8008098:	f812 7b01 	ldrb.w	r7, [r2], #1
 800809c:	1b36      	subs	r6, r6, r4
 800809e:	ee01 6a10 	vmov	s2, r6
 80080a2:	1b7f      	subs	r7, r7, r5
 80080a4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80080a8:	ee01 7a90 	vmov	s3, r7
 80080ac:	ee21 1a00 	vmul.f32	s2, s2, s0
 80080b0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80080b4:	eec1 1a21 	vdiv.f32	s3, s2, s3
 80080b8:	ee31 1aa0 	vadd.f32	s2, s3, s1
 80080bc:	eebd 2ac1 	vcvt.s32.f32	s4, s2
 80080c0:	ee12 ca10 	vmov	ip, s4
 80080c4:	f38c 0608 	usat	r6, #8, ip
 80080c8:	1e5b      	subs	r3, r3, #1
 80080ca:	f800 6b01 	strb.w	r6, [r0], #1
 80080ce:	d1e1      	bne.n	8008094 <ai_div_buffer_UINT8+0x40>
 80080d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080080d4 <ai_max_buffer_INT8>:
 80080d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d8:	9d06      	ldr	r5, [sp, #24]
 80080da:	9e07      	ldr	r6, [sp, #28]
 80080dc:	9f08      	ldr	r7, [sp, #32]
 80080de:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 80080e2:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 80080e6:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 80080ea:	ed95 1a00 	vldr	s2, [r5]
 80080ee:	f996 5000 	ldrsb.w	r5, [r6]
 80080f2:	edd7 1a00 	vldr	s3, [r7]
 80080f6:	ed9e 2a00 	vldr	s4, [lr]
 80080fa:	f99c 6000 	ldrsb.w	r6, [ip]
 80080fe:	f998 7000 	ldrsb.w	r7, [r8]
 8008102:	4604      	mov	r4, r0
 8008104:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008106:	2800      	cmp	r0, #0
 8008108:	eec1 0a02 	vdiv.f32	s1, s2, s4
 800810c:	ee81 0a82 	vdiv.f32	s0, s3, s4
 8008110:	f040 808a 	bne.w	8008228 <ai_max_buffer_INT8+0x154>
 8008114:	eeb4 1a42 	vcmp.f32	s2, s4
 8008118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800811c:	bf08      	it	eq
 800811e:	42bd      	cmpeq	r5, r7
 8008120:	d146      	bne.n	80081b0 <ai_max_buffer_INT8+0xdc>
 8008122:	eef4 1a42 	vcmp.f32	s3, s4
 8008126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800812a:	bf08      	it	eq
 800812c:	42be      	cmpeq	r6, r7
 800812e:	d13f      	bne.n	80081b0 <ai_max_buffer_INT8+0xdc>
 8008130:	2b00      	cmp	r3, #0
 8008132:	d03b      	beq.n	80081ac <ai_max_buffer_INT8+0xd8>
 8008134:	f013 0003 	ands.w	r0, r3, #3
 8008138:	d00d      	beq.n	8008156 <ai_max_buffer_INT8+0x82>
 800813a:	4625      	mov	r5, r4
 800813c:	f991 6000 	ldrsb.w	r6, [r1]
 8008140:	f992 7000 	ldrsb.w	r7, [r2]
 8008144:	1c6c      	adds	r4, r5, #1
 8008146:	42b7      	cmp	r7, r6
 8008148:	bfa8      	it	ge
 800814a:	463e      	movge	r6, r7
 800814c:	1c49      	adds	r1, r1, #1
 800814e:	1c52      	adds	r2, r2, #1
 8008150:	1e40      	subs	r0, r0, #1
 8008152:	702e      	strb	r6, [r5, #0]
 8008154:	d1f1      	bne.n	800813a <ai_max_buffer_INT8+0x66>
 8008156:	089b      	lsrs	r3, r3, #2
 8008158:	f000 8028 	beq.w	80081ac <ai_max_buffer_INT8+0xd8>
 800815c:	f991 5000 	ldrsb.w	r5, [r1]
 8008160:	f992 6000 	ldrsb.w	r6, [r2]
 8008164:	1c60      	adds	r0, r4, #1
 8008166:	42ae      	cmp	r6, r5
 8008168:	bfa8      	it	ge
 800816a:	4635      	movge	r5, r6
 800816c:	7025      	strb	r5, [r4, #0]
 800816e:	1c44      	adds	r4, r0, #1
 8008170:	f991 5001 	ldrsb.w	r5, [r1, #1]
 8008174:	f992 6001 	ldrsb.w	r6, [r2, #1]
 8008178:	42ae      	cmp	r6, r5
 800817a:	bfa8      	it	ge
 800817c:	4635      	movge	r5, r6
 800817e:	7005      	strb	r5, [r0, #0]
 8008180:	1c60      	adds	r0, r4, #1
 8008182:	f991 5002 	ldrsb.w	r5, [r1, #2]
 8008186:	f992 6002 	ldrsb.w	r6, [r2, #2]
 800818a:	42ae      	cmp	r6, r5
 800818c:	bfa8      	it	ge
 800818e:	4635      	movge	r5, r6
 8008190:	7025      	strb	r5, [r4, #0]
 8008192:	1c44      	adds	r4, r0, #1
 8008194:	f991 5003 	ldrsb.w	r5, [r1, #3]
 8008198:	f992 6003 	ldrsb.w	r6, [r2, #3]
 800819c:	42ae      	cmp	r6, r5
 800819e:	bfa8      	it	ge
 80081a0:	4635      	movge	r5, r6
 80081a2:	1d09      	adds	r1, r1, #4
 80081a4:	1d12      	adds	r2, r2, #4
 80081a6:	1e5b      	subs	r3, r3, #1
 80081a8:	7005      	strb	r5, [r0, #0]
 80081aa:	d1d7      	bne.n	800815c <ai_max_buffer_INT8+0x88>
 80081ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b0:	ee01 7a10 	vmov	s2, r7
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80081ba:	d0f7      	beq.n	80081ac <ai_max_buffer_INT8+0xd8>
 80081bc:	eddf 1a9e 	vldr	s3, [pc, #632]	@ 8008438 <.text_31>
 80081c0:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 80081c4:	f911 0b01 	ldrsb.w	r0, [r1], #1
 80081c8:	f912 7b01 	ldrsb.w	r7, [r2], #1
 80081cc:	1b40      	subs	r0, r0, r5
 80081ce:	1bbf      	subs	r7, r7, r6
 80081d0:	ee02 0a90 	vmov	s5, r0
 80081d4:	ee03 7a10 	vmov	s6, r7
 80081d8:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80081dc:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80081e0:	ee62 2aa0 	vmul.f32	s5, s5, s1
 80081e4:	ee23 3a00 	vmul.f32	s6, s6, s0
 80081e8:	eeb4 3a62 	vcmp.f32	s6, s5
 80081ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f0:	bf58      	it	pl
 80081f2:	eef0 2a43 	vmovpl.f32	s5, s6
 80081f6:	ee72 2a81 	vadd.f32	s5, s5, s2
 80081fa:	eef5 2a40 	vcmp.f32	s5, #0.0
 80081fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008202:	bfcc      	ite	gt
 8008204:	eeb0 3a42 	vmovgt.f32	s6, s4
 8008208:	eeb0 3a61 	vmovle.f32	s6, s3
 800820c:	ee72 2a83 	vadd.f32	s5, s5, s6
 8008210:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 8008214:	ee12 0a90 	vmov	r0, s5
 8008218:	f300 0007 	ssat	r0, #8, r0
 800821c:	1e5b      	subs	r3, r3, #1
 800821e:	f804 0b01 	strb.w	r0, [r4], #1
 8008222:	d1cf      	bne.n	80081c4 <ai_max_buffer_INT8+0xf0>
 8008224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008228:	2801      	cmp	r0, #1
 800822a:	eeb4 1a42 	vcmp.f32	s2, s4
 800822e:	f040 8080 	bne.w	8008332 <ai_max_buffer_INT8+0x25e>
 8008232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008236:	bf08      	it	eq
 8008238:	42bd      	cmpeq	r5, r7
 800823a:	d13c      	bne.n	80082b6 <ai_max_buffer_INT8+0x1e2>
 800823c:	eef4 1a42 	vcmp.f32	s3, s4
 8008240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008244:	bf08      	it	eq
 8008246:	42be      	cmpeq	r6, r7
 8008248:	d135      	bne.n	80082b6 <ai_max_buffer_INT8+0x1e2>
 800824a:	f991 1000 	ldrsb.w	r1, [r1]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0ac      	beq.n	80081ac <ai_max_buffer_INT8+0xd8>
 8008252:	f013 0003 	ands.w	r0, r3, #3
 8008256:	d00a      	beq.n	800826e <ai_max_buffer_INT8+0x19a>
 8008258:	4625      	mov	r5, r4
 800825a:	f992 6000 	ldrsb.w	r6, [r2]
 800825e:	1c6c      	adds	r4, r5, #1
 8008260:	428e      	cmp	r6, r1
 8008262:	bfb8      	it	lt
 8008264:	460e      	movlt	r6, r1
 8008266:	1c52      	adds	r2, r2, #1
 8008268:	1e40      	subs	r0, r0, #1
 800826a:	702e      	strb	r6, [r5, #0]
 800826c:	d1f4      	bne.n	8008258 <ai_max_buffer_INT8+0x184>
 800826e:	089b      	lsrs	r3, r3, #2
 8008270:	f43f af9c 	beq.w	80081ac <ai_max_buffer_INT8+0xd8>
 8008274:	f992 5000 	ldrsb.w	r5, [r2]
 8008278:	1c60      	adds	r0, r4, #1
 800827a:	428d      	cmp	r5, r1
 800827c:	bfb8      	it	lt
 800827e:	460d      	movlt	r5, r1
 8008280:	7025      	strb	r5, [r4, #0]
 8008282:	1c44      	adds	r4, r0, #1
 8008284:	f992 5001 	ldrsb.w	r5, [r2, #1]
 8008288:	428d      	cmp	r5, r1
 800828a:	bfb8      	it	lt
 800828c:	460d      	movlt	r5, r1
 800828e:	7005      	strb	r5, [r0, #0]
 8008290:	1c60      	adds	r0, r4, #1
 8008292:	f992 5002 	ldrsb.w	r5, [r2, #2]
 8008296:	428d      	cmp	r5, r1
 8008298:	bfb8      	it	lt
 800829a:	460d      	movlt	r5, r1
 800829c:	7025      	strb	r5, [r4, #0]
 800829e:	1c44      	adds	r4, r0, #1
 80082a0:	f992 5003 	ldrsb.w	r5, [r2, #3]
 80082a4:	428d      	cmp	r5, r1
 80082a6:	bfb8      	it	lt
 80082a8:	460d      	movlt	r5, r1
 80082aa:	1d12      	adds	r2, r2, #4
 80082ac:	1e5b      	subs	r3, r3, #1
 80082ae:	7005      	strb	r5, [r0, #0]
 80082b0:	d1e0      	bne.n	8008274 <ai_max_buffer_INT8+0x1a0>
 80082b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b6:	f991 0000 	ldrsb.w	r0, [r1]
 80082ba:	ee01 7a10 	vmov	s2, r7
 80082be:	eef8 1ac1 	vcvt.f32.s32	s3, s2
 80082c2:	1b45      	subs	r5, r0, r5
 80082c4:	ee01 5a10 	vmov	s2, r5
 80082c8:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80082cc:	f1b3 0f00 	cmp.w	r3, #0
 80082d0:	ee21 2a20 	vmul.f32	s4, s2, s1
 80082d4:	f43f af6a 	beq.w	80081ac <ai_max_buffer_INT8+0xd8>
 80082d8:	eddf 0a57 	vldr	s1, [pc, #348]	@ 8008438 <.text_31>
 80082dc:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80082e0:	f912 0b01 	ldrsb.w	r0, [r2], #1
 80082e4:	1b80      	subs	r0, r0, r6
 80082e6:	ee02 0a90 	vmov	s5, r0
 80082ea:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80082ee:	ee62 2a80 	vmul.f32	s5, s5, s0
 80082f2:	eef4 2a42 	vcmp.f32	s5, s4
 80082f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fa:	bf48      	it	mi
 80082fc:	eef0 2a42 	vmovmi.f32	s5, s4
 8008300:	ee72 2aa1 	vadd.f32	s5, s5, s3
 8008304:	eef5 2a40 	vcmp.f32	s5, #0.0
 8008308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830c:	bfcc      	ite	gt
 800830e:	eeb0 3a41 	vmovgt.f32	s6, s2
 8008312:	eeb0 3a60 	vmovle.f32	s6, s1
 8008316:	ee72 2a83 	vadd.f32	s5, s5, s6
 800831a:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 800831e:	ee12 0a90 	vmov	r0, s5
 8008322:	f300 0007 	ssat	r0, #8, r0
 8008326:	1e5b      	subs	r3, r3, #1
 8008328:	f804 0b01 	strb.w	r0, [r4], #1
 800832c:	d1d8      	bne.n	80082e0 <ai_max_buffer_INT8+0x20c>
 800832e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008336:	bf08      	it	eq
 8008338:	42bd      	cmpeq	r5, r7
 800833a:	d13e      	bne.n	80083ba <ai_max_buffer_INT8+0x2e6>
 800833c:	eef4 1a42 	vcmp.f32	s3, s4
 8008340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008344:	bf08      	it	eq
 8008346:	42be      	cmpeq	r6, r7
 8008348:	d137      	bne.n	80083ba <ai_max_buffer_INT8+0x2e6>
 800834a:	f992 2000 	ldrsb.w	r2, [r2]
 800834e:	2b00      	cmp	r3, #0
 8008350:	f43f af2c 	beq.w	80081ac <ai_max_buffer_INT8+0xd8>
 8008354:	f013 0003 	ands.w	r0, r3, #3
 8008358:	d00a      	beq.n	8008370 <ai_max_buffer_INT8+0x29c>
 800835a:	4625      	mov	r5, r4
 800835c:	f991 6000 	ldrsb.w	r6, [r1]
 8008360:	1c6c      	adds	r4, r5, #1
 8008362:	42b2      	cmp	r2, r6
 8008364:	bfa8      	it	ge
 8008366:	4616      	movge	r6, r2
 8008368:	1c49      	adds	r1, r1, #1
 800836a:	1e40      	subs	r0, r0, #1
 800836c:	702e      	strb	r6, [r5, #0]
 800836e:	d1f4      	bne.n	800835a <ai_max_buffer_INT8+0x286>
 8008370:	ea5f 0393 	movs.w	r3, r3, lsr #2
 8008374:	f43f af1a 	beq.w	80081ac <ai_max_buffer_INT8+0xd8>
 8008378:	f991 5000 	ldrsb.w	r5, [r1]
 800837c:	1c60      	adds	r0, r4, #1
 800837e:	42aa      	cmp	r2, r5
 8008380:	bfa8      	it	ge
 8008382:	4615      	movge	r5, r2
 8008384:	7025      	strb	r5, [r4, #0]
 8008386:	1c44      	adds	r4, r0, #1
 8008388:	f991 5001 	ldrsb.w	r5, [r1, #1]
 800838c:	42aa      	cmp	r2, r5
 800838e:	bfa8      	it	ge
 8008390:	4615      	movge	r5, r2
 8008392:	7005      	strb	r5, [r0, #0]
 8008394:	1c60      	adds	r0, r4, #1
 8008396:	f991 5002 	ldrsb.w	r5, [r1, #2]
 800839a:	42aa      	cmp	r2, r5
 800839c:	bfa8      	it	ge
 800839e:	4615      	movge	r5, r2
 80083a0:	7025      	strb	r5, [r4, #0]
 80083a2:	1c44      	adds	r4, r0, #1
 80083a4:	f991 5003 	ldrsb.w	r5, [r1, #3]
 80083a8:	42aa      	cmp	r2, r5
 80083aa:	bfa8      	it	ge
 80083ac:	4615      	movge	r5, r2
 80083ae:	1d09      	adds	r1, r1, #4
 80083b0:	1e5b      	subs	r3, r3, #1
 80083b2:	7005      	strb	r5, [r0, #0]
 80083b4:	d1e0      	bne.n	8008378 <ai_max_buffer_INT8+0x2a4>
 80083b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ba:	f992 0000 	ldrsb.w	r0, [r2]
 80083be:	ee01 7a10 	vmov	s2, r7
 80083c2:	eef8 1ac1 	vcvt.f32.s32	s3, s2
 80083c6:	1b86      	subs	r6, r0, r6
 80083c8:	ee01 6a10 	vmov	s2, r6
 80083cc:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80083d0:	f1b3 0f00 	cmp.w	r3, #0
 80083d4:	ee21 2a00 	vmul.f32	s4, s2, s0
 80083d8:	f43f aee8 	beq.w	80081ac <ai_max_buffer_INT8+0xd8>
 80083dc:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8008438 <.text_31>
 80083e0:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80083e4:	f911 0b01 	ldrsb.w	r0, [r1], #1
 80083e8:	1b40      	subs	r0, r0, r5
 80083ea:	ee02 0a90 	vmov	s5, r0
 80083ee:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80083f2:	ee62 2aa0 	vmul.f32	s5, s5, s1
 80083f6:	eeb4 2a62 	vcmp.f32	s4, s5
 80083fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083fe:	bf58      	it	pl
 8008400:	eef0 2a42 	vmovpl.f32	s5, s4
 8008404:	ee72 2aa1 	vadd.f32	s5, s5, s3
 8008408:	eef5 2a40 	vcmp.f32	s5, #0.0
 800840c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008410:	bfcc      	ite	gt
 8008412:	eeb0 3a41 	vmovgt.f32	s6, s2
 8008416:	eeb0 3a40 	vmovle.f32	s6, s0
 800841a:	ee72 2a83 	vadd.f32	s5, s5, s6
 800841e:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 8008422:	ee12 0a90 	vmov	r0, s5
 8008426:	f300 0007 	ssat	r0, #8, r0
 800842a:	1e5b      	subs	r3, r3, #1
 800842c:	f804 0b01 	strb.w	r0, [r4], #1
 8008430:	d1d8      	bne.n	80083e4 <ai_max_buffer_INT8+0x310>
 8008432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008438 <.text_31>:
 8008438:	befffffc 	.word	0xbefffffc

0800843c <ai_max_buffer_UINT8>:
 800843c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800843e:	4604      	mov	r4, r0
 8008440:	9805      	ldr	r0, [sp, #20]
 8008442:	9e07      	ldr	r6, [sp, #28]
 8008444:	9d06      	ldr	r5, [sp, #24]
 8008446:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 800844a:	9f08      	ldr	r7, [sp, #32]
 800844c:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8008450:	ed90 2a00 	vldr	s4, [r0]
 8008454:	ed96 0a00 	vldr	s0, [r6]
 8008458:	7828      	ldrb	r0, [r5, #0]
 800845a:	f89e 6000 	ldrb.w	r6, [lr]
 800845e:	eddc 0a00 	vldr	s1, [ip]
 8008462:	783d      	ldrb	r5, [r7, #0]
 8008464:	eeb4 2a60 	vcmp.f32	s4, s1
 8008468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846c:	bf08      	it	eq
 800846e:	42b0      	cmpeq	r0, r6
 8008470:	ee82 1a20 	vdiv.f32	s2, s4, s1
 8008474:	eec0 1a20 	vdiv.f32	s3, s0, s1
 8008478:	d139      	bne.n	80084ee <ai_max_buffer_UINT8+0xb2>
 800847a:	eeb4 0a60 	vcmp.f32	s0, s1
 800847e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008482:	bf08      	it	eq
 8008484:	42b5      	cmpeq	r5, r6
 8008486:	d132      	bne.n	80084ee <ai_max_buffer_UINT8+0xb2>
 8008488:	b383      	cbz	r3, 80084ec <ai_max_buffer_UINT8+0xb0>
 800848a:	f013 0003 	ands.w	r0, r3, #3
 800848e:	d00b      	beq.n	80084a8 <ai_max_buffer_UINT8+0x6c>
 8008490:	4625      	mov	r5, r4
 8008492:	780e      	ldrb	r6, [r1, #0]
 8008494:	7817      	ldrb	r7, [r2, #0]
 8008496:	1c6c      	adds	r4, r5, #1
 8008498:	42b7      	cmp	r7, r6
 800849a:	bf28      	it	cs
 800849c:	463e      	movcs	r6, r7
 800849e:	1c49      	adds	r1, r1, #1
 80084a0:	1c52      	adds	r2, r2, #1
 80084a2:	1e40      	subs	r0, r0, #1
 80084a4:	702e      	strb	r6, [r5, #0]
 80084a6:	d1f3      	bne.n	8008490 <ai_max_buffer_UINT8+0x54>
 80084a8:	089b      	lsrs	r3, r3, #2
 80084aa:	d01f      	beq.n	80084ec <ai_max_buffer_UINT8+0xb0>
 80084ac:	780d      	ldrb	r5, [r1, #0]
 80084ae:	7816      	ldrb	r6, [r2, #0]
 80084b0:	1c60      	adds	r0, r4, #1
 80084b2:	42ae      	cmp	r6, r5
 80084b4:	bf28      	it	cs
 80084b6:	4635      	movcs	r5, r6
 80084b8:	7025      	strb	r5, [r4, #0]
 80084ba:	1c44      	adds	r4, r0, #1
 80084bc:	784d      	ldrb	r5, [r1, #1]
 80084be:	7856      	ldrb	r6, [r2, #1]
 80084c0:	42ae      	cmp	r6, r5
 80084c2:	bf28      	it	cs
 80084c4:	4635      	movcs	r5, r6
 80084c6:	7005      	strb	r5, [r0, #0]
 80084c8:	1c60      	adds	r0, r4, #1
 80084ca:	788d      	ldrb	r5, [r1, #2]
 80084cc:	7896      	ldrb	r6, [r2, #2]
 80084ce:	42ae      	cmp	r6, r5
 80084d0:	bf28      	it	cs
 80084d2:	4635      	movcs	r5, r6
 80084d4:	7025      	strb	r5, [r4, #0]
 80084d6:	1c44      	adds	r4, r0, #1
 80084d8:	78cd      	ldrb	r5, [r1, #3]
 80084da:	78d6      	ldrb	r6, [r2, #3]
 80084dc:	42ae      	cmp	r6, r5
 80084de:	bf28      	it	cs
 80084e0:	4635      	movcs	r5, r6
 80084e2:	1d09      	adds	r1, r1, #4
 80084e4:	1d12      	adds	r2, r2, #4
 80084e6:	1e5b      	subs	r3, r3, #1
 80084e8:	7005      	strb	r5, [r0, #0]
 80084ea:	d1df      	bne.n	80084ac <ai_max_buffer_UINT8+0x70>
 80084ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ee:	ee00 6a10 	vmov	s0, r6
 80084f2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80084f6:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	ee30 0a20 	vadd.f32	s0, s0, s1
 8008500:	f43f aff4 	beq.w	80084ec <ai_max_buffer_UINT8+0xb0>
 8008504:	f811 6b01 	ldrb.w	r6, [r1], #1
 8008508:	f812 7b01 	ldrb.w	r7, [r2], #1
 800850c:	1a36      	subs	r6, r6, r0
 800850e:	ee02 6a10 	vmov	s4, r6
 8008512:	1b7f      	subs	r7, r7, r5
 8008514:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8008518:	ee02 7a90 	vmov	s5, r7
 800851c:	ee62 0a01 	vmul.f32	s1, s4, s2
 8008520:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8008524:	ee22 2aa1 	vmul.f32	s4, s5, s3
 8008528:	eeb4 2a60 	vcmp.f32	s4, s1
 800852c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008530:	bf58      	it	pl
 8008532:	eef0 0a42 	vmovpl.f32	s1, s4
 8008536:	ee70 0a80 	vadd.f32	s1, s1, s0
 800853a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800853e:	ee10 ca90 	vmov	ip, s1
 8008542:	f38c 0608 	usat	r6, #8, ip
 8008546:	1e5b      	subs	r3, r3, #1
 8008548:	f804 6b01 	strb.w	r6, [r4], #1
 800854c:	d1da      	bne.n	8008504 <ai_max_buffer_UINT8+0xc8>
 800854e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008550 <ai_min_buffer_INT8>:
 8008550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008554:	9d06      	ldr	r5, [sp, #24]
 8008556:	9e07      	ldr	r6, [sp, #28]
 8008558:	9f08      	ldr	r7, [sp, #32]
 800855a:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 800855e:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 8008562:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 8008566:	ed95 1a00 	vldr	s2, [r5]
 800856a:	f996 5000 	ldrsb.w	r5, [r6]
 800856e:	edd7 1a00 	vldr	s3, [r7]
 8008572:	ed9e 2a00 	vldr	s4, [lr]
 8008576:	f99c 6000 	ldrsb.w	r6, [ip]
 800857a:	f998 7000 	ldrsb.w	r7, [r8]
 800857e:	4604      	mov	r4, r0
 8008580:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008582:	2800      	cmp	r0, #0
 8008584:	eec1 0a02 	vdiv.f32	s1, s2, s4
 8008588:	ee81 0a82 	vdiv.f32	s0, s3, s4
 800858c:	f040 808a 	bne.w	80086a4 <ai_min_buffer_INT8+0x154>
 8008590:	eeb4 1a42 	vcmp.f32	s2, s4
 8008594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008598:	bf08      	it	eq
 800859a:	42bd      	cmpeq	r5, r7
 800859c:	d146      	bne.n	800862c <ai_min_buffer_INT8+0xdc>
 800859e:	eef4 1a42 	vcmp.f32	s3, s4
 80085a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a6:	bf08      	it	eq
 80085a8:	42be      	cmpeq	r6, r7
 80085aa:	d13f      	bne.n	800862c <ai_min_buffer_INT8+0xdc>
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d03b      	beq.n	8008628 <ai_min_buffer_INT8+0xd8>
 80085b0:	f013 0003 	ands.w	r0, r3, #3
 80085b4:	d00d      	beq.n	80085d2 <ai_min_buffer_INT8+0x82>
 80085b6:	4625      	mov	r5, r4
 80085b8:	f992 6000 	ldrsb.w	r6, [r2]
 80085bc:	f991 7000 	ldrsb.w	r7, [r1]
 80085c0:	1c6c      	adds	r4, r5, #1
 80085c2:	42b7      	cmp	r7, r6
 80085c4:	bfb8      	it	lt
 80085c6:	463e      	movlt	r6, r7
 80085c8:	1c49      	adds	r1, r1, #1
 80085ca:	1c52      	adds	r2, r2, #1
 80085cc:	1e40      	subs	r0, r0, #1
 80085ce:	702e      	strb	r6, [r5, #0]
 80085d0:	d1f1      	bne.n	80085b6 <ai_min_buffer_INT8+0x66>
 80085d2:	089b      	lsrs	r3, r3, #2
 80085d4:	f000 8028 	beq.w	8008628 <ai_min_buffer_INT8+0xd8>
 80085d8:	f992 5000 	ldrsb.w	r5, [r2]
 80085dc:	f991 6000 	ldrsb.w	r6, [r1]
 80085e0:	1c60      	adds	r0, r4, #1
 80085e2:	42ae      	cmp	r6, r5
 80085e4:	bfb8      	it	lt
 80085e6:	4635      	movlt	r5, r6
 80085e8:	7025      	strb	r5, [r4, #0]
 80085ea:	1c44      	adds	r4, r0, #1
 80085ec:	f992 5001 	ldrsb.w	r5, [r2, #1]
 80085f0:	f991 6001 	ldrsb.w	r6, [r1, #1]
 80085f4:	42ae      	cmp	r6, r5
 80085f6:	bfb8      	it	lt
 80085f8:	4635      	movlt	r5, r6
 80085fa:	7005      	strb	r5, [r0, #0]
 80085fc:	1c60      	adds	r0, r4, #1
 80085fe:	f992 5002 	ldrsb.w	r5, [r2, #2]
 8008602:	f991 6002 	ldrsb.w	r6, [r1, #2]
 8008606:	42ae      	cmp	r6, r5
 8008608:	bfb8      	it	lt
 800860a:	4635      	movlt	r5, r6
 800860c:	7025      	strb	r5, [r4, #0]
 800860e:	1c44      	adds	r4, r0, #1
 8008610:	f992 5003 	ldrsb.w	r5, [r2, #3]
 8008614:	f991 6003 	ldrsb.w	r6, [r1, #3]
 8008618:	42ae      	cmp	r6, r5
 800861a:	bfb8      	it	lt
 800861c:	4635      	movlt	r5, r6
 800861e:	1d09      	adds	r1, r1, #4
 8008620:	1d12      	adds	r2, r2, #4
 8008622:	1e5b      	subs	r3, r3, #1
 8008624:	7005      	strb	r5, [r0, #0]
 8008626:	d1d7      	bne.n	80085d8 <ai_min_buffer_INT8+0x88>
 8008628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800862c:	ee01 7a10 	vmov	s2, r7
 8008630:	2b00      	cmp	r3, #0
 8008632:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8008636:	d0f7      	beq.n	8008628 <ai_min_buffer_INT8+0xd8>
 8008638:	eddf 1a9e 	vldr	s3, [pc, #632]	@ 80088b4 <.text_34>
 800863c:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 8008640:	f911 0b01 	ldrsb.w	r0, [r1], #1
 8008644:	f912 7b01 	ldrsb.w	r7, [r2], #1
 8008648:	1b40      	subs	r0, r0, r5
 800864a:	1bbf      	subs	r7, r7, r6
 800864c:	ee02 0a90 	vmov	s5, r0
 8008650:	ee03 7a10 	vmov	s6, r7
 8008654:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8008658:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800865c:	ee62 2aa0 	vmul.f32	s5, s5, s1
 8008660:	ee23 3a00 	vmul.f32	s6, s6, s0
 8008664:	eef4 2a43 	vcmp.f32	s5, s6
 8008668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800866c:	bf58      	it	pl
 800866e:	eef0 2a43 	vmovpl.f32	s5, s6
 8008672:	ee72 2a81 	vadd.f32	s5, s5, s2
 8008676:	eef5 2a40 	vcmp.f32	s5, #0.0
 800867a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800867e:	bfcc      	ite	gt
 8008680:	eeb0 3a42 	vmovgt.f32	s6, s4
 8008684:	eeb0 3a61 	vmovle.f32	s6, s3
 8008688:	ee72 2a83 	vadd.f32	s5, s5, s6
 800868c:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 8008690:	ee12 0a90 	vmov	r0, s5
 8008694:	f300 0007 	ssat	r0, #8, r0
 8008698:	1e5b      	subs	r3, r3, #1
 800869a:	f804 0b01 	strb.w	r0, [r4], #1
 800869e:	d1cf      	bne.n	8008640 <ai_min_buffer_INT8+0xf0>
 80086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a4:	2801      	cmp	r0, #1
 80086a6:	eeb4 1a42 	vcmp.f32	s2, s4
 80086aa:	f040 8080 	bne.w	80087ae <ai_min_buffer_INT8+0x25e>
 80086ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b2:	bf08      	it	eq
 80086b4:	42bd      	cmpeq	r5, r7
 80086b6:	d13c      	bne.n	8008732 <ai_min_buffer_INT8+0x1e2>
 80086b8:	eef4 1a42 	vcmp.f32	s3, s4
 80086bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c0:	bf08      	it	eq
 80086c2:	42be      	cmpeq	r6, r7
 80086c4:	d135      	bne.n	8008732 <ai_min_buffer_INT8+0x1e2>
 80086c6:	f991 1000 	ldrsb.w	r1, [r1]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0ac      	beq.n	8008628 <ai_min_buffer_INT8+0xd8>
 80086ce:	f013 0003 	ands.w	r0, r3, #3
 80086d2:	d00a      	beq.n	80086ea <ai_min_buffer_INT8+0x19a>
 80086d4:	4625      	mov	r5, r4
 80086d6:	f992 6000 	ldrsb.w	r6, [r2]
 80086da:	1c6c      	adds	r4, r5, #1
 80086dc:	42b1      	cmp	r1, r6
 80086de:	bfb8      	it	lt
 80086e0:	460e      	movlt	r6, r1
 80086e2:	1c52      	adds	r2, r2, #1
 80086e4:	1e40      	subs	r0, r0, #1
 80086e6:	702e      	strb	r6, [r5, #0]
 80086e8:	d1f4      	bne.n	80086d4 <ai_min_buffer_INT8+0x184>
 80086ea:	089b      	lsrs	r3, r3, #2
 80086ec:	f43f af9c 	beq.w	8008628 <ai_min_buffer_INT8+0xd8>
 80086f0:	f992 5000 	ldrsb.w	r5, [r2]
 80086f4:	1c60      	adds	r0, r4, #1
 80086f6:	42a9      	cmp	r1, r5
 80086f8:	bfb8      	it	lt
 80086fa:	460d      	movlt	r5, r1
 80086fc:	7025      	strb	r5, [r4, #0]
 80086fe:	1c44      	adds	r4, r0, #1
 8008700:	f992 5001 	ldrsb.w	r5, [r2, #1]
 8008704:	42a9      	cmp	r1, r5
 8008706:	bfb8      	it	lt
 8008708:	460d      	movlt	r5, r1
 800870a:	7005      	strb	r5, [r0, #0]
 800870c:	1c60      	adds	r0, r4, #1
 800870e:	f992 5002 	ldrsb.w	r5, [r2, #2]
 8008712:	42a9      	cmp	r1, r5
 8008714:	bfb8      	it	lt
 8008716:	460d      	movlt	r5, r1
 8008718:	7025      	strb	r5, [r4, #0]
 800871a:	1c44      	adds	r4, r0, #1
 800871c:	f992 5003 	ldrsb.w	r5, [r2, #3]
 8008720:	42a9      	cmp	r1, r5
 8008722:	bfb8      	it	lt
 8008724:	460d      	movlt	r5, r1
 8008726:	1d12      	adds	r2, r2, #4
 8008728:	1e5b      	subs	r3, r3, #1
 800872a:	7005      	strb	r5, [r0, #0]
 800872c:	d1e0      	bne.n	80086f0 <ai_min_buffer_INT8+0x1a0>
 800872e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008732:	f991 0000 	ldrsb.w	r0, [r1]
 8008736:	ee01 7a10 	vmov	s2, r7
 800873a:	eef8 1ac1 	vcvt.f32.s32	s3, s2
 800873e:	1b45      	subs	r5, r0, r5
 8008740:	ee01 5a10 	vmov	s2, r5
 8008744:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8008748:	f1b3 0f00 	cmp.w	r3, #0
 800874c:	ee21 2a20 	vmul.f32	s4, s2, s1
 8008750:	f43f af6a 	beq.w	8008628 <ai_min_buffer_INT8+0xd8>
 8008754:	eddf 0a57 	vldr	s1, [pc, #348]	@ 80088b4 <.text_34>
 8008758:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800875c:	f912 0b01 	ldrsb.w	r0, [r2], #1
 8008760:	1b80      	subs	r0, r0, r6
 8008762:	ee02 0a90 	vmov	s5, r0
 8008766:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 800876a:	ee62 2a80 	vmul.f32	s5, s5, s0
 800876e:	eeb4 2a62 	vcmp.f32	s4, s5
 8008772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008776:	bf48      	it	mi
 8008778:	eef0 2a42 	vmovmi.f32	s5, s4
 800877c:	ee72 2aa1 	vadd.f32	s5, s5, s3
 8008780:	eef5 2a40 	vcmp.f32	s5, #0.0
 8008784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008788:	bfcc      	ite	gt
 800878a:	eeb0 3a41 	vmovgt.f32	s6, s2
 800878e:	eeb0 3a60 	vmovle.f32	s6, s1
 8008792:	ee72 2a83 	vadd.f32	s5, s5, s6
 8008796:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 800879a:	ee12 0a90 	vmov	r0, s5
 800879e:	f300 0007 	ssat	r0, #8, r0
 80087a2:	1e5b      	subs	r3, r3, #1
 80087a4:	f804 0b01 	strb.w	r0, [r4], #1
 80087a8:	d1d8      	bne.n	800875c <ai_min_buffer_INT8+0x20c>
 80087aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b2:	bf08      	it	eq
 80087b4:	42bd      	cmpeq	r5, r7
 80087b6:	d13e      	bne.n	8008836 <ai_min_buffer_INT8+0x2e6>
 80087b8:	eef4 1a42 	vcmp.f32	s3, s4
 80087bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c0:	bf08      	it	eq
 80087c2:	42be      	cmpeq	r6, r7
 80087c4:	d137      	bne.n	8008836 <ai_min_buffer_INT8+0x2e6>
 80087c6:	f992 2000 	ldrsb.w	r2, [r2]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f43f af2c 	beq.w	8008628 <ai_min_buffer_INT8+0xd8>
 80087d0:	f013 0003 	ands.w	r0, r3, #3
 80087d4:	d00a      	beq.n	80087ec <ai_min_buffer_INT8+0x29c>
 80087d6:	4625      	mov	r5, r4
 80087d8:	f991 6000 	ldrsb.w	r6, [r1]
 80087dc:	1c6c      	adds	r4, r5, #1
 80087de:	4296      	cmp	r6, r2
 80087e0:	bfa8      	it	ge
 80087e2:	4616      	movge	r6, r2
 80087e4:	1c49      	adds	r1, r1, #1
 80087e6:	1e40      	subs	r0, r0, #1
 80087e8:	702e      	strb	r6, [r5, #0]
 80087ea:	d1f4      	bne.n	80087d6 <ai_min_buffer_INT8+0x286>
 80087ec:	ea5f 0393 	movs.w	r3, r3, lsr #2
 80087f0:	f43f af1a 	beq.w	8008628 <ai_min_buffer_INT8+0xd8>
 80087f4:	f991 5000 	ldrsb.w	r5, [r1]
 80087f8:	1c60      	adds	r0, r4, #1
 80087fa:	4295      	cmp	r5, r2
 80087fc:	bfa8      	it	ge
 80087fe:	4615      	movge	r5, r2
 8008800:	7025      	strb	r5, [r4, #0]
 8008802:	1c44      	adds	r4, r0, #1
 8008804:	f991 5001 	ldrsb.w	r5, [r1, #1]
 8008808:	4295      	cmp	r5, r2
 800880a:	bfa8      	it	ge
 800880c:	4615      	movge	r5, r2
 800880e:	7005      	strb	r5, [r0, #0]
 8008810:	1c60      	adds	r0, r4, #1
 8008812:	f991 5002 	ldrsb.w	r5, [r1, #2]
 8008816:	4295      	cmp	r5, r2
 8008818:	bfa8      	it	ge
 800881a:	4615      	movge	r5, r2
 800881c:	7025      	strb	r5, [r4, #0]
 800881e:	1c44      	adds	r4, r0, #1
 8008820:	f991 5003 	ldrsb.w	r5, [r1, #3]
 8008824:	4295      	cmp	r5, r2
 8008826:	bfa8      	it	ge
 8008828:	4615      	movge	r5, r2
 800882a:	1d09      	adds	r1, r1, #4
 800882c:	1e5b      	subs	r3, r3, #1
 800882e:	7005      	strb	r5, [r0, #0]
 8008830:	d1e0      	bne.n	80087f4 <ai_min_buffer_INT8+0x2a4>
 8008832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008836:	f992 0000 	ldrsb.w	r0, [r2]
 800883a:	ee01 7a10 	vmov	s2, r7
 800883e:	eef8 1ac1 	vcvt.f32.s32	s3, s2
 8008842:	1b86      	subs	r6, r0, r6
 8008844:	ee01 6a10 	vmov	s2, r6
 8008848:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 800884c:	f1b3 0f00 	cmp.w	r3, #0
 8008850:	ee21 2a00 	vmul.f32	s4, s2, s0
 8008854:	f43f aee8 	beq.w	8008628 <ai_min_buffer_INT8+0xd8>
 8008858:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 80088b4 <.text_34>
 800885c:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008860:	f911 0b01 	ldrsb.w	r0, [r1], #1
 8008864:	1b40      	subs	r0, r0, r5
 8008866:	ee02 0a90 	vmov	s5, r0
 800886a:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 800886e:	ee62 2aa0 	vmul.f32	s5, s5, s1
 8008872:	eef4 2a42 	vcmp.f32	s5, s4
 8008876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887a:	bf58      	it	pl
 800887c:	eef0 2a42 	vmovpl.f32	s5, s4
 8008880:	ee72 2aa1 	vadd.f32	s5, s5, s3
 8008884:	eef5 2a40 	vcmp.f32	s5, #0.0
 8008888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800888c:	bfcc      	ite	gt
 800888e:	eeb0 3a41 	vmovgt.f32	s6, s2
 8008892:	eeb0 3a40 	vmovle.f32	s6, s0
 8008896:	ee72 2a83 	vadd.f32	s5, s5, s6
 800889a:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 800889e:	ee12 0a90 	vmov	r0, s5
 80088a2:	f300 0007 	ssat	r0, #8, r0
 80088a6:	1e5b      	subs	r3, r3, #1
 80088a8:	f804 0b01 	strb.w	r0, [r4], #1
 80088ac:	d1d8      	bne.n	8008860 <ai_min_buffer_INT8+0x310>
 80088ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080088b4 <.text_34>:
 80088b4:	befffffc 	.word	0xbefffffc

080088b8 <ai_min_buffer_UINT8>:
 80088b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ba:	4604      	mov	r4, r0
 80088bc:	9805      	ldr	r0, [sp, #20]
 80088be:	9e07      	ldr	r6, [sp, #28]
 80088c0:	9d06      	ldr	r5, [sp, #24]
 80088c2:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 80088c6:	9f08      	ldr	r7, [sp, #32]
 80088c8:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 80088cc:	ed90 2a00 	vldr	s4, [r0]
 80088d0:	ed96 0a00 	vldr	s0, [r6]
 80088d4:	7828      	ldrb	r0, [r5, #0]
 80088d6:	f89e 6000 	ldrb.w	r6, [lr]
 80088da:	eddc 0a00 	vldr	s1, [ip]
 80088de:	783d      	ldrb	r5, [r7, #0]
 80088e0:	eeb4 2a60 	vcmp.f32	s4, s1
 80088e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e8:	bf08      	it	eq
 80088ea:	42b0      	cmpeq	r0, r6
 80088ec:	ee82 1a20 	vdiv.f32	s2, s4, s1
 80088f0:	eec0 1a20 	vdiv.f32	s3, s0, s1
 80088f4:	d139      	bne.n	800896a <ai_min_buffer_UINT8+0xb2>
 80088f6:	eeb4 0a60 	vcmp.f32	s0, s1
 80088fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088fe:	bf08      	it	eq
 8008900:	42b5      	cmpeq	r5, r6
 8008902:	d132      	bne.n	800896a <ai_min_buffer_UINT8+0xb2>
 8008904:	b383      	cbz	r3, 8008968 <ai_min_buffer_UINT8+0xb0>
 8008906:	f013 0003 	ands.w	r0, r3, #3
 800890a:	d00b      	beq.n	8008924 <ai_min_buffer_UINT8+0x6c>
 800890c:	4625      	mov	r5, r4
 800890e:	7816      	ldrb	r6, [r2, #0]
 8008910:	780f      	ldrb	r7, [r1, #0]
 8008912:	1c6c      	adds	r4, r5, #1
 8008914:	42b7      	cmp	r7, r6
 8008916:	bf38      	it	cc
 8008918:	463e      	movcc	r6, r7
 800891a:	1c49      	adds	r1, r1, #1
 800891c:	1c52      	adds	r2, r2, #1
 800891e:	1e40      	subs	r0, r0, #1
 8008920:	702e      	strb	r6, [r5, #0]
 8008922:	d1f3      	bne.n	800890c <ai_min_buffer_UINT8+0x54>
 8008924:	089b      	lsrs	r3, r3, #2
 8008926:	d01f      	beq.n	8008968 <ai_min_buffer_UINT8+0xb0>
 8008928:	7815      	ldrb	r5, [r2, #0]
 800892a:	780e      	ldrb	r6, [r1, #0]
 800892c:	1c60      	adds	r0, r4, #1
 800892e:	42ae      	cmp	r6, r5
 8008930:	bf38      	it	cc
 8008932:	4635      	movcc	r5, r6
 8008934:	7025      	strb	r5, [r4, #0]
 8008936:	1c44      	adds	r4, r0, #1
 8008938:	7855      	ldrb	r5, [r2, #1]
 800893a:	784e      	ldrb	r6, [r1, #1]
 800893c:	42ae      	cmp	r6, r5
 800893e:	bf38      	it	cc
 8008940:	4635      	movcc	r5, r6
 8008942:	7005      	strb	r5, [r0, #0]
 8008944:	1c60      	adds	r0, r4, #1
 8008946:	7895      	ldrb	r5, [r2, #2]
 8008948:	788e      	ldrb	r6, [r1, #2]
 800894a:	42ae      	cmp	r6, r5
 800894c:	bf38      	it	cc
 800894e:	4635      	movcc	r5, r6
 8008950:	7025      	strb	r5, [r4, #0]
 8008952:	1c44      	adds	r4, r0, #1
 8008954:	78d5      	ldrb	r5, [r2, #3]
 8008956:	78ce      	ldrb	r6, [r1, #3]
 8008958:	42ae      	cmp	r6, r5
 800895a:	bf38      	it	cc
 800895c:	4635      	movcc	r5, r6
 800895e:	1d09      	adds	r1, r1, #4
 8008960:	1d12      	adds	r2, r2, #4
 8008962:	1e5b      	subs	r3, r3, #1
 8008964:	7005      	strb	r5, [r0, #0]
 8008966:	d1df      	bne.n	8008928 <ai_min_buffer_UINT8+0x70>
 8008968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800896a:	ee00 6a10 	vmov	s0, r6
 800896e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8008972:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8008976:	2b00      	cmp	r3, #0
 8008978:	ee30 0a20 	vadd.f32	s0, s0, s1
 800897c:	f43f aff4 	beq.w	8008968 <ai_min_buffer_UINT8+0xb0>
 8008980:	f811 6b01 	ldrb.w	r6, [r1], #1
 8008984:	f812 7b01 	ldrb.w	r7, [r2], #1
 8008988:	1a36      	subs	r6, r6, r0
 800898a:	ee02 6a10 	vmov	s4, r6
 800898e:	1b7f      	subs	r7, r7, r5
 8008990:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8008994:	ee02 7a90 	vmov	s5, r7
 8008998:	ee62 0a01 	vmul.f32	s1, s4, s2
 800899c:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80089a0:	ee22 2aa1 	vmul.f32	s4, s5, s3
 80089a4:	eef4 0a42 	vcmp.f32	s1, s4
 80089a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ac:	bf58      	it	pl
 80089ae:	eef0 0a42 	vmovpl.f32	s1, s4
 80089b2:	ee70 0a80 	vadd.f32	s1, s1, s0
 80089b6:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80089ba:	ee10 ca90 	vmov	ip, s1
 80089be:	f38c 0608 	usat	r6, #8, ip
 80089c2:	1e5b      	subs	r3, r3, #1
 80089c4:	f804 6b01 	strb.w	r6, [r4], #1
 80089c8:	d1da      	bne.n	8008980 <ai_min_buffer_UINT8+0xc8>
 80089ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089cc <ai_mul_buffer_INT8>:
 80089cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	b081      	sub	sp, #4
 80089d2:	4699      	mov	r9, r3
 80089d4:	ed2d 8b04 	vpush	{d8-d9}
 80089d8:	b08a      	sub	sp, #40	@ 0x28
 80089da:	4682      	mov	sl, r0
 80089dc:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 80089de:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80089e0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80089e2:	f8dd e070 	ldr.w	lr, [sp, #112]	@ 0x70
 80089e6:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 80089e8:	9105      	str	r1, [sp, #20]
 80089ea:	9204      	str	r2, [sp, #16]
 80089ec:	a803      	add	r0, sp, #12
 80089ee:	f996 1000 	ldrsb.w	r1, [r6]
 80089f2:	ed95 9a00 	vldr	s18, [r5]
 80089f6:	ed97 8a00 	vldr	s16, [r7]
 80089fa:	edde 8a00 	vldr	s17, [lr]
 80089fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a00:	9107      	str	r1, [sp, #28]
 8008a02:	2100      	movs	r1, #0
 8008a04:	f994 2000 	ldrsb.w	r2, [r4]
 8008a08:	9206      	str	r2, [sp, #24]
 8008a0a:	ee28 0a09 	vmul.f32	s0, s16, s18
 8008a0e:	f993 5000 	ldrsb.w	r5, [r3]
 8008a12:	f8ad 100c 	strh.w	r1, [sp, #12]
 8008a16:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8008a1a:	f003 f88f 	bl	800bb3c <align_factor>
 8008a1e:	4680      	mov	r8, r0
 8008a20:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8008a24:	1e40      	subs	r0, r0, #1
 8008a26:	2815      	cmp	r0, #21
 8008a28:	462a      	mov	r2, r5
 8008a2a:	d206      	bcs.n	8008a3a <ai_mul_buffer_INT8+0x6e>
 8008a2c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8008a30:	2301      	movs	r3, #1
 8008a32:	408a      	lsls	r2, r1
 8008a34:	408b      	lsls	r3, r1
 8008a36:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8008a3a:	9807      	ldr	r0, [sp, #28]
 8008a3c:	9e1e      	ldr	r6, [sp, #120]	@ 0x78
 8008a3e:	eac0 4300 	pkhbt	r3, r0, r0, lsl #16
 8008a42:	9806      	ldr	r0, [sp, #24]
 8008a44:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 8008a48:	ea4f 0099 	mov.w	r0, r9, lsr #2
 8008a4c:	b9c6      	cbnz	r6, 8008a80 <ai_mul_buffer_INT8+0xb4>
 8008a4e:	9907      	ldr	r1, [sp, #28]
 8008a50:	9806      	ldr	r0, [sp, #24]
 8008a52:	9a04      	ldr	r2, [sp, #16]
 8008a54:	9502      	str	r5, [sp, #8]
 8008a56:	b249      	sxtb	r1, r1
 8008a58:	b240      	sxtb	r0, r0
 8008a5a:	9100      	str	r1, [sp, #0]
 8008a5c:	9001      	str	r0, [sp, #4]
 8008a5e:	eeb0 1a68 	vmov.f32	s2, s17
 8008a62:	9905      	ldr	r1, [sp, #20]
 8008a64:	eef0 0a48 	vmov.f32	s1, s16
 8008a68:	eeb0 0a49 	vmov.f32	s0, s18
 8008a6c:	464b      	mov	r3, r9
 8008a6e:	4650      	mov	r0, sl
 8008a70:	f003 ffec 	bl	800ca4c <ai_math_elementwise_mul_int8>
 8008a74:	b00a      	add	sp, #40	@ 0x28
 8008a76:	ecbd 8b04 	vpop	{d8-d9}
 8008a7a:	b001      	add	sp, #4
 8008a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a80:	2e01      	cmp	r6, #1
 8008a82:	f040 80f9 	bne.w	8008c78 <ai_mul_buffer_INT8+0x2ac>
 8008a86:	9d05      	ldr	r5, [sp, #20]
 8008a88:	f995 5000 	ldrsb.w	r5, [r5]
 8008a8c:	eac5 4605 	pkhbt	r6, r5, r5, lsl #16
 8008a90:	fa2f f586 	sxtb16	r5, r6
 8008a94:	2800      	cmp	r0, #0
 8008a96:	fad5 f503 	ssub16	r5, r5, r3
 8008a9a:	f000 80ac 	beq.w	8008bf6 <ai_mul_buffer_INT8+0x22a>
 8008a9e:	9904      	ldr	r1, [sp, #16]
 8008aa0:	9501      	str	r5, [sp, #4]
 8008aa2:	4623      	mov	r3, r4
 8008aa4:	f851 4b04 	ldr.w	r4, [r1], #4
 8008aa8:	ea4f 2534 	mov.w	r5, r4, ror #8
 8008aac:	fa2f f484 	sxtb16	r4, r4
 8008ab0:	fad4 f603 	ssub16	r6, r4, r3
 8008ab4:	ac01      	add	r4, sp, #4
 8008ab6:	fa2f f585 	sxtb16	r5, r5
 8008aba:	f9b4 7000 	ldrsh.w	r7, [r4]
 8008abe:	9700      	str	r7, [sp, #0]
 8008ac0:	fb17 fc06 	smulbb	ip, r7, r6
 8008ac4:	9f01      	ldr	r7, [sp, #4]
 8008ac6:	9c00      	ldr	r4, [sp, #0]
 8008ac8:	fad5 f503 	ssub16	r5, r5, r3
 8008acc:	143f      	asrs	r7, r7, #16
 8008ace:	9709      	str	r7, [sp, #36]	@ 0x24
 8008ad0:	fb14 f405 	smulbb	r4, r4, r5
 8008ad4:	fb17 f515 	smulbt	r5, r7, r5
 8008ad8:	fb17 fe16 	smulbt	lr, r7, r6
 8008adc:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8008ae0:	2f16      	cmp	r7, #22
 8008ae2:	f10a 0602 	add.w	r6, sl, #2
 8008ae6:	db2a      	blt.n	8008b3e <ai_mul_buffer_INT8+0x172>
 8008ae8:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8008aec:	2701      	movs	r7, #1
 8008aee:	f1ab 0b02 	sub.w	fp, fp, #2
 8008af2:	fa07 f70b 	lsl.w	r7, r7, fp
 8008af6:	fb5c 7c08 	smmla	ip, ip, r8, r7
 8008afa:	fb5e 7b08 	smmla	fp, lr, r8, r7
 8008afe:	fb54 7408 	smmla	r4, r4, r8, r7
 8008b02:	f8bd e00c 	ldrh.w	lr, [sp, #12]
 8008b06:	f1ae 0e01 	sub.w	lr, lr, #1
 8008b0a:	fa4c fc0e 	asr.w	ip, ip, lr
 8008b0e:	fa44 f40e 	asr.w	r4, r4, lr
 8008b12:	4494      	add	ip, r2
 8008b14:	1914      	adds	r4, r2, r4
 8008b16:	fa4b fb0e 	asr.w	fp, fp, lr
 8008b1a:	4493      	add	fp, r2
 8008b1c:	fb55 7508 	smmla	r5, r5, r8, r7
 8008b20:	f30c 0707 	ssat	r7, #8, ip
 8008b24:	f80a 7b01 	strb.w	r7, [sl], #1
 8008b28:	f304 0407 	ssat	r4, #8, r4
 8008b2c:	f80a 4b01 	strb.w	r4, [sl], #1
 8008b30:	fa45 f50e 	asr.w	r5, r5, lr
 8008b34:	f30b 0407 	ssat	r4, #8, fp
 8008b38:	1955      	adds	r5, r2, r5
 8008b3a:	7034      	strb	r4, [r6, #0]
 8008b3c:	e052      	b.n	8008be4 <ai_mul_buffer_INT8+0x218>
 8008b3e:	2f00      	cmp	r7, #0
 8008b40:	dd28      	ble.n	8008b94 <ai_mul_buffer_INT8+0x1c8>
 8008b42:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008b46:	fb5c 2708 	smmla	r7, ip, r8, r2
 8008b4a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8008b4e:	fb5e 2c08 	smmla	ip, lr, r8, r2
 8008b52:	f8bd e00c 	ldrh.w	lr, [sp, #12]
 8008b56:	fa47 f70e 	asr.w	r7, r7, lr
 8008b5a:	f307 0707 	ssat	r7, #8, r7
 8008b5e:	f80a 7b01 	strb.w	r7, [sl], #1
 8008b62:	0064      	lsls	r4, r4, #1
 8008b64:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8008b68:	fb54 2408 	smmla	r4, r4, r8, r2
 8008b6c:	413c      	asrs	r4, r7
 8008b6e:	f304 0407 	ssat	r4, #8, r4
 8008b72:	f80a 4b01 	strb.w	r4, [sl], #1
 8008b76:	006d      	lsls	r5, r5, #1
 8008b78:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8008b7c:	fa4c f704 	asr.w	r7, ip, r4
 8008b80:	f307 0407 	ssat	r4, #8, r7
 8008b84:	7034      	strb	r4, [r6, #0]
 8008b86:	fb55 2508 	smmla	r5, r5, r8, r2
 8008b8a:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8008b8e:	4125      	asrs	r5, r4
 8008b90:	e028      	b.n	8008be4 <ai_mul_buffer_INT8+0x218>
 8008b92:	bf00      	nop
 8008b94:	f1c7 0701 	rsb	r7, r7, #1
 8008b98:	fa0c fc07 	lsl.w	ip, ip, r7
 8008b9c:	f30c 0c1f 	ssat	ip, #32, ip
 8008ba0:	40bc      	lsls	r4, r7
 8008ba2:	fb5c fc18 	smmulr	ip, ip, r8
 8008ba6:	4494      	add	ip, r2
 8008ba8:	fa0e fe07 	lsl.w	lr, lr, r7
 8008bac:	f30e 0e1f 	ssat	lr, #32, lr
 8008bb0:	f304 041f 	ssat	r4, #32, r4
 8008bb4:	fb54 f418 	smmulr	r4, r4, r8
 8008bb8:	1914      	adds	r4, r2, r4
 8008bba:	fb5e fe18 	smmulr	lr, lr, r8
 8008bbe:	40bd      	lsls	r5, r7
 8008bc0:	f305 051f 	ssat	r5, #32, r5
 8008bc4:	f30c 0707 	ssat	r7, #8, ip
 8008bc8:	f80a 7b01 	strb.w	r7, [sl], #1
 8008bcc:	f304 0407 	ssat	r4, #8, r4
 8008bd0:	f80a 4b01 	strb.w	r4, [sl], #1
 8008bd4:	4496      	add	lr, r2
 8008bd6:	fb55 f518 	smmulr	r5, r5, r8
 8008bda:	f30e 0407 	ssat	r4, #8, lr
 8008bde:	7034      	strb	r4, [r6, #0]
 8008be0:	eb12 0505 	adds.w	r5, r2, r5
 8008be4:	f305 0407 	ssat	r4, #8, r5
 8008be8:	1e40      	subs	r0, r0, #1
 8008bea:	7074      	strb	r4, [r6, #1]
 8008bec:	f10a 0a02 	add.w	sl, sl, #2
 8008bf0:	f47f af58 	bne.w	8008aa4 <ai_mul_buffer_INT8+0xd8>
 8008bf4:	9104      	str	r1, [sp, #16]
 8008bf6:	9805      	ldr	r0, [sp, #20]
 8008bf8:	9c07      	ldr	r4, [sp, #28]
 8008bfa:	f990 1000 	ldrsb.w	r1, [r0]
 8008bfe:	1b0c      	subs	r4, r1, r4
 8008c00:	f019 0f03 	tst.w	r9, #3
 8008c04:	f43f af36 	beq.w	8008a74 <ai_mul_buffer_INT8+0xa8>
 8008c08:	9904      	ldr	r1, [sp, #16]
 8008c0a:	9b06      	ldr	r3, [sp, #24]
 8008c0c:	f009 0003 	and.w	r0, r9, #3
 8008c10:	f05f 0501 	movs.w	r5, #1
 8008c14:	f911 6b01 	ldrsb.w	r6, [r1], #1
 8008c18:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8008c1c:	1af6      	subs	r6, r6, r3
 8008c1e:	4366      	muls	r6, r4
 8008c20:	2f16      	cmp	r7, #22
 8008c22:	db0a      	blt.n	8008c3a <ai_mul_buffer_INT8+0x26e>
 8008c24:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8008c28:	f1a7 0c02 	sub.w	ip, r7, #2
 8008c2c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8008c30:	fb56 c608 	smmla	r6, r6, r8, ip
 8008c34:	1e7f      	subs	r7, r7, #1
 8008c36:	413e      	asrs	r6, r7
 8008c38:	e011      	b.n	8008c5e <ai_mul_buffer_INT8+0x292>
 8008c3a:	2f00      	cmp	r7, #0
 8008c3c:	dd06      	ble.n	8008c4c <ai_mul_buffer_INT8+0x280>
 8008c3e:	0076      	lsls	r6, r6, #1
 8008c40:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8008c44:	fb56 2608 	smmla	r6, r6, r8, r2
 8008c48:	413e      	asrs	r6, r7
 8008c4a:	e009      	b.n	8008c60 <ai_mul_buffer_INT8+0x294>
 8008c4c:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8008c50:	f1c7 0701 	rsb	r7, r7, #1
 8008c54:	40be      	lsls	r6, r7
 8008c56:	f306 061f 	ssat	r6, #32, r6
 8008c5a:	fb56 f618 	smmulr	r6, r6, r8
 8008c5e:	1996      	adds	r6, r2, r6
 8008c60:	f306 0607 	ssat	r6, #8, r6
 8008c64:	1e40      	subs	r0, r0, #1
 8008c66:	f80a 6b01 	strb.w	r6, [sl], #1
 8008c6a:	d1d3      	bne.n	8008c14 <ai_mul_buffer_INT8+0x248>
 8008c6c:	b00a      	add	sp, #40	@ 0x28
 8008c6e:	ecbd 8b04 	vpop	{d8-d9}
 8008c72:	b001      	add	sp, #4
 8008c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c78:	9d04      	ldr	r5, [sp, #16]
 8008c7a:	f995 5000 	ldrsb.w	r5, [r5]
 8008c7e:	eac5 4605 	pkhbt	r6, r5, r5, lsl #16
 8008c82:	fa2f f586 	sxtb16	r5, r6
 8008c86:	2800      	cmp	r0, #0
 8008c88:	fad5 f404 	ssub16	r4, r5, r4
 8008c8c:	f000 80ab 	beq.w	8008de6 <ai_mul_buffer_INT8+0x41a>
 8008c90:	9905      	ldr	r1, [sp, #20]
 8008c92:	9401      	str	r4, [sp, #4]
 8008c94:	f851 4b04 	ldr.w	r4, [r1], #4
 8008c98:	ea4f 2534 	mov.w	r5, r4, ror #8
 8008c9c:	fa2f f484 	sxtb16	r4, r4
 8008ca0:	fad4 f603 	ssub16	r6, r4, r3
 8008ca4:	ac01      	add	r4, sp, #4
 8008ca6:	46b4      	mov	ip, r6
 8008ca8:	f9b4 7000 	ldrsh.w	r7, [r4]
 8008cac:	9700      	str	r7, [sp, #0]
 8008cae:	fb1c fc07 	smulbb	ip, ip, r7
 8008cb2:	9f01      	ldr	r7, [sp, #4]
 8008cb4:	9c00      	ldr	r4, [sp, #0]
 8008cb6:	fa2f f585 	sxtb16	r5, r5
 8008cba:	fad5 f503 	ssub16	r5, r5, r3
 8008cbe:	143f      	asrs	r7, r7, #16
 8008cc0:	9708      	str	r7, [sp, #32]
 8008cc2:	fb15 f404 	smulbb	r4, r5, r4
 8008cc6:	fb15 f527 	smultb	r5, r5, r7
 8008cca:	fb16 fe27 	smultb	lr, r6, r7
 8008cce:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8008cd2:	2f16      	cmp	r7, #22
 8008cd4:	f10a 0602 	add.w	r6, sl, #2
 8008cd8:	db2a      	blt.n	8008d30 <ai_mul_buffer_INT8+0x364>
 8008cda:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8008cde:	2701      	movs	r7, #1
 8008ce0:	f1ab 0b02 	sub.w	fp, fp, #2
 8008ce4:	fa07 f70b 	lsl.w	r7, r7, fp
 8008ce8:	fb5c 7c08 	smmla	ip, ip, r8, r7
 8008cec:	fb5e 7b08 	smmla	fp, lr, r8, r7
 8008cf0:	fb54 7408 	smmla	r4, r4, r8, r7
 8008cf4:	f8bd e00c 	ldrh.w	lr, [sp, #12]
 8008cf8:	f1ae 0e01 	sub.w	lr, lr, #1
 8008cfc:	fa4c fc0e 	asr.w	ip, ip, lr
 8008d00:	fa44 f40e 	asr.w	r4, r4, lr
 8008d04:	4494      	add	ip, r2
 8008d06:	1914      	adds	r4, r2, r4
 8008d08:	fa4b fb0e 	asr.w	fp, fp, lr
 8008d0c:	4493      	add	fp, r2
 8008d0e:	fb55 7508 	smmla	r5, r5, r8, r7
 8008d12:	f30c 0707 	ssat	r7, #8, ip
 8008d16:	f80a 7b01 	strb.w	r7, [sl], #1
 8008d1a:	f304 0407 	ssat	r4, #8, r4
 8008d1e:	f80a 4b01 	strb.w	r4, [sl], #1
 8008d22:	fa45 f50e 	asr.w	r5, r5, lr
 8008d26:	f30b 0407 	ssat	r4, #8, fp
 8008d2a:	1955      	adds	r5, r2, r5
 8008d2c:	7034      	strb	r4, [r6, #0]
 8008d2e:	e051      	b.n	8008dd4 <ai_mul_buffer_INT8+0x408>
 8008d30:	2f00      	cmp	r7, #0
 8008d32:	dd27      	ble.n	8008d84 <ai_mul_buffer_INT8+0x3b8>
 8008d34:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008d38:	fb5c 2708 	smmla	r7, ip, r8, r2
 8008d3c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8008d40:	fb5e 2c08 	smmla	ip, lr, r8, r2
 8008d44:	f8bd e00c 	ldrh.w	lr, [sp, #12]
 8008d48:	fa47 f70e 	asr.w	r7, r7, lr
 8008d4c:	f307 0707 	ssat	r7, #8, r7
 8008d50:	f80a 7b01 	strb.w	r7, [sl], #1
 8008d54:	0064      	lsls	r4, r4, #1
 8008d56:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8008d5a:	fb54 2408 	smmla	r4, r4, r8, r2
 8008d5e:	413c      	asrs	r4, r7
 8008d60:	f304 0407 	ssat	r4, #8, r4
 8008d64:	f80a 4b01 	strb.w	r4, [sl], #1
 8008d68:	006d      	lsls	r5, r5, #1
 8008d6a:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8008d6e:	fa4c f704 	asr.w	r7, ip, r4
 8008d72:	f307 0407 	ssat	r4, #8, r7
 8008d76:	7034      	strb	r4, [r6, #0]
 8008d78:	fb55 2508 	smmla	r5, r5, r8, r2
 8008d7c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8008d80:	4125      	asrs	r5, r4
 8008d82:	e027      	b.n	8008dd4 <ai_mul_buffer_INT8+0x408>
 8008d84:	f1c7 0701 	rsb	r7, r7, #1
 8008d88:	fa0c fc07 	lsl.w	ip, ip, r7
 8008d8c:	f30c 0c1f 	ssat	ip, #32, ip
 8008d90:	40bc      	lsls	r4, r7
 8008d92:	fb5c fc18 	smmulr	ip, ip, r8
 8008d96:	4494      	add	ip, r2
 8008d98:	fa0e fe07 	lsl.w	lr, lr, r7
 8008d9c:	f30e 0e1f 	ssat	lr, #32, lr
 8008da0:	f304 041f 	ssat	r4, #32, r4
 8008da4:	fb54 f418 	smmulr	r4, r4, r8
 8008da8:	1914      	adds	r4, r2, r4
 8008daa:	fb5e fe18 	smmulr	lr, lr, r8
 8008dae:	40bd      	lsls	r5, r7
 8008db0:	f305 051f 	ssat	r5, #32, r5
 8008db4:	f30c 0707 	ssat	r7, #8, ip
 8008db8:	f80a 7b01 	strb.w	r7, [sl], #1
 8008dbc:	f304 0407 	ssat	r4, #8, r4
 8008dc0:	f80a 4b01 	strb.w	r4, [sl], #1
 8008dc4:	4496      	add	lr, r2
 8008dc6:	fb55 f518 	smmulr	r5, r5, r8
 8008dca:	f30e 0407 	ssat	r4, #8, lr
 8008dce:	7034      	strb	r4, [r6, #0]
 8008dd0:	eb12 0505 	adds.w	r5, r2, r5
 8008dd4:	f305 0407 	ssat	r4, #8, r5
 8008dd8:	1e40      	subs	r0, r0, #1
 8008dda:	7074      	strb	r4, [r6, #1]
 8008ddc:	f10a 0a02 	add.w	sl, sl, #2
 8008de0:	f47f af58 	bne.w	8008c94 <ai_mul_buffer_INT8+0x2c8>
 8008de4:	9105      	str	r1, [sp, #20]
 8008de6:	9804      	ldr	r0, [sp, #16]
 8008de8:	9c06      	ldr	r4, [sp, #24]
 8008dea:	f990 1000 	ldrsb.w	r1, [r0]
 8008dee:	1b0c      	subs	r4, r1, r4
 8008df0:	f019 0f03 	tst.w	r9, #3
 8008df4:	f43f ae3e 	beq.w	8008a74 <ai_mul_buffer_INT8+0xa8>
 8008df8:	9905      	ldr	r1, [sp, #20]
 8008dfa:	9b07      	ldr	r3, [sp, #28]
 8008dfc:	f009 0003 	and.w	r0, r9, #3
 8008e00:	f05f 0501 	movs.w	r5, #1
 8008e04:	f911 6b01 	ldrsb.w	r6, [r1], #1
 8008e08:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8008e0c:	1af6      	subs	r6, r6, r3
 8008e0e:	4366      	muls	r6, r4
 8008e10:	2f16      	cmp	r7, #22
 8008e12:	db0a      	blt.n	8008e2a <ai_mul_buffer_INT8+0x45e>
 8008e14:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8008e18:	f1a7 0c02 	sub.w	ip, r7, #2
 8008e1c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8008e20:	fb56 c608 	smmla	r6, r6, r8, ip
 8008e24:	1e7f      	subs	r7, r7, #1
 8008e26:	413e      	asrs	r6, r7
 8008e28:	e011      	b.n	8008e4e <ai_mul_buffer_INT8+0x482>
 8008e2a:	2f00      	cmp	r7, #0
 8008e2c:	dd06      	ble.n	8008e3c <ai_mul_buffer_INT8+0x470>
 8008e2e:	0076      	lsls	r6, r6, #1
 8008e30:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8008e34:	fb56 2608 	smmla	r6, r6, r8, r2
 8008e38:	413e      	asrs	r6, r7
 8008e3a:	e009      	b.n	8008e50 <ai_mul_buffer_INT8+0x484>
 8008e3c:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8008e40:	f1c7 0701 	rsb	r7, r7, #1
 8008e44:	40be      	lsls	r6, r7
 8008e46:	f306 061f 	ssat	r6, #32, r6
 8008e4a:	fb56 f618 	smmulr	r6, r6, r8
 8008e4e:	1996      	adds	r6, r2, r6
 8008e50:	f306 0607 	ssat	r6, #8, r6
 8008e54:	1e40      	subs	r0, r0, #1
 8008e56:	f80a 6b01 	strb.w	r6, [sl], #1
 8008e5a:	d1d3      	bne.n	8008e04 <ai_mul_buffer_INT8+0x438>
 8008e5c:	b00a      	add	sp, #40	@ 0x28
 8008e5e:	ecbd 8b04 	vpop	{d8-d9}
 8008e62:	b001      	add	sp, #4
 8008e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e68 <ai_mul_buffer_UINT8>:
 8008e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e6a:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 8008e6e:	9e05      	ldr	r6, [sp, #20]
 8008e70:	9f07      	ldr	r7, [sp, #28]
 8008e72:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8008e76:	9c06      	ldr	r4, [sp, #24]
 8008e78:	9d08      	ldr	r5, [sp, #32]
 8008e7a:	ed96 0a00 	vldr	s0, [r6]
 8008e7e:	f89e 6000 	ldrb.w	r6, [lr]
 8008e82:	edd7 0a00 	vldr	s1, [r7]
 8008e86:	ed9c 1a00 	vldr	s2, [ip]
 8008e8a:	ee60 0a20 	vmul.f32	s1, s0, s1
 8008e8e:	ee01 6a90 	vmov	s3, r6
 8008e92:	7824      	ldrb	r4, [r4, #0]
 8008e94:	782d      	ldrb	r5, [r5, #0]
 8008e96:	ee80 0a81 	vdiv.f32	s0, s1, s2
 8008e9a:	eef8 1a61 	vcvt.f32.u32	s3, s3
 8008e9e:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 8008ea2:	ee71 0a82 	vadd.f32	s1, s3, s4
 8008ea6:	b1eb      	cbz	r3, 8008ee4 <ai_mul_buffer_UINT8+0x7c>
 8008ea8:	f811 6b01 	ldrb.w	r6, [r1], #1
 8008eac:	f812 7b01 	ldrb.w	r7, [r2], #1
 8008eb0:	1b36      	subs	r6, r6, r4
 8008eb2:	ee01 6a10 	vmov	s2, r6
 8008eb6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8008eba:	1b7f      	subs	r7, r7, r5
 8008ebc:	ee61 1a00 	vmul.f32	s3, s2, s0
 8008ec0:	ee02 7a10 	vmov	s4, r7
 8008ec4:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8008ec8:	eeb0 1a60 	vmov.f32	s2, s1
 8008ecc:	ee01 1a82 	vmla.f32	s2, s3, s4
 8008ed0:	eefd 2ac1 	vcvt.s32.f32	s5, s2
 8008ed4:	ee12 ca90 	vmov	ip, s5
 8008ed8:	f38c 0608 	usat	r6, #8, ip
 8008edc:	1e5b      	subs	r3, r3, #1
 8008ede:	f800 6b01 	strb.w	r6, [r0], #1
 8008ee2:	d1e1      	bne.n	8008ea8 <ai_mul_buffer_UINT8+0x40>
 8008ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ee6 <ai_sub_buffer_INT8>:
 8008ee6:	b570      	push	{r4, r5, r6, lr}
 8008ee8:	b088      	sub	sp, #32
 8008eea:	ae07      	add	r6, sp, #28
 8008eec:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8008eee:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8008ef0:	ed94 0a00 	vldr	s0, [r4]
 8008ef4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8008ef6:	9406      	str	r4, [sp, #24]
 8008ef8:	9505      	str	r5, [sp, #20]
 8008efa:	eeb1 0a40 	vneg.f32	s0, s0
 8008efe:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8008f00:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008f02:	9404      	str	r4, [sp, #16]
 8008f04:	9503      	str	r5, [sp, #12]
 8008f06:	ed8d 0a07 	vstr	s0, [sp, #28]
 8008f0a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8008f0c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008f0e:	9602      	str	r6, [sp, #8]
 8008f10:	9401      	str	r4, [sp, #4]
 8008f12:	9500      	str	r5, [sp, #0]
 8008f14:	f002 fb8e 	bl	800b634 <ai_sum_buffer_INT8>
 8008f18:	b008      	add	sp, #32
 8008f1a:	bd70      	pop	{r4, r5, r6, pc}

08008f1c <ai_sub_buffer_UINT8>:
 8008f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f1e:	9c05      	ldr	r4, [sp, #20]
 8008f20:	9e07      	ldr	r6, [sp, #28]
 8008f22:	9d06      	ldr	r5, [sp, #24]
 8008f24:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 8008f28:	9f08      	ldr	r7, [sp, #32]
 8008f2a:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8008f2e:	ed94 2a00 	vldr	s4, [r4]
 8008f32:	ed96 0a00 	vldr	s0, [r6]
 8008f36:	782c      	ldrb	r4, [r5, #0]
 8008f38:	f89e 6000 	ldrb.w	r6, [lr]
 8008f3c:	eddc 0a00 	vldr	s1, [ip]
 8008f40:	783d      	ldrb	r5, [r7, #0]
 8008f42:	eeb4 2a60 	vcmp.f32	s4, s1
 8008f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4a:	bf08      	it	eq
 8008f4c:	42b4      	cmpeq	r4, r6
 8008f4e:	ee82 1a20 	vdiv.f32	s2, s4, s1
 8008f52:	eec0 1a20 	vdiv.f32	s3, s0, s1
 8008f56:	d114      	bne.n	8008f82 <ai_sub_buffer_UINT8+0x66>
 8008f58:	eeb4 0a60 	vcmp.f32	s0, s1
 8008f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f60:	bf08      	it	eq
 8008f62:	42b5      	cmpeq	r5, r6
 8008f64:	d10d      	bne.n	8008f82 <ai_sub_buffer_UINT8+0x66>
 8008f66:	b15b      	cbz	r3, 8008f80 <ai_sub_buffer_UINT8+0x64>
 8008f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f6c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008f70:	1b64      	subs	r4, r4, r5
 8008f72:	1934      	adds	r4, r6, r4
 8008f74:	f384 0408 	usat	r4, #8, r4
 8008f78:	1e5b      	subs	r3, r3, #1
 8008f7a:	f800 4b01 	strb.w	r4, [r0], #1
 8008f7e:	d1f3      	bne.n	8008f68 <ai_sub_buffer_UINT8+0x4c>
 8008f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f82:	ee00 6a10 	vmov	s0, r6
 8008f86:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8008f8a:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	ee30 0a20 	vadd.f32	s0, s0, s1
 8008f94:	f43f aff4 	beq.w	8008f80 <ai_sub_buffer_UINT8+0x64>
 8008f98:	f811 6b01 	ldrb.w	r6, [r1], #1
 8008f9c:	f812 7b01 	ldrb.w	r7, [r2], #1
 8008fa0:	1b36      	subs	r6, r6, r4
 8008fa2:	ee02 6a10 	vmov	s4, r6
 8008fa6:	1b7f      	subs	r7, r7, r5
 8008fa8:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8008fac:	ee00 7a90 	vmov	s1, r7
 8008fb0:	ee22 2a01 	vmul.f32	s4, s4, s2
 8008fb4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8008fb8:	ee00 2ae1 	vmls.f32	s4, s1, s3
 8008fbc:	ee72 0a00 	vadd.f32	s1, s4, s0
 8008fc0:	eefd 2ae0 	vcvt.s32.f32	s5, s1
 8008fc4:	ee12 ca90 	vmov	ip, s5
 8008fc8:	f38c 0608 	usat	r6, #8, ip
 8008fcc:	1e5b      	subs	r3, r3, #1
 8008fce:	f800 6b01 	strb.w	r6, [r0], #1
 8008fd2:	d1e1      	bne.n	8008f98 <ai_sub_buffer_UINT8+0x7c>
 8008fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fd6 <ai_sum>:
 8008fd6:	ed91 0a00 	vldr	s0, [r1]
 8008fda:	edd2 0a00 	vldr	s1, [r2]
 8008fde:	ee70 0a20 	vadd.f32	s1, s0, s1
 8008fe2:	edc0 0a00 	vstr	s1, [r0]
 8008fe6:	4770      	bx	lr

08008fe8 <ai_sum_buffer>:
 8008fe8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008fec:	4298      	cmp	r0, r3
 8008fee:	b081      	sub	sp, #4
 8008ff0:	f080 803a 	bcs.w	8009068 <ai_sum_buffer+0x80>
 8008ff4:	f8d2 c000 	ldr.w	ip, [r2]
 8008ff8:	edd1 0a00 	vldr	s1, [r1]
 8008ffc:	f8cd c000 	str.w	ip, [sp]
 8009000:	ed9d 0a00 	vldr	s0, [sp]
 8009004:	ee30 0a80 	vadd.f32	s0, s1, s0
 8009008:	ed80 0a00 	vstr	s0, [r0]
 800900c:	1d00      	adds	r0, r0, #4
 800900e:	4298      	cmp	r0, r3
 8009010:	d22a      	bcs.n	8009068 <ai_sum_buffer+0x80>
 8009012:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8009016:	ed91 0a01 	vldr	s0, [r1, #4]
 800901a:	f8cd c000 	str.w	ip, [sp]
 800901e:	eddd 0a00 	vldr	s1, [sp]
 8009022:	ee30 0a20 	vadd.f32	s0, s0, s1
 8009026:	ed80 0a00 	vstr	s0, [r0]
 800902a:	1d00      	adds	r0, r0, #4
 800902c:	4298      	cmp	r0, r3
 800902e:	d21b      	bcs.n	8009068 <ai_sum_buffer+0x80>
 8009030:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8009034:	edd1 0a02 	vldr	s1, [r1, #8]
 8009038:	f8cd c000 	str.w	ip, [sp]
 800903c:	ed9d 0a00 	vldr	s0, [sp]
 8009040:	ee30 0a80 	vadd.f32	s0, s1, s0
 8009044:	ed80 0a00 	vstr	s0, [r0]
 8009048:	1d00      	adds	r0, r0, #4
 800904a:	4298      	cmp	r0, r3
 800904c:	d20c      	bcs.n	8009068 <ai_sum_buffer+0x80>
 800904e:	ed91 0a03 	vldr	s0, [r1, #12]
 8009052:	ed92 1a03 	vldr	s2, [r2, #12]
 8009056:	ee30 0a01 	vadd.f32	s0, s0, s2
 800905a:	ed80 0a00 	vstr	s0, [r0]
 800905e:	1d00      	adds	r0, r0, #4
 8009060:	3110      	adds	r1, #16
 8009062:	3210      	adds	r2, #16
 8009064:	4298      	cmp	r0, r3
 8009066:	d3c5      	bcc.n	8008ff4 <ai_sum_buffer+0xc>
 8009068:	b001      	add	sp, #4
 800906a:	4770      	bx	lr

0800906c <ai_sum_f32>:
 800906c:	ed91 0a00 	vldr	s0, [r1]
 8009070:	edd2 0a00 	vldr	s1, [r2]
 8009074:	ee70 0a20 	vadd.f32	s1, s0, s1
 8009078:	edc0 0a00 	vstr	s1, [r0]
 800907c:	4770      	bx	lr
	...

08009080 <ai_sum_buffer_f32>:
 8009080:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009084:	4298      	cmp	r0, r3
 8009086:	b081      	sub	sp, #4
 8009088:	f080 803a 	bcs.w	8009100 <ai_sum_buffer_f32+0x80>
 800908c:	f8d2 c000 	ldr.w	ip, [r2]
 8009090:	edd1 0a00 	vldr	s1, [r1]
 8009094:	f8cd c000 	str.w	ip, [sp]
 8009098:	ed9d 0a00 	vldr	s0, [sp]
 800909c:	ee30 0a80 	vadd.f32	s0, s1, s0
 80090a0:	ed80 0a00 	vstr	s0, [r0]
 80090a4:	1d00      	adds	r0, r0, #4
 80090a6:	4298      	cmp	r0, r3
 80090a8:	d22a      	bcs.n	8009100 <ai_sum_buffer_f32+0x80>
 80090aa:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80090ae:	ed91 0a01 	vldr	s0, [r1, #4]
 80090b2:	f8cd c000 	str.w	ip, [sp]
 80090b6:	eddd 0a00 	vldr	s1, [sp]
 80090ba:	ee30 0a20 	vadd.f32	s0, s0, s1
 80090be:	ed80 0a00 	vstr	s0, [r0]
 80090c2:	1d00      	adds	r0, r0, #4
 80090c4:	4298      	cmp	r0, r3
 80090c6:	d21b      	bcs.n	8009100 <ai_sum_buffer_f32+0x80>
 80090c8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80090cc:	edd1 0a02 	vldr	s1, [r1, #8]
 80090d0:	f8cd c000 	str.w	ip, [sp]
 80090d4:	ed9d 0a00 	vldr	s0, [sp]
 80090d8:	ee30 0a80 	vadd.f32	s0, s1, s0
 80090dc:	ed80 0a00 	vstr	s0, [r0]
 80090e0:	1d00      	adds	r0, r0, #4
 80090e2:	4298      	cmp	r0, r3
 80090e4:	d20c      	bcs.n	8009100 <ai_sum_buffer_f32+0x80>
 80090e6:	ed91 0a03 	vldr	s0, [r1, #12]
 80090ea:	ed92 1a03 	vldr	s2, [r2, #12]
 80090ee:	ee30 0a01 	vadd.f32	s0, s0, s2
 80090f2:	ed80 0a00 	vstr	s0, [r0]
 80090f6:	1d00      	adds	r0, r0, #4
 80090f8:	3110      	adds	r1, #16
 80090fa:	3210      	adds	r2, #16
 80090fc:	4298      	cmp	r0, r3
 80090fe:	d3c5      	bcc.n	800908c <ai_sum_buffer_f32+0xc>
 8009100:	b001      	add	sp, #4
 8009102:	4770      	bx	lr

08009104 <ai_sum_s32>:
 8009104:	680b      	ldr	r3, [r1, #0]
 8009106:	6811      	ldr	r1, [r2, #0]
 8009108:	18cb      	adds	r3, r1, r3
 800910a:	6003      	str	r3, [r0, #0]
 800910c:	4770      	bx	lr

0800910e <ai_sum_buffer_s32>:
 800910e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009112:	4298      	cmp	r0, r3
 8009114:	d300      	bcc.n	8009118 <ai_sum_buffer_s32+0xa>
 8009116:	4770      	bx	lr
 8009118:	b4f0      	push	{r4, r5, r6, r7}
 800911a:	b081      	sub	sp, #4
 800911c:	680e      	ldr	r6, [r1, #0]
 800911e:	6814      	ldr	r4, [r2, #0]
 8009120:	19a6      	adds	r6, r4, r6
 8009122:	f840 6b04 	str.w	r6, [r0], #4
 8009126:	4298      	cmp	r0, r3
 8009128:	d218      	bcs.n	800915c <ai_sum_buffer_s32+0x4e>
 800912a:	684d      	ldr	r5, [r1, #4]
 800912c:	6854      	ldr	r4, [r2, #4]
 800912e:	9400      	str	r4, [sp, #0]
 8009130:	1965      	adds	r5, r4, r5
 8009132:	f840 5b04 	str.w	r5, [r0], #4
 8009136:	4298      	cmp	r0, r3
 8009138:	d210      	bcs.n	800915c <ai_sum_buffer_s32+0x4e>
 800913a:	688c      	ldr	r4, [r1, #8]
 800913c:	6895      	ldr	r5, [r2, #8]
 800913e:	9500      	str	r5, [sp, #0]
 8009140:	192c      	adds	r4, r5, r4
 8009142:	f840 4b04 	str.w	r4, [r0], #4
 8009146:	4298      	cmp	r0, r3
 8009148:	d208      	bcs.n	800915c <ai_sum_buffer_s32+0x4e>
 800914a:	68cd      	ldr	r5, [r1, #12]
 800914c:	68d7      	ldr	r7, [r2, #12]
 800914e:	197d      	adds	r5, r7, r5
 8009150:	f840 5b04 	str.w	r5, [r0], #4
 8009154:	3110      	adds	r1, #16
 8009156:	3210      	adds	r2, #16
 8009158:	4298      	cmp	r0, r3
 800915a:	d3df      	bcc.n	800911c <ai_sum_buffer_s32+0xe>
 800915c:	b001      	add	sp, #4
 800915e:	bcf0      	pop	{r4, r5, r6, r7}
 8009160:	4770      	bx	lr

08009162 <ai_sum_s16>:
 8009162:	880b      	ldrh	r3, [r1, #0]
 8009164:	8811      	ldrh	r1, [r2, #0]
 8009166:	18cb      	adds	r3, r1, r3
 8009168:	8003      	strh	r3, [r0, #0]
 800916a:	4770      	bx	lr

0800916c <ai_sum_buffer_s16>:
 800916c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009170:	4298      	cmp	r0, r3
 8009172:	d300      	bcc.n	8009176 <ai_sum_buffer_s16+0xa>
 8009174:	4770      	bx	lr
 8009176:	b4f0      	push	{r4, r5, r6, r7}
 8009178:	b081      	sub	sp, #4
 800917a:	bf00      	nop
 800917c:	f9b1 6000 	ldrsh.w	r6, [r1]
 8009180:	f9b2 4000 	ldrsh.w	r4, [r2]
 8009184:	19a6      	adds	r6, r4, r6
 8009186:	f820 6b02 	strh.w	r6, [r0], #2
 800918a:	4298      	cmp	r0, r3
 800918c:	d224      	bcs.n	80091d8 <ai_sum_buffer_s16+0x6c>
 800918e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8009192:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8009196:	f8ad 4000 	strh.w	r4, [sp]
 800919a:	f8bd 6000 	ldrh.w	r6, [sp]
 800919e:	1975      	adds	r5, r6, r5
 80091a0:	f820 5b02 	strh.w	r5, [r0], #2
 80091a4:	4298      	cmp	r0, r3
 80091a6:	d217      	bcs.n	80091d8 <ai_sum_buffer_s16+0x6c>
 80091a8:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80091ac:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 80091b0:	f8ad 5000 	strh.w	r5, [sp]
 80091b4:	f8bd 6000 	ldrh.w	r6, [sp]
 80091b8:	1934      	adds	r4, r6, r4
 80091ba:	f820 4b02 	strh.w	r4, [r0], #2
 80091be:	4298      	cmp	r0, r3
 80091c0:	d20a      	bcs.n	80091d8 <ai_sum_buffer_s16+0x6c>
 80091c2:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 80091c6:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80091ca:	197d      	adds	r5, r7, r5
 80091cc:	f820 5b02 	strh.w	r5, [r0], #2
 80091d0:	3108      	adds	r1, #8
 80091d2:	3208      	adds	r2, #8
 80091d4:	4298      	cmp	r0, r3
 80091d6:	d3d1      	bcc.n	800917c <ai_sum_buffer_s16+0x10>
 80091d8:	b001      	add	sp, #4
 80091da:	bcf0      	pop	{r4, r5, r6, r7}
 80091dc:	4770      	bx	lr

080091de <ai_sum_s8>:
 80091de:	780b      	ldrb	r3, [r1, #0]
 80091e0:	7811      	ldrb	r1, [r2, #0]
 80091e2:	18cb      	adds	r3, r1, r3
 80091e4:	7003      	strb	r3, [r0, #0]
 80091e6:	4770      	bx	lr

080091e8 <ai_sum_buffer_s8>:
 80091e8:	4403      	add	r3, r0
 80091ea:	4298      	cmp	r0, r3
 80091ec:	d300      	bcc.n	80091f0 <ai_sum_buffer_s8+0x8>
 80091ee:	4770      	bx	lr
 80091f0:	b4f0      	push	{r4, r5, r6, r7}
 80091f2:	b081      	sub	sp, #4
 80091f4:	f991 6000 	ldrsb.w	r6, [r1]
 80091f8:	f992 4000 	ldrsb.w	r4, [r2]
 80091fc:	19a6      	adds	r6, r4, r6
 80091fe:	f800 6b01 	strb.w	r6, [r0], #1
 8009202:	4298      	cmp	r0, r3
 8009204:	d224      	bcs.n	8009250 <ai_sum_buffer_s8+0x68>
 8009206:	f991 5001 	ldrsb.w	r5, [r1, #1]
 800920a:	f992 4001 	ldrsb.w	r4, [r2, #1]
 800920e:	f88d 4000 	strb.w	r4, [sp]
 8009212:	f89d 6000 	ldrb.w	r6, [sp]
 8009216:	1975      	adds	r5, r6, r5
 8009218:	f800 5b01 	strb.w	r5, [r0], #1
 800921c:	4298      	cmp	r0, r3
 800921e:	d217      	bcs.n	8009250 <ai_sum_buffer_s8+0x68>
 8009220:	f991 4002 	ldrsb.w	r4, [r1, #2]
 8009224:	f992 5002 	ldrsb.w	r5, [r2, #2]
 8009228:	f88d 5000 	strb.w	r5, [sp]
 800922c:	f89d 6000 	ldrb.w	r6, [sp]
 8009230:	1934      	adds	r4, r6, r4
 8009232:	f800 4b01 	strb.w	r4, [r0], #1
 8009236:	4298      	cmp	r0, r3
 8009238:	d20a      	bcs.n	8009250 <ai_sum_buffer_s8+0x68>
 800923a:	f991 5003 	ldrsb.w	r5, [r1, #3]
 800923e:	f992 7003 	ldrsb.w	r7, [r2, #3]
 8009242:	197d      	adds	r5, r7, r5
 8009244:	f800 5b01 	strb.w	r5, [r0], #1
 8009248:	1d09      	adds	r1, r1, #4
 800924a:	1d12      	adds	r2, r2, #4
 800924c:	4298      	cmp	r0, r3
 800924e:	d3d1      	bcc.n	80091f4 <ai_sum_buffer_s8+0xc>
 8009250:	b001      	add	sp, #4
 8009252:	bcf0      	pop	{r4, r5, r6, r7}
 8009254:	4770      	bx	lr

08009256 <ai_sum_u32>:
 8009256:	680b      	ldr	r3, [r1, #0]
 8009258:	6811      	ldr	r1, [r2, #0]
 800925a:	18cb      	adds	r3, r1, r3
 800925c:	6003      	str	r3, [r0, #0]
 800925e:	4770      	bx	lr

08009260 <ai_sum_buffer_u32>:
 8009260:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009264:	4298      	cmp	r0, r3
 8009266:	d300      	bcc.n	800926a <ai_sum_buffer_u32+0xa>
 8009268:	4770      	bx	lr
 800926a:	b4f0      	push	{r4, r5, r6, r7}
 800926c:	b081      	sub	sp, #4
 800926e:	680e      	ldr	r6, [r1, #0]
 8009270:	6814      	ldr	r4, [r2, #0]
 8009272:	19a6      	adds	r6, r4, r6
 8009274:	f840 6b04 	str.w	r6, [r0], #4
 8009278:	4298      	cmp	r0, r3
 800927a:	d218      	bcs.n	80092ae <ai_sum_buffer_u32+0x4e>
 800927c:	684d      	ldr	r5, [r1, #4]
 800927e:	6854      	ldr	r4, [r2, #4]
 8009280:	9400      	str	r4, [sp, #0]
 8009282:	1965      	adds	r5, r4, r5
 8009284:	f840 5b04 	str.w	r5, [r0], #4
 8009288:	4298      	cmp	r0, r3
 800928a:	d210      	bcs.n	80092ae <ai_sum_buffer_u32+0x4e>
 800928c:	688c      	ldr	r4, [r1, #8]
 800928e:	6895      	ldr	r5, [r2, #8]
 8009290:	9500      	str	r5, [sp, #0]
 8009292:	192c      	adds	r4, r5, r4
 8009294:	f840 4b04 	str.w	r4, [r0], #4
 8009298:	4298      	cmp	r0, r3
 800929a:	d208      	bcs.n	80092ae <ai_sum_buffer_u32+0x4e>
 800929c:	68cd      	ldr	r5, [r1, #12]
 800929e:	68d7      	ldr	r7, [r2, #12]
 80092a0:	197d      	adds	r5, r7, r5
 80092a2:	f840 5b04 	str.w	r5, [r0], #4
 80092a6:	3110      	adds	r1, #16
 80092a8:	3210      	adds	r2, #16
 80092aa:	4298      	cmp	r0, r3
 80092ac:	d3df      	bcc.n	800926e <ai_sum_buffer_u32+0xe>
 80092ae:	b001      	add	sp, #4
 80092b0:	bcf0      	pop	{r4, r5, r6, r7}
 80092b2:	4770      	bx	lr

080092b4 <ai_sum_u16>:
 80092b4:	880b      	ldrh	r3, [r1, #0]
 80092b6:	8811      	ldrh	r1, [r2, #0]
 80092b8:	18cb      	adds	r3, r1, r3
 80092ba:	8003      	strh	r3, [r0, #0]
 80092bc:	4770      	bx	lr

080092be <ai_sum_buffer_u16>:
 80092be:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80092c2:	4298      	cmp	r0, r3
 80092c4:	d300      	bcc.n	80092c8 <ai_sum_buffer_u16+0xa>
 80092c6:	4770      	bx	lr
 80092c8:	b4f0      	push	{r4, r5, r6, r7}
 80092ca:	b081      	sub	sp, #4
 80092cc:	880e      	ldrh	r6, [r1, #0]
 80092ce:	8814      	ldrh	r4, [r2, #0]
 80092d0:	19a6      	adds	r6, r4, r6
 80092d2:	f820 6b02 	strh.w	r6, [r0], #2
 80092d6:	4298      	cmp	r0, r3
 80092d8:	d21a      	bcs.n	8009310 <ai_sum_buffer_u16+0x52>
 80092da:	884d      	ldrh	r5, [r1, #2]
 80092dc:	8854      	ldrh	r4, [r2, #2]
 80092de:	f8ad 4000 	strh.w	r4, [sp]
 80092e2:	1965      	adds	r5, r4, r5
 80092e4:	f820 5b02 	strh.w	r5, [r0], #2
 80092e8:	4298      	cmp	r0, r3
 80092ea:	d211      	bcs.n	8009310 <ai_sum_buffer_u16+0x52>
 80092ec:	888c      	ldrh	r4, [r1, #4]
 80092ee:	8895      	ldrh	r5, [r2, #4]
 80092f0:	f8ad 5000 	strh.w	r5, [sp]
 80092f4:	192c      	adds	r4, r5, r4
 80092f6:	f820 4b02 	strh.w	r4, [r0], #2
 80092fa:	4298      	cmp	r0, r3
 80092fc:	d208      	bcs.n	8009310 <ai_sum_buffer_u16+0x52>
 80092fe:	88cd      	ldrh	r5, [r1, #6]
 8009300:	88d7      	ldrh	r7, [r2, #6]
 8009302:	197d      	adds	r5, r7, r5
 8009304:	f820 5b02 	strh.w	r5, [r0], #2
 8009308:	3108      	adds	r1, #8
 800930a:	3208      	adds	r2, #8
 800930c:	4298      	cmp	r0, r3
 800930e:	d3dd      	bcc.n	80092cc <ai_sum_buffer_u16+0xe>
 8009310:	b001      	add	sp, #4
 8009312:	bcf0      	pop	{r4, r5, r6, r7}
 8009314:	4770      	bx	lr

08009316 <ai_sum_u8>:
 8009316:	780b      	ldrb	r3, [r1, #0]
 8009318:	7811      	ldrb	r1, [r2, #0]
 800931a:	18cb      	adds	r3, r1, r3
 800931c:	7003      	strb	r3, [r0, #0]
 800931e:	4770      	bx	lr

08009320 <ai_sum_buffer_u8>:
 8009320:	4403      	add	r3, r0
 8009322:	4298      	cmp	r0, r3
 8009324:	d300      	bcc.n	8009328 <ai_sum_buffer_u8+0x8>
 8009326:	4770      	bx	lr
 8009328:	b4f0      	push	{r4, r5, r6, r7}
 800932a:	b081      	sub	sp, #4
 800932c:	780e      	ldrb	r6, [r1, #0]
 800932e:	7814      	ldrb	r4, [r2, #0]
 8009330:	19a6      	adds	r6, r4, r6
 8009332:	f800 6b01 	strb.w	r6, [r0], #1
 8009336:	4298      	cmp	r0, r3
 8009338:	d21a      	bcs.n	8009370 <ai_sum_buffer_u8+0x50>
 800933a:	784d      	ldrb	r5, [r1, #1]
 800933c:	7854      	ldrb	r4, [r2, #1]
 800933e:	f88d 4000 	strb.w	r4, [sp]
 8009342:	1965      	adds	r5, r4, r5
 8009344:	f800 5b01 	strb.w	r5, [r0], #1
 8009348:	4298      	cmp	r0, r3
 800934a:	d211      	bcs.n	8009370 <ai_sum_buffer_u8+0x50>
 800934c:	788c      	ldrb	r4, [r1, #2]
 800934e:	7895      	ldrb	r5, [r2, #2]
 8009350:	f88d 5000 	strb.w	r5, [sp]
 8009354:	192c      	adds	r4, r5, r4
 8009356:	f800 4b01 	strb.w	r4, [r0], #1
 800935a:	4298      	cmp	r0, r3
 800935c:	d208      	bcs.n	8009370 <ai_sum_buffer_u8+0x50>
 800935e:	78cd      	ldrb	r5, [r1, #3]
 8009360:	78d7      	ldrb	r7, [r2, #3]
 8009362:	197d      	adds	r5, r7, r5
 8009364:	f800 5b01 	strb.w	r5, [r0], #1
 8009368:	1d09      	adds	r1, r1, #4
 800936a:	1d12      	adds	r2, r2, #4
 800936c:	4298      	cmp	r0, r3
 800936e:	d3dd      	bcc.n	800932c <ai_sum_buffer_u8+0xc>
 8009370:	b001      	add	sp, #4
 8009372:	bcf0      	pop	{r4, r5, r6, r7}
 8009374:	4770      	bx	lr

08009376 <ai_sub>:
 8009376:	ed91 0a00 	vldr	s0, [r1]
 800937a:	edd2 0a00 	vldr	s1, [r2]
 800937e:	ee70 0a60 	vsub.f32	s1, s0, s1
 8009382:	edc0 0a00 	vstr	s1, [r0]
 8009386:	4770      	bx	lr

08009388 <ai_sub_buffer>:
 8009388:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800938c:	4298      	cmp	r0, r3
 800938e:	b081      	sub	sp, #4
 8009390:	f080 803a 	bcs.w	8009408 <ai_sub_buffer+0x80>
 8009394:	f8d2 c000 	ldr.w	ip, [r2]
 8009398:	edd1 0a00 	vldr	s1, [r1]
 800939c:	f8cd c000 	str.w	ip, [sp]
 80093a0:	ed9d 0a00 	vldr	s0, [sp]
 80093a4:	ee30 0ac0 	vsub.f32	s0, s1, s0
 80093a8:	ed80 0a00 	vstr	s0, [r0]
 80093ac:	1d00      	adds	r0, r0, #4
 80093ae:	4298      	cmp	r0, r3
 80093b0:	d22a      	bcs.n	8009408 <ai_sub_buffer+0x80>
 80093b2:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80093b6:	ed91 0a01 	vldr	s0, [r1, #4]
 80093ba:	f8cd c000 	str.w	ip, [sp]
 80093be:	eddd 0a00 	vldr	s1, [sp]
 80093c2:	ee30 0a60 	vsub.f32	s0, s0, s1
 80093c6:	ed80 0a00 	vstr	s0, [r0]
 80093ca:	1d00      	adds	r0, r0, #4
 80093cc:	4298      	cmp	r0, r3
 80093ce:	d21b      	bcs.n	8009408 <ai_sub_buffer+0x80>
 80093d0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80093d4:	edd1 0a02 	vldr	s1, [r1, #8]
 80093d8:	f8cd c000 	str.w	ip, [sp]
 80093dc:	ed9d 0a00 	vldr	s0, [sp]
 80093e0:	ee30 0ac0 	vsub.f32	s0, s1, s0
 80093e4:	ed80 0a00 	vstr	s0, [r0]
 80093e8:	1d00      	adds	r0, r0, #4
 80093ea:	4298      	cmp	r0, r3
 80093ec:	d20c      	bcs.n	8009408 <ai_sub_buffer+0x80>
 80093ee:	ed91 0a03 	vldr	s0, [r1, #12]
 80093f2:	ed92 1a03 	vldr	s2, [r2, #12]
 80093f6:	ee30 0a41 	vsub.f32	s0, s0, s2
 80093fa:	ed80 0a00 	vstr	s0, [r0]
 80093fe:	1d00      	adds	r0, r0, #4
 8009400:	3110      	adds	r1, #16
 8009402:	3210      	adds	r2, #16
 8009404:	4298      	cmp	r0, r3
 8009406:	d3c5      	bcc.n	8009394 <ai_sub_buffer+0xc>
 8009408:	b001      	add	sp, #4
 800940a:	4770      	bx	lr

0800940c <ai_sub_f32>:
 800940c:	ed91 0a00 	vldr	s0, [r1]
 8009410:	edd2 0a00 	vldr	s1, [r2]
 8009414:	ee70 0a60 	vsub.f32	s1, s0, s1
 8009418:	edc0 0a00 	vstr	s1, [r0]
 800941c:	4770      	bx	lr
	...

08009420 <ai_sub_buffer_f32>:
 8009420:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009424:	4298      	cmp	r0, r3
 8009426:	b081      	sub	sp, #4
 8009428:	f080 803a 	bcs.w	80094a0 <ai_sub_buffer_f32+0x80>
 800942c:	f8d2 c000 	ldr.w	ip, [r2]
 8009430:	edd1 0a00 	vldr	s1, [r1]
 8009434:	f8cd c000 	str.w	ip, [sp]
 8009438:	ed9d 0a00 	vldr	s0, [sp]
 800943c:	ee30 0ac0 	vsub.f32	s0, s1, s0
 8009440:	ed80 0a00 	vstr	s0, [r0]
 8009444:	1d00      	adds	r0, r0, #4
 8009446:	4298      	cmp	r0, r3
 8009448:	d22a      	bcs.n	80094a0 <ai_sub_buffer_f32+0x80>
 800944a:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800944e:	ed91 0a01 	vldr	s0, [r1, #4]
 8009452:	f8cd c000 	str.w	ip, [sp]
 8009456:	eddd 0a00 	vldr	s1, [sp]
 800945a:	ee30 0a60 	vsub.f32	s0, s0, s1
 800945e:	ed80 0a00 	vstr	s0, [r0]
 8009462:	1d00      	adds	r0, r0, #4
 8009464:	4298      	cmp	r0, r3
 8009466:	d21b      	bcs.n	80094a0 <ai_sub_buffer_f32+0x80>
 8009468:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800946c:	edd1 0a02 	vldr	s1, [r1, #8]
 8009470:	f8cd c000 	str.w	ip, [sp]
 8009474:	ed9d 0a00 	vldr	s0, [sp]
 8009478:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800947c:	ed80 0a00 	vstr	s0, [r0]
 8009480:	1d00      	adds	r0, r0, #4
 8009482:	4298      	cmp	r0, r3
 8009484:	d20c      	bcs.n	80094a0 <ai_sub_buffer_f32+0x80>
 8009486:	ed91 0a03 	vldr	s0, [r1, #12]
 800948a:	ed92 1a03 	vldr	s2, [r2, #12]
 800948e:	ee30 0a41 	vsub.f32	s0, s0, s2
 8009492:	ed80 0a00 	vstr	s0, [r0]
 8009496:	1d00      	adds	r0, r0, #4
 8009498:	3110      	adds	r1, #16
 800949a:	3210      	adds	r2, #16
 800949c:	4298      	cmp	r0, r3
 800949e:	d3c5      	bcc.n	800942c <ai_sub_buffer_f32+0xc>
 80094a0:	b001      	add	sp, #4
 80094a2:	4770      	bx	lr

080094a4 <ai_sub_s32>:
 80094a4:	680b      	ldr	r3, [r1, #0]
 80094a6:	6811      	ldr	r1, [r2, #0]
 80094a8:	1a5b      	subs	r3, r3, r1
 80094aa:	6003      	str	r3, [r0, #0]
 80094ac:	4770      	bx	lr

080094ae <ai_sub_buffer_s32>:
 80094ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80094b2:	4298      	cmp	r0, r3
 80094b4:	d300      	bcc.n	80094b8 <ai_sub_buffer_s32+0xa>
 80094b6:	4770      	bx	lr
 80094b8:	b4f0      	push	{r4, r5, r6, r7}
 80094ba:	b081      	sub	sp, #4
 80094bc:	680e      	ldr	r6, [r1, #0]
 80094be:	6814      	ldr	r4, [r2, #0]
 80094c0:	1b36      	subs	r6, r6, r4
 80094c2:	f840 6b04 	str.w	r6, [r0], #4
 80094c6:	4298      	cmp	r0, r3
 80094c8:	d218      	bcs.n	80094fc <ai_sub_buffer_s32+0x4e>
 80094ca:	684d      	ldr	r5, [r1, #4]
 80094cc:	6854      	ldr	r4, [r2, #4]
 80094ce:	9400      	str	r4, [sp, #0]
 80094d0:	1b2d      	subs	r5, r5, r4
 80094d2:	f840 5b04 	str.w	r5, [r0], #4
 80094d6:	4298      	cmp	r0, r3
 80094d8:	d210      	bcs.n	80094fc <ai_sub_buffer_s32+0x4e>
 80094da:	688c      	ldr	r4, [r1, #8]
 80094dc:	6895      	ldr	r5, [r2, #8]
 80094de:	9500      	str	r5, [sp, #0]
 80094e0:	1b64      	subs	r4, r4, r5
 80094e2:	f840 4b04 	str.w	r4, [r0], #4
 80094e6:	4298      	cmp	r0, r3
 80094e8:	d208      	bcs.n	80094fc <ai_sub_buffer_s32+0x4e>
 80094ea:	68cd      	ldr	r5, [r1, #12]
 80094ec:	68d7      	ldr	r7, [r2, #12]
 80094ee:	1bed      	subs	r5, r5, r7
 80094f0:	f840 5b04 	str.w	r5, [r0], #4
 80094f4:	3110      	adds	r1, #16
 80094f6:	3210      	adds	r2, #16
 80094f8:	4298      	cmp	r0, r3
 80094fa:	d3df      	bcc.n	80094bc <ai_sub_buffer_s32+0xe>
 80094fc:	b001      	add	sp, #4
 80094fe:	bcf0      	pop	{r4, r5, r6, r7}
 8009500:	4770      	bx	lr

08009502 <ai_sub_s16>:
 8009502:	880b      	ldrh	r3, [r1, #0]
 8009504:	8811      	ldrh	r1, [r2, #0]
 8009506:	1a5b      	subs	r3, r3, r1
 8009508:	8003      	strh	r3, [r0, #0]
 800950a:	4770      	bx	lr

0800950c <ai_sub_buffer_s16>:
 800950c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009510:	4298      	cmp	r0, r3
 8009512:	d300      	bcc.n	8009516 <ai_sub_buffer_s16+0xa>
 8009514:	4770      	bx	lr
 8009516:	b4f0      	push	{r4, r5, r6, r7}
 8009518:	b081      	sub	sp, #4
 800951a:	bf00      	nop
 800951c:	f9b1 6000 	ldrsh.w	r6, [r1]
 8009520:	f9b2 4000 	ldrsh.w	r4, [r2]
 8009524:	1b36      	subs	r6, r6, r4
 8009526:	f820 6b02 	strh.w	r6, [r0], #2
 800952a:	4298      	cmp	r0, r3
 800952c:	d224      	bcs.n	8009578 <ai_sub_buffer_s16+0x6c>
 800952e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8009532:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8009536:	f8ad 4000 	strh.w	r4, [sp]
 800953a:	f8bd 6000 	ldrh.w	r6, [sp]
 800953e:	1bad      	subs	r5, r5, r6
 8009540:	f820 5b02 	strh.w	r5, [r0], #2
 8009544:	4298      	cmp	r0, r3
 8009546:	d217      	bcs.n	8009578 <ai_sub_buffer_s16+0x6c>
 8009548:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800954c:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8009550:	f8ad 5000 	strh.w	r5, [sp]
 8009554:	f8bd 6000 	ldrh.w	r6, [sp]
 8009558:	1ba4      	subs	r4, r4, r6
 800955a:	f820 4b02 	strh.w	r4, [r0], #2
 800955e:	4298      	cmp	r0, r3
 8009560:	d20a      	bcs.n	8009578 <ai_sub_buffer_s16+0x6c>
 8009562:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 8009566:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800956a:	1bed      	subs	r5, r5, r7
 800956c:	f820 5b02 	strh.w	r5, [r0], #2
 8009570:	3108      	adds	r1, #8
 8009572:	3208      	adds	r2, #8
 8009574:	4298      	cmp	r0, r3
 8009576:	d3d1      	bcc.n	800951c <ai_sub_buffer_s16+0x10>
 8009578:	b001      	add	sp, #4
 800957a:	bcf0      	pop	{r4, r5, r6, r7}
 800957c:	4770      	bx	lr

0800957e <ai_sub_s8>:
 800957e:	780b      	ldrb	r3, [r1, #0]
 8009580:	7811      	ldrb	r1, [r2, #0]
 8009582:	1a5b      	subs	r3, r3, r1
 8009584:	7003      	strb	r3, [r0, #0]
 8009586:	4770      	bx	lr

08009588 <ai_sub_buffer_s8>:
 8009588:	4403      	add	r3, r0
 800958a:	4298      	cmp	r0, r3
 800958c:	d300      	bcc.n	8009590 <ai_sub_buffer_s8+0x8>
 800958e:	4770      	bx	lr
 8009590:	b4f0      	push	{r4, r5, r6, r7}
 8009592:	b081      	sub	sp, #4
 8009594:	f991 6000 	ldrsb.w	r6, [r1]
 8009598:	f992 4000 	ldrsb.w	r4, [r2]
 800959c:	1b36      	subs	r6, r6, r4
 800959e:	f800 6b01 	strb.w	r6, [r0], #1
 80095a2:	4298      	cmp	r0, r3
 80095a4:	d224      	bcs.n	80095f0 <ai_sub_buffer_s8+0x68>
 80095a6:	f991 5001 	ldrsb.w	r5, [r1, #1]
 80095aa:	f992 4001 	ldrsb.w	r4, [r2, #1]
 80095ae:	f88d 4000 	strb.w	r4, [sp]
 80095b2:	f89d 6000 	ldrb.w	r6, [sp]
 80095b6:	1bad      	subs	r5, r5, r6
 80095b8:	f800 5b01 	strb.w	r5, [r0], #1
 80095bc:	4298      	cmp	r0, r3
 80095be:	d217      	bcs.n	80095f0 <ai_sub_buffer_s8+0x68>
 80095c0:	f991 4002 	ldrsb.w	r4, [r1, #2]
 80095c4:	f992 5002 	ldrsb.w	r5, [r2, #2]
 80095c8:	f88d 5000 	strb.w	r5, [sp]
 80095cc:	f89d 6000 	ldrb.w	r6, [sp]
 80095d0:	1ba4      	subs	r4, r4, r6
 80095d2:	f800 4b01 	strb.w	r4, [r0], #1
 80095d6:	4298      	cmp	r0, r3
 80095d8:	d20a      	bcs.n	80095f0 <ai_sub_buffer_s8+0x68>
 80095da:	f991 5003 	ldrsb.w	r5, [r1, #3]
 80095de:	f992 7003 	ldrsb.w	r7, [r2, #3]
 80095e2:	1bed      	subs	r5, r5, r7
 80095e4:	f800 5b01 	strb.w	r5, [r0], #1
 80095e8:	1d09      	adds	r1, r1, #4
 80095ea:	1d12      	adds	r2, r2, #4
 80095ec:	4298      	cmp	r0, r3
 80095ee:	d3d1      	bcc.n	8009594 <ai_sub_buffer_s8+0xc>
 80095f0:	b001      	add	sp, #4
 80095f2:	bcf0      	pop	{r4, r5, r6, r7}
 80095f4:	4770      	bx	lr

080095f6 <ai_sub_u32>:
 80095f6:	680b      	ldr	r3, [r1, #0]
 80095f8:	6811      	ldr	r1, [r2, #0]
 80095fa:	1a5b      	subs	r3, r3, r1
 80095fc:	6003      	str	r3, [r0, #0]
 80095fe:	4770      	bx	lr

08009600 <ai_sub_buffer_u32>:
 8009600:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009604:	4298      	cmp	r0, r3
 8009606:	d300      	bcc.n	800960a <ai_sub_buffer_u32+0xa>
 8009608:	4770      	bx	lr
 800960a:	b4f0      	push	{r4, r5, r6, r7}
 800960c:	b081      	sub	sp, #4
 800960e:	680e      	ldr	r6, [r1, #0]
 8009610:	6814      	ldr	r4, [r2, #0]
 8009612:	1b36      	subs	r6, r6, r4
 8009614:	f840 6b04 	str.w	r6, [r0], #4
 8009618:	4298      	cmp	r0, r3
 800961a:	d218      	bcs.n	800964e <ai_sub_buffer_u32+0x4e>
 800961c:	684d      	ldr	r5, [r1, #4]
 800961e:	6854      	ldr	r4, [r2, #4]
 8009620:	9400      	str	r4, [sp, #0]
 8009622:	1b2d      	subs	r5, r5, r4
 8009624:	f840 5b04 	str.w	r5, [r0], #4
 8009628:	4298      	cmp	r0, r3
 800962a:	d210      	bcs.n	800964e <ai_sub_buffer_u32+0x4e>
 800962c:	688c      	ldr	r4, [r1, #8]
 800962e:	6895      	ldr	r5, [r2, #8]
 8009630:	9500      	str	r5, [sp, #0]
 8009632:	1b64      	subs	r4, r4, r5
 8009634:	f840 4b04 	str.w	r4, [r0], #4
 8009638:	4298      	cmp	r0, r3
 800963a:	d208      	bcs.n	800964e <ai_sub_buffer_u32+0x4e>
 800963c:	68cd      	ldr	r5, [r1, #12]
 800963e:	68d7      	ldr	r7, [r2, #12]
 8009640:	1bed      	subs	r5, r5, r7
 8009642:	f840 5b04 	str.w	r5, [r0], #4
 8009646:	3110      	adds	r1, #16
 8009648:	3210      	adds	r2, #16
 800964a:	4298      	cmp	r0, r3
 800964c:	d3df      	bcc.n	800960e <ai_sub_buffer_u32+0xe>
 800964e:	b001      	add	sp, #4
 8009650:	bcf0      	pop	{r4, r5, r6, r7}
 8009652:	4770      	bx	lr

08009654 <ai_sub_u16>:
 8009654:	880b      	ldrh	r3, [r1, #0]
 8009656:	8811      	ldrh	r1, [r2, #0]
 8009658:	1a5b      	subs	r3, r3, r1
 800965a:	8003      	strh	r3, [r0, #0]
 800965c:	4770      	bx	lr

0800965e <ai_sub_buffer_u16>:
 800965e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009662:	4298      	cmp	r0, r3
 8009664:	d300      	bcc.n	8009668 <ai_sub_buffer_u16+0xa>
 8009666:	4770      	bx	lr
 8009668:	b4f0      	push	{r4, r5, r6, r7}
 800966a:	b081      	sub	sp, #4
 800966c:	880e      	ldrh	r6, [r1, #0]
 800966e:	8814      	ldrh	r4, [r2, #0]
 8009670:	1b36      	subs	r6, r6, r4
 8009672:	f820 6b02 	strh.w	r6, [r0], #2
 8009676:	4298      	cmp	r0, r3
 8009678:	d21a      	bcs.n	80096b0 <ai_sub_buffer_u16+0x52>
 800967a:	884d      	ldrh	r5, [r1, #2]
 800967c:	8854      	ldrh	r4, [r2, #2]
 800967e:	f8ad 4000 	strh.w	r4, [sp]
 8009682:	1b2d      	subs	r5, r5, r4
 8009684:	f820 5b02 	strh.w	r5, [r0], #2
 8009688:	4298      	cmp	r0, r3
 800968a:	d211      	bcs.n	80096b0 <ai_sub_buffer_u16+0x52>
 800968c:	888c      	ldrh	r4, [r1, #4]
 800968e:	8895      	ldrh	r5, [r2, #4]
 8009690:	f8ad 5000 	strh.w	r5, [sp]
 8009694:	1b64      	subs	r4, r4, r5
 8009696:	f820 4b02 	strh.w	r4, [r0], #2
 800969a:	4298      	cmp	r0, r3
 800969c:	d208      	bcs.n	80096b0 <ai_sub_buffer_u16+0x52>
 800969e:	88cd      	ldrh	r5, [r1, #6]
 80096a0:	88d7      	ldrh	r7, [r2, #6]
 80096a2:	1bed      	subs	r5, r5, r7
 80096a4:	f820 5b02 	strh.w	r5, [r0], #2
 80096a8:	3108      	adds	r1, #8
 80096aa:	3208      	adds	r2, #8
 80096ac:	4298      	cmp	r0, r3
 80096ae:	d3dd      	bcc.n	800966c <ai_sub_buffer_u16+0xe>
 80096b0:	b001      	add	sp, #4
 80096b2:	bcf0      	pop	{r4, r5, r6, r7}
 80096b4:	4770      	bx	lr

080096b6 <ai_sub_u8>:
 80096b6:	780b      	ldrb	r3, [r1, #0]
 80096b8:	7811      	ldrb	r1, [r2, #0]
 80096ba:	1a5b      	subs	r3, r3, r1
 80096bc:	7003      	strb	r3, [r0, #0]
 80096be:	4770      	bx	lr

080096c0 <ai_sub_buffer_u8>:
 80096c0:	4403      	add	r3, r0
 80096c2:	4298      	cmp	r0, r3
 80096c4:	d300      	bcc.n	80096c8 <ai_sub_buffer_u8+0x8>
 80096c6:	4770      	bx	lr
 80096c8:	b4f0      	push	{r4, r5, r6, r7}
 80096ca:	b081      	sub	sp, #4
 80096cc:	780e      	ldrb	r6, [r1, #0]
 80096ce:	7814      	ldrb	r4, [r2, #0]
 80096d0:	1b36      	subs	r6, r6, r4
 80096d2:	f800 6b01 	strb.w	r6, [r0], #1
 80096d6:	4298      	cmp	r0, r3
 80096d8:	d21a      	bcs.n	8009710 <ai_sub_buffer_u8+0x50>
 80096da:	784d      	ldrb	r5, [r1, #1]
 80096dc:	7854      	ldrb	r4, [r2, #1]
 80096de:	f88d 4000 	strb.w	r4, [sp]
 80096e2:	1b2d      	subs	r5, r5, r4
 80096e4:	f800 5b01 	strb.w	r5, [r0], #1
 80096e8:	4298      	cmp	r0, r3
 80096ea:	d211      	bcs.n	8009710 <ai_sub_buffer_u8+0x50>
 80096ec:	788c      	ldrb	r4, [r1, #2]
 80096ee:	7895      	ldrb	r5, [r2, #2]
 80096f0:	f88d 5000 	strb.w	r5, [sp]
 80096f4:	1b64      	subs	r4, r4, r5
 80096f6:	f800 4b01 	strb.w	r4, [r0], #1
 80096fa:	4298      	cmp	r0, r3
 80096fc:	d208      	bcs.n	8009710 <ai_sub_buffer_u8+0x50>
 80096fe:	78cd      	ldrb	r5, [r1, #3]
 8009700:	78d7      	ldrb	r7, [r2, #3]
 8009702:	1bed      	subs	r5, r5, r7
 8009704:	f800 5b01 	strb.w	r5, [r0], #1
 8009708:	1d09      	adds	r1, r1, #4
 800970a:	1d12      	adds	r2, r2, #4
 800970c:	4298      	cmp	r0, r3
 800970e:	d3dd      	bcc.n	80096cc <ai_sub_buffer_u8+0xc>
 8009710:	b001      	add	sp, #4
 8009712:	bcf0      	pop	{r4, r5, r6, r7}
 8009714:	4770      	bx	lr

08009716 <ai_mul>:
 8009716:	ed91 0a00 	vldr	s0, [r1]
 800971a:	edd2 0a00 	vldr	s1, [r2]
 800971e:	ee60 0a20 	vmul.f32	s1, s0, s1
 8009722:	edc0 0a00 	vstr	s1, [r0]
 8009726:	4770      	bx	lr

08009728 <ai_mul_buffer>:
 8009728:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800972c:	4298      	cmp	r0, r3
 800972e:	b081      	sub	sp, #4
 8009730:	f080 803a 	bcs.w	80097a8 <ai_mul_buffer+0x80>
 8009734:	f8d2 c000 	ldr.w	ip, [r2]
 8009738:	edd1 0a00 	vldr	s1, [r1]
 800973c:	f8cd c000 	str.w	ip, [sp]
 8009740:	ed9d 0a00 	vldr	s0, [sp]
 8009744:	ee20 0a80 	vmul.f32	s0, s1, s0
 8009748:	ed80 0a00 	vstr	s0, [r0]
 800974c:	1d00      	adds	r0, r0, #4
 800974e:	4298      	cmp	r0, r3
 8009750:	d22a      	bcs.n	80097a8 <ai_mul_buffer+0x80>
 8009752:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8009756:	ed91 0a01 	vldr	s0, [r1, #4]
 800975a:	f8cd c000 	str.w	ip, [sp]
 800975e:	eddd 0a00 	vldr	s1, [sp]
 8009762:	ee20 0a20 	vmul.f32	s0, s0, s1
 8009766:	ed80 0a00 	vstr	s0, [r0]
 800976a:	1d00      	adds	r0, r0, #4
 800976c:	4298      	cmp	r0, r3
 800976e:	d21b      	bcs.n	80097a8 <ai_mul_buffer+0x80>
 8009770:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8009774:	edd1 0a02 	vldr	s1, [r1, #8]
 8009778:	f8cd c000 	str.w	ip, [sp]
 800977c:	ed9d 0a00 	vldr	s0, [sp]
 8009780:	ee20 0a80 	vmul.f32	s0, s1, s0
 8009784:	ed80 0a00 	vstr	s0, [r0]
 8009788:	1d00      	adds	r0, r0, #4
 800978a:	4298      	cmp	r0, r3
 800978c:	d20c      	bcs.n	80097a8 <ai_mul_buffer+0x80>
 800978e:	ed91 0a03 	vldr	s0, [r1, #12]
 8009792:	ed92 1a03 	vldr	s2, [r2, #12]
 8009796:	ee20 0a01 	vmul.f32	s0, s0, s2
 800979a:	ed80 0a00 	vstr	s0, [r0]
 800979e:	1d00      	adds	r0, r0, #4
 80097a0:	3110      	adds	r1, #16
 80097a2:	3210      	adds	r2, #16
 80097a4:	4298      	cmp	r0, r3
 80097a6:	d3c5      	bcc.n	8009734 <ai_mul_buffer+0xc>
 80097a8:	b001      	add	sp, #4
 80097aa:	4770      	bx	lr

080097ac <ai_mul_f32>:
 80097ac:	ed91 0a00 	vldr	s0, [r1]
 80097b0:	edd2 0a00 	vldr	s1, [r2]
 80097b4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80097b8:	edc0 0a00 	vstr	s1, [r0]
 80097bc:	4770      	bx	lr
	...

080097c0 <ai_mul_buffer_f32>:
 80097c0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80097c4:	4298      	cmp	r0, r3
 80097c6:	b081      	sub	sp, #4
 80097c8:	f080 803a 	bcs.w	8009840 <ai_mul_buffer_f32+0x80>
 80097cc:	f8d2 c000 	ldr.w	ip, [r2]
 80097d0:	edd1 0a00 	vldr	s1, [r1]
 80097d4:	f8cd c000 	str.w	ip, [sp]
 80097d8:	ed9d 0a00 	vldr	s0, [sp]
 80097dc:	ee20 0a80 	vmul.f32	s0, s1, s0
 80097e0:	ed80 0a00 	vstr	s0, [r0]
 80097e4:	1d00      	adds	r0, r0, #4
 80097e6:	4298      	cmp	r0, r3
 80097e8:	d22a      	bcs.n	8009840 <ai_mul_buffer_f32+0x80>
 80097ea:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80097ee:	ed91 0a01 	vldr	s0, [r1, #4]
 80097f2:	f8cd c000 	str.w	ip, [sp]
 80097f6:	eddd 0a00 	vldr	s1, [sp]
 80097fa:	ee20 0a20 	vmul.f32	s0, s0, s1
 80097fe:	ed80 0a00 	vstr	s0, [r0]
 8009802:	1d00      	adds	r0, r0, #4
 8009804:	4298      	cmp	r0, r3
 8009806:	d21b      	bcs.n	8009840 <ai_mul_buffer_f32+0x80>
 8009808:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800980c:	edd1 0a02 	vldr	s1, [r1, #8]
 8009810:	f8cd c000 	str.w	ip, [sp]
 8009814:	ed9d 0a00 	vldr	s0, [sp]
 8009818:	ee20 0a80 	vmul.f32	s0, s1, s0
 800981c:	ed80 0a00 	vstr	s0, [r0]
 8009820:	1d00      	adds	r0, r0, #4
 8009822:	4298      	cmp	r0, r3
 8009824:	d20c      	bcs.n	8009840 <ai_mul_buffer_f32+0x80>
 8009826:	ed91 0a03 	vldr	s0, [r1, #12]
 800982a:	ed92 1a03 	vldr	s2, [r2, #12]
 800982e:	ee20 0a01 	vmul.f32	s0, s0, s2
 8009832:	ed80 0a00 	vstr	s0, [r0]
 8009836:	1d00      	adds	r0, r0, #4
 8009838:	3110      	adds	r1, #16
 800983a:	3210      	adds	r2, #16
 800983c:	4298      	cmp	r0, r3
 800983e:	d3c5      	bcc.n	80097cc <ai_mul_buffer_f32+0xc>
 8009840:	b001      	add	sp, #4
 8009842:	4770      	bx	lr

08009844 <ai_mul_s32>:
 8009844:	680b      	ldr	r3, [r1, #0]
 8009846:	6811      	ldr	r1, [r2, #0]
 8009848:	434b      	muls	r3, r1
 800984a:	6003      	str	r3, [r0, #0]
 800984c:	4770      	bx	lr

0800984e <ai_mul_buffer_s32>:
 800984e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009852:	4298      	cmp	r0, r3
 8009854:	d300      	bcc.n	8009858 <ai_mul_buffer_s32+0xa>
 8009856:	4770      	bx	lr
 8009858:	b4f0      	push	{r4, r5, r6, r7}
 800985a:	b081      	sub	sp, #4
 800985c:	680e      	ldr	r6, [r1, #0]
 800985e:	6814      	ldr	r4, [r2, #0]
 8009860:	4366      	muls	r6, r4
 8009862:	f840 6b04 	str.w	r6, [r0], #4
 8009866:	4298      	cmp	r0, r3
 8009868:	d218      	bcs.n	800989c <ai_mul_buffer_s32+0x4e>
 800986a:	684d      	ldr	r5, [r1, #4]
 800986c:	6854      	ldr	r4, [r2, #4]
 800986e:	9400      	str	r4, [sp, #0]
 8009870:	4365      	muls	r5, r4
 8009872:	f840 5b04 	str.w	r5, [r0], #4
 8009876:	4298      	cmp	r0, r3
 8009878:	d210      	bcs.n	800989c <ai_mul_buffer_s32+0x4e>
 800987a:	688c      	ldr	r4, [r1, #8]
 800987c:	6895      	ldr	r5, [r2, #8]
 800987e:	9500      	str	r5, [sp, #0]
 8009880:	436c      	muls	r4, r5
 8009882:	f840 4b04 	str.w	r4, [r0], #4
 8009886:	4298      	cmp	r0, r3
 8009888:	d208      	bcs.n	800989c <ai_mul_buffer_s32+0x4e>
 800988a:	68cd      	ldr	r5, [r1, #12]
 800988c:	68d7      	ldr	r7, [r2, #12]
 800988e:	437d      	muls	r5, r7
 8009890:	f840 5b04 	str.w	r5, [r0], #4
 8009894:	3110      	adds	r1, #16
 8009896:	3210      	adds	r2, #16
 8009898:	4298      	cmp	r0, r3
 800989a:	d3df      	bcc.n	800985c <ai_mul_buffer_s32+0xe>
 800989c:	b001      	add	sp, #4
 800989e:	bcf0      	pop	{r4, r5, r6, r7}
 80098a0:	4770      	bx	lr

080098a2 <ai_mul_s16>:
 80098a2:	8809      	ldrh	r1, [r1, #0]
 80098a4:	8812      	ldrh	r2, [r2, #0]
 80098a6:	fb11 f202 	smulbb	r2, r1, r2
 80098aa:	8002      	strh	r2, [r0, #0]
 80098ac:	4770      	bx	lr
	...

080098b0 <ai_mul_buffer_s16>:
 80098b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80098b4:	4298      	cmp	r0, r3
 80098b6:	d300      	bcc.n	80098ba <ai_mul_buffer_s16+0xa>
 80098b8:	4770      	bx	lr
 80098ba:	b4f0      	push	{r4, r5, r6, r7}
 80098bc:	b081      	sub	sp, #4
 80098be:	bf00      	nop
 80098c0:	f9b1 6000 	ldrsh.w	r6, [r1]
 80098c4:	f9b2 4000 	ldrsh.w	r4, [r2]
 80098c8:	fb16 f404 	smulbb	r4, r6, r4
 80098cc:	f820 4b02 	strh.w	r4, [r0], #2
 80098d0:	4298      	cmp	r0, r3
 80098d2:	d227      	bcs.n	8009924 <ai_mul_buffer_s16+0x74>
 80098d4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80098d8:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80098dc:	f8ad 4000 	strh.w	r4, [sp]
 80098e0:	f8bd 6000 	ldrh.w	r6, [sp]
 80098e4:	fb15 f506 	smulbb	r5, r5, r6
 80098e8:	f820 5b02 	strh.w	r5, [r0], #2
 80098ec:	4298      	cmp	r0, r3
 80098ee:	d219      	bcs.n	8009924 <ai_mul_buffer_s16+0x74>
 80098f0:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80098f4:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 80098f8:	f8ad 5000 	strh.w	r5, [sp]
 80098fc:	f8bd 6000 	ldrh.w	r6, [sp]
 8009900:	fb14 f406 	smulbb	r4, r4, r6
 8009904:	f820 4b02 	strh.w	r4, [r0], #2
 8009908:	4298      	cmp	r0, r3
 800990a:	d20b      	bcs.n	8009924 <ai_mul_buffer_s16+0x74>
 800990c:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 8009910:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8009914:	fb15 f407 	smulbb	r4, r5, r7
 8009918:	f820 4b02 	strh.w	r4, [r0], #2
 800991c:	3108      	adds	r1, #8
 800991e:	3208      	adds	r2, #8
 8009920:	4298      	cmp	r0, r3
 8009922:	d3cd      	bcc.n	80098c0 <ai_mul_buffer_s16+0x10>
 8009924:	b001      	add	sp, #4
 8009926:	bcf0      	pop	{r4, r5, r6, r7}
 8009928:	4770      	bx	lr

0800992a <ai_mul_s8>:
 800992a:	7809      	ldrb	r1, [r1, #0]
 800992c:	7812      	ldrb	r2, [r2, #0]
 800992e:	fb11 f202 	smulbb	r2, r1, r2
 8009932:	7002      	strb	r2, [r0, #0]
 8009934:	4770      	bx	lr
	...

08009938 <ai_mul_buffer_s8>:
 8009938:	4403      	add	r3, r0
 800993a:	4298      	cmp	r0, r3
 800993c:	d300      	bcc.n	8009940 <ai_mul_buffer_s8+0x8>
 800993e:	4770      	bx	lr
 8009940:	b4f0      	push	{r4, r5, r6, r7}
 8009942:	b081      	sub	sp, #4
 8009944:	f991 6000 	ldrsb.w	r6, [r1]
 8009948:	f992 4000 	ldrsb.w	r4, [r2]
 800994c:	fb16 f404 	smulbb	r4, r6, r4
 8009950:	f800 4b01 	strb.w	r4, [r0], #1
 8009954:	4298      	cmp	r0, r3
 8009956:	d227      	bcs.n	80099a8 <ai_mul_buffer_s8+0x70>
 8009958:	f991 5001 	ldrsb.w	r5, [r1, #1]
 800995c:	f992 4001 	ldrsb.w	r4, [r2, #1]
 8009960:	f88d 4000 	strb.w	r4, [sp]
 8009964:	f89d 6000 	ldrb.w	r6, [sp]
 8009968:	fb15 f506 	smulbb	r5, r5, r6
 800996c:	f800 5b01 	strb.w	r5, [r0], #1
 8009970:	4298      	cmp	r0, r3
 8009972:	d219      	bcs.n	80099a8 <ai_mul_buffer_s8+0x70>
 8009974:	f991 4002 	ldrsb.w	r4, [r1, #2]
 8009978:	f992 5002 	ldrsb.w	r5, [r2, #2]
 800997c:	f88d 5000 	strb.w	r5, [sp]
 8009980:	f89d 6000 	ldrb.w	r6, [sp]
 8009984:	fb14 f406 	smulbb	r4, r4, r6
 8009988:	f800 4b01 	strb.w	r4, [r0], #1
 800998c:	4298      	cmp	r0, r3
 800998e:	d20b      	bcs.n	80099a8 <ai_mul_buffer_s8+0x70>
 8009990:	f991 5003 	ldrsb.w	r5, [r1, #3]
 8009994:	f992 7003 	ldrsb.w	r7, [r2, #3]
 8009998:	fb15 f407 	smulbb	r4, r5, r7
 800999c:	f800 4b01 	strb.w	r4, [r0], #1
 80099a0:	1d09      	adds	r1, r1, #4
 80099a2:	1d12      	adds	r2, r2, #4
 80099a4:	4298      	cmp	r0, r3
 80099a6:	d3cd      	bcc.n	8009944 <ai_mul_buffer_s8+0xc>
 80099a8:	b001      	add	sp, #4
 80099aa:	bcf0      	pop	{r4, r5, r6, r7}
 80099ac:	4770      	bx	lr

080099ae <ai_mul_u32>:
 80099ae:	680b      	ldr	r3, [r1, #0]
 80099b0:	6811      	ldr	r1, [r2, #0]
 80099b2:	434b      	muls	r3, r1
 80099b4:	6003      	str	r3, [r0, #0]
 80099b6:	4770      	bx	lr

080099b8 <ai_mul_buffer_u32>:
 80099b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80099bc:	4298      	cmp	r0, r3
 80099be:	d300      	bcc.n	80099c2 <ai_mul_buffer_u32+0xa>
 80099c0:	4770      	bx	lr
 80099c2:	b4f0      	push	{r4, r5, r6, r7}
 80099c4:	b081      	sub	sp, #4
 80099c6:	680e      	ldr	r6, [r1, #0]
 80099c8:	6814      	ldr	r4, [r2, #0]
 80099ca:	4366      	muls	r6, r4
 80099cc:	f840 6b04 	str.w	r6, [r0], #4
 80099d0:	4298      	cmp	r0, r3
 80099d2:	d218      	bcs.n	8009a06 <ai_mul_buffer_u32+0x4e>
 80099d4:	684d      	ldr	r5, [r1, #4]
 80099d6:	6854      	ldr	r4, [r2, #4]
 80099d8:	9400      	str	r4, [sp, #0]
 80099da:	4365      	muls	r5, r4
 80099dc:	f840 5b04 	str.w	r5, [r0], #4
 80099e0:	4298      	cmp	r0, r3
 80099e2:	d210      	bcs.n	8009a06 <ai_mul_buffer_u32+0x4e>
 80099e4:	688c      	ldr	r4, [r1, #8]
 80099e6:	6895      	ldr	r5, [r2, #8]
 80099e8:	9500      	str	r5, [sp, #0]
 80099ea:	436c      	muls	r4, r5
 80099ec:	f840 4b04 	str.w	r4, [r0], #4
 80099f0:	4298      	cmp	r0, r3
 80099f2:	d208      	bcs.n	8009a06 <ai_mul_buffer_u32+0x4e>
 80099f4:	68cd      	ldr	r5, [r1, #12]
 80099f6:	68d7      	ldr	r7, [r2, #12]
 80099f8:	437d      	muls	r5, r7
 80099fa:	f840 5b04 	str.w	r5, [r0], #4
 80099fe:	3110      	adds	r1, #16
 8009a00:	3210      	adds	r2, #16
 8009a02:	4298      	cmp	r0, r3
 8009a04:	d3df      	bcc.n	80099c6 <ai_mul_buffer_u32+0xe>
 8009a06:	b001      	add	sp, #4
 8009a08:	bcf0      	pop	{r4, r5, r6, r7}
 8009a0a:	4770      	bx	lr

08009a0c <ai_mul_u16>:
 8009a0c:	8809      	ldrh	r1, [r1, #0]
 8009a0e:	8812      	ldrh	r2, [r2, #0]
 8009a10:	fb11 f202 	smulbb	r2, r1, r2
 8009a14:	8002      	strh	r2, [r0, #0]
 8009a16:	4770      	bx	lr

08009a18 <ai_mul_buffer_u16>:
 8009a18:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009a1c:	4298      	cmp	r0, r3
 8009a1e:	d300      	bcc.n	8009a22 <ai_mul_buffer_u16+0xa>
 8009a20:	4770      	bx	lr
 8009a22:	b4f0      	push	{r4, r5, r6, r7}
 8009a24:	b081      	sub	sp, #4
 8009a26:	880e      	ldrh	r6, [r1, #0]
 8009a28:	8814      	ldrh	r4, [r2, #0]
 8009a2a:	fb16 f404 	smulbb	r4, r6, r4
 8009a2e:	f820 4b02 	strh.w	r4, [r0], #2
 8009a32:	4298      	cmp	r0, r3
 8009a34:	d21d      	bcs.n	8009a72 <ai_mul_buffer_u16+0x5a>
 8009a36:	884d      	ldrh	r5, [r1, #2]
 8009a38:	8854      	ldrh	r4, [r2, #2]
 8009a3a:	f8ad 4000 	strh.w	r4, [sp]
 8009a3e:	fb15 f504 	smulbb	r5, r5, r4
 8009a42:	f820 5b02 	strh.w	r5, [r0], #2
 8009a46:	4298      	cmp	r0, r3
 8009a48:	d213      	bcs.n	8009a72 <ai_mul_buffer_u16+0x5a>
 8009a4a:	888c      	ldrh	r4, [r1, #4]
 8009a4c:	8895      	ldrh	r5, [r2, #4]
 8009a4e:	f8ad 5000 	strh.w	r5, [sp]
 8009a52:	fb14 f405 	smulbb	r4, r4, r5
 8009a56:	f820 4b02 	strh.w	r4, [r0], #2
 8009a5a:	4298      	cmp	r0, r3
 8009a5c:	d209      	bcs.n	8009a72 <ai_mul_buffer_u16+0x5a>
 8009a5e:	88cd      	ldrh	r5, [r1, #6]
 8009a60:	88d7      	ldrh	r7, [r2, #6]
 8009a62:	fb15 f407 	smulbb	r4, r5, r7
 8009a66:	f820 4b02 	strh.w	r4, [r0], #2
 8009a6a:	3108      	adds	r1, #8
 8009a6c:	3208      	adds	r2, #8
 8009a6e:	4298      	cmp	r0, r3
 8009a70:	d3d9      	bcc.n	8009a26 <ai_mul_buffer_u16+0xe>
 8009a72:	b001      	add	sp, #4
 8009a74:	bcf0      	pop	{r4, r5, r6, r7}
 8009a76:	4770      	bx	lr

08009a78 <ai_mul_u8>:
 8009a78:	7809      	ldrb	r1, [r1, #0]
 8009a7a:	7812      	ldrb	r2, [r2, #0]
 8009a7c:	fb11 f202 	smulbb	r2, r1, r2
 8009a80:	7002      	strb	r2, [r0, #0]
 8009a82:	4770      	bx	lr

08009a84 <ai_mul_buffer_u8>:
 8009a84:	4403      	add	r3, r0
 8009a86:	4298      	cmp	r0, r3
 8009a88:	d300      	bcc.n	8009a8c <ai_mul_buffer_u8+0x8>
 8009a8a:	4770      	bx	lr
 8009a8c:	b4f0      	push	{r4, r5, r6, r7}
 8009a8e:	b081      	sub	sp, #4
 8009a90:	780e      	ldrb	r6, [r1, #0]
 8009a92:	7814      	ldrb	r4, [r2, #0]
 8009a94:	fb16 f404 	smulbb	r4, r6, r4
 8009a98:	f800 4b01 	strb.w	r4, [r0], #1
 8009a9c:	4298      	cmp	r0, r3
 8009a9e:	d21d      	bcs.n	8009adc <ai_mul_buffer_u8+0x58>
 8009aa0:	784d      	ldrb	r5, [r1, #1]
 8009aa2:	7854      	ldrb	r4, [r2, #1]
 8009aa4:	f88d 4000 	strb.w	r4, [sp]
 8009aa8:	fb15 f504 	smulbb	r5, r5, r4
 8009aac:	f800 5b01 	strb.w	r5, [r0], #1
 8009ab0:	4298      	cmp	r0, r3
 8009ab2:	d213      	bcs.n	8009adc <ai_mul_buffer_u8+0x58>
 8009ab4:	788c      	ldrb	r4, [r1, #2]
 8009ab6:	7895      	ldrb	r5, [r2, #2]
 8009ab8:	f88d 5000 	strb.w	r5, [sp]
 8009abc:	fb14 f405 	smulbb	r4, r4, r5
 8009ac0:	f800 4b01 	strb.w	r4, [r0], #1
 8009ac4:	4298      	cmp	r0, r3
 8009ac6:	d209      	bcs.n	8009adc <ai_mul_buffer_u8+0x58>
 8009ac8:	78cd      	ldrb	r5, [r1, #3]
 8009aca:	78d7      	ldrb	r7, [r2, #3]
 8009acc:	fb15 f407 	smulbb	r4, r5, r7
 8009ad0:	f800 4b01 	strb.w	r4, [r0], #1
 8009ad4:	1d09      	adds	r1, r1, #4
 8009ad6:	1d12      	adds	r2, r2, #4
 8009ad8:	4298      	cmp	r0, r3
 8009ada:	d3d9      	bcc.n	8009a90 <ai_mul_buffer_u8+0xc>
 8009adc:	b001      	add	sp, #4
 8009ade:	bcf0      	pop	{r4, r5, r6, r7}
 8009ae0:	4770      	bx	lr

08009ae2 <ai_div>:
 8009ae2:	ed91 0a00 	vldr	s0, [r1]
 8009ae6:	edd2 0a00 	vldr	s1, [r2]
 8009aea:	eec0 0a20 	vdiv.f32	s1, s0, s1
 8009aee:	edc0 0a00 	vstr	s1, [r0]
 8009af2:	4770      	bx	lr

08009af4 <ai_div_buffer>:
 8009af4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009af8:	4298      	cmp	r0, r3
 8009afa:	b081      	sub	sp, #4
 8009afc:	f080 803a 	bcs.w	8009b74 <ai_div_buffer+0x80>
 8009b00:	f8d2 c000 	ldr.w	ip, [r2]
 8009b04:	edd1 0a00 	vldr	s1, [r1]
 8009b08:	f8cd c000 	str.w	ip, [sp]
 8009b0c:	ed9d 0a00 	vldr	s0, [sp]
 8009b10:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8009b14:	ed80 0a00 	vstr	s0, [r0]
 8009b18:	1d00      	adds	r0, r0, #4
 8009b1a:	4298      	cmp	r0, r3
 8009b1c:	d22a      	bcs.n	8009b74 <ai_div_buffer+0x80>
 8009b1e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8009b22:	ed91 0a01 	vldr	s0, [r1, #4]
 8009b26:	f8cd c000 	str.w	ip, [sp]
 8009b2a:	eddd 0a00 	vldr	s1, [sp]
 8009b2e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8009b32:	ed80 0a00 	vstr	s0, [r0]
 8009b36:	1d00      	adds	r0, r0, #4
 8009b38:	4298      	cmp	r0, r3
 8009b3a:	d21b      	bcs.n	8009b74 <ai_div_buffer+0x80>
 8009b3c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8009b40:	edd1 0a02 	vldr	s1, [r1, #8]
 8009b44:	f8cd c000 	str.w	ip, [sp]
 8009b48:	ed9d 0a00 	vldr	s0, [sp]
 8009b4c:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8009b50:	ed80 0a00 	vstr	s0, [r0]
 8009b54:	1d00      	adds	r0, r0, #4
 8009b56:	4298      	cmp	r0, r3
 8009b58:	d20c      	bcs.n	8009b74 <ai_div_buffer+0x80>
 8009b5a:	ed91 0a03 	vldr	s0, [r1, #12]
 8009b5e:	ed92 1a03 	vldr	s2, [r2, #12]
 8009b62:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8009b66:	ed80 0a00 	vstr	s0, [r0]
 8009b6a:	1d00      	adds	r0, r0, #4
 8009b6c:	3110      	adds	r1, #16
 8009b6e:	3210      	adds	r2, #16
 8009b70:	4298      	cmp	r0, r3
 8009b72:	d3c5      	bcc.n	8009b00 <ai_div_buffer+0xc>
 8009b74:	b001      	add	sp, #4
 8009b76:	4770      	bx	lr

08009b78 <ai_div_f32>:
 8009b78:	ed91 0a00 	vldr	s0, [r1]
 8009b7c:	edd2 0a00 	vldr	s1, [r2]
 8009b80:	eec0 0a20 	vdiv.f32	s1, s0, s1
 8009b84:	edc0 0a00 	vstr	s1, [r0]
 8009b88:	4770      	bx	lr
	...

08009b8c <ai_div_buffer_f32>:
 8009b8c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009b90:	4298      	cmp	r0, r3
 8009b92:	b081      	sub	sp, #4
 8009b94:	f080 803a 	bcs.w	8009c0c <ai_div_buffer_f32+0x80>
 8009b98:	f8d2 c000 	ldr.w	ip, [r2]
 8009b9c:	edd1 0a00 	vldr	s1, [r1]
 8009ba0:	f8cd c000 	str.w	ip, [sp]
 8009ba4:	ed9d 0a00 	vldr	s0, [sp]
 8009ba8:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8009bac:	ed80 0a00 	vstr	s0, [r0]
 8009bb0:	1d00      	adds	r0, r0, #4
 8009bb2:	4298      	cmp	r0, r3
 8009bb4:	d22a      	bcs.n	8009c0c <ai_div_buffer_f32+0x80>
 8009bb6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8009bba:	ed91 0a01 	vldr	s0, [r1, #4]
 8009bbe:	f8cd c000 	str.w	ip, [sp]
 8009bc2:	eddd 0a00 	vldr	s1, [sp]
 8009bc6:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8009bca:	ed80 0a00 	vstr	s0, [r0]
 8009bce:	1d00      	adds	r0, r0, #4
 8009bd0:	4298      	cmp	r0, r3
 8009bd2:	d21b      	bcs.n	8009c0c <ai_div_buffer_f32+0x80>
 8009bd4:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8009bd8:	edd1 0a02 	vldr	s1, [r1, #8]
 8009bdc:	f8cd c000 	str.w	ip, [sp]
 8009be0:	ed9d 0a00 	vldr	s0, [sp]
 8009be4:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8009be8:	ed80 0a00 	vstr	s0, [r0]
 8009bec:	1d00      	adds	r0, r0, #4
 8009bee:	4298      	cmp	r0, r3
 8009bf0:	d20c      	bcs.n	8009c0c <ai_div_buffer_f32+0x80>
 8009bf2:	ed91 0a03 	vldr	s0, [r1, #12]
 8009bf6:	ed92 1a03 	vldr	s2, [r2, #12]
 8009bfa:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8009bfe:	ed80 0a00 	vstr	s0, [r0]
 8009c02:	1d00      	adds	r0, r0, #4
 8009c04:	3110      	adds	r1, #16
 8009c06:	3210      	adds	r2, #16
 8009c08:	4298      	cmp	r0, r3
 8009c0a:	d3c5      	bcc.n	8009b98 <ai_div_buffer_f32+0xc>
 8009c0c:	b001      	add	sp, #4
 8009c0e:	4770      	bx	lr

08009c10 <ai_div_s32>:
 8009c10:	6809      	ldr	r1, [r1, #0]
 8009c12:	6812      	ldr	r2, [r2, #0]
 8009c14:	fb91 f2f2 	sdiv	r2, r1, r2
 8009c18:	6002      	str	r2, [r0, #0]
 8009c1a:	4770      	bx	lr

08009c1c <ai_div_buffer_s32>:
 8009c1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009c20:	4298      	cmp	r0, r3
 8009c22:	d300      	bcc.n	8009c26 <ai_div_buffer_s32+0xa>
 8009c24:	4770      	bx	lr
 8009c26:	b4f0      	push	{r4, r5, r6, r7}
 8009c28:	b081      	sub	sp, #4
 8009c2a:	680e      	ldr	r6, [r1, #0]
 8009c2c:	6814      	ldr	r4, [r2, #0]
 8009c2e:	fb96 f4f4 	sdiv	r4, r6, r4
 8009c32:	f840 4b04 	str.w	r4, [r0], #4
 8009c36:	4298      	cmp	r0, r3
 8009c38:	d21b      	bcs.n	8009c72 <ai_div_buffer_s32+0x56>
 8009c3a:	684d      	ldr	r5, [r1, #4]
 8009c3c:	6854      	ldr	r4, [r2, #4]
 8009c3e:	9400      	str	r4, [sp, #0]
 8009c40:	fb95 f5f4 	sdiv	r5, r5, r4
 8009c44:	f840 5b04 	str.w	r5, [r0], #4
 8009c48:	4298      	cmp	r0, r3
 8009c4a:	d212      	bcs.n	8009c72 <ai_div_buffer_s32+0x56>
 8009c4c:	688c      	ldr	r4, [r1, #8]
 8009c4e:	6895      	ldr	r5, [r2, #8]
 8009c50:	9500      	str	r5, [sp, #0]
 8009c52:	fb94 f4f5 	sdiv	r4, r4, r5
 8009c56:	f840 4b04 	str.w	r4, [r0], #4
 8009c5a:	4298      	cmp	r0, r3
 8009c5c:	d209      	bcs.n	8009c72 <ai_div_buffer_s32+0x56>
 8009c5e:	68cd      	ldr	r5, [r1, #12]
 8009c60:	68d7      	ldr	r7, [r2, #12]
 8009c62:	fb95 f4f7 	sdiv	r4, r5, r7
 8009c66:	f840 4b04 	str.w	r4, [r0], #4
 8009c6a:	3110      	adds	r1, #16
 8009c6c:	3210      	adds	r2, #16
 8009c6e:	4298      	cmp	r0, r3
 8009c70:	d3db      	bcc.n	8009c2a <ai_div_buffer_s32+0xe>
 8009c72:	b001      	add	sp, #4
 8009c74:	bcf0      	pop	{r4, r5, r6, r7}
 8009c76:	4770      	bx	lr

08009c78 <ai_div_s16>:
 8009c78:	f9b1 1000 	ldrsh.w	r1, [r1]
 8009c7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009c80:	fb91 f2f2 	sdiv	r2, r1, r2
 8009c84:	8002      	strh	r2, [r0, #0]
 8009c86:	4770      	bx	lr

08009c88 <ai_div_buffer_s16>:
 8009c88:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009c8c:	4298      	cmp	r0, r3
 8009c8e:	d300      	bcc.n	8009c92 <ai_div_buffer_s16+0xa>
 8009c90:	4770      	bx	lr
 8009c92:	b4f0      	push	{r4, r5, r6, r7}
 8009c94:	b081      	sub	sp, #4
 8009c96:	bf00      	nop
 8009c98:	f9b1 6000 	ldrsh.w	r6, [r1]
 8009c9c:	f9b2 4000 	ldrsh.w	r4, [r2]
 8009ca0:	fb96 f4f4 	sdiv	r4, r6, r4
 8009ca4:	f820 4b02 	strh.w	r4, [r0], #2
 8009ca8:	4298      	cmp	r0, r3
 8009caa:	d223      	bcs.n	8009cf4 <ai_div_buffer_s16+0x6c>
 8009cac:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8009cb0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8009cb4:	f8ad 4000 	strh.w	r4, [sp]
 8009cb8:	fb95 f5f4 	sdiv	r5, r5, r4
 8009cbc:	f820 5b02 	strh.w	r5, [r0], #2
 8009cc0:	4298      	cmp	r0, r3
 8009cc2:	d217      	bcs.n	8009cf4 <ai_div_buffer_s16+0x6c>
 8009cc4:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8009cc8:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8009ccc:	f8ad 5000 	strh.w	r5, [sp]
 8009cd0:	fb94 f4f5 	sdiv	r4, r4, r5
 8009cd4:	f820 4b02 	strh.w	r4, [r0], #2
 8009cd8:	4298      	cmp	r0, r3
 8009cda:	d20b      	bcs.n	8009cf4 <ai_div_buffer_s16+0x6c>
 8009cdc:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 8009ce0:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8009ce4:	fb95 f4f7 	sdiv	r4, r5, r7
 8009ce8:	f820 4b02 	strh.w	r4, [r0], #2
 8009cec:	3108      	adds	r1, #8
 8009cee:	3208      	adds	r2, #8
 8009cf0:	4298      	cmp	r0, r3
 8009cf2:	d3d1      	bcc.n	8009c98 <ai_div_buffer_s16+0x10>
 8009cf4:	b001      	add	sp, #4
 8009cf6:	bcf0      	pop	{r4, r5, r6, r7}
 8009cf8:	4770      	bx	lr

08009cfa <ai_div_s8>:
 8009cfa:	f991 1000 	ldrsb.w	r1, [r1]
 8009cfe:	f992 2000 	ldrsb.w	r2, [r2]
 8009d02:	fb91 f2f2 	sdiv	r2, r1, r2
 8009d06:	7002      	strb	r2, [r0, #0]
 8009d08:	4770      	bx	lr
	...

08009d0c <ai_div_buffer_s8>:
 8009d0c:	4403      	add	r3, r0
 8009d0e:	4298      	cmp	r0, r3
 8009d10:	d300      	bcc.n	8009d14 <ai_div_buffer_s8+0x8>
 8009d12:	4770      	bx	lr
 8009d14:	b4f0      	push	{r4, r5, r6, r7}
 8009d16:	b081      	sub	sp, #4
 8009d18:	f991 6000 	ldrsb.w	r6, [r1]
 8009d1c:	f992 4000 	ldrsb.w	r4, [r2]
 8009d20:	fb96 f4f4 	sdiv	r4, r6, r4
 8009d24:	f800 4b01 	strb.w	r4, [r0], #1
 8009d28:	4298      	cmp	r0, r3
 8009d2a:	d223      	bcs.n	8009d74 <ai_div_buffer_s8+0x68>
 8009d2c:	f991 5001 	ldrsb.w	r5, [r1, #1]
 8009d30:	f992 4001 	ldrsb.w	r4, [r2, #1]
 8009d34:	f88d 4000 	strb.w	r4, [sp]
 8009d38:	fb95 f5f4 	sdiv	r5, r5, r4
 8009d3c:	f800 5b01 	strb.w	r5, [r0], #1
 8009d40:	4298      	cmp	r0, r3
 8009d42:	d217      	bcs.n	8009d74 <ai_div_buffer_s8+0x68>
 8009d44:	f991 4002 	ldrsb.w	r4, [r1, #2]
 8009d48:	f992 5002 	ldrsb.w	r5, [r2, #2]
 8009d4c:	f88d 5000 	strb.w	r5, [sp]
 8009d50:	fb94 f4f5 	sdiv	r4, r4, r5
 8009d54:	f800 4b01 	strb.w	r4, [r0], #1
 8009d58:	4298      	cmp	r0, r3
 8009d5a:	d20b      	bcs.n	8009d74 <ai_div_buffer_s8+0x68>
 8009d5c:	f991 5003 	ldrsb.w	r5, [r1, #3]
 8009d60:	f992 7003 	ldrsb.w	r7, [r2, #3]
 8009d64:	fb95 f4f7 	sdiv	r4, r5, r7
 8009d68:	f800 4b01 	strb.w	r4, [r0], #1
 8009d6c:	1d09      	adds	r1, r1, #4
 8009d6e:	1d12      	adds	r2, r2, #4
 8009d70:	4298      	cmp	r0, r3
 8009d72:	d3d1      	bcc.n	8009d18 <ai_div_buffer_s8+0xc>
 8009d74:	b001      	add	sp, #4
 8009d76:	bcf0      	pop	{r4, r5, r6, r7}
 8009d78:	4770      	bx	lr

08009d7a <ai_div_u32>:
 8009d7a:	6809      	ldr	r1, [r1, #0]
 8009d7c:	6812      	ldr	r2, [r2, #0]
 8009d7e:	fbb1 f2f2 	udiv	r2, r1, r2
 8009d82:	6002      	str	r2, [r0, #0]
 8009d84:	4770      	bx	lr

08009d86 <ai_div_buffer_u32>:
 8009d86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009d8a:	4298      	cmp	r0, r3
 8009d8c:	d300      	bcc.n	8009d90 <ai_div_buffer_u32+0xa>
 8009d8e:	4770      	bx	lr
 8009d90:	b4f0      	push	{r4, r5, r6, r7}
 8009d92:	b081      	sub	sp, #4
 8009d94:	680e      	ldr	r6, [r1, #0]
 8009d96:	6814      	ldr	r4, [r2, #0]
 8009d98:	fbb6 f4f4 	udiv	r4, r6, r4
 8009d9c:	f840 4b04 	str.w	r4, [r0], #4
 8009da0:	4298      	cmp	r0, r3
 8009da2:	d21b      	bcs.n	8009ddc <ai_div_buffer_u32+0x56>
 8009da4:	684d      	ldr	r5, [r1, #4]
 8009da6:	6854      	ldr	r4, [r2, #4]
 8009da8:	9400      	str	r4, [sp, #0]
 8009daa:	fbb5 f5f4 	udiv	r5, r5, r4
 8009dae:	f840 5b04 	str.w	r5, [r0], #4
 8009db2:	4298      	cmp	r0, r3
 8009db4:	d212      	bcs.n	8009ddc <ai_div_buffer_u32+0x56>
 8009db6:	688c      	ldr	r4, [r1, #8]
 8009db8:	6895      	ldr	r5, [r2, #8]
 8009dba:	9500      	str	r5, [sp, #0]
 8009dbc:	fbb4 f4f5 	udiv	r4, r4, r5
 8009dc0:	f840 4b04 	str.w	r4, [r0], #4
 8009dc4:	4298      	cmp	r0, r3
 8009dc6:	d209      	bcs.n	8009ddc <ai_div_buffer_u32+0x56>
 8009dc8:	68cd      	ldr	r5, [r1, #12]
 8009dca:	68d7      	ldr	r7, [r2, #12]
 8009dcc:	fbb5 f4f7 	udiv	r4, r5, r7
 8009dd0:	f840 4b04 	str.w	r4, [r0], #4
 8009dd4:	3110      	adds	r1, #16
 8009dd6:	3210      	adds	r2, #16
 8009dd8:	4298      	cmp	r0, r3
 8009dda:	d3db      	bcc.n	8009d94 <ai_div_buffer_u32+0xe>
 8009ddc:	b001      	add	sp, #4
 8009dde:	bcf0      	pop	{r4, r5, r6, r7}
 8009de0:	4770      	bx	lr

08009de2 <ai_div_u16>:
 8009de2:	8809      	ldrh	r1, [r1, #0]
 8009de4:	8812      	ldrh	r2, [r2, #0]
 8009de6:	fb91 f2f2 	sdiv	r2, r1, r2
 8009dea:	8002      	strh	r2, [r0, #0]
 8009dec:	4770      	bx	lr

08009dee <ai_div_buffer_u16>:
 8009dee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009df2:	4298      	cmp	r0, r3
 8009df4:	d300      	bcc.n	8009df8 <ai_div_buffer_u16+0xa>
 8009df6:	4770      	bx	lr
 8009df8:	b4f0      	push	{r4, r5, r6, r7}
 8009dfa:	b081      	sub	sp, #4
 8009dfc:	880e      	ldrh	r6, [r1, #0]
 8009dfe:	8814      	ldrh	r4, [r2, #0]
 8009e00:	fb96 f4f4 	sdiv	r4, r6, r4
 8009e04:	f820 4b02 	strh.w	r4, [r0], #2
 8009e08:	4298      	cmp	r0, r3
 8009e0a:	d21d      	bcs.n	8009e48 <ai_div_buffer_u16+0x5a>
 8009e0c:	884d      	ldrh	r5, [r1, #2]
 8009e0e:	8854      	ldrh	r4, [r2, #2]
 8009e10:	f8ad 4000 	strh.w	r4, [sp]
 8009e14:	fb95 f5f4 	sdiv	r5, r5, r4
 8009e18:	f820 5b02 	strh.w	r5, [r0], #2
 8009e1c:	4298      	cmp	r0, r3
 8009e1e:	d213      	bcs.n	8009e48 <ai_div_buffer_u16+0x5a>
 8009e20:	888c      	ldrh	r4, [r1, #4]
 8009e22:	8895      	ldrh	r5, [r2, #4]
 8009e24:	f8ad 5000 	strh.w	r5, [sp]
 8009e28:	fb94 f4f5 	sdiv	r4, r4, r5
 8009e2c:	f820 4b02 	strh.w	r4, [r0], #2
 8009e30:	4298      	cmp	r0, r3
 8009e32:	d209      	bcs.n	8009e48 <ai_div_buffer_u16+0x5a>
 8009e34:	88cd      	ldrh	r5, [r1, #6]
 8009e36:	88d7      	ldrh	r7, [r2, #6]
 8009e38:	fb95 f4f7 	sdiv	r4, r5, r7
 8009e3c:	f820 4b02 	strh.w	r4, [r0], #2
 8009e40:	3108      	adds	r1, #8
 8009e42:	3208      	adds	r2, #8
 8009e44:	4298      	cmp	r0, r3
 8009e46:	d3d9      	bcc.n	8009dfc <ai_div_buffer_u16+0xe>
 8009e48:	b001      	add	sp, #4
 8009e4a:	bcf0      	pop	{r4, r5, r6, r7}
 8009e4c:	4770      	bx	lr

08009e4e <ai_div_u8>:
 8009e4e:	7809      	ldrb	r1, [r1, #0]
 8009e50:	7812      	ldrb	r2, [r2, #0]
 8009e52:	fb91 f2f2 	sdiv	r2, r1, r2
 8009e56:	7002      	strb	r2, [r0, #0]
 8009e58:	4770      	bx	lr

08009e5a <ai_div_buffer_u8>:
 8009e5a:	4403      	add	r3, r0
 8009e5c:	4298      	cmp	r0, r3
 8009e5e:	d300      	bcc.n	8009e62 <ai_div_buffer_u8+0x8>
 8009e60:	4770      	bx	lr
 8009e62:	b4f0      	push	{r4, r5, r6, r7}
 8009e64:	b081      	sub	sp, #4
 8009e66:	780e      	ldrb	r6, [r1, #0]
 8009e68:	7814      	ldrb	r4, [r2, #0]
 8009e6a:	fb96 f4f4 	sdiv	r4, r6, r4
 8009e6e:	f800 4b01 	strb.w	r4, [r0], #1
 8009e72:	4298      	cmp	r0, r3
 8009e74:	d21d      	bcs.n	8009eb2 <ai_div_buffer_u8+0x58>
 8009e76:	784d      	ldrb	r5, [r1, #1]
 8009e78:	7854      	ldrb	r4, [r2, #1]
 8009e7a:	f88d 4000 	strb.w	r4, [sp]
 8009e7e:	fb95 f5f4 	sdiv	r5, r5, r4
 8009e82:	f800 5b01 	strb.w	r5, [r0], #1
 8009e86:	4298      	cmp	r0, r3
 8009e88:	d213      	bcs.n	8009eb2 <ai_div_buffer_u8+0x58>
 8009e8a:	788c      	ldrb	r4, [r1, #2]
 8009e8c:	7895      	ldrb	r5, [r2, #2]
 8009e8e:	f88d 5000 	strb.w	r5, [sp]
 8009e92:	fb94 f4f5 	sdiv	r4, r4, r5
 8009e96:	f800 4b01 	strb.w	r4, [r0], #1
 8009e9a:	4298      	cmp	r0, r3
 8009e9c:	d209      	bcs.n	8009eb2 <ai_div_buffer_u8+0x58>
 8009e9e:	78cd      	ldrb	r5, [r1, #3]
 8009ea0:	78d7      	ldrb	r7, [r2, #3]
 8009ea2:	fb95 f4f7 	sdiv	r4, r5, r7
 8009ea6:	f800 4b01 	strb.w	r4, [r0], #1
 8009eaa:	1d09      	adds	r1, r1, #4
 8009eac:	1d12      	adds	r2, r2, #4
 8009eae:	4298      	cmp	r0, r3
 8009eb0:	d3d9      	bcc.n	8009e66 <ai_div_buffer_u8+0xc>
 8009eb2:	b001      	add	sp, #4
 8009eb4:	bcf0      	pop	{r4, r5, r6, r7}
 8009eb6:	4770      	bx	lr

08009eb8 <ai_mod>:
 8009eb8:	b510      	push	{r4, lr}
 8009eba:	4604      	mov	r4, r0
 8009ebc:	edd2 0a00 	vldr	s1, [r2]
 8009ec0:	ed91 0a00 	vldr	s0, [r1]
 8009ec4:	f00d f9f6 	bl	80172b4 <fmodf>
 8009ec8:	ed84 0a00 	vstr	s0, [r4]
 8009ecc:	bd10      	pop	{r4, pc}
	...

08009ed0 <ai_mod_buffer>:
 8009ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8009ed8:	42bc      	cmp	r4, r7
 8009eda:	b081      	sub	sp, #4
 8009edc:	460d      	mov	r5, r1
 8009ede:	4616      	mov	r6, r2
 8009ee0:	f080 800d 	bcs.w	8009efe <ai_mod_buffer+0x2e>
 8009ee4:	edd6 0a00 	vldr	s1, [r6]
 8009ee8:	ed95 0a00 	vldr	s0, [r5]
 8009eec:	f00d f9e2 	bl	80172b4 <fmodf>
 8009ef0:	ed84 0a00 	vstr	s0, [r4]
 8009ef4:	1d24      	adds	r4, r4, #4
 8009ef6:	1d2d      	adds	r5, r5, #4
 8009ef8:	1d36      	adds	r6, r6, #4
 8009efa:	42bc      	cmp	r4, r7
 8009efc:	d3f2      	bcc.n	8009ee4 <ai_mod_buffer+0x14>
 8009efe:	b001      	add	sp, #4
 8009f00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f02 <ai_mod_f32>:
 8009f02:	b510      	push	{r4, lr}
 8009f04:	4604      	mov	r4, r0
 8009f06:	edd2 0a00 	vldr	s1, [r2]
 8009f0a:	ed91 0a00 	vldr	s0, [r1]
 8009f0e:	f00d f9d1 	bl	80172b4 <fmodf>
 8009f12:	ed84 0a00 	vstr	s0, [r4]
 8009f16:	bd10      	pop	{r4, pc}

08009f18 <ai_mod_buffer_f32>:
 8009f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8009f20:	42bc      	cmp	r4, r7
 8009f22:	b081      	sub	sp, #4
 8009f24:	460d      	mov	r5, r1
 8009f26:	4616      	mov	r6, r2
 8009f28:	f080 800d 	bcs.w	8009f46 <ai_mod_buffer_f32+0x2e>
 8009f2c:	edd6 0a00 	vldr	s1, [r6]
 8009f30:	ed95 0a00 	vldr	s0, [r5]
 8009f34:	f00d f9be 	bl	80172b4 <fmodf>
 8009f38:	ed84 0a00 	vstr	s0, [r4]
 8009f3c:	1d24      	adds	r4, r4, #4
 8009f3e:	1d2d      	adds	r5, r5, #4
 8009f40:	1d36      	adds	r6, r6, #4
 8009f42:	42bc      	cmp	r4, r7
 8009f44:	d3f2      	bcc.n	8009f2c <ai_mod_buffer_f32+0x14>
 8009f46:	b001      	add	sp, #4
 8009f48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f4a <ai_mod_s32>:
 8009f4a:	6809      	ldr	r1, [r1, #0]
 8009f4c:	6812      	ldr	r2, [r2, #0]
 8009f4e:	fb91 f3f2 	sdiv	r3, r1, r2
 8009f52:	fb02 1113 	mls	r1, r2, r3, r1
 8009f56:	6001      	str	r1, [r0, #0]
 8009f58:	4770      	bx	lr

08009f5a <ai_mod_buffer_s32>:
 8009f5a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009f5e:	4298      	cmp	r0, r3
 8009f60:	d300      	bcc.n	8009f64 <ai_mod_buffer_s32+0xa>
 8009f62:	4770      	bx	lr
 8009f64:	b4f0      	push	{r4, r5, r6, r7}
 8009f66:	680d      	ldr	r5, [r1, #0]
 8009f68:	6814      	ldr	r4, [r2, #0]
 8009f6a:	fb95 f6f4 	sdiv	r6, r5, r4
 8009f6e:	fb04 5516 	mls	r5, r4, r6, r5
 8009f72:	f840 5b04 	str.w	r5, [r0], #4
 8009f76:	4298      	cmp	r0, r3
 8009f78:	d215      	bcs.n	8009fa6 <ai_mod_buffer_s32+0x4c>
 8009f7a:	684d      	ldr	r5, [r1, #4]
 8009f7c:	6854      	ldr	r4, [r2, #4]
 8009f7e:	fb95 f6f4 	sdiv	r6, r5, r4
 8009f82:	fb04 5516 	mls	r5, r4, r6, r5
 8009f86:	f840 5b04 	str.w	r5, [r0], #4
 8009f8a:	4298      	cmp	r0, r3
 8009f8c:	d20b      	bcs.n	8009fa6 <ai_mod_buffer_s32+0x4c>
 8009f8e:	688e      	ldr	r6, [r1, #8]
 8009f90:	6897      	ldr	r7, [r2, #8]
 8009f92:	fb96 f4f7 	sdiv	r4, r6, r7
 8009f96:	fb07 6614 	mls	r6, r7, r4, r6
 8009f9a:	f840 6b04 	str.w	r6, [r0], #4
 8009f9e:	310c      	adds	r1, #12
 8009fa0:	320c      	adds	r2, #12
 8009fa2:	4298      	cmp	r0, r3
 8009fa4:	d3df      	bcc.n	8009f66 <ai_mod_buffer_s32+0xc>
 8009fa6:	bcf0      	pop	{r4, r5, r6, r7}
 8009fa8:	4770      	bx	lr

08009faa <ai_mod_s16>:
 8009faa:	f9b1 1000 	ldrsh.w	r1, [r1]
 8009fae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009fb2:	fb91 f3f2 	sdiv	r3, r1, r2
 8009fb6:	fb02 1113 	mls	r1, r2, r3, r1
 8009fba:	8001      	strh	r1, [r0, #0]
 8009fbc:	4770      	bx	lr
	...

08009fc0 <ai_mod_buffer_s16>:
 8009fc0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009fc4:	4298      	cmp	r0, r3
 8009fc6:	d300      	bcc.n	8009fca <ai_mod_buffer_s16+0xa>
 8009fc8:	4770      	bx	lr
 8009fca:	b4f0      	push	{r4, r5, r6, r7}
 8009fcc:	f9b1 6000 	ldrsh.w	r6, [r1]
 8009fd0:	f9b2 4000 	ldrsh.w	r4, [r2]
 8009fd4:	fb96 f5f4 	sdiv	r5, r6, r4
 8009fd8:	fb04 6615 	mls	r6, r4, r5, r6
 8009fdc:	f820 6b02 	strh.w	r6, [r0], #2
 8009fe0:	4298      	cmp	r0, r3
 8009fe2:	d20d      	bcs.n	800a000 <ai_mod_buffer_s16+0x40>
 8009fe4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8009fe8:	f9b2 7002 	ldrsh.w	r7, [r2, #2]
 8009fec:	fb95 f4f7 	sdiv	r4, r5, r7
 8009ff0:	fb07 5514 	mls	r5, r7, r4, r5
 8009ff4:	f820 5b02 	strh.w	r5, [r0], #2
 8009ff8:	1d09      	adds	r1, r1, #4
 8009ffa:	1d12      	adds	r2, r2, #4
 8009ffc:	4298      	cmp	r0, r3
 8009ffe:	d3e5      	bcc.n	8009fcc <ai_mod_buffer_s16+0xc>
 800a000:	bcf0      	pop	{r4, r5, r6, r7}
 800a002:	4770      	bx	lr

0800a004 <ai_mod_s8>:
 800a004:	f991 1000 	ldrsb.w	r1, [r1]
 800a008:	f992 2000 	ldrsb.w	r2, [r2]
 800a00c:	fb91 f3f2 	sdiv	r3, r1, r2
 800a010:	fb02 1113 	mls	r1, r2, r3, r1
 800a014:	7001      	strb	r1, [r0, #0]
 800a016:	4770      	bx	lr

0800a018 <ai_mod_buffer_s8>:
 800a018:	4403      	add	r3, r0
 800a01a:	4298      	cmp	r0, r3
 800a01c:	d300      	bcc.n	800a020 <ai_mod_buffer_s8+0x8>
 800a01e:	4770      	bx	lr
 800a020:	b4f0      	push	{r4, r5, r6, r7}
 800a022:	bf00      	nop
 800a024:	f991 5000 	ldrsb.w	r5, [r1]
 800a028:	f992 4000 	ldrsb.w	r4, [r2]
 800a02c:	fb95 f6f4 	sdiv	r6, r5, r4
 800a030:	fb04 5516 	mls	r5, r4, r6, r5
 800a034:	f800 5b01 	strb.w	r5, [r0], #1
 800a038:	4298      	cmp	r0, r3
 800a03a:	d219      	bcs.n	800a070 <ai_mod_buffer_s8+0x58>
 800a03c:	f991 5001 	ldrsb.w	r5, [r1, #1]
 800a040:	f992 4001 	ldrsb.w	r4, [r2, #1]
 800a044:	fb95 f6f4 	sdiv	r6, r5, r4
 800a048:	fb04 5516 	mls	r5, r4, r6, r5
 800a04c:	f800 5b01 	strb.w	r5, [r0], #1
 800a050:	4298      	cmp	r0, r3
 800a052:	d20d      	bcs.n	800a070 <ai_mod_buffer_s8+0x58>
 800a054:	f991 6002 	ldrsb.w	r6, [r1, #2]
 800a058:	f992 7002 	ldrsb.w	r7, [r2, #2]
 800a05c:	fb96 f4f7 	sdiv	r4, r6, r7
 800a060:	fb07 6614 	mls	r6, r7, r4, r6
 800a064:	f800 6b01 	strb.w	r6, [r0], #1
 800a068:	1cc9      	adds	r1, r1, #3
 800a06a:	1cd2      	adds	r2, r2, #3
 800a06c:	4298      	cmp	r0, r3
 800a06e:	d3d9      	bcc.n	800a024 <ai_mod_buffer_s8+0xc>
 800a070:	bcf0      	pop	{r4, r5, r6, r7}
 800a072:	4770      	bx	lr

0800a074 <ai_mod_u32>:
 800a074:	6809      	ldr	r1, [r1, #0]
 800a076:	6812      	ldr	r2, [r2, #0]
 800a078:	fbb1 f3f2 	udiv	r3, r1, r2
 800a07c:	fb02 1113 	mls	r1, r2, r3, r1
 800a080:	6001      	str	r1, [r0, #0]
 800a082:	4770      	bx	lr

0800a084 <ai_mod_buffer_u32>:
 800a084:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a088:	4298      	cmp	r0, r3
 800a08a:	d300      	bcc.n	800a08e <ai_mod_buffer_u32+0xa>
 800a08c:	4770      	bx	lr
 800a08e:	b4f0      	push	{r4, r5, r6, r7}
 800a090:	680d      	ldr	r5, [r1, #0]
 800a092:	6814      	ldr	r4, [r2, #0]
 800a094:	fbb5 f6f4 	udiv	r6, r5, r4
 800a098:	fb04 5516 	mls	r5, r4, r6, r5
 800a09c:	f840 5b04 	str.w	r5, [r0], #4
 800a0a0:	4298      	cmp	r0, r3
 800a0a2:	d215      	bcs.n	800a0d0 <ai_mod_buffer_u32+0x4c>
 800a0a4:	684d      	ldr	r5, [r1, #4]
 800a0a6:	6854      	ldr	r4, [r2, #4]
 800a0a8:	fbb5 f6f4 	udiv	r6, r5, r4
 800a0ac:	fb04 5516 	mls	r5, r4, r6, r5
 800a0b0:	f840 5b04 	str.w	r5, [r0], #4
 800a0b4:	4298      	cmp	r0, r3
 800a0b6:	d20b      	bcs.n	800a0d0 <ai_mod_buffer_u32+0x4c>
 800a0b8:	688e      	ldr	r6, [r1, #8]
 800a0ba:	6897      	ldr	r7, [r2, #8]
 800a0bc:	fbb6 f4f7 	udiv	r4, r6, r7
 800a0c0:	fb07 6614 	mls	r6, r7, r4, r6
 800a0c4:	f840 6b04 	str.w	r6, [r0], #4
 800a0c8:	310c      	adds	r1, #12
 800a0ca:	320c      	adds	r2, #12
 800a0cc:	4298      	cmp	r0, r3
 800a0ce:	d3df      	bcc.n	800a090 <ai_mod_buffer_u32+0xc>
 800a0d0:	bcf0      	pop	{r4, r5, r6, r7}
 800a0d2:	4770      	bx	lr

0800a0d4 <ai_mod_u16>:
 800a0d4:	8809      	ldrh	r1, [r1, #0]
 800a0d6:	8812      	ldrh	r2, [r2, #0]
 800a0d8:	fb91 f3f2 	sdiv	r3, r1, r2
 800a0dc:	fb02 1113 	mls	r1, r2, r3, r1
 800a0e0:	8001      	strh	r1, [r0, #0]
 800a0e2:	4770      	bx	lr

0800a0e4 <ai_mod_buffer_u16>:
 800a0e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a0e8:	4298      	cmp	r0, r3
 800a0ea:	d300      	bcc.n	800a0ee <ai_mod_buffer_u16+0xa>
 800a0ec:	4770      	bx	lr
 800a0ee:	b4f0      	push	{r4, r5, r6, r7}
 800a0f0:	880e      	ldrh	r6, [r1, #0]
 800a0f2:	8814      	ldrh	r4, [r2, #0]
 800a0f4:	fb96 f5f4 	sdiv	r5, r6, r4
 800a0f8:	fb04 6615 	mls	r6, r4, r5, r6
 800a0fc:	f820 6b02 	strh.w	r6, [r0], #2
 800a100:	4298      	cmp	r0, r3
 800a102:	d20b      	bcs.n	800a11c <ai_mod_buffer_u16+0x38>
 800a104:	884d      	ldrh	r5, [r1, #2]
 800a106:	8857      	ldrh	r7, [r2, #2]
 800a108:	fb95 f4f7 	sdiv	r4, r5, r7
 800a10c:	fb07 5514 	mls	r5, r7, r4, r5
 800a110:	f820 5b02 	strh.w	r5, [r0], #2
 800a114:	1d09      	adds	r1, r1, #4
 800a116:	1d12      	adds	r2, r2, #4
 800a118:	4298      	cmp	r0, r3
 800a11a:	d3e9      	bcc.n	800a0f0 <ai_mod_buffer_u16+0xc>
 800a11c:	bcf0      	pop	{r4, r5, r6, r7}
 800a11e:	4770      	bx	lr

0800a120 <ai_mod_u8>:
 800a120:	7809      	ldrb	r1, [r1, #0]
 800a122:	7812      	ldrb	r2, [r2, #0]
 800a124:	fb91 f3f2 	sdiv	r3, r1, r2
 800a128:	fb02 1113 	mls	r1, r2, r3, r1
 800a12c:	7001      	strb	r1, [r0, #0]
 800a12e:	4770      	bx	lr

0800a130 <ai_mod_buffer_u8>:
 800a130:	4403      	add	r3, r0
 800a132:	4298      	cmp	r0, r3
 800a134:	d300      	bcc.n	800a138 <ai_mod_buffer_u8+0x8>
 800a136:	4770      	bx	lr
 800a138:	b4f0      	push	{r4, r5, r6, r7}
 800a13a:	780d      	ldrb	r5, [r1, #0]
 800a13c:	7814      	ldrb	r4, [r2, #0]
 800a13e:	fb95 f6f4 	sdiv	r6, r5, r4
 800a142:	fb04 5516 	mls	r5, r4, r6, r5
 800a146:	f800 5b01 	strb.w	r5, [r0], #1
 800a14a:	4298      	cmp	r0, r3
 800a14c:	d215      	bcs.n	800a17a <ai_mod_buffer_u8+0x4a>
 800a14e:	784d      	ldrb	r5, [r1, #1]
 800a150:	7854      	ldrb	r4, [r2, #1]
 800a152:	fb95 f6f4 	sdiv	r6, r5, r4
 800a156:	fb04 5516 	mls	r5, r4, r6, r5
 800a15a:	f800 5b01 	strb.w	r5, [r0], #1
 800a15e:	4298      	cmp	r0, r3
 800a160:	d20b      	bcs.n	800a17a <ai_mod_buffer_u8+0x4a>
 800a162:	788e      	ldrb	r6, [r1, #2]
 800a164:	7897      	ldrb	r7, [r2, #2]
 800a166:	fb96 f4f7 	sdiv	r4, r6, r7
 800a16a:	fb07 6614 	mls	r6, r7, r4, r6
 800a16e:	f800 6b01 	strb.w	r6, [r0], #1
 800a172:	1cc9      	adds	r1, r1, #3
 800a174:	1cd2      	adds	r2, r2, #3
 800a176:	4298      	cmp	r0, r3
 800a178:	d3df      	bcc.n	800a13a <ai_mod_buffer_u8+0xa>
 800a17a:	bcf0      	pop	{r4, r5, r6, r7}
 800a17c:	4770      	bx	lr

0800a17e <ai_bitshift_right>:
 800a17e:	6809      	ldr	r1, [r1, #0]
 800a180:	6812      	ldr	r2, [r2, #0]
 800a182:	40d1      	lsrs	r1, r2
 800a184:	6001      	str	r1, [r0, #0]
 800a186:	4770      	bx	lr

0800a188 <ai_bitshift_right_buffer>:
 800a188:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a18c:	4298      	cmp	r0, r3
 800a18e:	d300      	bcc.n	800a192 <ai_bitshift_right_buffer+0xa>
 800a190:	4770      	bx	lr
 800a192:	b4f0      	push	{r4, r5, r6, r7}
 800a194:	b081      	sub	sp, #4
 800a196:	680e      	ldr	r6, [r1, #0]
 800a198:	6814      	ldr	r4, [r2, #0]
 800a19a:	40e6      	lsrs	r6, r4
 800a19c:	f840 6b04 	str.w	r6, [r0], #4
 800a1a0:	4298      	cmp	r0, r3
 800a1a2:	d218      	bcs.n	800a1d6 <ai_bitshift_right_buffer+0x4e>
 800a1a4:	684d      	ldr	r5, [r1, #4]
 800a1a6:	6854      	ldr	r4, [r2, #4]
 800a1a8:	9400      	str	r4, [sp, #0]
 800a1aa:	40e5      	lsrs	r5, r4
 800a1ac:	f840 5b04 	str.w	r5, [r0], #4
 800a1b0:	4298      	cmp	r0, r3
 800a1b2:	d210      	bcs.n	800a1d6 <ai_bitshift_right_buffer+0x4e>
 800a1b4:	688c      	ldr	r4, [r1, #8]
 800a1b6:	6895      	ldr	r5, [r2, #8]
 800a1b8:	9500      	str	r5, [sp, #0]
 800a1ba:	40ec      	lsrs	r4, r5
 800a1bc:	f840 4b04 	str.w	r4, [r0], #4
 800a1c0:	4298      	cmp	r0, r3
 800a1c2:	d208      	bcs.n	800a1d6 <ai_bitshift_right_buffer+0x4e>
 800a1c4:	68cd      	ldr	r5, [r1, #12]
 800a1c6:	68d7      	ldr	r7, [r2, #12]
 800a1c8:	40fd      	lsrs	r5, r7
 800a1ca:	f840 5b04 	str.w	r5, [r0], #4
 800a1ce:	3110      	adds	r1, #16
 800a1d0:	3210      	adds	r2, #16
 800a1d2:	4298      	cmp	r0, r3
 800a1d4:	d3df      	bcc.n	800a196 <ai_bitshift_right_buffer+0xe>
 800a1d6:	b001      	add	sp, #4
 800a1d8:	bcf0      	pop	{r4, r5, r6, r7}
 800a1da:	4770      	bx	lr

0800a1dc <ai_bitshift_left>:
 800a1dc:	680b      	ldr	r3, [r1, #0]
 800a1de:	6811      	ldr	r1, [r2, #0]
 800a1e0:	408b      	lsls	r3, r1
 800a1e2:	6003      	str	r3, [r0, #0]
 800a1e4:	4770      	bx	lr

0800a1e6 <ai_bitshift_left_buffer>:
 800a1e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a1ea:	4298      	cmp	r0, r3
 800a1ec:	d300      	bcc.n	800a1f0 <ai_bitshift_left_buffer+0xa>
 800a1ee:	4770      	bx	lr
 800a1f0:	b4f0      	push	{r4, r5, r6, r7}
 800a1f2:	b081      	sub	sp, #4
 800a1f4:	680e      	ldr	r6, [r1, #0]
 800a1f6:	6814      	ldr	r4, [r2, #0]
 800a1f8:	40a6      	lsls	r6, r4
 800a1fa:	f840 6b04 	str.w	r6, [r0], #4
 800a1fe:	4298      	cmp	r0, r3
 800a200:	d218      	bcs.n	800a234 <ai_bitshift_left_buffer+0x4e>
 800a202:	684d      	ldr	r5, [r1, #4]
 800a204:	6854      	ldr	r4, [r2, #4]
 800a206:	9400      	str	r4, [sp, #0]
 800a208:	40a5      	lsls	r5, r4
 800a20a:	f840 5b04 	str.w	r5, [r0], #4
 800a20e:	4298      	cmp	r0, r3
 800a210:	d210      	bcs.n	800a234 <ai_bitshift_left_buffer+0x4e>
 800a212:	688c      	ldr	r4, [r1, #8]
 800a214:	6895      	ldr	r5, [r2, #8]
 800a216:	9500      	str	r5, [sp, #0]
 800a218:	40ac      	lsls	r4, r5
 800a21a:	f840 4b04 	str.w	r4, [r0], #4
 800a21e:	4298      	cmp	r0, r3
 800a220:	d208      	bcs.n	800a234 <ai_bitshift_left_buffer+0x4e>
 800a222:	68cd      	ldr	r5, [r1, #12]
 800a224:	68d7      	ldr	r7, [r2, #12]
 800a226:	40bd      	lsls	r5, r7
 800a228:	f840 5b04 	str.w	r5, [r0], #4
 800a22c:	3110      	adds	r1, #16
 800a22e:	3210      	adds	r2, #16
 800a230:	4298      	cmp	r0, r3
 800a232:	d3df      	bcc.n	800a1f4 <ai_bitshift_left_buffer+0xe>
 800a234:	b001      	add	sp, #4
 800a236:	bcf0      	pop	{r4, r5, r6, r7}
 800a238:	4770      	bx	lr

0800a23a <ai_bitshift_right_u32>:
 800a23a:	6809      	ldr	r1, [r1, #0]
 800a23c:	6812      	ldr	r2, [r2, #0]
 800a23e:	40d1      	lsrs	r1, r2
 800a240:	6001      	str	r1, [r0, #0]
 800a242:	4770      	bx	lr

0800a244 <ai_bitshift_right_buffer_u32>:
 800a244:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a248:	4298      	cmp	r0, r3
 800a24a:	d300      	bcc.n	800a24e <ai_bitshift_right_buffer_u32+0xa>
 800a24c:	4770      	bx	lr
 800a24e:	b4f0      	push	{r4, r5, r6, r7}
 800a250:	b081      	sub	sp, #4
 800a252:	680e      	ldr	r6, [r1, #0]
 800a254:	6814      	ldr	r4, [r2, #0]
 800a256:	40e6      	lsrs	r6, r4
 800a258:	f840 6b04 	str.w	r6, [r0], #4
 800a25c:	4298      	cmp	r0, r3
 800a25e:	d218      	bcs.n	800a292 <ai_bitshift_right_buffer_u32+0x4e>
 800a260:	684d      	ldr	r5, [r1, #4]
 800a262:	6854      	ldr	r4, [r2, #4]
 800a264:	9400      	str	r4, [sp, #0]
 800a266:	40e5      	lsrs	r5, r4
 800a268:	f840 5b04 	str.w	r5, [r0], #4
 800a26c:	4298      	cmp	r0, r3
 800a26e:	d210      	bcs.n	800a292 <ai_bitshift_right_buffer_u32+0x4e>
 800a270:	688c      	ldr	r4, [r1, #8]
 800a272:	6895      	ldr	r5, [r2, #8]
 800a274:	9500      	str	r5, [sp, #0]
 800a276:	40ec      	lsrs	r4, r5
 800a278:	f840 4b04 	str.w	r4, [r0], #4
 800a27c:	4298      	cmp	r0, r3
 800a27e:	d208      	bcs.n	800a292 <ai_bitshift_right_buffer_u32+0x4e>
 800a280:	68cd      	ldr	r5, [r1, #12]
 800a282:	68d7      	ldr	r7, [r2, #12]
 800a284:	40fd      	lsrs	r5, r7
 800a286:	f840 5b04 	str.w	r5, [r0], #4
 800a28a:	3110      	adds	r1, #16
 800a28c:	3210      	adds	r2, #16
 800a28e:	4298      	cmp	r0, r3
 800a290:	d3df      	bcc.n	800a252 <ai_bitshift_right_buffer_u32+0xe>
 800a292:	b001      	add	sp, #4
 800a294:	bcf0      	pop	{r4, r5, r6, r7}
 800a296:	4770      	bx	lr

0800a298 <ai_bitshift_left_u32>:
 800a298:	680b      	ldr	r3, [r1, #0]
 800a29a:	6811      	ldr	r1, [r2, #0]
 800a29c:	408b      	lsls	r3, r1
 800a29e:	6003      	str	r3, [r0, #0]
 800a2a0:	4770      	bx	lr

0800a2a2 <ai_bitshift_left_buffer_u32>:
 800a2a2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a2a6:	4298      	cmp	r0, r3
 800a2a8:	d300      	bcc.n	800a2ac <ai_bitshift_left_buffer_u32+0xa>
 800a2aa:	4770      	bx	lr
 800a2ac:	b4f0      	push	{r4, r5, r6, r7}
 800a2ae:	b081      	sub	sp, #4
 800a2b0:	680e      	ldr	r6, [r1, #0]
 800a2b2:	6814      	ldr	r4, [r2, #0]
 800a2b4:	40a6      	lsls	r6, r4
 800a2b6:	f840 6b04 	str.w	r6, [r0], #4
 800a2ba:	4298      	cmp	r0, r3
 800a2bc:	d218      	bcs.n	800a2f0 <ai_bitshift_left_buffer_u32+0x4e>
 800a2be:	684d      	ldr	r5, [r1, #4]
 800a2c0:	6854      	ldr	r4, [r2, #4]
 800a2c2:	9400      	str	r4, [sp, #0]
 800a2c4:	40a5      	lsls	r5, r4
 800a2c6:	f840 5b04 	str.w	r5, [r0], #4
 800a2ca:	4298      	cmp	r0, r3
 800a2cc:	d210      	bcs.n	800a2f0 <ai_bitshift_left_buffer_u32+0x4e>
 800a2ce:	688c      	ldr	r4, [r1, #8]
 800a2d0:	6895      	ldr	r5, [r2, #8]
 800a2d2:	9500      	str	r5, [sp, #0]
 800a2d4:	40ac      	lsls	r4, r5
 800a2d6:	f840 4b04 	str.w	r4, [r0], #4
 800a2da:	4298      	cmp	r0, r3
 800a2dc:	d208      	bcs.n	800a2f0 <ai_bitshift_left_buffer_u32+0x4e>
 800a2de:	68cd      	ldr	r5, [r1, #12]
 800a2e0:	68d7      	ldr	r7, [r2, #12]
 800a2e2:	40bd      	lsls	r5, r7
 800a2e4:	f840 5b04 	str.w	r5, [r0], #4
 800a2e8:	3110      	adds	r1, #16
 800a2ea:	3210      	adds	r2, #16
 800a2ec:	4298      	cmp	r0, r3
 800a2ee:	d3df      	bcc.n	800a2b0 <ai_bitshift_left_buffer_u32+0xe>
 800a2f0:	b001      	add	sp, #4
 800a2f2:	bcf0      	pop	{r4, r5, r6, r7}
 800a2f4:	4770      	bx	lr

0800a2f6 <ai_bitshift_right_u16>:
 800a2f6:	8809      	ldrh	r1, [r1, #0]
 800a2f8:	8812      	ldrh	r2, [r2, #0]
 800a2fa:	40d1      	lsrs	r1, r2
 800a2fc:	8001      	strh	r1, [r0, #0]
 800a2fe:	4770      	bx	lr

0800a300 <ai_bitshift_right_buffer_u16>:
 800a300:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a304:	4298      	cmp	r0, r3
 800a306:	d300      	bcc.n	800a30a <ai_bitshift_right_buffer_u16+0xa>
 800a308:	4770      	bx	lr
 800a30a:	b4f0      	push	{r4, r5, r6, r7}
 800a30c:	b081      	sub	sp, #4
 800a30e:	880e      	ldrh	r6, [r1, #0]
 800a310:	8814      	ldrh	r4, [r2, #0]
 800a312:	40e6      	lsrs	r6, r4
 800a314:	f820 6b02 	strh.w	r6, [r0], #2
 800a318:	4298      	cmp	r0, r3
 800a31a:	d21a      	bcs.n	800a352 <ai_bitshift_right_buffer_u16+0x52>
 800a31c:	884d      	ldrh	r5, [r1, #2]
 800a31e:	8854      	ldrh	r4, [r2, #2]
 800a320:	f8ad 4000 	strh.w	r4, [sp]
 800a324:	40e5      	lsrs	r5, r4
 800a326:	f820 5b02 	strh.w	r5, [r0], #2
 800a32a:	4298      	cmp	r0, r3
 800a32c:	d211      	bcs.n	800a352 <ai_bitshift_right_buffer_u16+0x52>
 800a32e:	888c      	ldrh	r4, [r1, #4]
 800a330:	8895      	ldrh	r5, [r2, #4]
 800a332:	f8ad 5000 	strh.w	r5, [sp]
 800a336:	40ec      	lsrs	r4, r5
 800a338:	f820 4b02 	strh.w	r4, [r0], #2
 800a33c:	4298      	cmp	r0, r3
 800a33e:	d208      	bcs.n	800a352 <ai_bitshift_right_buffer_u16+0x52>
 800a340:	88cd      	ldrh	r5, [r1, #6]
 800a342:	88d7      	ldrh	r7, [r2, #6]
 800a344:	40fd      	lsrs	r5, r7
 800a346:	f820 5b02 	strh.w	r5, [r0], #2
 800a34a:	3108      	adds	r1, #8
 800a34c:	3208      	adds	r2, #8
 800a34e:	4298      	cmp	r0, r3
 800a350:	d3dd      	bcc.n	800a30e <ai_bitshift_right_buffer_u16+0xe>
 800a352:	b001      	add	sp, #4
 800a354:	bcf0      	pop	{r4, r5, r6, r7}
 800a356:	4770      	bx	lr

0800a358 <ai_bitshift_left_u16>:
 800a358:	880b      	ldrh	r3, [r1, #0]
 800a35a:	8811      	ldrh	r1, [r2, #0]
 800a35c:	408b      	lsls	r3, r1
 800a35e:	8003      	strh	r3, [r0, #0]
 800a360:	4770      	bx	lr

0800a362 <ai_bitshift_left_buffer_u16>:
 800a362:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a366:	4298      	cmp	r0, r3
 800a368:	d300      	bcc.n	800a36c <ai_bitshift_left_buffer_u16+0xa>
 800a36a:	4770      	bx	lr
 800a36c:	b4f0      	push	{r4, r5, r6, r7}
 800a36e:	b081      	sub	sp, #4
 800a370:	880e      	ldrh	r6, [r1, #0]
 800a372:	8814      	ldrh	r4, [r2, #0]
 800a374:	40a6      	lsls	r6, r4
 800a376:	f820 6b02 	strh.w	r6, [r0], #2
 800a37a:	4298      	cmp	r0, r3
 800a37c:	d21a      	bcs.n	800a3b4 <ai_bitshift_left_buffer_u16+0x52>
 800a37e:	884d      	ldrh	r5, [r1, #2]
 800a380:	8854      	ldrh	r4, [r2, #2]
 800a382:	f8ad 4000 	strh.w	r4, [sp]
 800a386:	40a5      	lsls	r5, r4
 800a388:	f820 5b02 	strh.w	r5, [r0], #2
 800a38c:	4298      	cmp	r0, r3
 800a38e:	d211      	bcs.n	800a3b4 <ai_bitshift_left_buffer_u16+0x52>
 800a390:	888c      	ldrh	r4, [r1, #4]
 800a392:	8895      	ldrh	r5, [r2, #4]
 800a394:	f8ad 5000 	strh.w	r5, [sp]
 800a398:	40ac      	lsls	r4, r5
 800a39a:	f820 4b02 	strh.w	r4, [r0], #2
 800a39e:	4298      	cmp	r0, r3
 800a3a0:	d208      	bcs.n	800a3b4 <ai_bitshift_left_buffer_u16+0x52>
 800a3a2:	88cd      	ldrh	r5, [r1, #6]
 800a3a4:	88d7      	ldrh	r7, [r2, #6]
 800a3a6:	40bd      	lsls	r5, r7
 800a3a8:	f820 5b02 	strh.w	r5, [r0], #2
 800a3ac:	3108      	adds	r1, #8
 800a3ae:	3208      	adds	r2, #8
 800a3b0:	4298      	cmp	r0, r3
 800a3b2:	d3dd      	bcc.n	800a370 <ai_bitshift_left_buffer_u16+0xe>
 800a3b4:	b001      	add	sp, #4
 800a3b6:	bcf0      	pop	{r4, r5, r6, r7}
 800a3b8:	4770      	bx	lr

0800a3ba <ai_bitshift_right_u8>:
 800a3ba:	7809      	ldrb	r1, [r1, #0]
 800a3bc:	f992 2000 	ldrsb.w	r2, [r2]
 800a3c0:	40d1      	lsrs	r1, r2
 800a3c2:	7001      	strb	r1, [r0, #0]
 800a3c4:	4770      	bx	lr

0800a3c6 <ai_bitshift_right_buffer_u8>:
 800a3c6:	4403      	add	r3, r0
 800a3c8:	4298      	cmp	r0, r3
 800a3ca:	d300      	bcc.n	800a3ce <ai_bitshift_right_buffer_u8+0x8>
 800a3cc:	4770      	bx	lr
 800a3ce:	b4f0      	push	{r4, r5, r6, r7}
 800a3d0:	b081      	sub	sp, #4
 800a3d2:	780e      	ldrb	r6, [r1, #0]
 800a3d4:	7814      	ldrb	r4, [r2, #0]
 800a3d6:	40e6      	lsrs	r6, r4
 800a3d8:	f800 6b01 	strb.w	r6, [r0], #1
 800a3dc:	4298      	cmp	r0, r3
 800a3de:	d21e      	bcs.n	800a41e <ai_bitshift_right_buffer_u8+0x58>
 800a3e0:	784d      	ldrb	r5, [r1, #1]
 800a3e2:	7854      	ldrb	r4, [r2, #1]
 800a3e4:	f88d 4000 	strb.w	r4, [sp]
 800a3e8:	f99d 6000 	ldrsb.w	r6, [sp]
 800a3ec:	40f5      	lsrs	r5, r6
 800a3ee:	f800 5b01 	strb.w	r5, [r0], #1
 800a3f2:	4298      	cmp	r0, r3
 800a3f4:	d213      	bcs.n	800a41e <ai_bitshift_right_buffer_u8+0x58>
 800a3f6:	788c      	ldrb	r4, [r1, #2]
 800a3f8:	7895      	ldrb	r5, [r2, #2]
 800a3fa:	f88d 5000 	strb.w	r5, [sp]
 800a3fe:	f99d 6000 	ldrsb.w	r6, [sp]
 800a402:	40f4      	lsrs	r4, r6
 800a404:	f800 4b01 	strb.w	r4, [r0], #1
 800a408:	4298      	cmp	r0, r3
 800a40a:	d208      	bcs.n	800a41e <ai_bitshift_right_buffer_u8+0x58>
 800a40c:	78cd      	ldrb	r5, [r1, #3]
 800a40e:	78d7      	ldrb	r7, [r2, #3]
 800a410:	40fd      	lsrs	r5, r7
 800a412:	f800 5b01 	strb.w	r5, [r0], #1
 800a416:	1d09      	adds	r1, r1, #4
 800a418:	1d12      	adds	r2, r2, #4
 800a41a:	4298      	cmp	r0, r3
 800a41c:	d3d9      	bcc.n	800a3d2 <ai_bitshift_right_buffer_u8+0xc>
 800a41e:	b001      	add	sp, #4
 800a420:	bcf0      	pop	{r4, r5, r6, r7}
 800a422:	4770      	bx	lr

0800a424 <ai_bitshift_left_u8>:
 800a424:	780b      	ldrb	r3, [r1, #0]
 800a426:	f992 1000 	ldrsb.w	r1, [r2]
 800a42a:	408b      	lsls	r3, r1
 800a42c:	7003      	strb	r3, [r0, #0]
 800a42e:	4770      	bx	lr

0800a430 <ai_bitshift_left_buffer_u8>:
 800a430:	4403      	add	r3, r0
 800a432:	4298      	cmp	r0, r3
 800a434:	d300      	bcc.n	800a438 <ai_bitshift_left_buffer_u8+0x8>
 800a436:	4770      	bx	lr
 800a438:	b4f0      	push	{r4, r5, r6, r7}
 800a43a:	b081      	sub	sp, #4
 800a43c:	780e      	ldrb	r6, [r1, #0]
 800a43e:	7814      	ldrb	r4, [r2, #0]
 800a440:	40a6      	lsls	r6, r4
 800a442:	f800 6b01 	strb.w	r6, [r0], #1
 800a446:	4298      	cmp	r0, r3
 800a448:	d21e      	bcs.n	800a488 <ai_bitshift_left_buffer_u8+0x58>
 800a44a:	784d      	ldrb	r5, [r1, #1]
 800a44c:	7854      	ldrb	r4, [r2, #1]
 800a44e:	f88d 4000 	strb.w	r4, [sp]
 800a452:	f99d 6000 	ldrsb.w	r6, [sp]
 800a456:	40b5      	lsls	r5, r6
 800a458:	f800 5b01 	strb.w	r5, [r0], #1
 800a45c:	4298      	cmp	r0, r3
 800a45e:	d213      	bcs.n	800a488 <ai_bitshift_left_buffer_u8+0x58>
 800a460:	788c      	ldrb	r4, [r1, #2]
 800a462:	7895      	ldrb	r5, [r2, #2]
 800a464:	f88d 5000 	strb.w	r5, [sp]
 800a468:	f99d 6000 	ldrsb.w	r6, [sp]
 800a46c:	40b4      	lsls	r4, r6
 800a46e:	f800 4b01 	strb.w	r4, [r0], #1
 800a472:	4298      	cmp	r0, r3
 800a474:	d208      	bcs.n	800a488 <ai_bitshift_left_buffer_u8+0x58>
 800a476:	78cd      	ldrb	r5, [r1, #3]
 800a478:	78d7      	ldrb	r7, [r2, #3]
 800a47a:	40bd      	lsls	r5, r7
 800a47c:	f800 5b01 	strb.w	r5, [r0], #1
 800a480:	1d09      	adds	r1, r1, #4
 800a482:	1d12      	adds	r2, r2, #4
 800a484:	4298      	cmp	r0, r3
 800a486:	d3d9      	bcc.n	800a43c <ai_bitshift_left_buffer_u8+0xc>
 800a488:	b001      	add	sp, #4
 800a48a:	bcf0      	pop	{r4, r5, r6, r7}
 800a48c:	4770      	bx	lr

0800a48e <ai_floor_div>:
 800a48e:	b510      	push	{r4, lr}
 800a490:	ed91 0a00 	vldr	s0, [r1]
 800a494:	edd2 0a00 	vldr	s1, [r2]
 800a498:	4604      	mov	r4, r0
 800a49a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800a49e:	f00d fed3 	bl	8018248 <floorf>
 800a4a2:	ed84 0a00 	vstr	s0, [r4]
 800a4a6:	bd10      	pop	{r4, pc}

0800a4a8 <ai_floor_div_buffer>:
 800a4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 800a4b0:	42bc      	cmp	r4, r7
 800a4b2:	b081      	sub	sp, #4
 800a4b4:	460d      	mov	r5, r1
 800a4b6:	4616      	mov	r6, r2
 800a4b8:	f080 800f 	bcs.w	800a4da <ai_floor_div_buffer+0x32>
 800a4bc:	ed95 0a00 	vldr	s0, [r5]
 800a4c0:	edd6 0a00 	vldr	s1, [r6]
 800a4c4:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800a4c8:	f00d febe 	bl	8018248 <floorf>
 800a4cc:	ed84 0a00 	vstr	s0, [r4]
 800a4d0:	1d24      	adds	r4, r4, #4
 800a4d2:	1d2d      	adds	r5, r5, #4
 800a4d4:	1d36      	adds	r6, r6, #4
 800a4d6:	42bc      	cmp	r4, r7
 800a4d8:	d3f0      	bcc.n	800a4bc <ai_floor_div_buffer+0x14>
 800a4da:	b001      	add	sp, #4
 800a4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4de <ai_floor_mod>:
 800a4de:	b510      	push	{r4, lr}
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	edd2 0a00 	vldr	s1, [r2]
 800a4e6:	ed91 0a00 	vldr	s0, [r1]
 800a4ea:	f00c fee3 	bl	80172b4 <fmodf>
 800a4ee:	ed84 0a00 	vstr	s0, [r4]
 800a4f2:	bd10      	pop	{r4, pc}

0800a4f4 <ai_floor_mod_buffer>:
 800a4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 800a4fc:	42bc      	cmp	r4, r7
 800a4fe:	b081      	sub	sp, #4
 800a500:	460d      	mov	r5, r1
 800a502:	4616      	mov	r6, r2
 800a504:	f080 800d 	bcs.w	800a522 <ai_floor_mod_buffer+0x2e>
 800a508:	edd6 0a00 	vldr	s1, [r6]
 800a50c:	ed95 0a00 	vldr	s0, [r5]
 800a510:	f00c fed0 	bl	80172b4 <fmodf>
 800a514:	ed84 0a00 	vstr	s0, [r4]
 800a518:	1d24      	adds	r4, r4, #4
 800a51a:	1d2d      	adds	r5, r5, #4
 800a51c:	1d36      	adds	r6, r6, #4
 800a51e:	42bc      	cmp	r4, r7
 800a520:	d3f2      	bcc.n	800a508 <ai_floor_mod_buffer+0x14>
 800a522:	b001      	add	sp, #4
 800a524:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a526 <ai_max>:
 800a526:	ed91 0a00 	vldr	s0, [r1]
 800a52a:	edd2 0a00 	vldr	s1, [r2]
 800a52e:	eef4 0a40 	vcmp.f32	s1, s0
 800a532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a536:	bf58      	it	pl
 800a538:	eeb0 0a60 	vmovpl.f32	s0, s1
 800a53c:	ed80 0a00 	vstr	s0, [r0]
 800a540:	4770      	bx	lr
	...

0800a544 <ai_max_buffer>:
 800a544:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a548:	4298      	cmp	r0, r3
 800a54a:	d213      	bcs.n	800a574 <ai_max_buffer+0x30>
 800a54c:	ed91 0a00 	vldr	s0, [r1]
 800a550:	edd2 0a00 	vldr	s1, [r2]
 800a554:	4684      	mov	ip, r0
 800a556:	eef4 0a40 	vcmp.f32	s1, s0
 800a55a:	f10c 0004 	add.w	r0, ip, #4
 800a55e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a562:	bf58      	it	pl
 800a564:	eeb0 0a60 	vmovpl.f32	s0, s1
 800a568:	1d09      	adds	r1, r1, #4
 800a56a:	1d12      	adds	r2, r2, #4
 800a56c:	4298      	cmp	r0, r3
 800a56e:	ed8c 0a00 	vstr	s0, [ip]
 800a572:	d3eb      	bcc.n	800a54c <ai_max_buffer+0x8>
 800a574:	4770      	bx	lr

0800a576 <ai_max_f32>:
 800a576:	ed91 0a00 	vldr	s0, [r1]
 800a57a:	edd2 0a00 	vldr	s1, [r2]
 800a57e:	eef4 0a40 	vcmp.f32	s1, s0
 800a582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a586:	bf58      	it	pl
 800a588:	eeb0 0a60 	vmovpl.f32	s0, s1
 800a58c:	ed80 0a00 	vstr	s0, [r0]
 800a590:	4770      	bx	lr
	...

0800a594 <ai_max_buffer_f32>:
 800a594:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a598:	4298      	cmp	r0, r3
 800a59a:	d213      	bcs.n	800a5c4 <ai_max_buffer_f32+0x30>
 800a59c:	ed91 0a00 	vldr	s0, [r1]
 800a5a0:	edd2 0a00 	vldr	s1, [r2]
 800a5a4:	4684      	mov	ip, r0
 800a5a6:	eef4 0a40 	vcmp.f32	s1, s0
 800a5aa:	f10c 0004 	add.w	r0, ip, #4
 800a5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b2:	bf58      	it	pl
 800a5b4:	eeb0 0a60 	vmovpl.f32	s0, s1
 800a5b8:	1d09      	adds	r1, r1, #4
 800a5ba:	1d12      	adds	r2, r2, #4
 800a5bc:	4298      	cmp	r0, r3
 800a5be:	ed8c 0a00 	vstr	s0, [ip]
 800a5c2:	d3eb      	bcc.n	800a59c <ai_max_buffer_f32+0x8>
 800a5c4:	4770      	bx	lr

0800a5c6 <ai_max_s32>:
 800a5c6:	6809      	ldr	r1, [r1, #0]
 800a5c8:	6812      	ldr	r2, [r2, #0]
 800a5ca:	428a      	cmp	r2, r1
 800a5cc:	bfa8      	it	ge
 800a5ce:	4611      	movge	r1, r2
 800a5d0:	6001      	str	r1, [r0, #0]
 800a5d2:	4770      	bx	lr

0800a5d4 <ai_max_buffer_s32>:
 800a5d4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a5d8:	4298      	cmp	r0, r3
 800a5da:	d300      	bcc.n	800a5de <ai_max_buffer_s32+0xa>
 800a5dc:	4770      	bx	lr
 800a5de:	b470      	push	{r4, r5, r6}
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	680d      	ldr	r5, [r1, #0]
 800a5e4:	6816      	ldr	r6, [r2, #0]
 800a5e6:	1d20      	adds	r0, r4, #4
 800a5e8:	42ae      	cmp	r6, r5
 800a5ea:	bfa8      	it	ge
 800a5ec:	4635      	movge	r5, r6
 800a5ee:	1d09      	adds	r1, r1, #4
 800a5f0:	1d12      	adds	r2, r2, #4
 800a5f2:	4298      	cmp	r0, r3
 800a5f4:	6025      	str	r5, [r4, #0]
 800a5f6:	d3f3      	bcc.n	800a5e0 <ai_max_buffer_s32+0xc>
 800a5f8:	bc70      	pop	{r4, r5, r6}
 800a5fa:	4770      	bx	lr

0800a5fc <ai_max_s16>:
 800a5fc:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a600:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a604:	428a      	cmp	r2, r1
 800a606:	bfa8      	it	ge
 800a608:	4611      	movge	r1, r2
 800a60a:	8001      	strh	r1, [r0, #0]
 800a60c:	4770      	bx	lr

0800a60e <ai_max_buffer_s16>:
 800a60e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a612:	4298      	cmp	r0, r3
 800a614:	d300      	bcc.n	800a618 <ai_max_buffer_s16+0xa>
 800a616:	4770      	bx	lr
 800a618:	b470      	push	{r4, r5, r6}
 800a61a:	4604      	mov	r4, r0
 800a61c:	f9b1 5000 	ldrsh.w	r5, [r1]
 800a620:	f9b2 6000 	ldrsh.w	r6, [r2]
 800a624:	1ca0      	adds	r0, r4, #2
 800a626:	42ae      	cmp	r6, r5
 800a628:	bfa8      	it	ge
 800a62a:	4635      	movge	r5, r6
 800a62c:	1c89      	adds	r1, r1, #2
 800a62e:	1c92      	adds	r2, r2, #2
 800a630:	4298      	cmp	r0, r3
 800a632:	8025      	strh	r5, [r4, #0]
 800a634:	d3f1      	bcc.n	800a61a <ai_max_buffer_s16+0xc>
 800a636:	bc70      	pop	{r4, r5, r6}
 800a638:	4770      	bx	lr

0800a63a <ai_max_s8>:
 800a63a:	f991 1000 	ldrsb.w	r1, [r1]
 800a63e:	f992 2000 	ldrsb.w	r2, [r2]
 800a642:	428a      	cmp	r2, r1
 800a644:	bfa8      	it	ge
 800a646:	4611      	movge	r1, r2
 800a648:	7001      	strb	r1, [r0, #0]
 800a64a:	4770      	bx	lr

0800a64c <ai_max_buffer_s8>:
 800a64c:	4403      	add	r3, r0
 800a64e:	4298      	cmp	r0, r3
 800a650:	d300      	bcc.n	800a654 <ai_max_buffer_s8+0x8>
 800a652:	4770      	bx	lr
 800a654:	b470      	push	{r4, r5, r6}
 800a656:	4604      	mov	r4, r0
 800a658:	f991 5000 	ldrsb.w	r5, [r1]
 800a65c:	f992 6000 	ldrsb.w	r6, [r2]
 800a660:	1c60      	adds	r0, r4, #1
 800a662:	42ae      	cmp	r6, r5
 800a664:	bfa8      	it	ge
 800a666:	4635      	movge	r5, r6
 800a668:	1c49      	adds	r1, r1, #1
 800a66a:	1c52      	adds	r2, r2, #1
 800a66c:	4298      	cmp	r0, r3
 800a66e:	7025      	strb	r5, [r4, #0]
 800a670:	d3f1      	bcc.n	800a656 <ai_max_buffer_s8+0xa>
 800a672:	bc70      	pop	{r4, r5, r6}
 800a674:	4770      	bx	lr

0800a676 <ai_max_u32>:
 800a676:	6809      	ldr	r1, [r1, #0]
 800a678:	6812      	ldr	r2, [r2, #0]
 800a67a:	428a      	cmp	r2, r1
 800a67c:	bf28      	it	cs
 800a67e:	4611      	movcs	r1, r2
 800a680:	6001      	str	r1, [r0, #0]
 800a682:	4770      	bx	lr

0800a684 <ai_max_buffer_u32>:
 800a684:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a688:	4298      	cmp	r0, r3
 800a68a:	d300      	bcc.n	800a68e <ai_max_buffer_u32+0xa>
 800a68c:	4770      	bx	lr
 800a68e:	b470      	push	{r4, r5, r6}
 800a690:	4604      	mov	r4, r0
 800a692:	680d      	ldr	r5, [r1, #0]
 800a694:	6816      	ldr	r6, [r2, #0]
 800a696:	1d20      	adds	r0, r4, #4
 800a698:	42ae      	cmp	r6, r5
 800a69a:	bf28      	it	cs
 800a69c:	4635      	movcs	r5, r6
 800a69e:	1d09      	adds	r1, r1, #4
 800a6a0:	1d12      	adds	r2, r2, #4
 800a6a2:	4298      	cmp	r0, r3
 800a6a4:	6025      	str	r5, [r4, #0]
 800a6a6:	d3f3      	bcc.n	800a690 <ai_max_buffer_u32+0xc>
 800a6a8:	bc70      	pop	{r4, r5, r6}
 800a6aa:	4770      	bx	lr

0800a6ac <ai_max_u16>:
 800a6ac:	8809      	ldrh	r1, [r1, #0]
 800a6ae:	8812      	ldrh	r2, [r2, #0]
 800a6b0:	428a      	cmp	r2, r1
 800a6b2:	bf28      	it	cs
 800a6b4:	4611      	movcs	r1, r2
 800a6b6:	8001      	strh	r1, [r0, #0]
 800a6b8:	4770      	bx	lr

0800a6ba <ai_max_buffer_u16>:
 800a6ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a6be:	4298      	cmp	r0, r3
 800a6c0:	d300      	bcc.n	800a6c4 <ai_max_buffer_u16+0xa>
 800a6c2:	4770      	bx	lr
 800a6c4:	b470      	push	{r4, r5, r6}
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	880d      	ldrh	r5, [r1, #0]
 800a6ca:	8816      	ldrh	r6, [r2, #0]
 800a6cc:	1ca0      	adds	r0, r4, #2
 800a6ce:	42ae      	cmp	r6, r5
 800a6d0:	bf28      	it	cs
 800a6d2:	4635      	movcs	r5, r6
 800a6d4:	1c89      	adds	r1, r1, #2
 800a6d6:	1c92      	adds	r2, r2, #2
 800a6d8:	4298      	cmp	r0, r3
 800a6da:	8025      	strh	r5, [r4, #0]
 800a6dc:	d3f3      	bcc.n	800a6c6 <ai_max_buffer_u16+0xc>
 800a6de:	bc70      	pop	{r4, r5, r6}
 800a6e0:	4770      	bx	lr

0800a6e2 <ai_max_u8>:
 800a6e2:	7809      	ldrb	r1, [r1, #0]
 800a6e4:	7812      	ldrb	r2, [r2, #0]
 800a6e6:	428a      	cmp	r2, r1
 800a6e8:	bf28      	it	cs
 800a6ea:	4611      	movcs	r1, r2
 800a6ec:	7001      	strb	r1, [r0, #0]
 800a6ee:	4770      	bx	lr

0800a6f0 <ai_max_buffer_u8>:
 800a6f0:	4403      	add	r3, r0
 800a6f2:	4298      	cmp	r0, r3
 800a6f4:	d300      	bcc.n	800a6f8 <ai_max_buffer_u8+0x8>
 800a6f6:	4770      	bx	lr
 800a6f8:	b470      	push	{r4, r5, r6}
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	780d      	ldrb	r5, [r1, #0]
 800a6fe:	7816      	ldrb	r6, [r2, #0]
 800a700:	1c60      	adds	r0, r4, #1
 800a702:	42ae      	cmp	r6, r5
 800a704:	bf28      	it	cs
 800a706:	4635      	movcs	r5, r6
 800a708:	1c49      	adds	r1, r1, #1
 800a70a:	1c52      	adds	r2, r2, #1
 800a70c:	4298      	cmp	r0, r3
 800a70e:	7025      	strb	r5, [r4, #0]
 800a710:	d3f3      	bcc.n	800a6fa <ai_max_buffer_u8+0xa>
 800a712:	bc70      	pop	{r4, r5, r6}
 800a714:	4770      	bx	lr

0800a716 <ai_min>:
 800a716:	ed92 0a00 	vldr	s0, [r2]
 800a71a:	edd1 0a00 	vldr	s1, [r1]
 800a71e:	eef4 0a40 	vcmp.f32	s1, s0
 800a722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a726:	bf48      	it	mi
 800a728:	eeb0 0a60 	vmovmi.f32	s0, s1
 800a72c:	ed80 0a00 	vstr	s0, [r0]
 800a730:	4770      	bx	lr
	...

0800a734 <ai_min_buffer>:
 800a734:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a738:	4298      	cmp	r0, r3
 800a73a:	d213      	bcs.n	800a764 <ai_min_buffer+0x30>
 800a73c:	ed92 0a00 	vldr	s0, [r2]
 800a740:	edd1 0a00 	vldr	s1, [r1]
 800a744:	4684      	mov	ip, r0
 800a746:	eef4 0a40 	vcmp.f32	s1, s0
 800a74a:	f10c 0004 	add.w	r0, ip, #4
 800a74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a752:	bf48      	it	mi
 800a754:	eeb0 0a60 	vmovmi.f32	s0, s1
 800a758:	1d09      	adds	r1, r1, #4
 800a75a:	1d12      	adds	r2, r2, #4
 800a75c:	4298      	cmp	r0, r3
 800a75e:	ed8c 0a00 	vstr	s0, [ip]
 800a762:	d3eb      	bcc.n	800a73c <ai_min_buffer+0x8>
 800a764:	4770      	bx	lr

0800a766 <ai_min_f32>:
 800a766:	ed92 0a00 	vldr	s0, [r2]
 800a76a:	edd1 0a00 	vldr	s1, [r1]
 800a76e:	eef4 0a40 	vcmp.f32	s1, s0
 800a772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a776:	bf48      	it	mi
 800a778:	eeb0 0a60 	vmovmi.f32	s0, s1
 800a77c:	ed80 0a00 	vstr	s0, [r0]
 800a780:	4770      	bx	lr
	...

0800a784 <ai_min_buffer_f32>:
 800a784:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a788:	4298      	cmp	r0, r3
 800a78a:	d213      	bcs.n	800a7b4 <ai_min_buffer_f32+0x30>
 800a78c:	ed92 0a00 	vldr	s0, [r2]
 800a790:	edd1 0a00 	vldr	s1, [r1]
 800a794:	4684      	mov	ip, r0
 800a796:	eef4 0a40 	vcmp.f32	s1, s0
 800a79a:	f10c 0004 	add.w	r0, ip, #4
 800a79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a2:	bf48      	it	mi
 800a7a4:	eeb0 0a60 	vmovmi.f32	s0, s1
 800a7a8:	1d09      	adds	r1, r1, #4
 800a7aa:	1d12      	adds	r2, r2, #4
 800a7ac:	4298      	cmp	r0, r3
 800a7ae:	ed8c 0a00 	vstr	s0, [ip]
 800a7b2:	d3eb      	bcc.n	800a78c <ai_min_buffer_f32+0x8>
 800a7b4:	4770      	bx	lr

0800a7b6 <ai_min_s32>:
 800a7b6:	6812      	ldr	r2, [r2, #0]
 800a7b8:	6809      	ldr	r1, [r1, #0]
 800a7ba:	4291      	cmp	r1, r2
 800a7bc:	bfb8      	it	lt
 800a7be:	460a      	movlt	r2, r1
 800a7c0:	6002      	str	r2, [r0, #0]
 800a7c2:	4770      	bx	lr

0800a7c4 <ai_min_buffer_s32>:
 800a7c4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a7c8:	4298      	cmp	r0, r3
 800a7ca:	d300      	bcc.n	800a7ce <ai_min_buffer_s32+0xa>
 800a7cc:	4770      	bx	lr
 800a7ce:	b470      	push	{r4, r5, r6}
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	6815      	ldr	r5, [r2, #0]
 800a7d4:	680e      	ldr	r6, [r1, #0]
 800a7d6:	1d20      	adds	r0, r4, #4
 800a7d8:	42ae      	cmp	r6, r5
 800a7da:	bfb8      	it	lt
 800a7dc:	4635      	movlt	r5, r6
 800a7de:	1d09      	adds	r1, r1, #4
 800a7e0:	1d12      	adds	r2, r2, #4
 800a7e2:	4298      	cmp	r0, r3
 800a7e4:	6025      	str	r5, [r4, #0]
 800a7e6:	d3f3      	bcc.n	800a7d0 <ai_min_buffer_s32+0xc>
 800a7e8:	bc70      	pop	{r4, r5, r6}
 800a7ea:	4770      	bx	lr

0800a7ec <ai_min_s16>:
 800a7ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a7f0:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a7f4:	4291      	cmp	r1, r2
 800a7f6:	bfb8      	it	lt
 800a7f8:	460a      	movlt	r2, r1
 800a7fa:	8002      	strh	r2, [r0, #0]
 800a7fc:	4770      	bx	lr

0800a7fe <ai_min_buffer_s16>:
 800a7fe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a802:	4298      	cmp	r0, r3
 800a804:	d300      	bcc.n	800a808 <ai_min_buffer_s16+0xa>
 800a806:	4770      	bx	lr
 800a808:	b470      	push	{r4, r5, r6}
 800a80a:	4604      	mov	r4, r0
 800a80c:	f9b2 5000 	ldrsh.w	r5, [r2]
 800a810:	f9b1 6000 	ldrsh.w	r6, [r1]
 800a814:	1ca0      	adds	r0, r4, #2
 800a816:	42ae      	cmp	r6, r5
 800a818:	bfb8      	it	lt
 800a81a:	4635      	movlt	r5, r6
 800a81c:	1c89      	adds	r1, r1, #2
 800a81e:	1c92      	adds	r2, r2, #2
 800a820:	4298      	cmp	r0, r3
 800a822:	8025      	strh	r5, [r4, #0]
 800a824:	d3f1      	bcc.n	800a80a <ai_min_buffer_s16+0xc>
 800a826:	bc70      	pop	{r4, r5, r6}
 800a828:	4770      	bx	lr

0800a82a <ai_min_s8>:
 800a82a:	f992 2000 	ldrsb.w	r2, [r2]
 800a82e:	f991 1000 	ldrsb.w	r1, [r1]
 800a832:	4291      	cmp	r1, r2
 800a834:	bfb8      	it	lt
 800a836:	460a      	movlt	r2, r1
 800a838:	7002      	strb	r2, [r0, #0]
 800a83a:	4770      	bx	lr

0800a83c <ai_min_buffer_s8>:
 800a83c:	4403      	add	r3, r0
 800a83e:	4298      	cmp	r0, r3
 800a840:	d300      	bcc.n	800a844 <ai_min_buffer_s8+0x8>
 800a842:	4770      	bx	lr
 800a844:	b470      	push	{r4, r5, r6}
 800a846:	4604      	mov	r4, r0
 800a848:	f992 5000 	ldrsb.w	r5, [r2]
 800a84c:	f991 6000 	ldrsb.w	r6, [r1]
 800a850:	1c60      	adds	r0, r4, #1
 800a852:	42ae      	cmp	r6, r5
 800a854:	bfb8      	it	lt
 800a856:	4635      	movlt	r5, r6
 800a858:	1c49      	adds	r1, r1, #1
 800a85a:	1c52      	adds	r2, r2, #1
 800a85c:	4298      	cmp	r0, r3
 800a85e:	7025      	strb	r5, [r4, #0]
 800a860:	d3f1      	bcc.n	800a846 <ai_min_buffer_s8+0xa>
 800a862:	bc70      	pop	{r4, r5, r6}
 800a864:	4770      	bx	lr

0800a866 <ai_min_u32>:
 800a866:	6812      	ldr	r2, [r2, #0]
 800a868:	6809      	ldr	r1, [r1, #0]
 800a86a:	4291      	cmp	r1, r2
 800a86c:	bf38      	it	cc
 800a86e:	460a      	movcc	r2, r1
 800a870:	6002      	str	r2, [r0, #0]
 800a872:	4770      	bx	lr

0800a874 <ai_min_buffer_u32>:
 800a874:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a878:	4298      	cmp	r0, r3
 800a87a:	d300      	bcc.n	800a87e <ai_min_buffer_u32+0xa>
 800a87c:	4770      	bx	lr
 800a87e:	b470      	push	{r4, r5, r6}
 800a880:	4604      	mov	r4, r0
 800a882:	6815      	ldr	r5, [r2, #0]
 800a884:	680e      	ldr	r6, [r1, #0]
 800a886:	1d20      	adds	r0, r4, #4
 800a888:	42ae      	cmp	r6, r5
 800a88a:	bf38      	it	cc
 800a88c:	4635      	movcc	r5, r6
 800a88e:	1d09      	adds	r1, r1, #4
 800a890:	1d12      	adds	r2, r2, #4
 800a892:	4298      	cmp	r0, r3
 800a894:	6025      	str	r5, [r4, #0]
 800a896:	d3f3      	bcc.n	800a880 <ai_min_buffer_u32+0xc>
 800a898:	bc70      	pop	{r4, r5, r6}
 800a89a:	4770      	bx	lr

0800a89c <ai_min_u16>:
 800a89c:	8812      	ldrh	r2, [r2, #0]
 800a89e:	8809      	ldrh	r1, [r1, #0]
 800a8a0:	4291      	cmp	r1, r2
 800a8a2:	bf38      	it	cc
 800a8a4:	460a      	movcc	r2, r1
 800a8a6:	8002      	strh	r2, [r0, #0]
 800a8a8:	4770      	bx	lr

0800a8aa <ai_min_buffer_u16>:
 800a8aa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a8ae:	4298      	cmp	r0, r3
 800a8b0:	d300      	bcc.n	800a8b4 <ai_min_buffer_u16+0xa>
 800a8b2:	4770      	bx	lr
 800a8b4:	b470      	push	{r4, r5, r6}
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	8815      	ldrh	r5, [r2, #0]
 800a8ba:	880e      	ldrh	r6, [r1, #0]
 800a8bc:	1ca0      	adds	r0, r4, #2
 800a8be:	42ae      	cmp	r6, r5
 800a8c0:	bf38      	it	cc
 800a8c2:	4635      	movcc	r5, r6
 800a8c4:	1c89      	adds	r1, r1, #2
 800a8c6:	1c92      	adds	r2, r2, #2
 800a8c8:	4298      	cmp	r0, r3
 800a8ca:	8025      	strh	r5, [r4, #0]
 800a8cc:	d3f3      	bcc.n	800a8b6 <ai_min_buffer_u16+0xc>
 800a8ce:	bc70      	pop	{r4, r5, r6}
 800a8d0:	4770      	bx	lr

0800a8d2 <ai_min_u8>:
 800a8d2:	7812      	ldrb	r2, [r2, #0]
 800a8d4:	7809      	ldrb	r1, [r1, #0]
 800a8d6:	4291      	cmp	r1, r2
 800a8d8:	bf38      	it	cc
 800a8da:	460a      	movcc	r2, r1
 800a8dc:	7002      	strb	r2, [r0, #0]
 800a8de:	4770      	bx	lr

0800a8e0 <ai_min_buffer_u8>:
 800a8e0:	4403      	add	r3, r0
 800a8e2:	4298      	cmp	r0, r3
 800a8e4:	d300      	bcc.n	800a8e8 <ai_min_buffer_u8+0x8>
 800a8e6:	4770      	bx	lr
 800a8e8:	b470      	push	{r4, r5, r6}
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	7815      	ldrb	r5, [r2, #0]
 800a8ee:	780e      	ldrb	r6, [r1, #0]
 800a8f0:	1c60      	adds	r0, r4, #1
 800a8f2:	42ae      	cmp	r6, r5
 800a8f4:	bf38      	it	cc
 800a8f6:	4635      	movcc	r5, r6
 800a8f8:	1c49      	adds	r1, r1, #1
 800a8fa:	1c52      	adds	r2, r2, #1
 800a8fc:	4298      	cmp	r0, r3
 800a8fe:	7025      	strb	r5, [r4, #0]
 800a900:	d3f3      	bcc.n	800a8ea <ai_min_buffer_u8+0xa>
 800a902:	bc70      	pop	{r4, r5, r6}
 800a904:	4770      	bx	lr

0800a906 <ai_pow>:
 800a906:	b510      	push	{r4, lr}
 800a908:	4604      	mov	r4, r0
 800a90a:	edd2 0a00 	vldr	s1, [r2]
 800a90e:	ed91 0a00 	vldr	s0, [r1]
 800a912:	f00c fd1d 	bl	8017350 <powf>
 800a916:	ed84 0a00 	vstr	s0, [r4]
 800a91a:	bd10      	pop	{r4, pc}

0800a91c <ai_pow_buffer>:
 800a91c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a91e:	4604      	mov	r4, r0
 800a920:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 800a924:	42bc      	cmp	r4, r7
 800a926:	b081      	sub	sp, #4
 800a928:	460d      	mov	r5, r1
 800a92a:	4616      	mov	r6, r2
 800a92c:	f080 800d 	bcs.w	800a94a <ai_pow_buffer+0x2e>
 800a930:	edd6 0a00 	vldr	s1, [r6]
 800a934:	ed95 0a00 	vldr	s0, [r5]
 800a938:	f00c fd0a 	bl	8017350 <powf>
 800a93c:	ed84 0a00 	vstr	s0, [r4]
 800a940:	1d24      	adds	r4, r4, #4
 800a942:	1d2d      	adds	r5, r5, #4
 800a944:	1d36      	adds	r6, r6, #4
 800a946:	42bc      	cmp	r4, r7
 800a948:	d3f2      	bcc.n	800a930 <ai_pow_buffer+0x14>
 800a94a:	b001      	add	sp, #4
 800a94c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a94e <ai_equal>:
 800a94e:	ed91 0a00 	vldr	s0, [r1]
 800a952:	edd2 0a00 	vldr	s1, [r2]
 800a956:	eeb4 0a60 	vcmp.f32	s0, s1
 800a95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a95e:	bf0c      	ite	eq
 800a960:	2101      	moveq	r1, #1
 800a962:	2100      	movne	r1, #0
 800a964:	7001      	strb	r1, [r0, #0]
 800a966:	4770      	bx	lr

0800a968 <ai_equal_buffer>:
 800a968:	4403      	add	r3, r0
 800a96a:	4298      	cmp	r0, r3
 800a96c:	d300      	bcc.n	800a970 <ai_equal_buffer+0x8>
 800a96e:	4770      	bx	lr
 800a970:	b430      	push	{r4, r5}
 800a972:	4604      	mov	r4, r0
 800a974:	ed91 0a00 	vldr	s0, [r1]
 800a978:	edd2 0a00 	vldr	s1, [r2]
 800a97c:	1c60      	adds	r0, r4, #1
 800a97e:	eeb4 0a60 	vcmp.f32	s0, s1
 800a982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a986:	bf0c      	ite	eq
 800a988:	2501      	moveq	r5, #1
 800a98a:	2500      	movne	r5, #0
 800a98c:	1d09      	adds	r1, r1, #4
 800a98e:	1d12      	adds	r2, r2, #4
 800a990:	4298      	cmp	r0, r3
 800a992:	7025      	strb	r5, [r4, #0]
 800a994:	d3ed      	bcc.n	800a972 <ai_equal_buffer+0xa>
 800a996:	bc30      	pop	{r4, r5}
 800a998:	4770      	bx	lr

0800a99a <ai_equal_f32>:
 800a99a:	ed91 0a00 	vldr	s0, [r1]
 800a99e:	edd2 0a00 	vldr	s1, [r2]
 800a9a2:	eeb4 0a60 	vcmp.f32	s0, s1
 800a9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9aa:	bf0c      	ite	eq
 800a9ac:	2101      	moveq	r1, #1
 800a9ae:	2100      	movne	r1, #0
 800a9b0:	7001      	strb	r1, [r0, #0]
 800a9b2:	4770      	bx	lr

0800a9b4 <ai_equal_buffer_f32>:
 800a9b4:	4403      	add	r3, r0
 800a9b6:	4298      	cmp	r0, r3
 800a9b8:	d300      	bcc.n	800a9bc <ai_equal_buffer_f32+0x8>
 800a9ba:	4770      	bx	lr
 800a9bc:	b430      	push	{r4, r5}
 800a9be:	4604      	mov	r4, r0
 800a9c0:	ed91 0a00 	vldr	s0, [r1]
 800a9c4:	edd2 0a00 	vldr	s1, [r2]
 800a9c8:	1c60      	adds	r0, r4, #1
 800a9ca:	eeb4 0a60 	vcmp.f32	s0, s1
 800a9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d2:	bf0c      	ite	eq
 800a9d4:	2501      	moveq	r5, #1
 800a9d6:	2500      	movne	r5, #0
 800a9d8:	1d09      	adds	r1, r1, #4
 800a9da:	1d12      	adds	r2, r2, #4
 800a9dc:	4298      	cmp	r0, r3
 800a9de:	7025      	strb	r5, [r4, #0]
 800a9e0:	d3ed      	bcc.n	800a9be <ai_equal_buffer_f32+0xa>
 800a9e2:	bc30      	pop	{r4, r5}
 800a9e4:	4770      	bx	lr

0800a9e6 <ai_equal_s32>:
 800a9e6:	6809      	ldr	r1, [r1, #0]
 800a9e8:	6812      	ldr	r2, [r2, #0]
 800a9ea:	4291      	cmp	r1, r2
 800a9ec:	bf0c      	ite	eq
 800a9ee:	2101      	moveq	r1, #1
 800a9f0:	2100      	movne	r1, #0
 800a9f2:	7001      	strb	r1, [r0, #0]
 800a9f4:	4770      	bx	lr

0800a9f6 <ai_equal_buffer_s32>:
 800a9f6:	4403      	add	r3, r0
 800a9f8:	4298      	cmp	r0, r3
 800a9fa:	d300      	bcc.n	800a9fe <ai_equal_buffer_s32+0x8>
 800a9fc:	4770      	bx	lr
 800a9fe:	b470      	push	{r4, r5, r6}
 800aa00:	4604      	mov	r4, r0
 800aa02:	680d      	ldr	r5, [r1, #0]
 800aa04:	6816      	ldr	r6, [r2, #0]
 800aa06:	1c60      	adds	r0, r4, #1
 800aa08:	42b5      	cmp	r5, r6
 800aa0a:	bf0c      	ite	eq
 800aa0c:	2501      	moveq	r5, #1
 800aa0e:	2500      	movne	r5, #0
 800aa10:	1d09      	adds	r1, r1, #4
 800aa12:	1d12      	adds	r2, r2, #4
 800aa14:	4298      	cmp	r0, r3
 800aa16:	7025      	strb	r5, [r4, #0]
 800aa18:	d3f2      	bcc.n	800aa00 <ai_equal_buffer_s32+0xa>
 800aa1a:	bc70      	pop	{r4, r5, r6}
 800aa1c:	4770      	bx	lr

0800aa1e <ai_equal_s16>:
 800aa1e:	f9b1 1000 	ldrsh.w	r1, [r1]
 800aa22:	f9b2 2000 	ldrsh.w	r2, [r2]
 800aa26:	4291      	cmp	r1, r2
 800aa28:	bf0c      	ite	eq
 800aa2a:	2101      	moveq	r1, #1
 800aa2c:	2100      	movne	r1, #0
 800aa2e:	7001      	strb	r1, [r0, #0]
 800aa30:	4770      	bx	lr

0800aa32 <ai_equal_buffer_s16>:
 800aa32:	4403      	add	r3, r0
 800aa34:	4298      	cmp	r0, r3
 800aa36:	d300      	bcc.n	800aa3a <ai_equal_buffer_s16+0x8>
 800aa38:	4770      	bx	lr
 800aa3a:	b470      	push	{r4, r5, r6}
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	f9b1 5000 	ldrsh.w	r5, [r1]
 800aa42:	f9b2 6000 	ldrsh.w	r6, [r2]
 800aa46:	1c60      	adds	r0, r4, #1
 800aa48:	42b5      	cmp	r5, r6
 800aa4a:	bf0c      	ite	eq
 800aa4c:	2501      	moveq	r5, #1
 800aa4e:	2500      	movne	r5, #0
 800aa50:	1c89      	adds	r1, r1, #2
 800aa52:	1c92      	adds	r2, r2, #2
 800aa54:	4298      	cmp	r0, r3
 800aa56:	7025      	strb	r5, [r4, #0]
 800aa58:	d3f0      	bcc.n	800aa3c <ai_equal_buffer_s16+0xa>
 800aa5a:	bc70      	pop	{r4, r5, r6}
 800aa5c:	4770      	bx	lr

0800aa5e <ai_equal_s8>:
 800aa5e:	f991 1000 	ldrsb.w	r1, [r1]
 800aa62:	f992 2000 	ldrsb.w	r2, [r2]
 800aa66:	4291      	cmp	r1, r2
 800aa68:	bf0c      	ite	eq
 800aa6a:	2101      	moveq	r1, #1
 800aa6c:	2100      	movne	r1, #0
 800aa6e:	7001      	strb	r1, [r0, #0]
 800aa70:	4770      	bx	lr

0800aa72 <ai_equal_buffer_s8>:
 800aa72:	4403      	add	r3, r0
 800aa74:	4298      	cmp	r0, r3
 800aa76:	d300      	bcc.n	800aa7a <ai_equal_buffer_s8+0x8>
 800aa78:	4770      	bx	lr
 800aa7a:	b470      	push	{r4, r5, r6}
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	f991 5000 	ldrsb.w	r5, [r1]
 800aa82:	f992 6000 	ldrsb.w	r6, [r2]
 800aa86:	1c60      	adds	r0, r4, #1
 800aa88:	42b5      	cmp	r5, r6
 800aa8a:	bf0c      	ite	eq
 800aa8c:	2501      	moveq	r5, #1
 800aa8e:	2500      	movne	r5, #0
 800aa90:	1c49      	adds	r1, r1, #1
 800aa92:	1c52      	adds	r2, r2, #1
 800aa94:	4298      	cmp	r0, r3
 800aa96:	7025      	strb	r5, [r4, #0]
 800aa98:	d3f0      	bcc.n	800aa7c <ai_equal_buffer_s8+0xa>
 800aa9a:	bc70      	pop	{r4, r5, r6}
 800aa9c:	4770      	bx	lr

0800aa9e <ai_equal_u32>:
 800aa9e:	6809      	ldr	r1, [r1, #0]
 800aaa0:	6812      	ldr	r2, [r2, #0]
 800aaa2:	4291      	cmp	r1, r2
 800aaa4:	bf0c      	ite	eq
 800aaa6:	2101      	moveq	r1, #1
 800aaa8:	2100      	movne	r1, #0
 800aaaa:	7001      	strb	r1, [r0, #0]
 800aaac:	4770      	bx	lr

0800aaae <ai_equal_buffer_u32>:
 800aaae:	4403      	add	r3, r0
 800aab0:	4298      	cmp	r0, r3
 800aab2:	d300      	bcc.n	800aab6 <ai_equal_buffer_u32+0x8>
 800aab4:	4770      	bx	lr
 800aab6:	b470      	push	{r4, r5, r6}
 800aab8:	4604      	mov	r4, r0
 800aaba:	680d      	ldr	r5, [r1, #0]
 800aabc:	6816      	ldr	r6, [r2, #0]
 800aabe:	1c60      	adds	r0, r4, #1
 800aac0:	42b5      	cmp	r5, r6
 800aac2:	bf0c      	ite	eq
 800aac4:	2501      	moveq	r5, #1
 800aac6:	2500      	movne	r5, #0
 800aac8:	1d09      	adds	r1, r1, #4
 800aaca:	1d12      	adds	r2, r2, #4
 800aacc:	4298      	cmp	r0, r3
 800aace:	7025      	strb	r5, [r4, #0]
 800aad0:	d3f2      	bcc.n	800aab8 <ai_equal_buffer_u32+0xa>
 800aad2:	bc70      	pop	{r4, r5, r6}
 800aad4:	4770      	bx	lr

0800aad6 <ai_equal_u16>:
 800aad6:	8809      	ldrh	r1, [r1, #0]
 800aad8:	8812      	ldrh	r2, [r2, #0]
 800aada:	4291      	cmp	r1, r2
 800aadc:	bf0c      	ite	eq
 800aade:	2101      	moveq	r1, #1
 800aae0:	2100      	movne	r1, #0
 800aae2:	7001      	strb	r1, [r0, #0]
 800aae4:	4770      	bx	lr

0800aae6 <ai_equal_buffer_u16>:
 800aae6:	4403      	add	r3, r0
 800aae8:	4298      	cmp	r0, r3
 800aaea:	d300      	bcc.n	800aaee <ai_equal_buffer_u16+0x8>
 800aaec:	4770      	bx	lr
 800aaee:	b470      	push	{r4, r5, r6}
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	880d      	ldrh	r5, [r1, #0]
 800aaf4:	8816      	ldrh	r6, [r2, #0]
 800aaf6:	1c60      	adds	r0, r4, #1
 800aaf8:	42b5      	cmp	r5, r6
 800aafa:	bf0c      	ite	eq
 800aafc:	2501      	moveq	r5, #1
 800aafe:	2500      	movne	r5, #0
 800ab00:	1c89      	adds	r1, r1, #2
 800ab02:	1c92      	adds	r2, r2, #2
 800ab04:	4298      	cmp	r0, r3
 800ab06:	7025      	strb	r5, [r4, #0]
 800ab08:	d3f2      	bcc.n	800aaf0 <ai_equal_buffer_u16+0xa>
 800ab0a:	bc70      	pop	{r4, r5, r6}
 800ab0c:	4770      	bx	lr

0800ab0e <ai_equal_u8>:
 800ab0e:	7809      	ldrb	r1, [r1, #0]
 800ab10:	7812      	ldrb	r2, [r2, #0]
 800ab12:	4291      	cmp	r1, r2
 800ab14:	bf0c      	ite	eq
 800ab16:	2101      	moveq	r1, #1
 800ab18:	2100      	movne	r1, #0
 800ab1a:	7001      	strb	r1, [r0, #0]
 800ab1c:	4770      	bx	lr

0800ab1e <ai_equal_buffer_u8>:
 800ab1e:	4403      	add	r3, r0
 800ab20:	4298      	cmp	r0, r3
 800ab22:	d300      	bcc.n	800ab26 <ai_equal_buffer_u8+0x8>
 800ab24:	4770      	bx	lr
 800ab26:	b470      	push	{r4, r5, r6}
 800ab28:	4604      	mov	r4, r0
 800ab2a:	780d      	ldrb	r5, [r1, #0]
 800ab2c:	7816      	ldrb	r6, [r2, #0]
 800ab2e:	1c60      	adds	r0, r4, #1
 800ab30:	42b5      	cmp	r5, r6
 800ab32:	bf0c      	ite	eq
 800ab34:	2501      	moveq	r5, #1
 800ab36:	2500      	movne	r5, #0
 800ab38:	1c49      	adds	r1, r1, #1
 800ab3a:	1c52      	adds	r2, r2, #1
 800ab3c:	4298      	cmp	r0, r3
 800ab3e:	7025      	strb	r5, [r4, #0]
 800ab40:	d3f2      	bcc.n	800ab28 <ai_equal_buffer_u8+0xa>
 800ab42:	bc70      	pop	{r4, r5, r6}
 800ab44:	4770      	bx	lr

0800ab46 <ai_not_equal>:
 800ab46:	ed91 0a00 	vldr	s0, [r1]
 800ab4a:	edd2 0a00 	vldr	s1, [r2]
 800ab4e:	eeb4 0a60 	vcmp.f32	s0, s1
 800ab52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab56:	bf14      	ite	ne
 800ab58:	2101      	movne	r1, #1
 800ab5a:	2100      	moveq	r1, #0
 800ab5c:	7001      	strb	r1, [r0, #0]
 800ab5e:	4770      	bx	lr

0800ab60 <ai_not_equal_buffer>:
 800ab60:	4403      	add	r3, r0
 800ab62:	4298      	cmp	r0, r3
 800ab64:	d300      	bcc.n	800ab68 <ai_not_equal_buffer+0x8>
 800ab66:	4770      	bx	lr
 800ab68:	b430      	push	{r4, r5}
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	ed91 0a00 	vldr	s0, [r1]
 800ab70:	edd2 0a00 	vldr	s1, [r2]
 800ab74:	1c60      	adds	r0, r4, #1
 800ab76:	eeb4 0a60 	vcmp.f32	s0, s1
 800ab7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7e:	bf14      	ite	ne
 800ab80:	2501      	movne	r5, #1
 800ab82:	2500      	moveq	r5, #0
 800ab84:	1d09      	adds	r1, r1, #4
 800ab86:	1d12      	adds	r2, r2, #4
 800ab88:	4298      	cmp	r0, r3
 800ab8a:	7025      	strb	r5, [r4, #0]
 800ab8c:	d3ed      	bcc.n	800ab6a <ai_not_equal_buffer+0xa>
 800ab8e:	bc30      	pop	{r4, r5}
 800ab90:	4770      	bx	lr

0800ab92 <ai_not_equal_f32>:
 800ab92:	ed91 0a00 	vldr	s0, [r1]
 800ab96:	edd2 0a00 	vldr	s1, [r2]
 800ab9a:	eeb4 0a60 	vcmp.f32	s0, s1
 800ab9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba2:	bf14      	ite	ne
 800aba4:	2101      	movne	r1, #1
 800aba6:	2100      	moveq	r1, #0
 800aba8:	7001      	strb	r1, [r0, #0]
 800abaa:	4770      	bx	lr

0800abac <ai_not_equal_buffer_f32>:
 800abac:	4403      	add	r3, r0
 800abae:	4298      	cmp	r0, r3
 800abb0:	d300      	bcc.n	800abb4 <ai_not_equal_buffer_f32+0x8>
 800abb2:	4770      	bx	lr
 800abb4:	b430      	push	{r4, r5}
 800abb6:	4604      	mov	r4, r0
 800abb8:	ed91 0a00 	vldr	s0, [r1]
 800abbc:	edd2 0a00 	vldr	s1, [r2]
 800abc0:	1c60      	adds	r0, r4, #1
 800abc2:	eeb4 0a60 	vcmp.f32	s0, s1
 800abc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abca:	bf14      	ite	ne
 800abcc:	2501      	movne	r5, #1
 800abce:	2500      	moveq	r5, #0
 800abd0:	1d09      	adds	r1, r1, #4
 800abd2:	1d12      	adds	r2, r2, #4
 800abd4:	4298      	cmp	r0, r3
 800abd6:	7025      	strb	r5, [r4, #0]
 800abd8:	d3ed      	bcc.n	800abb6 <ai_not_equal_buffer_f32+0xa>
 800abda:	bc30      	pop	{r4, r5}
 800abdc:	4770      	bx	lr

0800abde <ai_not_equal_s32>:
 800abde:	6809      	ldr	r1, [r1, #0]
 800abe0:	6812      	ldr	r2, [r2, #0]
 800abe2:	4291      	cmp	r1, r2
 800abe4:	bf14      	ite	ne
 800abe6:	2101      	movne	r1, #1
 800abe8:	2100      	moveq	r1, #0
 800abea:	7001      	strb	r1, [r0, #0]
 800abec:	4770      	bx	lr

0800abee <ai_not_equal_buffer_s32>:
 800abee:	4403      	add	r3, r0
 800abf0:	4298      	cmp	r0, r3
 800abf2:	d300      	bcc.n	800abf6 <ai_not_equal_buffer_s32+0x8>
 800abf4:	4770      	bx	lr
 800abf6:	b470      	push	{r4, r5, r6}
 800abf8:	4604      	mov	r4, r0
 800abfa:	680d      	ldr	r5, [r1, #0]
 800abfc:	6816      	ldr	r6, [r2, #0]
 800abfe:	1c60      	adds	r0, r4, #1
 800ac00:	42b5      	cmp	r5, r6
 800ac02:	bf14      	ite	ne
 800ac04:	2501      	movne	r5, #1
 800ac06:	2500      	moveq	r5, #0
 800ac08:	1d09      	adds	r1, r1, #4
 800ac0a:	1d12      	adds	r2, r2, #4
 800ac0c:	4298      	cmp	r0, r3
 800ac0e:	7025      	strb	r5, [r4, #0]
 800ac10:	d3f2      	bcc.n	800abf8 <ai_not_equal_buffer_s32+0xa>
 800ac12:	bc70      	pop	{r4, r5, r6}
 800ac14:	4770      	bx	lr

0800ac16 <ai_not_equal_s16>:
 800ac16:	f9b1 1000 	ldrsh.w	r1, [r1]
 800ac1a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ac1e:	4291      	cmp	r1, r2
 800ac20:	bf14      	ite	ne
 800ac22:	2101      	movne	r1, #1
 800ac24:	2100      	moveq	r1, #0
 800ac26:	7001      	strb	r1, [r0, #0]
 800ac28:	4770      	bx	lr

0800ac2a <ai_not_equal_buffer_s16>:
 800ac2a:	4403      	add	r3, r0
 800ac2c:	4298      	cmp	r0, r3
 800ac2e:	d300      	bcc.n	800ac32 <ai_not_equal_buffer_s16+0x8>
 800ac30:	4770      	bx	lr
 800ac32:	b470      	push	{r4, r5, r6}
 800ac34:	4604      	mov	r4, r0
 800ac36:	f9b1 5000 	ldrsh.w	r5, [r1]
 800ac3a:	f9b2 6000 	ldrsh.w	r6, [r2]
 800ac3e:	1c60      	adds	r0, r4, #1
 800ac40:	42b5      	cmp	r5, r6
 800ac42:	bf14      	ite	ne
 800ac44:	2501      	movne	r5, #1
 800ac46:	2500      	moveq	r5, #0
 800ac48:	1c89      	adds	r1, r1, #2
 800ac4a:	1c92      	adds	r2, r2, #2
 800ac4c:	4298      	cmp	r0, r3
 800ac4e:	7025      	strb	r5, [r4, #0]
 800ac50:	d3f0      	bcc.n	800ac34 <ai_not_equal_buffer_s16+0xa>
 800ac52:	bc70      	pop	{r4, r5, r6}
 800ac54:	4770      	bx	lr

0800ac56 <ai_not_equal_s8>:
 800ac56:	f991 1000 	ldrsb.w	r1, [r1]
 800ac5a:	f992 2000 	ldrsb.w	r2, [r2]
 800ac5e:	4291      	cmp	r1, r2
 800ac60:	bf14      	ite	ne
 800ac62:	2101      	movne	r1, #1
 800ac64:	2100      	moveq	r1, #0
 800ac66:	7001      	strb	r1, [r0, #0]
 800ac68:	4770      	bx	lr

0800ac6a <ai_not_equal_buffer_s8>:
 800ac6a:	4403      	add	r3, r0
 800ac6c:	4298      	cmp	r0, r3
 800ac6e:	d300      	bcc.n	800ac72 <ai_not_equal_buffer_s8+0x8>
 800ac70:	4770      	bx	lr
 800ac72:	b470      	push	{r4, r5, r6}
 800ac74:	4604      	mov	r4, r0
 800ac76:	f991 5000 	ldrsb.w	r5, [r1]
 800ac7a:	f992 6000 	ldrsb.w	r6, [r2]
 800ac7e:	1c60      	adds	r0, r4, #1
 800ac80:	42b5      	cmp	r5, r6
 800ac82:	bf14      	ite	ne
 800ac84:	2501      	movne	r5, #1
 800ac86:	2500      	moveq	r5, #0
 800ac88:	1c49      	adds	r1, r1, #1
 800ac8a:	1c52      	adds	r2, r2, #1
 800ac8c:	4298      	cmp	r0, r3
 800ac8e:	7025      	strb	r5, [r4, #0]
 800ac90:	d3f0      	bcc.n	800ac74 <ai_not_equal_buffer_s8+0xa>
 800ac92:	bc70      	pop	{r4, r5, r6}
 800ac94:	4770      	bx	lr

0800ac96 <ai_not_equal_u32>:
 800ac96:	6809      	ldr	r1, [r1, #0]
 800ac98:	6812      	ldr	r2, [r2, #0]
 800ac9a:	4291      	cmp	r1, r2
 800ac9c:	bf14      	ite	ne
 800ac9e:	2101      	movne	r1, #1
 800aca0:	2100      	moveq	r1, #0
 800aca2:	7001      	strb	r1, [r0, #0]
 800aca4:	4770      	bx	lr

0800aca6 <ai_not_equal_buffer_u32>:
 800aca6:	4403      	add	r3, r0
 800aca8:	4298      	cmp	r0, r3
 800acaa:	d300      	bcc.n	800acae <ai_not_equal_buffer_u32+0x8>
 800acac:	4770      	bx	lr
 800acae:	b470      	push	{r4, r5, r6}
 800acb0:	4604      	mov	r4, r0
 800acb2:	680d      	ldr	r5, [r1, #0]
 800acb4:	6816      	ldr	r6, [r2, #0]
 800acb6:	1c60      	adds	r0, r4, #1
 800acb8:	42b5      	cmp	r5, r6
 800acba:	bf14      	ite	ne
 800acbc:	2501      	movne	r5, #1
 800acbe:	2500      	moveq	r5, #0
 800acc0:	1d09      	adds	r1, r1, #4
 800acc2:	1d12      	adds	r2, r2, #4
 800acc4:	4298      	cmp	r0, r3
 800acc6:	7025      	strb	r5, [r4, #0]
 800acc8:	d3f2      	bcc.n	800acb0 <ai_not_equal_buffer_u32+0xa>
 800acca:	bc70      	pop	{r4, r5, r6}
 800accc:	4770      	bx	lr

0800acce <ai_not_equal_u16>:
 800acce:	8809      	ldrh	r1, [r1, #0]
 800acd0:	8812      	ldrh	r2, [r2, #0]
 800acd2:	4291      	cmp	r1, r2
 800acd4:	bf14      	ite	ne
 800acd6:	2101      	movne	r1, #1
 800acd8:	2100      	moveq	r1, #0
 800acda:	7001      	strb	r1, [r0, #0]
 800acdc:	4770      	bx	lr

0800acde <ai_not_equal_buffer_u16>:
 800acde:	4403      	add	r3, r0
 800ace0:	4298      	cmp	r0, r3
 800ace2:	d300      	bcc.n	800ace6 <ai_not_equal_buffer_u16+0x8>
 800ace4:	4770      	bx	lr
 800ace6:	b470      	push	{r4, r5, r6}
 800ace8:	4604      	mov	r4, r0
 800acea:	880d      	ldrh	r5, [r1, #0]
 800acec:	8816      	ldrh	r6, [r2, #0]
 800acee:	1c60      	adds	r0, r4, #1
 800acf0:	42b5      	cmp	r5, r6
 800acf2:	bf14      	ite	ne
 800acf4:	2501      	movne	r5, #1
 800acf6:	2500      	moveq	r5, #0
 800acf8:	1c89      	adds	r1, r1, #2
 800acfa:	1c92      	adds	r2, r2, #2
 800acfc:	4298      	cmp	r0, r3
 800acfe:	7025      	strb	r5, [r4, #0]
 800ad00:	d3f2      	bcc.n	800ace8 <ai_not_equal_buffer_u16+0xa>
 800ad02:	bc70      	pop	{r4, r5, r6}
 800ad04:	4770      	bx	lr

0800ad06 <ai_not_equal_u8>:
 800ad06:	7809      	ldrb	r1, [r1, #0]
 800ad08:	7812      	ldrb	r2, [r2, #0]
 800ad0a:	4291      	cmp	r1, r2
 800ad0c:	bf14      	ite	ne
 800ad0e:	2101      	movne	r1, #1
 800ad10:	2100      	moveq	r1, #0
 800ad12:	7001      	strb	r1, [r0, #0]
 800ad14:	4770      	bx	lr

0800ad16 <ai_not_equal_buffer_u8>:
 800ad16:	4403      	add	r3, r0
 800ad18:	4298      	cmp	r0, r3
 800ad1a:	d300      	bcc.n	800ad1e <ai_not_equal_buffer_u8+0x8>
 800ad1c:	4770      	bx	lr
 800ad1e:	b470      	push	{r4, r5, r6}
 800ad20:	4604      	mov	r4, r0
 800ad22:	780d      	ldrb	r5, [r1, #0]
 800ad24:	7816      	ldrb	r6, [r2, #0]
 800ad26:	1c60      	adds	r0, r4, #1
 800ad28:	42b5      	cmp	r5, r6
 800ad2a:	bf14      	ite	ne
 800ad2c:	2501      	movne	r5, #1
 800ad2e:	2500      	moveq	r5, #0
 800ad30:	1c49      	adds	r1, r1, #1
 800ad32:	1c52      	adds	r2, r2, #1
 800ad34:	4298      	cmp	r0, r3
 800ad36:	7025      	strb	r5, [r4, #0]
 800ad38:	d3f2      	bcc.n	800ad20 <ai_not_equal_buffer_u8+0xa>
 800ad3a:	bc70      	pop	{r4, r5, r6}
 800ad3c:	4770      	bx	lr

0800ad3e <ai_less_or_equal>:
 800ad3e:	ed92 0a00 	vldr	s0, [r2]
 800ad42:	edd1 0a00 	vldr	s1, [r1]
 800ad46:	eeb4 0a60 	vcmp.f32	s0, s1
 800ad4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad4e:	bfac      	ite	ge
 800ad50:	2101      	movge	r1, #1
 800ad52:	2100      	movlt	r1, #0
 800ad54:	7001      	strb	r1, [r0, #0]
 800ad56:	4770      	bx	lr

0800ad58 <ai_less_or_equal_buffer>:
 800ad58:	4403      	add	r3, r0
 800ad5a:	4298      	cmp	r0, r3
 800ad5c:	d300      	bcc.n	800ad60 <ai_less_or_equal_buffer+0x8>
 800ad5e:	4770      	bx	lr
 800ad60:	b430      	push	{r4, r5}
 800ad62:	4604      	mov	r4, r0
 800ad64:	ed92 0a00 	vldr	s0, [r2]
 800ad68:	edd1 0a00 	vldr	s1, [r1]
 800ad6c:	1c60      	adds	r0, r4, #1
 800ad6e:	eeb4 0a60 	vcmp.f32	s0, s1
 800ad72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad76:	bfac      	ite	ge
 800ad78:	2501      	movge	r5, #1
 800ad7a:	2500      	movlt	r5, #0
 800ad7c:	1d09      	adds	r1, r1, #4
 800ad7e:	1d12      	adds	r2, r2, #4
 800ad80:	4298      	cmp	r0, r3
 800ad82:	7025      	strb	r5, [r4, #0]
 800ad84:	d3ed      	bcc.n	800ad62 <ai_less_or_equal_buffer+0xa>
 800ad86:	bc30      	pop	{r4, r5}
 800ad88:	4770      	bx	lr

0800ad8a <ai_less_or_equal_f32>:
 800ad8a:	ed92 0a00 	vldr	s0, [r2]
 800ad8e:	edd1 0a00 	vldr	s1, [r1]
 800ad92:	eeb4 0a60 	vcmp.f32	s0, s1
 800ad96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9a:	bfac      	ite	ge
 800ad9c:	2101      	movge	r1, #1
 800ad9e:	2100      	movlt	r1, #0
 800ada0:	7001      	strb	r1, [r0, #0]
 800ada2:	4770      	bx	lr

0800ada4 <ai_less_or_equal_buffer_f32>:
 800ada4:	4403      	add	r3, r0
 800ada6:	4298      	cmp	r0, r3
 800ada8:	d300      	bcc.n	800adac <ai_less_or_equal_buffer_f32+0x8>
 800adaa:	4770      	bx	lr
 800adac:	b430      	push	{r4, r5}
 800adae:	4604      	mov	r4, r0
 800adb0:	ed92 0a00 	vldr	s0, [r2]
 800adb4:	edd1 0a00 	vldr	s1, [r1]
 800adb8:	1c60      	adds	r0, r4, #1
 800adba:	eeb4 0a60 	vcmp.f32	s0, s1
 800adbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc2:	bfac      	ite	ge
 800adc4:	2501      	movge	r5, #1
 800adc6:	2500      	movlt	r5, #0
 800adc8:	1d09      	adds	r1, r1, #4
 800adca:	1d12      	adds	r2, r2, #4
 800adcc:	4298      	cmp	r0, r3
 800adce:	7025      	strb	r5, [r4, #0]
 800add0:	d3ed      	bcc.n	800adae <ai_less_or_equal_buffer_f32+0xa>
 800add2:	bc30      	pop	{r4, r5}
 800add4:	4770      	bx	lr

0800add6 <ai_less_or_equal_s32>:
 800add6:	6812      	ldr	r2, [r2, #0]
 800add8:	6809      	ldr	r1, [r1, #0]
 800adda:	428a      	cmp	r2, r1
 800addc:	bfac      	ite	ge
 800adde:	2101      	movge	r1, #1
 800ade0:	2100      	movlt	r1, #0
 800ade2:	7001      	strb	r1, [r0, #0]
 800ade4:	4770      	bx	lr

0800ade6 <ai_less_or_equal_buffer_s32>:
 800ade6:	4403      	add	r3, r0
 800ade8:	4298      	cmp	r0, r3
 800adea:	d300      	bcc.n	800adee <ai_less_or_equal_buffer_s32+0x8>
 800adec:	4770      	bx	lr
 800adee:	b470      	push	{r4, r5, r6}
 800adf0:	4604      	mov	r4, r0
 800adf2:	6815      	ldr	r5, [r2, #0]
 800adf4:	680e      	ldr	r6, [r1, #0]
 800adf6:	1c60      	adds	r0, r4, #1
 800adf8:	42b5      	cmp	r5, r6
 800adfa:	bfac      	ite	ge
 800adfc:	2501      	movge	r5, #1
 800adfe:	2500      	movlt	r5, #0
 800ae00:	1d09      	adds	r1, r1, #4
 800ae02:	1d12      	adds	r2, r2, #4
 800ae04:	4298      	cmp	r0, r3
 800ae06:	7025      	strb	r5, [r4, #0]
 800ae08:	d3f2      	bcc.n	800adf0 <ai_less_or_equal_buffer_s32+0xa>
 800ae0a:	bc70      	pop	{r4, r5, r6}
 800ae0c:	4770      	bx	lr

0800ae0e <ai_less_or_equal_s16>:
 800ae0e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ae12:	f9b1 1000 	ldrsh.w	r1, [r1]
 800ae16:	428a      	cmp	r2, r1
 800ae18:	bfac      	ite	ge
 800ae1a:	2101      	movge	r1, #1
 800ae1c:	2100      	movlt	r1, #0
 800ae1e:	7001      	strb	r1, [r0, #0]
 800ae20:	4770      	bx	lr

0800ae22 <ai_less_or_equal_buffer_s16>:
 800ae22:	4403      	add	r3, r0
 800ae24:	4298      	cmp	r0, r3
 800ae26:	d300      	bcc.n	800ae2a <ai_less_or_equal_buffer_s16+0x8>
 800ae28:	4770      	bx	lr
 800ae2a:	b470      	push	{r4, r5, r6}
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	f9b2 5000 	ldrsh.w	r5, [r2]
 800ae32:	f9b1 6000 	ldrsh.w	r6, [r1]
 800ae36:	1c60      	adds	r0, r4, #1
 800ae38:	42b5      	cmp	r5, r6
 800ae3a:	bfac      	ite	ge
 800ae3c:	2501      	movge	r5, #1
 800ae3e:	2500      	movlt	r5, #0
 800ae40:	1c89      	adds	r1, r1, #2
 800ae42:	1c92      	adds	r2, r2, #2
 800ae44:	4298      	cmp	r0, r3
 800ae46:	7025      	strb	r5, [r4, #0]
 800ae48:	d3f0      	bcc.n	800ae2c <ai_less_or_equal_buffer_s16+0xa>
 800ae4a:	bc70      	pop	{r4, r5, r6}
 800ae4c:	4770      	bx	lr

0800ae4e <ai_less_or_equal_s8>:
 800ae4e:	f992 2000 	ldrsb.w	r2, [r2]
 800ae52:	f991 1000 	ldrsb.w	r1, [r1]
 800ae56:	428a      	cmp	r2, r1
 800ae58:	bfac      	ite	ge
 800ae5a:	2101      	movge	r1, #1
 800ae5c:	2100      	movlt	r1, #0
 800ae5e:	7001      	strb	r1, [r0, #0]
 800ae60:	4770      	bx	lr

0800ae62 <ai_less_or_equal_buffer_s8>:
 800ae62:	4403      	add	r3, r0
 800ae64:	4298      	cmp	r0, r3
 800ae66:	d300      	bcc.n	800ae6a <ai_less_or_equal_buffer_s8+0x8>
 800ae68:	4770      	bx	lr
 800ae6a:	b470      	push	{r4, r5, r6}
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	f992 5000 	ldrsb.w	r5, [r2]
 800ae72:	f991 6000 	ldrsb.w	r6, [r1]
 800ae76:	1c60      	adds	r0, r4, #1
 800ae78:	42b5      	cmp	r5, r6
 800ae7a:	bfac      	ite	ge
 800ae7c:	2501      	movge	r5, #1
 800ae7e:	2500      	movlt	r5, #0
 800ae80:	1c49      	adds	r1, r1, #1
 800ae82:	1c52      	adds	r2, r2, #1
 800ae84:	4298      	cmp	r0, r3
 800ae86:	7025      	strb	r5, [r4, #0]
 800ae88:	d3f0      	bcc.n	800ae6c <ai_less_or_equal_buffer_s8+0xa>
 800ae8a:	bc70      	pop	{r4, r5, r6}
 800ae8c:	4770      	bx	lr

0800ae8e <ai_less_or_equal_u32>:
 800ae8e:	6812      	ldr	r2, [r2, #0]
 800ae90:	6809      	ldr	r1, [r1, #0]
 800ae92:	428a      	cmp	r2, r1
 800ae94:	4189      	sbcs	r1, r1
 800ae96:	43c9      	mvns	r1, r1
 800ae98:	0fc9      	lsrs	r1, r1, #31
 800ae9a:	7001      	strb	r1, [r0, #0]
 800ae9c:	4770      	bx	lr
	...

0800aea0 <ai_less_or_equal_buffer_u32>:
 800aea0:	4403      	add	r3, r0
 800aea2:	4298      	cmp	r0, r3
 800aea4:	d300      	bcc.n	800aea8 <ai_less_or_equal_buffer_u32+0x8>
 800aea6:	4770      	bx	lr
 800aea8:	b430      	push	{r4, r5}
 800aeaa:	bf00      	nop
 800aeac:	f852 4b04 	ldr.w	r4, [r2], #4
 800aeb0:	f851 5b04 	ldr.w	r5, [r1], #4
 800aeb4:	42ac      	cmp	r4, r5
 800aeb6:	41a4      	sbcs	r4, r4
 800aeb8:	43e4      	mvns	r4, r4
 800aeba:	0fe4      	lsrs	r4, r4, #31
 800aebc:	f800 4b01 	strb.w	r4, [r0], #1
 800aec0:	4298      	cmp	r0, r3
 800aec2:	d3f3      	bcc.n	800aeac <ai_less_or_equal_buffer_u32+0xc>
 800aec4:	bc30      	pop	{r4, r5}
 800aec6:	4770      	bx	lr

0800aec8 <ai_less_or_equal_u16>:
 800aec8:	8812      	ldrh	r2, [r2, #0]
 800aeca:	8809      	ldrh	r1, [r1, #0]
 800aecc:	428a      	cmp	r2, r1
 800aece:	4189      	sbcs	r1, r1
 800aed0:	43c9      	mvns	r1, r1
 800aed2:	0fc9      	lsrs	r1, r1, #31
 800aed4:	7001      	strb	r1, [r0, #0]
 800aed6:	4770      	bx	lr

0800aed8 <ai_less_or_equal_buffer_u16>:
 800aed8:	4403      	add	r3, r0
 800aeda:	4298      	cmp	r0, r3
 800aedc:	d300      	bcc.n	800aee0 <ai_less_or_equal_buffer_u16+0x8>
 800aede:	4770      	bx	lr
 800aee0:	b470      	push	{r4, r5, r6}
 800aee2:	bf00      	nop
 800aee4:	f832 5b02 	ldrh.w	r5, [r2], #2
 800aee8:	f831 6b02 	ldrh.w	r6, [r1], #2
 800aeec:	42b5      	cmp	r5, r6
 800aeee:	41a4      	sbcs	r4, r4
 800aef0:	43e4      	mvns	r4, r4
 800aef2:	0fe4      	lsrs	r4, r4, #31
 800aef4:	f800 4b01 	strb.w	r4, [r0], #1
 800aef8:	4298      	cmp	r0, r3
 800aefa:	d3f3      	bcc.n	800aee4 <ai_less_or_equal_buffer_u16+0xc>
 800aefc:	bc70      	pop	{r4, r5, r6}
 800aefe:	4770      	bx	lr

0800af00 <ai_less_or_equal_u8>:
 800af00:	7812      	ldrb	r2, [r2, #0]
 800af02:	7809      	ldrb	r1, [r1, #0]
 800af04:	428a      	cmp	r2, r1
 800af06:	4189      	sbcs	r1, r1
 800af08:	43c9      	mvns	r1, r1
 800af0a:	0fc9      	lsrs	r1, r1, #31
 800af0c:	7001      	strb	r1, [r0, #0]
 800af0e:	4770      	bx	lr

0800af10 <ai_less_or_equal_buffer_u8>:
 800af10:	4403      	add	r3, r0
 800af12:	4298      	cmp	r0, r3
 800af14:	d300      	bcc.n	800af18 <ai_less_or_equal_buffer_u8+0x8>
 800af16:	4770      	bx	lr
 800af18:	b470      	push	{r4, r5, r6}
 800af1a:	bf00      	nop
 800af1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800af20:	f811 6b01 	ldrb.w	r6, [r1], #1
 800af24:	42b5      	cmp	r5, r6
 800af26:	41a4      	sbcs	r4, r4
 800af28:	43e4      	mvns	r4, r4
 800af2a:	0fe4      	lsrs	r4, r4, #31
 800af2c:	f800 4b01 	strb.w	r4, [r0], #1
 800af30:	4298      	cmp	r0, r3
 800af32:	d3f3      	bcc.n	800af1c <ai_less_or_equal_buffer_u8+0xc>
 800af34:	bc70      	pop	{r4, r5, r6}
 800af36:	4770      	bx	lr

0800af38 <ai_greater_or_equal>:
 800af38:	ed91 0a00 	vldr	s0, [r1]
 800af3c:	edd2 0a00 	vldr	s1, [r2]
 800af40:	eeb4 0a60 	vcmp.f32	s0, s1
 800af44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af48:	bfac      	ite	ge
 800af4a:	2101      	movge	r1, #1
 800af4c:	2100      	movlt	r1, #0
 800af4e:	7001      	strb	r1, [r0, #0]
 800af50:	4770      	bx	lr

0800af52 <ai_greater_or_equal_buffer>:
 800af52:	4403      	add	r3, r0
 800af54:	4298      	cmp	r0, r3
 800af56:	d300      	bcc.n	800af5a <ai_greater_or_equal_buffer+0x8>
 800af58:	4770      	bx	lr
 800af5a:	b430      	push	{r4, r5}
 800af5c:	4604      	mov	r4, r0
 800af5e:	ed91 0a00 	vldr	s0, [r1]
 800af62:	edd2 0a00 	vldr	s1, [r2]
 800af66:	1c60      	adds	r0, r4, #1
 800af68:	eeb4 0a60 	vcmp.f32	s0, s1
 800af6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af70:	bfac      	ite	ge
 800af72:	2501      	movge	r5, #1
 800af74:	2500      	movlt	r5, #0
 800af76:	1d09      	adds	r1, r1, #4
 800af78:	1d12      	adds	r2, r2, #4
 800af7a:	4298      	cmp	r0, r3
 800af7c:	7025      	strb	r5, [r4, #0]
 800af7e:	d3ed      	bcc.n	800af5c <ai_greater_or_equal_buffer+0xa>
 800af80:	bc30      	pop	{r4, r5}
 800af82:	4770      	bx	lr

0800af84 <ai_greater_or_equal_f32>:
 800af84:	ed91 0a00 	vldr	s0, [r1]
 800af88:	edd2 0a00 	vldr	s1, [r2]
 800af8c:	eeb4 0a60 	vcmp.f32	s0, s1
 800af90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af94:	bfac      	ite	ge
 800af96:	2101      	movge	r1, #1
 800af98:	2100      	movlt	r1, #0
 800af9a:	7001      	strb	r1, [r0, #0]
 800af9c:	4770      	bx	lr

0800af9e <ai_greater_or_equal_buffer_f32>:
 800af9e:	4403      	add	r3, r0
 800afa0:	4298      	cmp	r0, r3
 800afa2:	d300      	bcc.n	800afa6 <ai_greater_or_equal_buffer_f32+0x8>
 800afa4:	4770      	bx	lr
 800afa6:	b430      	push	{r4, r5}
 800afa8:	4604      	mov	r4, r0
 800afaa:	ed91 0a00 	vldr	s0, [r1]
 800afae:	edd2 0a00 	vldr	s1, [r2]
 800afb2:	1c60      	adds	r0, r4, #1
 800afb4:	eeb4 0a60 	vcmp.f32	s0, s1
 800afb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afbc:	bfac      	ite	ge
 800afbe:	2501      	movge	r5, #1
 800afc0:	2500      	movlt	r5, #0
 800afc2:	1d09      	adds	r1, r1, #4
 800afc4:	1d12      	adds	r2, r2, #4
 800afc6:	4298      	cmp	r0, r3
 800afc8:	7025      	strb	r5, [r4, #0]
 800afca:	d3ed      	bcc.n	800afa8 <ai_greater_or_equal_buffer_f32+0xa>
 800afcc:	bc30      	pop	{r4, r5}
 800afce:	4770      	bx	lr

0800afd0 <ai_greater_or_equal_s32>:
 800afd0:	6809      	ldr	r1, [r1, #0]
 800afd2:	6812      	ldr	r2, [r2, #0]
 800afd4:	4291      	cmp	r1, r2
 800afd6:	bfac      	ite	ge
 800afd8:	2101      	movge	r1, #1
 800afda:	2100      	movlt	r1, #0
 800afdc:	7001      	strb	r1, [r0, #0]
 800afde:	4770      	bx	lr

0800afe0 <ai_greater_or_equal_buffer_s32>:
 800afe0:	4403      	add	r3, r0
 800afe2:	4298      	cmp	r0, r3
 800afe4:	d300      	bcc.n	800afe8 <ai_greater_or_equal_buffer_s32+0x8>
 800afe6:	4770      	bx	lr
 800afe8:	b470      	push	{r4, r5, r6}
 800afea:	4604      	mov	r4, r0
 800afec:	680d      	ldr	r5, [r1, #0]
 800afee:	6816      	ldr	r6, [r2, #0]
 800aff0:	1c60      	adds	r0, r4, #1
 800aff2:	42b5      	cmp	r5, r6
 800aff4:	bfac      	ite	ge
 800aff6:	2501      	movge	r5, #1
 800aff8:	2500      	movlt	r5, #0
 800affa:	1d09      	adds	r1, r1, #4
 800affc:	1d12      	adds	r2, r2, #4
 800affe:	4298      	cmp	r0, r3
 800b000:	7025      	strb	r5, [r4, #0]
 800b002:	d3f2      	bcc.n	800afea <ai_greater_or_equal_buffer_s32+0xa>
 800b004:	bc70      	pop	{r4, r5, r6}
 800b006:	4770      	bx	lr

0800b008 <ai_greater_or_equal_s16>:
 800b008:	f9b1 1000 	ldrsh.w	r1, [r1]
 800b00c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b010:	4291      	cmp	r1, r2
 800b012:	bfac      	ite	ge
 800b014:	2101      	movge	r1, #1
 800b016:	2100      	movlt	r1, #0
 800b018:	7001      	strb	r1, [r0, #0]
 800b01a:	4770      	bx	lr

0800b01c <ai_greater_or_equal_buffer_s16>:
 800b01c:	4403      	add	r3, r0
 800b01e:	4298      	cmp	r0, r3
 800b020:	d300      	bcc.n	800b024 <ai_greater_or_equal_buffer_s16+0x8>
 800b022:	4770      	bx	lr
 800b024:	b470      	push	{r4, r5, r6}
 800b026:	4604      	mov	r4, r0
 800b028:	f9b1 5000 	ldrsh.w	r5, [r1]
 800b02c:	f9b2 6000 	ldrsh.w	r6, [r2]
 800b030:	1c60      	adds	r0, r4, #1
 800b032:	42b5      	cmp	r5, r6
 800b034:	bfac      	ite	ge
 800b036:	2501      	movge	r5, #1
 800b038:	2500      	movlt	r5, #0
 800b03a:	1c89      	adds	r1, r1, #2
 800b03c:	1c92      	adds	r2, r2, #2
 800b03e:	4298      	cmp	r0, r3
 800b040:	7025      	strb	r5, [r4, #0]
 800b042:	d3f0      	bcc.n	800b026 <ai_greater_or_equal_buffer_s16+0xa>
 800b044:	bc70      	pop	{r4, r5, r6}
 800b046:	4770      	bx	lr

0800b048 <ai_greater_or_equal_s8>:
 800b048:	f991 1000 	ldrsb.w	r1, [r1]
 800b04c:	f992 2000 	ldrsb.w	r2, [r2]
 800b050:	4291      	cmp	r1, r2
 800b052:	bfac      	ite	ge
 800b054:	2101      	movge	r1, #1
 800b056:	2100      	movlt	r1, #0
 800b058:	7001      	strb	r1, [r0, #0]
 800b05a:	4770      	bx	lr

0800b05c <ai_greater_or_equal_buffer_s8>:
 800b05c:	4403      	add	r3, r0
 800b05e:	4298      	cmp	r0, r3
 800b060:	d300      	bcc.n	800b064 <ai_greater_or_equal_buffer_s8+0x8>
 800b062:	4770      	bx	lr
 800b064:	b470      	push	{r4, r5, r6}
 800b066:	4604      	mov	r4, r0
 800b068:	f991 5000 	ldrsb.w	r5, [r1]
 800b06c:	f992 6000 	ldrsb.w	r6, [r2]
 800b070:	1c60      	adds	r0, r4, #1
 800b072:	42b5      	cmp	r5, r6
 800b074:	bfac      	ite	ge
 800b076:	2501      	movge	r5, #1
 800b078:	2500      	movlt	r5, #0
 800b07a:	1c49      	adds	r1, r1, #1
 800b07c:	1c52      	adds	r2, r2, #1
 800b07e:	4298      	cmp	r0, r3
 800b080:	7025      	strb	r5, [r4, #0]
 800b082:	d3f0      	bcc.n	800b066 <ai_greater_or_equal_buffer_s8+0xa>
 800b084:	bc70      	pop	{r4, r5, r6}
 800b086:	4770      	bx	lr

0800b088 <ai_greater_or_equal_u32>:
 800b088:	6809      	ldr	r1, [r1, #0]
 800b08a:	6812      	ldr	r2, [r2, #0]
 800b08c:	4291      	cmp	r1, r2
 800b08e:	4189      	sbcs	r1, r1
 800b090:	43c9      	mvns	r1, r1
 800b092:	0fc9      	lsrs	r1, r1, #31
 800b094:	7001      	strb	r1, [r0, #0]
 800b096:	4770      	bx	lr

0800b098 <ai_greater_or_equal_buffer_u32>:
 800b098:	4403      	add	r3, r0
 800b09a:	4298      	cmp	r0, r3
 800b09c:	d300      	bcc.n	800b0a0 <ai_greater_or_equal_buffer_u32+0x8>
 800b09e:	4770      	bx	lr
 800b0a0:	b430      	push	{r4, r5}
 800b0a2:	bf00      	nop
 800b0a4:	f851 4b04 	ldr.w	r4, [r1], #4
 800b0a8:	f852 5b04 	ldr.w	r5, [r2], #4
 800b0ac:	42ac      	cmp	r4, r5
 800b0ae:	41a4      	sbcs	r4, r4
 800b0b0:	43e4      	mvns	r4, r4
 800b0b2:	0fe4      	lsrs	r4, r4, #31
 800b0b4:	f800 4b01 	strb.w	r4, [r0], #1
 800b0b8:	4298      	cmp	r0, r3
 800b0ba:	d3f3      	bcc.n	800b0a4 <ai_greater_or_equal_buffer_u32+0xc>
 800b0bc:	bc30      	pop	{r4, r5}
 800b0be:	4770      	bx	lr

0800b0c0 <ai_greater_or_equal_u16>:
 800b0c0:	8809      	ldrh	r1, [r1, #0]
 800b0c2:	8812      	ldrh	r2, [r2, #0]
 800b0c4:	4291      	cmp	r1, r2
 800b0c6:	4189      	sbcs	r1, r1
 800b0c8:	43c9      	mvns	r1, r1
 800b0ca:	0fc9      	lsrs	r1, r1, #31
 800b0cc:	7001      	strb	r1, [r0, #0]
 800b0ce:	4770      	bx	lr

0800b0d0 <ai_greater_or_equal_buffer_u16>:
 800b0d0:	4403      	add	r3, r0
 800b0d2:	4298      	cmp	r0, r3
 800b0d4:	d300      	bcc.n	800b0d8 <ai_greater_or_equal_buffer_u16+0x8>
 800b0d6:	4770      	bx	lr
 800b0d8:	b470      	push	{r4, r5, r6}
 800b0da:	bf00      	nop
 800b0dc:	f831 5b02 	ldrh.w	r5, [r1], #2
 800b0e0:	f832 6b02 	ldrh.w	r6, [r2], #2
 800b0e4:	42b5      	cmp	r5, r6
 800b0e6:	41a4      	sbcs	r4, r4
 800b0e8:	43e4      	mvns	r4, r4
 800b0ea:	0fe4      	lsrs	r4, r4, #31
 800b0ec:	f800 4b01 	strb.w	r4, [r0], #1
 800b0f0:	4298      	cmp	r0, r3
 800b0f2:	d3f3      	bcc.n	800b0dc <ai_greater_or_equal_buffer_u16+0xc>
 800b0f4:	bc70      	pop	{r4, r5, r6}
 800b0f6:	4770      	bx	lr

0800b0f8 <ai_greater_or_equal_u8>:
 800b0f8:	7809      	ldrb	r1, [r1, #0]
 800b0fa:	7812      	ldrb	r2, [r2, #0]
 800b0fc:	4291      	cmp	r1, r2
 800b0fe:	4189      	sbcs	r1, r1
 800b100:	43c9      	mvns	r1, r1
 800b102:	0fc9      	lsrs	r1, r1, #31
 800b104:	7001      	strb	r1, [r0, #0]
 800b106:	4770      	bx	lr

0800b108 <ai_greater_or_equal_buffer_u8>:
 800b108:	4403      	add	r3, r0
 800b10a:	4298      	cmp	r0, r3
 800b10c:	d300      	bcc.n	800b110 <ai_greater_or_equal_buffer_u8+0x8>
 800b10e:	4770      	bx	lr
 800b110:	b470      	push	{r4, r5, r6}
 800b112:	bf00      	nop
 800b114:	f811 5b01 	ldrb.w	r5, [r1], #1
 800b118:	f812 6b01 	ldrb.w	r6, [r2], #1
 800b11c:	42b5      	cmp	r5, r6
 800b11e:	41a4      	sbcs	r4, r4
 800b120:	43e4      	mvns	r4, r4
 800b122:	0fe4      	lsrs	r4, r4, #31
 800b124:	f800 4b01 	strb.w	r4, [r0], #1
 800b128:	4298      	cmp	r0, r3
 800b12a:	d3f3      	bcc.n	800b114 <ai_greater_or_equal_buffer_u8+0xc>
 800b12c:	bc70      	pop	{r4, r5, r6}
 800b12e:	4770      	bx	lr

0800b130 <ai_less>:
 800b130:	ed91 0a00 	vldr	s0, [r1]
 800b134:	edd2 0a00 	vldr	s1, [r2]
 800b138:	eeb4 0a60 	vcmp.f32	s0, s1
 800b13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b140:	bf4c      	ite	mi
 800b142:	2101      	movmi	r1, #1
 800b144:	2100      	movpl	r1, #0
 800b146:	7001      	strb	r1, [r0, #0]
 800b148:	4770      	bx	lr

0800b14a <ai_less_buffer>:
 800b14a:	4403      	add	r3, r0
 800b14c:	4298      	cmp	r0, r3
 800b14e:	d300      	bcc.n	800b152 <ai_less_buffer+0x8>
 800b150:	4770      	bx	lr
 800b152:	b430      	push	{r4, r5}
 800b154:	4604      	mov	r4, r0
 800b156:	ed91 0a00 	vldr	s0, [r1]
 800b15a:	edd2 0a00 	vldr	s1, [r2]
 800b15e:	1c60      	adds	r0, r4, #1
 800b160:	eeb4 0a60 	vcmp.f32	s0, s1
 800b164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b168:	bf4c      	ite	mi
 800b16a:	2501      	movmi	r5, #1
 800b16c:	2500      	movpl	r5, #0
 800b16e:	1d09      	adds	r1, r1, #4
 800b170:	1d12      	adds	r2, r2, #4
 800b172:	4298      	cmp	r0, r3
 800b174:	7025      	strb	r5, [r4, #0]
 800b176:	d3ed      	bcc.n	800b154 <ai_less_buffer+0xa>
 800b178:	bc30      	pop	{r4, r5}
 800b17a:	4770      	bx	lr

0800b17c <ai_less_f32>:
 800b17c:	ed91 0a00 	vldr	s0, [r1]
 800b180:	edd2 0a00 	vldr	s1, [r2]
 800b184:	eeb4 0a60 	vcmp.f32	s0, s1
 800b188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b18c:	bf4c      	ite	mi
 800b18e:	2101      	movmi	r1, #1
 800b190:	2100      	movpl	r1, #0
 800b192:	7001      	strb	r1, [r0, #0]
 800b194:	4770      	bx	lr

0800b196 <ai_less_buffer_f32>:
 800b196:	4403      	add	r3, r0
 800b198:	4298      	cmp	r0, r3
 800b19a:	d300      	bcc.n	800b19e <ai_less_buffer_f32+0x8>
 800b19c:	4770      	bx	lr
 800b19e:	b430      	push	{r4, r5}
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	ed91 0a00 	vldr	s0, [r1]
 800b1a6:	edd2 0a00 	vldr	s1, [r2]
 800b1aa:	1c60      	adds	r0, r4, #1
 800b1ac:	eeb4 0a60 	vcmp.f32	s0, s1
 800b1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b4:	bf4c      	ite	mi
 800b1b6:	2501      	movmi	r5, #1
 800b1b8:	2500      	movpl	r5, #0
 800b1ba:	1d09      	adds	r1, r1, #4
 800b1bc:	1d12      	adds	r2, r2, #4
 800b1be:	4298      	cmp	r0, r3
 800b1c0:	7025      	strb	r5, [r4, #0]
 800b1c2:	d3ed      	bcc.n	800b1a0 <ai_less_buffer_f32+0xa>
 800b1c4:	bc30      	pop	{r4, r5}
 800b1c6:	4770      	bx	lr

0800b1c8 <ai_less_s32>:
 800b1c8:	6809      	ldr	r1, [r1, #0]
 800b1ca:	6812      	ldr	r2, [r2, #0]
 800b1cc:	4291      	cmp	r1, r2
 800b1ce:	bfb4      	ite	lt
 800b1d0:	2101      	movlt	r1, #1
 800b1d2:	2100      	movge	r1, #0
 800b1d4:	7001      	strb	r1, [r0, #0]
 800b1d6:	4770      	bx	lr

0800b1d8 <ai_less_buffer_s32>:
 800b1d8:	4403      	add	r3, r0
 800b1da:	4298      	cmp	r0, r3
 800b1dc:	d300      	bcc.n	800b1e0 <ai_less_buffer_s32+0x8>
 800b1de:	4770      	bx	lr
 800b1e0:	b470      	push	{r4, r5, r6}
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	680d      	ldr	r5, [r1, #0]
 800b1e6:	6816      	ldr	r6, [r2, #0]
 800b1e8:	1c60      	adds	r0, r4, #1
 800b1ea:	42b5      	cmp	r5, r6
 800b1ec:	bfb4      	ite	lt
 800b1ee:	2501      	movlt	r5, #1
 800b1f0:	2500      	movge	r5, #0
 800b1f2:	1d09      	adds	r1, r1, #4
 800b1f4:	1d12      	adds	r2, r2, #4
 800b1f6:	4298      	cmp	r0, r3
 800b1f8:	7025      	strb	r5, [r4, #0]
 800b1fa:	d3f2      	bcc.n	800b1e2 <ai_less_buffer_s32+0xa>
 800b1fc:	bc70      	pop	{r4, r5, r6}
 800b1fe:	4770      	bx	lr

0800b200 <ai_less_s16>:
 800b200:	f9b1 1000 	ldrsh.w	r1, [r1]
 800b204:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b208:	4291      	cmp	r1, r2
 800b20a:	bfb4      	ite	lt
 800b20c:	2101      	movlt	r1, #1
 800b20e:	2100      	movge	r1, #0
 800b210:	7001      	strb	r1, [r0, #0]
 800b212:	4770      	bx	lr

0800b214 <ai_less_buffer_s16>:
 800b214:	4403      	add	r3, r0
 800b216:	4298      	cmp	r0, r3
 800b218:	d300      	bcc.n	800b21c <ai_less_buffer_s16+0x8>
 800b21a:	4770      	bx	lr
 800b21c:	b470      	push	{r4, r5, r6}
 800b21e:	4604      	mov	r4, r0
 800b220:	f9b1 5000 	ldrsh.w	r5, [r1]
 800b224:	f9b2 6000 	ldrsh.w	r6, [r2]
 800b228:	1c60      	adds	r0, r4, #1
 800b22a:	42b5      	cmp	r5, r6
 800b22c:	bfb4      	ite	lt
 800b22e:	2501      	movlt	r5, #1
 800b230:	2500      	movge	r5, #0
 800b232:	1c89      	adds	r1, r1, #2
 800b234:	1c92      	adds	r2, r2, #2
 800b236:	4298      	cmp	r0, r3
 800b238:	7025      	strb	r5, [r4, #0]
 800b23a:	d3f0      	bcc.n	800b21e <ai_less_buffer_s16+0xa>
 800b23c:	bc70      	pop	{r4, r5, r6}
 800b23e:	4770      	bx	lr

0800b240 <ai_less_s8>:
 800b240:	f991 1000 	ldrsb.w	r1, [r1]
 800b244:	f992 2000 	ldrsb.w	r2, [r2]
 800b248:	4291      	cmp	r1, r2
 800b24a:	bfb4      	ite	lt
 800b24c:	2101      	movlt	r1, #1
 800b24e:	2100      	movge	r1, #0
 800b250:	7001      	strb	r1, [r0, #0]
 800b252:	4770      	bx	lr

0800b254 <ai_less_buffer_s8>:
 800b254:	4403      	add	r3, r0
 800b256:	4298      	cmp	r0, r3
 800b258:	d300      	bcc.n	800b25c <ai_less_buffer_s8+0x8>
 800b25a:	4770      	bx	lr
 800b25c:	b470      	push	{r4, r5, r6}
 800b25e:	4604      	mov	r4, r0
 800b260:	f991 5000 	ldrsb.w	r5, [r1]
 800b264:	f992 6000 	ldrsb.w	r6, [r2]
 800b268:	1c60      	adds	r0, r4, #1
 800b26a:	42b5      	cmp	r5, r6
 800b26c:	bfb4      	ite	lt
 800b26e:	2501      	movlt	r5, #1
 800b270:	2500      	movge	r5, #0
 800b272:	1c49      	adds	r1, r1, #1
 800b274:	1c52      	adds	r2, r2, #1
 800b276:	4298      	cmp	r0, r3
 800b278:	7025      	strb	r5, [r4, #0]
 800b27a:	d3f0      	bcc.n	800b25e <ai_less_buffer_s8+0xa>
 800b27c:	bc70      	pop	{r4, r5, r6}
 800b27e:	4770      	bx	lr

0800b280 <ai_less_u32>:
 800b280:	6809      	ldr	r1, [r1, #0]
 800b282:	6812      	ldr	r2, [r2, #0]
 800b284:	4291      	cmp	r1, r2
 800b286:	4189      	sbcs	r1, r1
 800b288:	0fc9      	lsrs	r1, r1, #31
 800b28a:	7001      	strb	r1, [r0, #0]
 800b28c:	4770      	bx	lr
	...

0800b290 <ai_less_buffer_u32>:
 800b290:	4403      	add	r3, r0
 800b292:	4298      	cmp	r0, r3
 800b294:	d300      	bcc.n	800b298 <ai_less_buffer_u32+0x8>
 800b296:	4770      	bx	lr
 800b298:	b430      	push	{r4, r5}
 800b29a:	bf00      	nop
 800b29c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b2a0:	f852 5b04 	ldr.w	r5, [r2], #4
 800b2a4:	42ac      	cmp	r4, r5
 800b2a6:	41a4      	sbcs	r4, r4
 800b2a8:	0fe4      	lsrs	r4, r4, #31
 800b2aa:	f800 4b01 	strb.w	r4, [r0], #1
 800b2ae:	4298      	cmp	r0, r3
 800b2b0:	d3f4      	bcc.n	800b29c <ai_less_buffer_u32+0xc>
 800b2b2:	bc30      	pop	{r4, r5}
 800b2b4:	4770      	bx	lr

0800b2b6 <ai_less_u16>:
 800b2b6:	8809      	ldrh	r1, [r1, #0]
 800b2b8:	8812      	ldrh	r2, [r2, #0]
 800b2ba:	4291      	cmp	r1, r2
 800b2bc:	4189      	sbcs	r1, r1
 800b2be:	0fc9      	lsrs	r1, r1, #31
 800b2c0:	7001      	strb	r1, [r0, #0]
 800b2c2:	4770      	bx	lr

0800b2c4 <ai_less_buffer_u16>:
 800b2c4:	4403      	add	r3, r0
 800b2c6:	4298      	cmp	r0, r3
 800b2c8:	d300      	bcc.n	800b2cc <ai_less_buffer_u16+0x8>
 800b2ca:	4770      	bx	lr
 800b2cc:	b470      	push	{r4, r5, r6}
 800b2ce:	bf00      	nop
 800b2d0:	f831 5b02 	ldrh.w	r5, [r1], #2
 800b2d4:	f832 6b02 	ldrh.w	r6, [r2], #2
 800b2d8:	42b5      	cmp	r5, r6
 800b2da:	41a4      	sbcs	r4, r4
 800b2dc:	0fe4      	lsrs	r4, r4, #31
 800b2de:	f800 4b01 	strb.w	r4, [r0], #1
 800b2e2:	4298      	cmp	r0, r3
 800b2e4:	d3f4      	bcc.n	800b2d0 <ai_less_buffer_u16+0xc>
 800b2e6:	bc70      	pop	{r4, r5, r6}
 800b2e8:	4770      	bx	lr

0800b2ea <ai_less_u8>:
 800b2ea:	7809      	ldrb	r1, [r1, #0]
 800b2ec:	7812      	ldrb	r2, [r2, #0]
 800b2ee:	4291      	cmp	r1, r2
 800b2f0:	4189      	sbcs	r1, r1
 800b2f2:	0fc9      	lsrs	r1, r1, #31
 800b2f4:	7001      	strb	r1, [r0, #0]
 800b2f6:	4770      	bx	lr

0800b2f8 <ai_less_buffer_u8>:
 800b2f8:	4403      	add	r3, r0
 800b2fa:	4298      	cmp	r0, r3
 800b2fc:	d300      	bcc.n	800b300 <ai_less_buffer_u8+0x8>
 800b2fe:	4770      	bx	lr
 800b300:	b470      	push	{r4, r5, r6}
 800b302:	bf00      	nop
 800b304:	f811 5b01 	ldrb.w	r5, [r1], #1
 800b308:	f812 6b01 	ldrb.w	r6, [r2], #1
 800b30c:	42b5      	cmp	r5, r6
 800b30e:	41a4      	sbcs	r4, r4
 800b310:	0fe4      	lsrs	r4, r4, #31
 800b312:	f800 4b01 	strb.w	r4, [r0], #1
 800b316:	4298      	cmp	r0, r3
 800b318:	d3f4      	bcc.n	800b304 <ai_less_buffer_u8+0xc>
 800b31a:	bc70      	pop	{r4, r5, r6}
 800b31c:	4770      	bx	lr

0800b31e <ai_greater>:
 800b31e:	ed92 0a00 	vldr	s0, [r2]
 800b322:	edd1 0a00 	vldr	s1, [r1]
 800b326:	eeb4 0a60 	vcmp.f32	s0, s1
 800b32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b32e:	bf4c      	ite	mi
 800b330:	2101      	movmi	r1, #1
 800b332:	2100      	movpl	r1, #0
 800b334:	7001      	strb	r1, [r0, #0]
 800b336:	4770      	bx	lr

0800b338 <ai_greater_buffer>:
 800b338:	4403      	add	r3, r0
 800b33a:	4298      	cmp	r0, r3
 800b33c:	d300      	bcc.n	800b340 <ai_greater_buffer+0x8>
 800b33e:	4770      	bx	lr
 800b340:	b430      	push	{r4, r5}
 800b342:	4604      	mov	r4, r0
 800b344:	ed92 0a00 	vldr	s0, [r2]
 800b348:	edd1 0a00 	vldr	s1, [r1]
 800b34c:	1c60      	adds	r0, r4, #1
 800b34e:	eeb4 0a60 	vcmp.f32	s0, s1
 800b352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b356:	bf4c      	ite	mi
 800b358:	2501      	movmi	r5, #1
 800b35a:	2500      	movpl	r5, #0
 800b35c:	1d09      	adds	r1, r1, #4
 800b35e:	1d12      	adds	r2, r2, #4
 800b360:	4298      	cmp	r0, r3
 800b362:	7025      	strb	r5, [r4, #0]
 800b364:	d3ed      	bcc.n	800b342 <ai_greater_buffer+0xa>
 800b366:	bc30      	pop	{r4, r5}
 800b368:	4770      	bx	lr

0800b36a <ai_greater_f32>:
 800b36a:	ed92 0a00 	vldr	s0, [r2]
 800b36e:	edd1 0a00 	vldr	s1, [r1]
 800b372:	eeb4 0a60 	vcmp.f32	s0, s1
 800b376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37a:	bf4c      	ite	mi
 800b37c:	2101      	movmi	r1, #1
 800b37e:	2100      	movpl	r1, #0
 800b380:	7001      	strb	r1, [r0, #0]
 800b382:	4770      	bx	lr

0800b384 <ai_greater_buffer_f32>:
 800b384:	4403      	add	r3, r0
 800b386:	4298      	cmp	r0, r3
 800b388:	d300      	bcc.n	800b38c <ai_greater_buffer_f32+0x8>
 800b38a:	4770      	bx	lr
 800b38c:	b430      	push	{r4, r5}
 800b38e:	4604      	mov	r4, r0
 800b390:	ed92 0a00 	vldr	s0, [r2]
 800b394:	edd1 0a00 	vldr	s1, [r1]
 800b398:	1c60      	adds	r0, r4, #1
 800b39a:	eeb4 0a60 	vcmp.f32	s0, s1
 800b39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a2:	bf4c      	ite	mi
 800b3a4:	2501      	movmi	r5, #1
 800b3a6:	2500      	movpl	r5, #0
 800b3a8:	1d09      	adds	r1, r1, #4
 800b3aa:	1d12      	adds	r2, r2, #4
 800b3ac:	4298      	cmp	r0, r3
 800b3ae:	7025      	strb	r5, [r4, #0]
 800b3b0:	d3ed      	bcc.n	800b38e <ai_greater_buffer_f32+0xa>
 800b3b2:	bc30      	pop	{r4, r5}
 800b3b4:	4770      	bx	lr

0800b3b6 <ai_greater_s32>:
 800b3b6:	6812      	ldr	r2, [r2, #0]
 800b3b8:	6809      	ldr	r1, [r1, #0]
 800b3ba:	428a      	cmp	r2, r1
 800b3bc:	bfb4      	ite	lt
 800b3be:	2101      	movlt	r1, #1
 800b3c0:	2100      	movge	r1, #0
 800b3c2:	7001      	strb	r1, [r0, #0]
 800b3c4:	4770      	bx	lr

0800b3c6 <ai_greater_buffer_s32>:
 800b3c6:	4403      	add	r3, r0
 800b3c8:	4298      	cmp	r0, r3
 800b3ca:	d300      	bcc.n	800b3ce <ai_greater_buffer_s32+0x8>
 800b3cc:	4770      	bx	lr
 800b3ce:	b470      	push	{r4, r5, r6}
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	6815      	ldr	r5, [r2, #0]
 800b3d4:	680e      	ldr	r6, [r1, #0]
 800b3d6:	1c60      	adds	r0, r4, #1
 800b3d8:	42b5      	cmp	r5, r6
 800b3da:	bfb4      	ite	lt
 800b3dc:	2501      	movlt	r5, #1
 800b3de:	2500      	movge	r5, #0
 800b3e0:	1d09      	adds	r1, r1, #4
 800b3e2:	1d12      	adds	r2, r2, #4
 800b3e4:	4298      	cmp	r0, r3
 800b3e6:	7025      	strb	r5, [r4, #0]
 800b3e8:	d3f2      	bcc.n	800b3d0 <ai_greater_buffer_s32+0xa>
 800b3ea:	bc70      	pop	{r4, r5, r6}
 800b3ec:	4770      	bx	lr

0800b3ee <ai_greater_s16>:
 800b3ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b3f2:	f9b1 1000 	ldrsh.w	r1, [r1]
 800b3f6:	428a      	cmp	r2, r1
 800b3f8:	bfb4      	ite	lt
 800b3fa:	2101      	movlt	r1, #1
 800b3fc:	2100      	movge	r1, #0
 800b3fe:	7001      	strb	r1, [r0, #0]
 800b400:	4770      	bx	lr

0800b402 <ai_greater_buffer_s16>:
 800b402:	4403      	add	r3, r0
 800b404:	4298      	cmp	r0, r3
 800b406:	d300      	bcc.n	800b40a <ai_greater_buffer_s16+0x8>
 800b408:	4770      	bx	lr
 800b40a:	b470      	push	{r4, r5, r6}
 800b40c:	4604      	mov	r4, r0
 800b40e:	f9b2 5000 	ldrsh.w	r5, [r2]
 800b412:	f9b1 6000 	ldrsh.w	r6, [r1]
 800b416:	1c60      	adds	r0, r4, #1
 800b418:	42b5      	cmp	r5, r6
 800b41a:	bfb4      	ite	lt
 800b41c:	2501      	movlt	r5, #1
 800b41e:	2500      	movge	r5, #0
 800b420:	1c89      	adds	r1, r1, #2
 800b422:	1c92      	adds	r2, r2, #2
 800b424:	4298      	cmp	r0, r3
 800b426:	7025      	strb	r5, [r4, #0]
 800b428:	d3f0      	bcc.n	800b40c <ai_greater_buffer_s16+0xa>
 800b42a:	bc70      	pop	{r4, r5, r6}
 800b42c:	4770      	bx	lr

0800b42e <ai_greater_s8>:
 800b42e:	f992 2000 	ldrsb.w	r2, [r2]
 800b432:	f991 1000 	ldrsb.w	r1, [r1]
 800b436:	428a      	cmp	r2, r1
 800b438:	bfb4      	ite	lt
 800b43a:	2101      	movlt	r1, #1
 800b43c:	2100      	movge	r1, #0
 800b43e:	7001      	strb	r1, [r0, #0]
 800b440:	4770      	bx	lr

0800b442 <ai_greater_buffer_s8>:
 800b442:	4403      	add	r3, r0
 800b444:	4298      	cmp	r0, r3
 800b446:	d300      	bcc.n	800b44a <ai_greater_buffer_s8+0x8>
 800b448:	4770      	bx	lr
 800b44a:	b470      	push	{r4, r5, r6}
 800b44c:	4604      	mov	r4, r0
 800b44e:	f992 5000 	ldrsb.w	r5, [r2]
 800b452:	f991 6000 	ldrsb.w	r6, [r1]
 800b456:	1c60      	adds	r0, r4, #1
 800b458:	42b5      	cmp	r5, r6
 800b45a:	bfb4      	ite	lt
 800b45c:	2501      	movlt	r5, #1
 800b45e:	2500      	movge	r5, #0
 800b460:	1c49      	adds	r1, r1, #1
 800b462:	1c52      	adds	r2, r2, #1
 800b464:	4298      	cmp	r0, r3
 800b466:	7025      	strb	r5, [r4, #0]
 800b468:	d3f0      	bcc.n	800b44c <ai_greater_buffer_s8+0xa>
 800b46a:	bc70      	pop	{r4, r5, r6}
 800b46c:	4770      	bx	lr

0800b46e <ai_greater_u32>:
 800b46e:	6812      	ldr	r2, [r2, #0]
 800b470:	6809      	ldr	r1, [r1, #0]
 800b472:	428a      	cmp	r2, r1
 800b474:	4189      	sbcs	r1, r1
 800b476:	0fc9      	lsrs	r1, r1, #31
 800b478:	7001      	strb	r1, [r0, #0]
 800b47a:	4770      	bx	lr

0800b47c <ai_greater_buffer_u32>:
 800b47c:	4403      	add	r3, r0
 800b47e:	4298      	cmp	r0, r3
 800b480:	d300      	bcc.n	800b484 <ai_greater_buffer_u32+0x8>
 800b482:	4770      	bx	lr
 800b484:	b430      	push	{r4, r5}
 800b486:	bf00      	nop
 800b488:	f852 4b04 	ldr.w	r4, [r2], #4
 800b48c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b490:	42ac      	cmp	r4, r5
 800b492:	41a4      	sbcs	r4, r4
 800b494:	0fe4      	lsrs	r4, r4, #31
 800b496:	f800 4b01 	strb.w	r4, [r0], #1
 800b49a:	4298      	cmp	r0, r3
 800b49c:	d3f4      	bcc.n	800b488 <ai_greater_buffer_u32+0xc>
 800b49e:	bc30      	pop	{r4, r5}
 800b4a0:	4770      	bx	lr

0800b4a2 <ai_greater_u16>:
 800b4a2:	8812      	ldrh	r2, [r2, #0]
 800b4a4:	8809      	ldrh	r1, [r1, #0]
 800b4a6:	428a      	cmp	r2, r1
 800b4a8:	4189      	sbcs	r1, r1
 800b4aa:	0fc9      	lsrs	r1, r1, #31
 800b4ac:	7001      	strb	r1, [r0, #0]
 800b4ae:	4770      	bx	lr

0800b4b0 <ai_greater_buffer_u16>:
 800b4b0:	4403      	add	r3, r0
 800b4b2:	4298      	cmp	r0, r3
 800b4b4:	d300      	bcc.n	800b4b8 <ai_greater_buffer_u16+0x8>
 800b4b6:	4770      	bx	lr
 800b4b8:	b470      	push	{r4, r5, r6}
 800b4ba:	bf00      	nop
 800b4bc:	f832 5b02 	ldrh.w	r5, [r2], #2
 800b4c0:	f831 6b02 	ldrh.w	r6, [r1], #2
 800b4c4:	42b5      	cmp	r5, r6
 800b4c6:	41a4      	sbcs	r4, r4
 800b4c8:	0fe4      	lsrs	r4, r4, #31
 800b4ca:	f800 4b01 	strb.w	r4, [r0], #1
 800b4ce:	4298      	cmp	r0, r3
 800b4d0:	d3f4      	bcc.n	800b4bc <ai_greater_buffer_u16+0xc>
 800b4d2:	bc70      	pop	{r4, r5, r6}
 800b4d4:	4770      	bx	lr

0800b4d6 <ai_greater_u8>:
 800b4d6:	7812      	ldrb	r2, [r2, #0]
 800b4d8:	7809      	ldrb	r1, [r1, #0]
 800b4da:	428a      	cmp	r2, r1
 800b4dc:	4189      	sbcs	r1, r1
 800b4de:	0fc9      	lsrs	r1, r1, #31
 800b4e0:	7001      	strb	r1, [r0, #0]
 800b4e2:	4770      	bx	lr

0800b4e4 <ai_greater_buffer_u8>:
 800b4e4:	4403      	add	r3, r0
 800b4e6:	4298      	cmp	r0, r3
 800b4e8:	d300      	bcc.n	800b4ec <ai_greater_buffer_u8+0x8>
 800b4ea:	4770      	bx	lr
 800b4ec:	b470      	push	{r4, r5, r6}
 800b4ee:	bf00      	nop
 800b4f0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b4f4:	f811 6b01 	ldrb.w	r6, [r1], #1
 800b4f8:	42b5      	cmp	r5, r6
 800b4fa:	41a4      	sbcs	r4, r4
 800b4fc:	0fe4      	lsrs	r4, r4, #31
 800b4fe:	f800 4b01 	strb.w	r4, [r0], #1
 800b502:	4298      	cmp	r0, r3
 800b504:	d3f4      	bcc.n	800b4f0 <ai_greater_buffer_u8+0xc>
 800b506:	bc70      	pop	{r4, r5, r6}
 800b508:	4770      	bx	lr

0800b50a <ai_and>:
 800b50a:	7809      	ldrb	r1, [r1, #0]
 800b50c:	b121      	cbz	r1, 800b518 <ai_and+0xe>
 800b50e:	7812      	ldrb	r2, [r2, #0]
 800b510:	1e51      	subs	r1, r2, #1
 800b512:	4189      	sbcs	r1, r1
 800b514:	43c9      	mvns	r1, r1
 800b516:	0fc9      	lsrs	r1, r1, #31
 800b518:	7001      	strb	r1, [r0, #0]
 800b51a:	4770      	bx	lr

0800b51c <ai_and_buffer>:
 800b51c:	b470      	push	{r4, r5, r6}
 800b51e:	18c4      	adds	r4, r0, r3
 800b520:	42a0      	cmp	r0, r4
 800b522:	d20d      	bcs.n	800b540 <ai_and_buffer+0x24>
 800b524:	4605      	mov	r5, r0
 800b526:	780b      	ldrb	r3, [r1, #0]
 800b528:	1c68      	adds	r0, r5, #1
 800b52a:	b123      	cbz	r3, 800b536 <ai_and_buffer+0x1a>
 800b52c:	7816      	ldrb	r6, [r2, #0]
 800b52e:	1e73      	subs	r3, r6, #1
 800b530:	419b      	sbcs	r3, r3
 800b532:	43db      	mvns	r3, r3
 800b534:	0fdb      	lsrs	r3, r3, #31
 800b536:	1c49      	adds	r1, r1, #1
 800b538:	1c52      	adds	r2, r2, #1
 800b53a:	42a0      	cmp	r0, r4
 800b53c:	702b      	strb	r3, [r5, #0]
 800b53e:	d3f1      	bcc.n	800b524 <ai_and_buffer+0x8>
 800b540:	bc70      	pop	{r4, r5, r6}
 800b542:	4770      	bx	lr

0800b544 <ai_or>:
 800b544:	7809      	ldrb	r1, [r1, #0]
 800b546:	b931      	cbnz	r1, 800b556 <ai_or+0x12>
 800b548:	7812      	ldrb	r2, [r2, #0]
 800b54a:	1e51      	subs	r1, r2, #1
 800b54c:	4189      	sbcs	r1, r1
 800b54e:	43c9      	mvns	r1, r1
 800b550:	0fc9      	lsrs	r1, r1, #31
 800b552:	7001      	strb	r1, [r0, #0]
 800b554:	4770      	bx	lr
 800b556:	2101      	movs	r1, #1
 800b558:	7001      	strb	r1, [r0, #0]
 800b55a:	4770      	bx	lr

0800b55c <ai_or_buffer>:
 800b55c:	b470      	push	{r4, r5, r6}
 800b55e:	18c4      	adds	r4, r0, r3
 800b560:	42a0      	cmp	r0, r4
 800b562:	d20f      	bcs.n	800b584 <ai_or_buffer+0x28>
 800b564:	4605      	mov	r5, r0
 800b566:	780b      	ldrb	r3, [r1, #0]
 800b568:	1c68      	adds	r0, r5, #1
 800b56a:	b92b      	cbnz	r3, 800b578 <ai_or_buffer+0x1c>
 800b56c:	7816      	ldrb	r6, [r2, #0]
 800b56e:	1e73      	subs	r3, r6, #1
 800b570:	419b      	sbcs	r3, r3
 800b572:	43db      	mvns	r3, r3
 800b574:	0fdb      	lsrs	r3, r3, #31
 800b576:	e000      	b.n	800b57a <ai_or_buffer+0x1e>
 800b578:	2301      	movs	r3, #1
 800b57a:	1c49      	adds	r1, r1, #1
 800b57c:	1c52      	adds	r2, r2, #1
 800b57e:	42a0      	cmp	r0, r4
 800b580:	702b      	strb	r3, [r5, #0]
 800b582:	d3ef      	bcc.n	800b564 <ai_or_buffer+0x8>
 800b584:	bc70      	pop	{r4, r5, r6}
 800b586:	4770      	bx	lr

0800b588 <ai_xor>:
 800b588:	7809      	ldrb	r1, [r1, #0]
 800b58a:	7812      	ldrb	r2, [r2, #0]
 800b58c:	4291      	cmp	r1, r2
 800b58e:	bf14      	ite	ne
 800b590:	2101      	movne	r1, #1
 800b592:	2100      	moveq	r1, #0
 800b594:	7001      	strb	r1, [r0, #0]
 800b596:	4770      	bx	lr

0800b598 <ai_xor_buffer>:
 800b598:	4403      	add	r3, r0
 800b59a:	4298      	cmp	r0, r3
 800b59c:	d300      	bcc.n	800b5a0 <ai_xor_buffer+0x8>
 800b59e:	4770      	bx	lr
 800b5a0:	b470      	push	{r4, r5, r6}
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	780d      	ldrb	r5, [r1, #0]
 800b5a6:	7816      	ldrb	r6, [r2, #0]
 800b5a8:	1c60      	adds	r0, r4, #1
 800b5aa:	42b5      	cmp	r5, r6
 800b5ac:	bf14      	ite	ne
 800b5ae:	2501      	movne	r5, #1
 800b5b0:	2500      	moveq	r5, #0
 800b5b2:	1c49      	adds	r1, r1, #1
 800b5b4:	1c52      	adds	r2, r2, #1
 800b5b6:	4298      	cmp	r0, r3
 800b5b8:	7025      	strb	r5, [r4, #0]
 800b5ba:	d3f2      	bcc.n	800b5a2 <ai_xor_buffer+0xa>
 800b5bc:	bc70      	pop	{r4, r5, r6}
 800b5be:	4770      	bx	lr

0800b5c0 <ai_squared_diff>:
 800b5c0:	ed91 0a00 	vldr	s0, [r1]
 800b5c4:	edd2 0a00 	vldr	s1, [r2]
 800b5c8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b5cc:	ee60 0a00 	vmul.f32	s1, s0, s0
 800b5d0:	edc0 0a00 	vstr	s1, [r0]
 800b5d4:	4770      	bx	lr
	...

0800b5d8 <ai_squared_diff_buffer>:
 800b5d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b5dc:	4298      	cmp	r0, r3
 800b5de:	d228      	bcs.n	800b632 <ai_squared_diff_buffer+0x5a>
 800b5e0:	ed91 0a00 	vldr	s0, [r1]
 800b5e4:	edd2 0a00 	vldr	s1, [r2]
 800b5e8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b5ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b5f0:	ed80 0a00 	vstr	s0, [r0]
 800b5f4:	1d00      	adds	r0, r0, #4
 800b5f6:	4298      	cmp	r0, r3
 800b5f8:	d21b      	bcs.n	800b632 <ai_squared_diff_buffer+0x5a>
 800b5fa:	ed91 0a01 	vldr	s0, [r1, #4]
 800b5fe:	edd2 0a01 	vldr	s1, [r2, #4]
 800b602:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b606:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b60a:	ed80 0a00 	vstr	s0, [r0]
 800b60e:	1d00      	adds	r0, r0, #4
 800b610:	4298      	cmp	r0, r3
 800b612:	d20e      	bcs.n	800b632 <ai_squared_diff_buffer+0x5a>
 800b614:	edd1 0a02 	vldr	s1, [r1, #8]
 800b618:	ed92 0a02 	vldr	s0, [r2, #8]
 800b61c:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800b620:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b624:	ed80 0a00 	vstr	s0, [r0]
 800b628:	1d00      	adds	r0, r0, #4
 800b62a:	310c      	adds	r1, #12
 800b62c:	320c      	adds	r2, #12
 800b62e:	4298      	cmp	r0, r3
 800b630:	d3d6      	bcc.n	800b5e0 <ai_squared_diff_buffer+0x8>
 800b632:	4770      	bx	lr

0800b634 <ai_sum_buffer_INT8>:
 800b634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b638:	b083      	sub	sp, #12
 800b63a:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
 800b63e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 800b642:	ed9c 0a00 	vldr	s0, [ip]
 800b646:	edd8 0a00 	vldr	s1, [r8]
 800b64a:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 800b64e:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
 800b652:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800b656:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800b658:	ed99 1a00 	vldr	s2, [r9]
 800b65c:	4604      	mov	r4, r0
 800b65e:	eec0 1a01 	vdiv.f32	s3, s0, s2
 800b662:	ee80 2a81 	vdiv.f32	s4, s1, s2
 800b666:	ee11 0a90 	vmov	r0, s3
 800b66a:	f3c0 58c7 	ubfx	r8, r0, #23, #8
 800b66e:	ee12 0a10 	vmov	r0, s4
 800b672:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 800b676:	f1c8 087e 	rsb	r8, r8, #126	@ 0x7e
 800b67a:	f1c0 007e 	rsb	r0, r0, #126	@ 0x7e
 800b67e:	4580      	cmp	r8, r0
 800b680:	460d      	mov	r5, r1
 800b682:	bfc8      	it	gt
 800b684:	4680      	movgt	r8, r0
 800b686:	f108 011f 	add.w	r1, r8, #31
 800b68a:	291f      	cmp	r1, #31
 800b68c:	bfb4      	ite	lt
 800b68e:	f108 081e 	addlt.w	r8, r8, #30
 800b692:	f04f 081e 	movge.w	r8, #30
 800b696:	4618      	mov	r0, r3
 800b698:	2301      	movs	r3, #1
 800b69a:	f1a8 0101 	sub.w	r1, r8, #1
 800b69e:	fa03 f101 	lsl.w	r1, r3, r1
 800b6a2:	f99e 9000 	ldrsb.w	r9, [lr]
 800b6a6:	f8dd c048 	ldr.w	ip, [sp, #72]	@ 0x48
 800b6aa:	ee02 1a90 	vmov	s5, r1
 800b6ae:	eef0 3a00 	vmov.f32	s7, #0	@ 0x40000000  2.0
 800b6b2:	eeb0 4a00 	vmov.f32	s8, #0	@ 0x40000000  2.0
 800b6b6:	eeb8 3ae2 	vcvt.f32.s32	s6, s5
 800b6ba:	ee61 3aa3 	vmul.f32	s7, s3, s7
 800b6be:	ee22 4a04 	vmul.f32	s8, s4, s8
 800b6c2:	4616      	mov	r6, r2
 800b6c4:	f99a a000 	ldrsb.w	sl, [sl]
 800b6c8:	f997 e000 	ldrsb.w	lr, [r7]
 800b6cc:	ee63 3a83 	vmul.f32	s7, s7, s6
 800b6d0:	ee24 3a03 	vmul.f32	s6, s8, s6
 800b6d4:	0881      	lsrs	r1, r0, #2
 800b6d6:	f1bc 0f00 	cmp.w	ip, #0
 800b6da:	eefd 2ae3 	vcvt.s32.f32	s5, s7
 800b6de:	eebd 3ac3 	vcvt.s32.f32	s6, s6
 800b6e2:	460a      	mov	r2, r1
 800b6e4:	d12c      	bne.n	800b740 <ai_sum_buffer_INT8+0x10c>
 800b6e6:	eeb4 0a41 	vcmp.f32	s0, s2
 800b6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ee:	bf08      	it	eq
 800b6f0:	45f1      	cmpeq	r9, lr
 800b6f2:	d116      	bne.n	800b722 <ai_sum_buffer_INT8+0xee>
 800b6f4:	eef4 0a41 	vcmp.f32	s1, s2
 800b6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fc:	bf08      	it	eq
 800b6fe:	45f2      	cmpeq	sl, lr
 800b700:	d10f      	bne.n	800b722 <ai_sum_buffer_INT8+0xee>
 800b702:	b158      	cbz	r0, 800b71c <ai_sum_buffer_INT8+0xe8>
 800b704:	f916 1b01 	ldrsb.w	r1, [r6], #1
 800b708:	f915 2b01 	ldrsb.w	r2, [r5], #1
 800b70c:	4471      	add	r1, lr
 800b70e:	188a      	adds	r2, r1, r2
 800b710:	f302 0107 	ssat	r1, #8, r2
 800b714:	1e40      	subs	r0, r0, #1
 800b716:	f804 1b01 	strb.w	r1, [r4], #1
 800b71a:	d1f3      	bne.n	800b704 <ai_sum_buffer_INT8+0xd0>
 800b71c:	b003      	add	sp, #12
 800b71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b722:	f8cd e008 	str.w	lr, [sp, #8]
 800b726:	4603      	mov	r3, r0
 800b728:	f8cd a004 	str.w	sl, [sp, #4]
 800b72c:	f8cd 9000 	str.w	r9, [sp]
 800b730:	4632      	mov	r2, r6
 800b732:	4629      	mov	r1, r5
 800b734:	4620      	mov	r0, r4
 800b736:	f001 fab1 	bl	800cc9c <ai_math_elementwise_sum_int8>
 800b73a:	b003      	add	sp, #12
 800b73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b740:	f1a8 0708 	sub.w	r7, r8, #8
 800b744:	fa03 fb07 	lsl.w	fp, r3, r7
 800b748:	ee00 ba10 	vmov	s0, fp
 800b74c:	f1a8 0809 	sub.w	r8, r8, #9
 800b750:	ee00 ea90 	vmov	s1, lr
 800b754:	f1bc 0f01 	cmp.w	ip, #1
 800b758:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b75c:	fa03 f308 	lsl.w	r3, r3, r8
 800b760:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800b764:	d15d      	bne.n	800b822 <ai_sum_buffer_INT8+0x1ee>
 800b766:	f995 5000 	ldrsb.w	r5, [r5]
 800b76a:	eba5 0909 	sub.w	r9, r5, r9
 800b76e:	ee01 9a10 	vmov	s2, r9
 800b772:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 800b776:	ee21 1a21 	vmul.f32	s2, s2, s3
 800b77a:	ee01 aa90 	vmov	s3, sl
 800b77e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800b782:	ee01 1ac2 	vmls.f32	s2, s3, s4
 800b786:	ee31 1a20 	vadd.f32	s2, s2, s1
 800b78a:	ee21 0a00 	vmul.f32	s0, s2, s0
 800b78e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b792:	ee10 5a10 	vmov	r5, s0
 800b796:	eb03 0c05 	add.w	ip, r3, r5
 800b79a:	b361      	cbz	r1, 800b7f6 <ai_sum_buffer_INT8+0x1c2>
 800b79c:	4633      	mov	r3, r6
 800b79e:	4621      	mov	r1, r4
 800b7a0:	ee13 5a10 	vmov	r5, s6
 800b7a4:	f853 4b04 	ldr.w	r4, [r3], #4
 800b7a8:	0226      	lsls	r6, r4, #8
 800b7aa:	f026 16ff 	bic.w	r6, r6, #16711935	@ 0xff00ff
 800b7ae:	f024 14ff 	bic.w	r4, r4, #16711935	@ 0xff00ff
 800b7b2:	fb35 ce06 	smlawb	lr, r5, r6, ip
 800b7b6:	fa4e fe07 	asr.w	lr, lr, r7
 800b7ba:	f30e 0e07 	ssat	lr, #8, lr
 800b7be:	f801 eb01 	strb.w	lr, [r1], #1
 800b7c2:	fb35 ce04 	smlawb	lr, r5, r4, ip
 800b7c6:	fa4e fe07 	asr.w	lr, lr, r7
 800b7ca:	f30e 0e07 	ssat	lr, #8, lr
 800b7ce:	f801 eb01 	strb.w	lr, [r1], #1
 800b7d2:	fb35 c616 	smlawt	r6, r5, r6, ip
 800b7d6:	413e      	asrs	r6, r7
 800b7d8:	f306 0607 	ssat	r6, #8, r6
 800b7dc:	f801 6b01 	strb.w	r6, [r1], #1
 800b7e0:	fb35 c414 	smlawt	r4, r5, r4, ip
 800b7e4:	413c      	asrs	r4, r7
 800b7e6:	f304 0407 	ssat	r4, #8, r4
 800b7ea:	1e52      	subs	r2, r2, #1
 800b7ec:	f801 4b01 	strb.w	r4, [r1], #1
 800b7f0:	d1d8      	bne.n	800b7a4 <ai_sum_buffer_INT8+0x170>
 800b7f2:	461e      	mov	r6, r3
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	f010 0f03 	tst.w	r0, #3
 800b7fa:	d08f      	beq.n	800b71c <ai_sum_buffer_INT8+0xe8>
 800b7fc:	f000 0003 	and.w	r0, r0, #3
 800b800:	ee13 1a10 	vmov	r1, s6
 800b804:	f916 2b01 	ldrsb.w	r2, [r6], #1
 800b808:	0212      	lsls	r2, r2, #8
 800b80a:	fb31 c202 	smlawb	r2, r1, r2, ip
 800b80e:	413a      	asrs	r2, r7
 800b810:	f302 0207 	ssat	r2, #8, r2
 800b814:	1e40      	subs	r0, r0, #1
 800b816:	f804 2b01 	strb.w	r2, [r4], #1
 800b81a:	d1f3      	bne.n	800b804 <ai_sum_buffer_INT8+0x1d0>
 800b81c:	b003      	add	sp, #12
 800b81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b822:	f996 6000 	ldrsb.w	r6, [r6]
 800b826:	eba6 0a0a 	sub.w	sl, r6, sl
 800b82a:	ee01 aa10 	vmov	s2, sl
 800b82e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 800b832:	ee21 1a02 	vmul.f32	s2, s2, s4
 800b836:	ee02 9a10 	vmov	s4, r9
 800b83a:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 800b83e:	ee02 1a61 	vmls.f32	s2, s4, s3
 800b842:	ee71 0a20 	vadd.f32	s1, s2, s1
 800b846:	ee20 0a80 	vmul.f32	s0, s1, s0
 800b84a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b84e:	ee10 6a10 	vmov	r6, s0
 800b852:	eb03 0c06 	add.w	ip, r3, r6
 800b856:	b361      	cbz	r1, 800b8b2 <ai_sum_buffer_INT8+0x27e>
 800b858:	462b      	mov	r3, r5
 800b85a:	4621      	mov	r1, r4
 800b85c:	ee12 6a90 	vmov	r6, s5
 800b860:	f853 4b04 	ldr.w	r4, [r3], #4
 800b864:	0225      	lsls	r5, r4, #8
 800b866:	f025 15ff 	bic.w	r5, r5, #16711935	@ 0xff00ff
 800b86a:	f024 14ff 	bic.w	r4, r4, #16711935	@ 0xff00ff
 800b86e:	fb36 ce05 	smlawb	lr, r6, r5, ip
 800b872:	fa4e fe07 	asr.w	lr, lr, r7
 800b876:	f30e 0e07 	ssat	lr, #8, lr
 800b87a:	f801 eb01 	strb.w	lr, [r1], #1
 800b87e:	fb36 ce04 	smlawb	lr, r6, r4, ip
 800b882:	fa4e fe07 	asr.w	lr, lr, r7
 800b886:	f30e 0e07 	ssat	lr, #8, lr
 800b88a:	f801 eb01 	strb.w	lr, [r1], #1
 800b88e:	fb36 c515 	smlawt	r5, r6, r5, ip
 800b892:	413d      	asrs	r5, r7
 800b894:	f305 0507 	ssat	r5, #8, r5
 800b898:	f801 5b01 	strb.w	r5, [r1], #1
 800b89c:	fb36 c414 	smlawt	r4, r6, r4, ip
 800b8a0:	413c      	asrs	r4, r7
 800b8a2:	f304 0407 	ssat	r4, #8, r4
 800b8a6:	1e52      	subs	r2, r2, #1
 800b8a8:	f801 4b01 	strb.w	r4, [r1], #1
 800b8ac:	d1d8      	bne.n	800b860 <ai_sum_buffer_INT8+0x22c>
 800b8ae:	461d      	mov	r5, r3
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	f010 0f03 	tst.w	r0, #3
 800b8b6:	f43f af31 	beq.w	800b71c <ai_sum_buffer_INT8+0xe8>
 800b8ba:	f000 0003 	and.w	r0, r0, #3
 800b8be:	ee12 1a90 	vmov	r1, s5
 800b8c2:	bf00      	nop
 800b8c4:	f915 2b01 	ldrsb.w	r2, [r5], #1
 800b8c8:	0212      	lsls	r2, r2, #8
 800b8ca:	fb31 c202 	smlawb	r2, r1, r2, ip
 800b8ce:	413a      	asrs	r2, r7
 800b8d0:	f302 0207 	ssat	r2, #8, r2
 800b8d4:	1e40      	subs	r0, r0, #1
 800b8d6:	f804 2b01 	strb.w	r2, [r4], #1
 800b8da:	d1f3      	bne.n	800b8c4 <ai_sum_buffer_INT8+0x290>
 800b8dc:	b003      	add	sp, #12
 800b8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b8e4 <ai_sum_buffer_UINT8>:
 800b8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8e6:	9c05      	ldr	r4, [sp, #20]
 800b8e8:	9e07      	ldr	r6, [sp, #28]
 800b8ea:	9d06      	ldr	r5, [sp, #24]
 800b8ec:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 800b8f0:	9f08      	ldr	r7, [sp, #32]
 800b8f2:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 800b8f6:	ed94 2a00 	vldr	s4, [r4]
 800b8fa:	ed96 0a00 	vldr	s0, [r6]
 800b8fe:	782c      	ldrb	r4, [r5, #0]
 800b900:	f89e 6000 	ldrb.w	r6, [lr]
 800b904:	eddc 0a00 	vldr	s1, [ip]
 800b908:	783d      	ldrb	r5, [r7, #0]
 800b90a:	eeb4 2a60 	vcmp.f32	s4, s1
 800b90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b912:	bf08      	it	eq
 800b914:	42b4      	cmpeq	r4, r6
 800b916:	ee82 1a20 	vdiv.f32	s2, s4, s1
 800b91a:	eec0 1a20 	vdiv.f32	s3, s0, s1
 800b91e:	d114      	bne.n	800b94a <ai_sum_buffer_UINT8+0x66>
 800b920:	eeb4 0a60 	vcmp.f32	s0, s1
 800b924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b928:	bf08      	it	eq
 800b92a:	42b5      	cmpeq	r5, r6
 800b92c:	d10d      	bne.n	800b94a <ai_sum_buffer_UINT8+0x66>
 800b92e:	b15b      	cbz	r3, 800b948 <ai_sum_buffer_UINT8+0x64>
 800b930:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b934:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b938:	192d      	adds	r5, r5, r4
 800b93a:	1bad      	subs	r5, r5, r6
 800b93c:	f385 0408 	usat	r4, #8, r5
 800b940:	1e5b      	subs	r3, r3, #1
 800b942:	f800 4b01 	strb.w	r4, [r0], #1
 800b946:	d1f3      	bne.n	800b930 <ai_sum_buffer_UINT8+0x4c>
 800b948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b94a:	ee00 6a10 	vmov	s0, r6
 800b94e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800b952:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800b956:	2b00      	cmp	r3, #0
 800b958:	ee30 0a20 	vadd.f32	s0, s0, s1
 800b95c:	f43f aff4 	beq.w	800b948 <ai_sum_buffer_UINT8+0x64>
 800b960:	f811 6b01 	ldrb.w	r6, [r1], #1
 800b964:	f812 7b01 	ldrb.w	r7, [r2], #1
 800b968:	1b36      	subs	r6, r6, r4
 800b96a:	ee02 6a10 	vmov	s4, r6
 800b96e:	1b7f      	subs	r7, r7, r5
 800b970:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 800b974:	ee00 7a90 	vmov	s1, r7
 800b978:	ee22 2a01 	vmul.f32	s4, s4, s2
 800b97c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800b980:	ee00 2aa1 	vmla.f32	s4, s1, s3
 800b984:	ee72 0a00 	vadd.f32	s1, s4, s0
 800b988:	eefd 2ae0 	vcvt.s32.f32	s5, s1
 800b98c:	ee12 ca90 	vmov	ip, s5
 800b990:	f38c 0608 	usat	r6, #8, ip
 800b994:	1e5b      	subs	r3, r3, #1
 800b996:	f800 6b01 	strb.w	r6, [r0], #1
 800b99a:	d1e1      	bne.n	800b960 <ai_sum_buffer_UINT8+0x7c>
 800b99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b9a0 <align_factor_cmsisnn>:
 800b9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9a4:	b081      	sub	sp, #4
 800b9a6:	4605      	mov	r5, r0
 800b9a8:	b288      	uxth	r0, r1
 800b9aa:	ed2d 8b04 	vpush	{d8-d9}
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	eeb0 8a40 	vmov.f32	s16, s0
 800b9b4:	eef0 8a60 	vmov.f32	s17, s1
 800b9b8:	4690      	mov	r8, r2
 800b9ba:	461f      	mov	r7, r3
 800b9bc:	d051      	beq.n	800ba62 <align_factor_cmsisnn+0xc2>
 800b9be:	b28c      	uxth	r4, r1
 800b9c0:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800b9c4:	ed9f 9a87 	vldr	s18, [pc, #540]	@ 800bbe4 <.text_5>
 800b9c8:	f06f 091d 	mvn.w	r9, #29
 800b9cc:	eddf 9a86 	vldr	s19, [pc, #536]	@ 800bbe8 <.text_6>
 800b9d0:	ed95 0a00 	vldr	s0, [r5]
 800b9d4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b9d8:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800b9dc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	eeb4 0a60 	vcmp.f32	s0, s1
 800b9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ea:	d517      	bpl.n	800ba1c <align_factor_cmsisnn+0x7c>
 800b9ec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f4:	f340 8012 	ble.w	800ba1c <align_factor_cmsisnn+0x7c>
 800b9f8:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800b9fc:	eeb4 0a60 	vcmp.f32	s0, s1
 800ba00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba04:	d51b      	bpl.n	800ba3e <align_factor_cmsisnn+0x9e>
 800ba06:	1c40      	adds	r0, r0, #1
 800ba08:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800ba0c:	2820      	cmp	r0, #32
 800ba0e:	ee20 0a01 	vmul.f32	s0, s0, s2
 800ba12:	dbf1      	blt.n	800b9f8 <align_factor_cmsisnn+0x58>
 800ba14:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 800bcd8 <.text_9>
 800ba18:	2000      	movs	r0, #0
 800ba1a:	e010      	b.n	800ba3e <align_factor_cmsisnn+0x9e>
 800ba1c:	eeb4 0a69 	vcmp.f32	s0, s19
 800ba20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba24:	db0b      	blt.n	800ba3e <align_factor_cmsisnn+0x9e>
 800ba26:	1e40      	subs	r0, r0, #1
 800ba28:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800ba2c:	4548      	cmp	r0, r9
 800ba2e:	ee20 0a20 	vmul.f32	s0, s0, s1
 800ba32:	daf3      	bge.n	800ba1c <align_factor_cmsisnn+0x7c>
 800ba34:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800ba38:	4648      	mov	r0, r9
 800ba3a:	ee20 0a01 	vmul.f32	s0, s0, s2
 800ba3e:	4240      	negs	r0, r0
 800ba40:	6038      	str	r0, [r7, #0]
 800ba42:	ee20 0a09 	vmul.f32	s0, s0, s18
 800ba46:	ee10 0a10 	vmov	r0, s0
 800ba4a:	f001 ffbd 	bl	800d9c8 <__aeabi_f2lz>
 800ba4e:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800ba52:	bf18      	it	ne
 800ba54:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 800ba58:	1d3f      	adds	r7, r7, #4
 800ba5a:	1e64      	subs	r4, r4, #1
 800ba5c:	f848 0b04 	str.w	r0, [r8], #4
 800ba60:	d1b6      	bne.n	800b9d0 <align_factor_cmsisnn+0x30>
 800ba62:	ecbd 8b04 	vpop	{d8-d9}
 800ba66:	b001      	add	sp, #4
 800ba68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ba6c <align_factor_cmsisnn_ch>:
 800ba6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba70:	b081      	sub	sp, #4
 800ba72:	4605      	mov	r5, r0
 800ba74:	b288      	uxth	r0, r1
 800ba76:	ed2d 8b04 	vpush	{d8-d9}
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	eeb0 8a40 	vmov.f32	s16, s0
 800ba80:	eef0 8a60 	vmov.f32	s17, s1
 800ba84:	4690      	mov	r8, r2
 800ba86:	461f      	mov	r7, r3
 800ba88:	d052      	beq.n	800bb30 <align_factor_cmsisnn_ch+0xc4>
 800ba8a:	b28c      	uxth	r4, r1
 800ba8c:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800ba90:	ed9f 9a54 	vldr	s18, [pc, #336]	@ 800bbe4 <.text_5>
 800ba94:	f06f 091d 	mvn.w	r9, #29
 800ba98:	eddf 9a53 	vldr	s19, [pc, #332]	@ 800bbe8 <.text_6>
 800ba9c:	ed95 0a00 	vldr	s0, [r5]
 800baa0:	ee20 0a08 	vmul.f32	s0, s0, s16
 800baa4:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800baa8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800baac:	2000      	movs	r0, #0
 800baae:	eeb4 0a60 	vcmp.f32	s0, s1
 800bab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab6:	d517      	bpl.n	800bae8 <align_factor_cmsisnn_ch+0x7c>
 800bab8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800babc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac0:	f340 8012 	ble.w	800bae8 <align_factor_cmsisnn_ch+0x7c>
 800bac4:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800bac8:	eeb4 0a60 	vcmp.f32	s0, s1
 800bacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad0:	d51b      	bpl.n	800bb0a <align_factor_cmsisnn_ch+0x9e>
 800bad2:	1c40      	adds	r0, r0, #1
 800bad4:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800bad8:	2820      	cmp	r0, #32
 800bada:	ee20 0a01 	vmul.f32	s0, s0, s2
 800bade:	dbf1      	blt.n	800bac4 <align_factor_cmsisnn_ch+0x58>
 800bae0:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 800bcd8 <.text_9>
 800bae4:	2000      	movs	r0, #0
 800bae6:	e010      	b.n	800bb0a <align_factor_cmsisnn_ch+0x9e>
 800bae8:	eeb4 0a69 	vcmp.f32	s0, s19
 800baec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf0:	db0b      	blt.n	800bb0a <align_factor_cmsisnn_ch+0x9e>
 800baf2:	1e40      	subs	r0, r0, #1
 800baf4:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800baf8:	4548      	cmp	r0, r9
 800bafa:	ee20 0a20 	vmul.f32	s0, s0, s1
 800bafe:	daf3      	bge.n	800bae8 <align_factor_cmsisnn_ch+0x7c>
 800bb00:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800bb04:	4648      	mov	r0, r9
 800bb06:	ee20 0a01 	vmul.f32	s0, s0, s2
 800bb0a:	4240      	negs	r0, r0
 800bb0c:	6038      	str	r0, [r7, #0]
 800bb0e:	ee20 0a09 	vmul.f32	s0, s0, s18
 800bb12:	ee10 0a10 	vmov	r0, s0
 800bb16:	f001 ff57 	bl	800d9c8 <__aeabi_f2lz>
 800bb1a:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800bb1e:	bf18      	it	ne
 800bb20:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 800bb24:	1d3f      	adds	r7, r7, #4
 800bb26:	1d2d      	adds	r5, r5, #4
 800bb28:	1e64      	subs	r4, r4, #1
 800bb2a:	f848 0b04 	str.w	r0, [r8], #4
 800bb2e:	d1b5      	bne.n	800ba9c <align_factor_cmsisnn_ch+0x30>
 800bb30:	ecbd 8b04 	vpop	{d8-d9}
 800bb34:	b001      	add	sp, #4
 800bb36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800bb3c <align_factor>:
 800bb3c:	b530      	push	{r4, r5, lr}
 800bb3e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bb42:	2500      	movs	r5, #0
 800bb44:	eeb4 0a60 	vcmp.f32	s0, s1
 800bb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb4c:	b081      	sub	sp, #4
 800bb4e:	4604      	mov	r4, r0
 800bb50:	d504      	bpl.n	800bb5c <align_factor+0x20>
 800bb52:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb5a:	dc1a      	bgt.n	800bb92 <align_factor+0x56>
 800bb5c:	f06f 001d 	mvn.w	r0, #29
 800bb60:	eddf 0a21 	vldr	s1, [pc, #132]	@ 800bbe8 <.text_6>
 800bb64:	eeb4 0a60 	vcmp.f32	s0, s1
 800bb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb6c:	db0c      	blt.n	800bb88 <align_factor+0x4c>
 800bb6e:	1e6d      	subs	r5, r5, #1
 800bb70:	b229      	sxth	r1, r5
 800bb72:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800bb76:	4281      	cmp	r1, r0
 800bb78:	ee20 0a01 	vmul.f32	s0, s0, s2
 800bb7c:	daf2      	bge.n	800bb64 <align_factor+0x28>
 800bb7e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800bb82:	4605      	mov	r5, r0
 800bb84:	ee20 0a20 	vmul.f32	s0, s0, s1
 800bb88:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 800bbe4 <.text_5>
 800bb8c:	ee20 0a01 	vmul.f32	s0, s0, s2
 800bb90:	e011      	b.n	800bbb6 <align_factor+0x7a>
 800bb92:	2000      	movs	r0, #0
 800bb94:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800bb98:	eeb4 0a60 	vcmp.f32	s0, s1
 800bb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba0:	d517      	bpl.n	800bbd2 <align_factor+0x96>
 800bba2:	1c40      	adds	r0, r0, #1
 800bba4:	b201      	sxth	r1, r0
 800bba6:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800bbaa:	2920      	cmp	r1, #32
 800bbac:	ee20 0a01 	vmul.f32	s0, s0, s2
 800bbb0:	dbf0      	blt.n	800bb94 <align_factor+0x58>
 800bbb2:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 800bcd8 <.text_9>
 800bbb6:	ee10 0a10 	vmov	r0, s0
 800bbba:	f001 ff05 	bl	800d9c8 <__aeabi_f2lz>
 800bbbe:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800bbc2:	d00c      	beq.n	800bbde <align_factor+0xa2>
 800bbc4:	17c8      	asrs	r0, r1, #31
 800bbc6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bbca:	8025      	strh	r5, [r4, #0]
 800bbcc:	4048      	eors	r0, r1
 800bbce:	b001      	add	sp, #4
 800bbd0:	bd30      	pop	{r4, r5, pc}
 800bbd2:	ed9f 1a04 	vldr	s2, [pc, #16]	@ 800bbe4 <.text_5>
 800bbd6:	4605      	mov	r5, r0
 800bbd8:	ee20 0a01 	vmul.f32	s0, s0, s2
 800bbdc:	e7eb      	b.n	800bbb6 <align_factor+0x7a>
 800bbde:	8025      	strh	r5, [r4, #0]
 800bbe0:	b001      	add	sp, #4
 800bbe2:	bd30      	pop	{r4, r5, pc}

0800bbe4 <.text_5>:
 800bbe4:	4f000000 	.word	0x4f000000

0800bbe8 <.text_6>:
 800bbe8:	3f800001 	.word	0x3f800001

0800bbec <align_factor_ch>:
 800bbec:	b470      	push	{r4, r5, r6}
 800bbee:	f1ad 0d04 	sub.w	sp, sp, #4
 800bbf2:	b28c      	uxth	r4, r1
 800bbf4:	b31c      	cbz	r4, 800bc3e <align_factor_ch+0x52>
 800bbf6:	b289      	uxth	r1, r1
 800bbf8:	ed90 1a00 	vldr	s2, [r0]
 800bbfc:	ee21 1a00 	vmul.f32	s2, s2, s0
 800bc00:	ee81 1a20 	vdiv.f32	s2, s2, s1
 800bc04:	ed8d 1a00 	vstr	s2, [sp]
 800bc08:	9c00      	ldr	r4, [sp, #0]
 800bc0a:	9d00      	ldr	r5, [sp, #0]
 800bc0c:	9e00      	ldr	r6, [sp, #0]
 800bc0e:	0de4      	lsrs	r4, r4, #23
 800bc10:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800bc14:	f004 04ff 	and.w	r4, r4, #255	@ 0xff
 800bc18:	f505 0500 	add.w	r5, r5, #8388608	@ 0x800000
 800bc1c:	2e00      	cmp	r6, #0
 800bc1e:	f1c4 047e 	rsb	r4, r4, #126	@ 0x7e
 800bc22:	bf48      	it	mi
 800bc24:	426d      	negmi	r5, r5
 800bc26:	2c20      	cmp	r4, #32
 800bc28:	bfa4      	itt	ge
 800bc2a:	2500      	movge	r5, #0
 800bc2c:	2400      	movge	r4, #0
 800bc2e:	1d00      	adds	r0, r0, #4
 800bc30:	f823 4b02 	strh.w	r4, [r3], #2
 800bc34:	01ed      	lsls	r5, r5, #7
 800bc36:	1e49      	subs	r1, r1, #1
 800bc38:	f842 5b04 	str.w	r5, [r2], #4
 800bc3c:	d1dc      	bne.n	800bbf8 <align_factor_ch+0xc>
 800bc3e:	b001      	add	sp, #4
 800bc40:	bc70      	pop	{r4, r5, r6}
 800bc42:	4770      	bx	lr

0800bc44 <align_factor_eltwise>:
 800bc44:	b510      	push	{r4, lr}
 800bc46:	460c      	mov	r4, r1
 800bc48:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	eeb4 0a60 	vcmp.f32	s0, s1
 800bc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc56:	d517      	bpl.n	800bc88 <align_factor_eltwise+0x44>
 800bc58:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bc5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc60:	f340 8012 	ble.w	800bc88 <align_factor_eltwise+0x44>
 800bc64:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800bc68:	eeb4 0a60 	vcmp.f32	s0, s1
 800bc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc70:	d51f      	bpl.n	800bcb2 <align_factor_eltwise+0x6e>
 800bc72:	1c49      	adds	r1, r1, #1
 800bc74:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800bc78:	2920      	cmp	r1, #32
 800bc7a:	ee20 0a01 	vmul.f32	s0, s0, s2
 800bc7e:	dbf1      	blt.n	800bc64 <align_factor_eltwise+0x20>
 800bc80:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800bcd8 <.text_9>
 800bc84:	2100      	movs	r1, #0
 800bc86:	e014      	b.n	800bcb2 <align_factor_eltwise+0x6e>
 800bc88:	eddf 0a14 	vldr	s1, [pc, #80]	@ 800bcdc <.text_10>
 800bc8c:	eeb4 0a60 	vcmp.f32	s0, s1
 800bc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc94:	db0d      	blt.n	800bcb2 <align_factor_eltwise+0x6e>
 800bc96:	1e49      	subs	r1, r1, #1
 800bc98:	f06f 021d 	mvn.w	r2, #29
 800bc9c:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800bca0:	4291      	cmp	r1, r2
 800bca2:	ee20 0a01 	vmul.f32	s0, s0, s2
 800bca6:	daef      	bge.n	800bc88 <align_factor_eltwise+0x44>
 800bca8:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800bcac:	4611      	mov	r1, r2
 800bcae:	ee20 0a20 	vmul.f32	s0, s0, s1
 800bcb2:	4249      	negs	r1, r1
 800bcb4:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 800bce0 <.text_11>
 800bcb8:	6001      	str	r1, [r0, #0]
 800bcba:	ee20 0a01 	vmul.f32	s0, s0, s2
 800bcbe:	ee10 0a10 	vmov	r0, s0
 800bcc2:	f001 fe81 	bl	800d9c8 <__aeabi_f2lz>
 800bcc6:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800bcca:	d003      	beq.n	800bcd4 <align_factor_eltwise+0x90>
 800bccc:	17c8      	asrs	r0, r1, #31
 800bcce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bcd2:	4048      	eors	r0, r1
 800bcd4:	6020      	str	r0, [r4, #0]
 800bcd6:	bd10      	pop	{r4, pc}

0800bcd8 <.text_9>:
 800bcd8:	00000000 	.word	0x00000000

0800bcdc <.text_10>:
 800bcdc:	3f800001 	.word	0x3f800001

0800bce0 <.text_11>:
 800bce0:	4f000000 	.word	0x4f000000

0800bce4 <st_int8_fill>:
 800bce4:	b470      	push	{r4, r5, r6}
 800bce6:	460c      	mov	r4, r1
 800bce8:	4611      	mov	r1, r2
 800bcea:	0202      	lsls	r2, r0, #8
 800bcec:	f000 05ff 	and.w	r5, r0, #255	@ 0xff
 800bcf0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 800bcf4:	0406      	lsls	r6, r0, #16
 800bcf6:	4315      	orrs	r5, r2
 800bcf8:	f406 067f 	and.w	r6, r6, #16711680	@ 0xff0000
 800bcfc:	4335      	orrs	r5, r6
 800bcfe:	b081      	sub	sp, #4
 800bd00:	4603      	mov	r3, r0
 800bd02:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 800bd06:	e002      	b.n	800bd0e <st_int8_fill+0x2a>
 800bd08:	f804 3b01 	strb.w	r3, [r4], #1
 800bd0c:	1e49      	subs	r1, r1, #1
 800bd0e:	f014 0003 	ands.w	r0, r4, #3
 800bd12:	bf18      	it	ne
 800bd14:	2900      	cmpne	r1, #0
 800bd16:	d1f7      	bne.n	800bd08 <st_int8_fill+0x24>
 800bd18:	0908      	lsrs	r0, r1, #4
 800bd1a:	d031      	beq.n	800bd80 <st_int8_fill+0x9c>
 800bd1c:	f010 0203 	ands.w	r2, r0, #3
 800bd20:	f000 800a 	beq.w	800bd38 <st_int8_fill+0x54>
 800bd24:	f844 5b04 	str.w	r5, [r4], #4
 800bd28:	f844 5b04 	str.w	r5, [r4], #4
 800bd2c:	f844 5b04 	str.w	r5, [r4], #4
 800bd30:	1e52      	subs	r2, r2, #1
 800bd32:	f844 5b04 	str.w	r5, [r4], #4
 800bd36:	d1f5      	bne.n	800bd24 <st_int8_fill+0x40>
 800bd38:	0880      	lsrs	r0, r0, #2
 800bd3a:	d021      	beq.n	800bd80 <st_int8_fill+0x9c>
 800bd3c:	f844 5b04 	str.w	r5, [r4], #4
 800bd40:	f844 5b04 	str.w	r5, [r4], #4
 800bd44:	f844 5b04 	str.w	r5, [r4], #4
 800bd48:	f844 5b04 	str.w	r5, [r4], #4
 800bd4c:	f844 5b04 	str.w	r5, [r4], #4
 800bd50:	f844 5b04 	str.w	r5, [r4], #4
 800bd54:	f844 5b04 	str.w	r5, [r4], #4
 800bd58:	f844 5b04 	str.w	r5, [r4], #4
 800bd5c:	f844 5b04 	str.w	r5, [r4], #4
 800bd60:	f844 5b04 	str.w	r5, [r4], #4
 800bd64:	f844 5b04 	str.w	r5, [r4], #4
 800bd68:	f844 5b04 	str.w	r5, [r4], #4
 800bd6c:	f844 5b04 	str.w	r5, [r4], #4
 800bd70:	f844 5b04 	str.w	r5, [r4], #4
 800bd74:	f844 5b04 	str.w	r5, [r4], #4
 800bd78:	1e40      	subs	r0, r0, #1
 800bd7a:	f844 5b04 	str.w	r5, [r4], #4
 800bd7e:	d1dd      	bne.n	800bd3c <st_int8_fill+0x58>
 800bd80:	f3c1 0081 	ubfx	r0, r1, #2, #2
 800bd84:	f3c1 0281 	ubfx	r2, r1, #2, #2
 800bd88:	b11a      	cbz	r2, 800bd92 <st_int8_fill+0xae>
 800bd8a:	1e40      	subs	r0, r0, #1
 800bd8c:	f844 5b04 	str.w	r5, [r4], #4
 800bd90:	d1fb      	bne.n	800bd8a <st_int8_fill+0xa6>
 800bd92:	f011 0103 	ands.w	r1, r1, #3
 800bd96:	d005      	beq.n	800bda4 <st_int8_fill+0xc0>
 800bd98:	4620      	mov	r0, r4
 800bd9a:	b001      	add	sp, #4
 800bd9c:	bc70      	pop	{r4, r5, r6}
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f001 b84b 	b.w	800ce3a <__aeabi_memset>
 800bda4:	b001      	add	sp, #4
 800bda6:	bc70      	pop	{r4, r5, r6}
 800bda8:	4770      	bx	lr
	...

0800bdac <st_int8_copy>:
 800bdac:	4603      	mov	r3, r0
 800bdae:	428b      	cmp	r3, r1
 800bdb0:	d100      	bne.n	800bdb4 <st_int8_copy+0x8>
 800bdb2:	4770      	bx	lr
 800bdb4:	b4f0      	push	{r4, r5, r6, r7}
 800bdb6:	2a00      	cmp	r2, #0
 800bdb8:	d070      	beq.n	800be9c <st_int8_copy+0xf0>
 800bdba:	189c      	adds	r4, r3, r2
 800bdbc:	428b      	cmp	r3, r1
 800bdbe:	bf38      	it	cc
 800bdc0:	42a1      	cmpcc	r1, r4
 800bdc2:	d222      	bcs.n	800be0a <st_int8_copy+0x5e>
 800bdc4:	1888      	adds	r0, r1, r2
 800bdc6:	42a3      	cmp	r3, r4
 800bdc8:	f080 8068 	bcs.w	800be9c <st_int8_copy+0xf0>
 800bdcc:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 800bdd0:	f800 1c01 	strb.w	r1, [r0, #-1]
 800bdd4:	42a3      	cmp	r3, r4
 800bdd6:	bf3e      	ittt	cc
 800bdd8:	f814 1d01 	ldrbcc.w	r1, [r4, #-1]!
 800bddc:	f800 1c02 	strbcc.w	r1, [r0, #-2]
 800bde0:	42a3      	cmpcc	r3, r4
 800bde2:	bf3e      	ittt	cc
 800bde4:	f814 1d01 	ldrbcc.w	r1, [r4, #-1]!
 800bde8:	f800 1c03 	strbcc.w	r1, [r0, #-3]
 800bdec:	42a3      	cmpcc	r3, r4
 800bdee:	d255      	bcs.n	800be9c <st_int8_copy+0xf0>
 800bdf0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 800bdf4:	f800 1d04 	strb.w	r1, [r0, #-4]!
 800bdf8:	42a3      	cmp	r3, r4
 800bdfa:	d3e7      	bcc.n	800bdcc <st_int8_copy+0x20>
 800bdfc:	bcf0      	pop	{r4, r5, r6, r7}
 800bdfe:	4770      	bx	lr
 800be00:	f813 4b01 	ldrb.w	r4, [r3], #1
 800be04:	f801 4b01 	strb.w	r4, [r1], #1
 800be08:	1e52      	subs	r2, r2, #1
 800be0a:	f011 0003 	ands.w	r0, r1, #3
 800be0e:	bf18      	it	ne
 800be10:	2a00      	cmpne	r2, #0
 800be12:	d1f5      	bne.n	800be00 <st_int8_copy+0x54>
 800be14:	0910      	lsrs	r0, r2, #4
 800be16:	d02c      	beq.n	800be72 <st_int8_copy+0xc6>
 800be18:	07c4      	lsls	r4, r0, #31
 800be1a:	d50c      	bpl.n	800be36 <st_int8_copy+0x8a>
 800be1c:	681c      	ldr	r4, [r3, #0]
 800be1e:	685d      	ldr	r5, [r3, #4]
 800be20:	689e      	ldr	r6, [r3, #8]
 800be22:	68df      	ldr	r7, [r3, #12]
 800be24:	f841 4b04 	str.w	r4, [r1], #4
 800be28:	f841 5b04 	str.w	r5, [r1], #4
 800be2c:	f841 6b04 	str.w	r6, [r1], #4
 800be30:	3310      	adds	r3, #16
 800be32:	f841 7b04 	str.w	r7, [r1], #4
 800be36:	0840      	lsrs	r0, r0, #1
 800be38:	d01b      	beq.n	800be72 <st_int8_copy+0xc6>
 800be3a:	681d      	ldr	r5, [r3, #0]
 800be3c:	685f      	ldr	r7, [r3, #4]
 800be3e:	689e      	ldr	r6, [r3, #8]
 800be40:	68dc      	ldr	r4, [r3, #12]
 800be42:	f841 5b04 	str.w	r5, [r1], #4
 800be46:	f841 7b04 	str.w	r7, [r1], #4
 800be4a:	f841 6b04 	str.w	r6, [r1], #4
 800be4e:	f841 4b04 	str.w	r4, [r1], #4
 800be52:	f853 4f10 	ldr.w	r4, [r3, #16]!
 800be56:	685f      	ldr	r7, [r3, #4]
 800be58:	689d      	ldr	r5, [r3, #8]
 800be5a:	68de      	ldr	r6, [r3, #12]
 800be5c:	f841 4b04 	str.w	r4, [r1], #4
 800be60:	3310      	adds	r3, #16
 800be62:	f841 7b04 	str.w	r7, [r1], #4
 800be66:	f841 5b04 	str.w	r5, [r1], #4
 800be6a:	1e40      	subs	r0, r0, #1
 800be6c:	f841 6b04 	str.w	r6, [r1], #4
 800be70:	d1e3      	bne.n	800be3a <st_int8_copy+0x8e>
 800be72:	f3c2 0081 	ubfx	r0, r2, #2, #2
 800be76:	b128      	cbz	r0, 800be84 <st_int8_copy+0xd8>
 800be78:	f853 4b04 	ldr.w	r4, [r3], #4
 800be7c:	f841 4b04 	str.w	r4, [r1], #4
 800be80:	1e40      	subs	r0, r0, #1
 800be82:	d1f9      	bne.n	800be78 <st_int8_copy+0xcc>
 800be84:	f012 0f03 	tst.w	r2, #3
 800be88:	f000 8008 	beq.w	800be9c <st_int8_copy+0xf0>
 800be8c:	f002 0203 	and.w	r2, r2, #3
 800be90:	f813 0b01 	ldrb.w	r0, [r3], #1
 800be94:	f801 0b01 	strb.w	r0, [r1], #1
 800be98:	1e52      	subs	r2, r2, #1
 800be9a:	d1f9      	bne.n	800be90 <st_int8_copy+0xe4>
 800be9c:	bcf0      	pop	{r4, r5, r6, r7}
 800be9e:	4770      	bx	lr

0800bea0 <ai_array_fmt_name>:
 800bea0:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
 800bea4:	f1b0 0140 	subs.w	r1, r0, #64	@ 0x40
 800bea8:	d071      	beq.n	800bf8e <ai_array_fmt_name+0xee>
 800beaa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800beae:	1a89      	subs	r1, r1, r2
 800beb0:	f000 80a9 	beq.w	800c006 <ai_array_fmt_name+0x166>
 800beb4:	3980      	subs	r1, #128	@ 0x80
 800beb6:	f000 8082 	beq.w	800bfbe <ai_array_fmt_name+0x11e>
 800beba:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800bebe:	1a89      	subs	r1, r1, r2
 800bec0:	f000 8080 	beq.w	800bfc4 <ai_array_fmt_name+0x124>
 800bec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bec8:	1a89      	subs	r1, r1, r2
 800beca:	d06c      	beq.n	800bfa6 <ai_array_fmt_name+0x106>
 800becc:	1fc9      	subs	r1, r1, #7
 800bece:	f000 809d 	beq.w	800c00c <ai_array_fmt_name+0x16c>
 800bed2:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 800bed6:	1a89      	subs	r1, r1, r2
 800bed8:	d068      	beq.n	800bfac <ai_array_fmt_name+0x10c>
 800beda:	390f      	subs	r1, #15
 800bedc:	f000 8099 	beq.w	800c012 <ai_array_fmt_name+0x172>
 800bee0:	f240 72f1 	movw	r2, #2033	@ 0x7f1
 800bee4:	1a89      	subs	r1, r1, r2
 800bee6:	d064      	beq.n	800bfb2 <ai_array_fmt_name+0x112>
 800bee8:	391f      	subs	r1, #31
 800beea:	f000 8095 	beq.w	800c018 <ai_array_fmt_name+0x178>
 800beee:	f640 72e1 	movw	r2, #4065	@ 0xfe1
 800bef2:	1a89      	subs	r1, r1, r2
 800bef4:	d060      	beq.n	800bfb8 <ai_array_fmt_name+0x118>
 800bef6:	f44f 32f2 	mov.w	r2, #123904	@ 0x1e400
 800befa:	1a89      	subs	r1, r1, r2
 800befc:	f000 80a1 	beq.w	800c042 <ai_array_fmt_name+0x1a2>
 800bf00:	f8df 26f0 	ldr.w	r2, [pc, #1776]	@ 800c5f4 <.text_15>
 800bf04:	1a89      	subs	r1, r1, r2
 800bf06:	f000 8099 	beq.w	800c03c <ai_array_fmt_name+0x19c>
 800bf0a:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 800bf0e:	1a89      	subs	r1, r1, r2
 800bf10:	f000 8091 	beq.w	800c036 <ai_array_fmt_name+0x196>
 800bf14:	f8df 26e0 	ldr.w	r2, [pc, #1760]	@ 800c5f8 <.text_16>
 800bf18:	1a89      	subs	r1, r1, r2
 800bf1a:	d068      	beq.n	800bfee <ai_array_fmt_name+0x14e>
 800bf1c:	3980      	subs	r1, #128	@ 0x80
 800bf1e:	d060      	beq.n	800bfe2 <ai_array_fmt_name+0x142>
 800bf20:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800bf24:	1a89      	subs	r1, r1, r2
 800bf26:	d05f      	beq.n	800bfe8 <ai_array_fmt_name+0x148>
 800bf28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf2c:	1a89      	subs	r1, r1, r2
 800bf2e:	d04c      	beq.n	800bfca <ai_array_fmt_name+0x12a>
 800bf30:	1fc9      	subs	r1, r1, #7
 800bf32:	d05f      	beq.n	800bff4 <ai_array_fmt_name+0x154>
 800bf34:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 800bf38:	1a89      	subs	r1, r1, r2
 800bf3a:	d049      	beq.n	800bfd0 <ai_array_fmt_name+0x130>
 800bf3c:	390f      	subs	r1, #15
 800bf3e:	d05c      	beq.n	800bffa <ai_array_fmt_name+0x15a>
 800bf40:	f240 72f1 	movw	r2, #2033	@ 0x7f1
 800bf44:	1a89      	subs	r1, r1, r2
 800bf46:	d046      	beq.n	800bfd6 <ai_array_fmt_name+0x136>
 800bf48:	391f      	subs	r1, #31
 800bf4a:	d059      	beq.n	800c000 <ai_array_fmt_name+0x160>
 800bf4c:	f640 72e1 	movw	r2, #4065	@ 0xfe1
 800bf50:	1a89      	subs	r1, r1, r2
 800bf52:	d043      	beq.n	800bfdc <ai_array_fmt_name+0x13c>
 800bf54:	f8df 26a4 	ldr.w	r2, [pc, #1700]	@ 800c5fc <.text_17>
 800bf58:	1a89      	subs	r1, r1, r2
 800bf5a:	d069      	beq.n	800c030 <ai_array_fmt_name+0x190>
 800bf5c:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 800bf60:	1a89      	subs	r1, r1, r2
 800bf62:	d062      	beq.n	800c02a <ai_array_fmt_name+0x18a>
 800bf64:	f8df 2698 	ldr.w	r2, [pc, #1688]	@ 800c600 <.text_18>
 800bf68:	1a89      	subs	r1, r1, r2
 800bf6a:	d019      	beq.n	800bfa0 <ai_array_fmt_name+0x100>
 800bf6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf70:	1a89      	subs	r1, r1, r2
 800bf72:	d00f      	beq.n	800bf94 <ai_array_fmt_name+0xf4>
 800bf74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800bf78:	1a89      	subs	r1, r1, r2
 800bf7a:	d00e      	beq.n	800bf9a <ai_array_fmt_name+0xfa>
 800bf7c:	f8df 2684 	ldr.w	r2, [pc, #1668]	@ 800c604 <.text_19>
 800bf80:	1a89      	subs	r1, r1, r2
 800bf82:	d04f      	beq.n	800c024 <ai_array_fmt_name+0x184>
 800bf84:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 800bf88:	1a89      	subs	r1, r1, r2
 800bf8a:	d048      	beq.n	800c01e <ai_array_fmt_name+0x17e>
 800bf8c:	e05c      	b.n	800c048 <ai_array_fmt_name+0x1a8>
 800bf8e:	f20f 7074 	addw	r0, pc, #1908	@ 0x774
 800bf92:	4770      	bx	lr
 800bf94:	f20f 7078 	addw	r0, pc, #1912	@ 0x778
 800bf98:	4770      	bx	lr
 800bf9a:	f20f 7080 	addw	r0, pc, #1920	@ 0x780
 800bf9e:	4770      	bx	lr
 800bfa0:	f20f 7084 	addw	r0, pc, #1924	@ 0x784
 800bfa4:	4770      	bx	lr
 800bfa6:	f20f 708c 	addw	r0, pc, #1932	@ 0x78c
 800bfaa:	4770      	bx	lr
 800bfac:	f20f 708c 	addw	r0, pc, #1932	@ 0x78c
 800bfb0:	4770      	bx	lr
 800bfb2:	f20f 7090 	addw	r0, pc, #1936	@ 0x790
 800bfb6:	4770      	bx	lr
 800bfb8:	f20f 7090 	addw	r0, pc, #1936	@ 0x790
 800bfbc:	4770      	bx	lr
 800bfbe:	f20f 7094 	addw	r0, pc, #1940	@ 0x794
 800bfc2:	4770      	bx	lr
 800bfc4:	f20f 7094 	addw	r0, pc, #1940	@ 0x794
 800bfc8:	4770      	bx	lr
 800bfca:	f20f 7098 	addw	r0, pc, #1944	@ 0x798
 800bfce:	4770      	bx	lr
 800bfd0:	f20f 7098 	addw	r0, pc, #1944	@ 0x798
 800bfd4:	4770      	bx	lr
 800bfd6:	f20f 709c 	addw	r0, pc, #1948	@ 0x79c
 800bfda:	4770      	bx	lr
 800bfdc:	f20f 709c 	addw	r0, pc, #1948	@ 0x79c
 800bfe0:	4770      	bx	lr
 800bfe2:	f20f 70a0 	addw	r0, pc, #1952	@ 0x7a0
 800bfe6:	4770      	bx	lr
 800bfe8:	f20f 70a0 	addw	r0, pc, #1952	@ 0x7a0
 800bfec:	4770      	bx	lr
 800bfee:	f20f 70a4 	addw	r0, pc, #1956	@ 0x7a4
 800bff2:	4770      	bx	lr
 800bff4:	f20f 70a4 	addw	r0, pc, #1956	@ 0x7a4
 800bff8:	4770      	bx	lr
 800bffa:	f20f 70a8 	addw	r0, pc, #1960	@ 0x7a8
 800bffe:	4770      	bx	lr
 800c000:	f20f 70a8 	addw	r0, pc, #1960	@ 0x7a8
 800c004:	4770      	bx	lr
 800c006:	f20f 70ac 	addw	r0, pc, #1964	@ 0x7ac
 800c00a:	4770      	bx	lr
 800c00c:	f20f 70ac 	addw	r0, pc, #1964	@ 0x7ac
 800c010:	4770      	bx	lr
 800c012:	f20f 70b0 	addw	r0, pc, #1968	@ 0x7b0
 800c016:	4770      	bx	lr
 800c018:	f20f 70b4 	addw	r0, pc, #1972	@ 0x7b4
 800c01c:	4770      	bx	lr
 800c01e:	f20f 70bc 	addw	r0, pc, #1980	@ 0x7bc
 800c022:	4770      	bx	lr
 800c024:	f20f 70c4 	addw	r0, pc, #1988	@ 0x7c4
 800c028:	4770      	bx	lr
 800c02a:	f20f 70d0 	addw	r0, pc, #2000	@ 0x7d0
 800c02e:	4770      	bx	lr
 800c030:	f20f 70d8 	addw	r0, pc, #2008	@ 0x7d8
 800c034:	4770      	bx	lr
 800c036:	f20f 70e4 	addw	r0, pc, #2020	@ 0x7e4
 800c03a:	4770      	bx	lr
 800c03c:	f20f 70ec 	addw	r0, pc, #2028	@ 0x7ec
 800c040:	4770      	bx	lr
 800c042:	f20f 70f8 	addw	r0, pc, #2040	@ 0x7f8
 800c046:	4770      	bx	lr
 800c048:	f36f 0010 	bfc	r0, #0, #17
 800c04c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800c050:	2840      	cmp	r0, #64	@ 0x40
 800c052:	d009      	beq.n	800c068 <ai_array_fmt_name+0x1c8>
 800c054:	f8df 15b0 	ldr.w	r1, [pc, #1456]	@ 800c608 <.text_20>
 800c058:	4288      	cmp	r0, r1
 800c05a:	d00b      	beq.n	800c074 <ai_array_fmt_name+0x1d4>
 800c05c:	f8df 15ac 	ldr.w	r1, [pc, #1452]	@ 800c60c <.text_21>
 800c060:	4288      	cmp	r0, r1
 800c062:	d004      	beq.n	800c06e <ai_array_fmt_name+0x1ce>
 800c064:	a086      	add	r0, pc, #536	@ (adr r0, 800c280 <.text_8>)
 800c066:	4770      	bx	lr
 800c068:	f20f 70dc 	addw	r0, pc, #2012	@ 0x7dc
 800c06c:	4770      	bx	lr
 800c06e:	f20f 70f0 	addw	r0, pc, #2032	@ 0x7f0
 800c072:	4770      	bx	lr
 800c074:	f20f 70fc 	addw	r0, pc, #2044	@ 0x7fc
 800c078:	4770      	bx	lr

0800c07a <ai_array_fmt_exported>:
 800c07a:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
 800c07e:	f1b0 0140 	subs.w	r1, r0, #64	@ 0x40
 800c082:	d074      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c084:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800c088:	1a89      	subs	r1, r1, r2
 800c08a:	d070      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c08c:	3980      	subs	r1, #128	@ 0x80
 800c08e:	d06e      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c090:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800c094:	1a89      	subs	r1, r1, r2
 800c096:	d06c      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c098:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c09c:	1a89      	subs	r1, r1, r2
 800c09e:	d066      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c0a0:	1fc9      	subs	r1, r1, #7
 800c0a2:	d064      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c0a4:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 800c0a8:	1a89      	subs	r1, r1, r2
 800c0aa:	d060      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c0ac:	390f      	subs	r1, #15
 800c0ae:	d05e      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c0b0:	f240 72f1 	movw	r2, #2033	@ 0x7f1
 800c0b4:	1a89      	subs	r1, r1, r2
 800c0b6:	d05a      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c0b8:	391f      	subs	r1, #31
 800c0ba:	d05a      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c0bc:	f640 72e1 	movw	r2, #4065	@ 0xfe1
 800c0c0:	1a89      	subs	r1, r1, r2
 800c0c2:	d056      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c0c4:	f44f 32f2 	mov.w	r2, #123904	@ 0x1e400
 800c0c8:	1a89      	subs	r1, r1, r2
 800c0ca:	d050      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c0cc:	f8df 2524 	ldr.w	r2, [pc, #1316]	@ 800c5f4 <.text_15>
 800c0d0:	1a89      	subs	r1, r1, r2
 800c0d2:	d04e      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c0d4:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 800c0d8:	1a89      	subs	r1, r1, r2
 800c0da:	d04a      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c0dc:	f8df 2518 	ldr.w	r2, [pc, #1304]	@ 800c5f8 <.text_16>
 800c0e0:	1a89      	subs	r1, r1, r2
 800c0e2:	d044      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c0e4:	3980      	subs	r1, #128	@ 0x80
 800c0e6:	d042      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c0e8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800c0ec:	1a89      	subs	r1, r1, r2
 800c0ee:	d040      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c0f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c0f4:	1a89      	subs	r1, r1, r2
 800c0f6:	d03a      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c0f8:	1fc9      	subs	r1, r1, #7
 800c0fa:	d038      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c0fc:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 800c100:	1a89      	subs	r1, r1, r2
 800c102:	d034      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c104:	390f      	subs	r1, #15
 800c106:	d032      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c108:	f240 72f1 	movw	r2, #2033	@ 0x7f1
 800c10c:	1a89      	subs	r1, r1, r2
 800c10e:	d02e      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c110:	391f      	subs	r1, #31
 800c112:	d02e      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c114:	f640 72e1 	movw	r2, #4065	@ 0xfe1
 800c118:	1a89      	subs	r1, r1, r2
 800c11a:	d02a      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c11c:	f8df 24dc 	ldr.w	r2, [pc, #1244]	@ 800c5fc <.text_17>
 800c120:	1a89      	subs	r1, r1, r2
 800c122:	d026      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c124:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 800c128:	1a89      	subs	r1, r1, r2
 800c12a:	d022      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c12c:	f8df 24d0 	ldr.w	r2, [pc, #1232]	@ 800c600 <.text_18>
 800c130:	1a89      	subs	r1, r1, r2
 800c132:	d01e      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c134:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c138:	1a89      	subs	r1, r1, r2
 800c13a:	d018      	beq.n	800c16e <ai_array_fmt_exported+0xf4>
 800c13c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c140:	1a89      	subs	r1, r1, r2
 800c142:	d016      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c144:	f8df 24bc 	ldr.w	r2, [pc, #1212]	@ 800c604 <.text_19>
 800c148:	1a89      	subs	r1, r1, r2
 800c14a:	d012      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c14c:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 800c150:	1a89      	subs	r1, r1, r2
 800c152:	d00e      	beq.n	800c172 <ai_array_fmt_exported+0xf8>
 800c154:	f36f 0010 	bfc	r0, #0, #17
 800c158:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800c15c:	2840      	cmp	r0, #64	@ 0x40
 800c15e:	bf1f      	itttt	ne
 800c160:	f8df 34a4 	ldrne.w	r3, [pc, #1188]	@ 800c608 <.text_20>
 800c164:	4298      	cmpne	r0, r3
 800c166:	f8df 34a4 	ldrne.w	r3, [pc, #1188]	@ 800c60c <.text_21>
 800c16a:	4298      	cmpne	r0, r3
 800c16c:	d101      	bne.n	800c172 <ai_array_fmt_exported+0xf8>
 800c16e:	2001      	movs	r0, #1
 800c170:	4770      	bx	lr
 800c172:	2000      	movs	r0, #0
 800c174:	4770      	bx	lr

0800c176 <ai_array_fmt_valid>:
 800c176:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
 800c17a:	f1b0 0140 	subs.w	r1, r0, #64	@ 0x40
 800c17e:	d075      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c180:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800c184:	1a89      	subs	r1, r1, r2
 800c186:	d071      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c188:	3980      	subs	r1, #128	@ 0x80
 800c18a:	d06f      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c18c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800c190:	1a89      	subs	r1, r1, r2
 800c192:	d06b      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c198:	1a89      	subs	r1, r1, r2
 800c19a:	d067      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c19c:	1fc9      	subs	r1, r1, #7
 800c19e:	d065      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1a0:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 800c1a4:	1a89      	subs	r1, r1, r2
 800c1a6:	d061      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1a8:	390f      	subs	r1, #15
 800c1aa:	d05f      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1ac:	f240 72f1 	movw	r2, #2033	@ 0x7f1
 800c1b0:	1a89      	subs	r1, r1, r2
 800c1b2:	d05b      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1b4:	391f      	subs	r1, #31
 800c1b6:	d059      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1b8:	f640 72e1 	movw	r2, #4065	@ 0xfe1
 800c1bc:	1a89      	subs	r1, r1, r2
 800c1be:	d055      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1c0:	f44f 32f2 	mov.w	r2, #123904	@ 0x1e400
 800c1c4:	1a89      	subs	r1, r1, r2
 800c1c6:	d051      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1c8:	f8df 2428 	ldr.w	r2, [pc, #1064]	@ 800c5f4 <.text_15>
 800c1cc:	1a89      	subs	r1, r1, r2
 800c1ce:	d04d      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1d0:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 800c1d4:	1a89      	subs	r1, r1, r2
 800c1d6:	d049      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1d8:	f8df 241c 	ldr.w	r2, [pc, #1052]	@ 800c5f8 <.text_16>
 800c1dc:	1a89      	subs	r1, r1, r2
 800c1de:	d045      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1e0:	3980      	subs	r1, #128	@ 0x80
 800c1e2:	d043      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1e4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800c1e8:	1a89      	subs	r1, r1, r2
 800c1ea:	d03f      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c1f0:	1a89      	subs	r1, r1, r2
 800c1f2:	d03b      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1f4:	1fc9      	subs	r1, r1, #7
 800c1f6:	d039      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c1f8:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 800c1fc:	1a89      	subs	r1, r1, r2
 800c1fe:	d035      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c200:	390f      	subs	r1, #15
 800c202:	d033      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c204:	f240 72f1 	movw	r2, #2033	@ 0x7f1
 800c208:	1a89      	subs	r1, r1, r2
 800c20a:	d02f      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c20c:	391f      	subs	r1, #31
 800c20e:	d02d      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c210:	f640 72e1 	movw	r2, #4065	@ 0xfe1
 800c214:	1a89      	subs	r1, r1, r2
 800c216:	d029      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c218:	f8df 23e0 	ldr.w	r2, [pc, #992]	@ 800c5fc <.text_17>
 800c21c:	1a89      	subs	r1, r1, r2
 800c21e:	d025      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c220:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 800c224:	1a89      	subs	r1, r1, r2
 800c226:	d021      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c228:	f8df 23d4 	ldr.w	r2, [pc, #980]	@ 800c600 <.text_18>
 800c22c:	1a89      	subs	r1, r1, r2
 800c22e:	d01d      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c230:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c234:	1a89      	subs	r1, r1, r2
 800c236:	d019      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c238:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c23c:	1a89      	subs	r1, r1, r2
 800c23e:	d015      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c240:	f8df 23c0 	ldr.w	r2, [pc, #960]	@ 800c604 <.text_19>
 800c244:	1a89      	subs	r1, r1, r2
 800c246:	d011      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c248:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 800c24c:	1a89      	subs	r1, r1, r2
 800c24e:	bf1e      	ittt	ne
 800c250:	f36f 0010 	bfcne	r0, #0, #17
 800c254:	f040 0040 	orrne.w	r0, r0, #64	@ 0x40
 800c258:	2840      	cmpne	r0, #64	@ 0x40
 800c25a:	d007      	beq.n	800c26c <ai_array_fmt_valid+0xf6>
 800c25c:	f8df 33a8 	ldr.w	r3, [pc, #936]	@ 800c608 <.text_20>
 800c260:	4298      	cmp	r0, r3
 800c262:	bf1c      	itt	ne
 800c264:	f8df 33a4 	ldrne.w	r3, [pc, #932]	@ 800c60c <.text_21>
 800c268:	4298      	cmpne	r0, r3
 800c26a:	d101      	bne.n	800c270 <ai_array_fmt_valid+0xfa>
 800c26c:	2001      	movs	r0, #1
 800c26e:	4770      	bx	lr
 800c270:	2000      	movs	r0, #0
 800c272:	4770      	bx	lr

0800c274 <ai_array_fmt_get_formats>:
 800c274:	f8df 1398 	ldr.w	r1, [pc, #920]	@ 800c610 <.text_22>
 800c278:	6001      	str	r1, [r0, #0]
 800c27a:	201f      	movs	r0, #31
 800c27c:	4770      	bx	lr
	...

0800c280 <.text_8>:
 800c280:	00000000 	.word	0x00000000

0800c284 <ai_buffer_fmt_name>:
 800c284:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
 800c288:	f1b0 0140 	subs.w	r1, r0, #64	@ 0x40
 800c28c:	d034      	beq.n	800c2f8 <ai_buffer_fmt_name+0x74>
 800c28e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800c292:	1a89      	subs	r1, r1, r2
 800c294:	d057      	beq.n	800c346 <ai_buffer_fmt_name+0xc2>
 800c296:	3980      	subs	r1, #128	@ 0x80
 800c298:	d03d      	beq.n	800c316 <ai_buffer_fmt_name+0x92>
 800c29a:	f44f 7260 	mov.w	r2, #896	@ 0x380
 800c29e:	1a89      	subs	r1, r1, r2
 800c2a0:	d030      	beq.n	800c304 <ai_buffer_fmt_name+0x80>
 800c2a2:	1fc9      	subs	r1, r1, #7
 800c2a4:	d052      	beq.n	800c34c <ai_buffer_fmt_name+0xc8>
 800c2a6:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 800c2aa:	1a89      	subs	r1, r1, r2
 800c2ac:	d02d      	beq.n	800c30a <ai_buffer_fmt_name+0x86>
 800c2ae:	390f      	subs	r1, #15
 800c2b0:	d04f      	beq.n	800c352 <ai_buffer_fmt_name+0xce>
 800c2b2:	f240 72f1 	movw	r2, #2033	@ 0x7f1
 800c2b6:	1a89      	subs	r1, r1, r2
 800c2b8:	d02a      	beq.n	800c310 <ai_buffer_fmt_name+0x8c>
 800c2ba:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 800c2be:	1a89      	subs	r1, r1, r2
 800c2c0:	d04a      	beq.n	800c358 <ai_buffer_fmt_name+0xd4>
 800c2c2:	f8df 2350 	ldr.w	r2, [pc, #848]	@ 800c614 <.text_23>
 800c2c6:	1a89      	subs	r1, r1, r2
 800c2c8:	d034      	beq.n	800c334 <ai_buffer_fmt_name+0xb0>
 800c2ca:	3980      	subs	r1, #128	@ 0x80
 800c2cc:	d02f      	beq.n	800c32e <ai_buffer_fmt_name+0xaa>
 800c2ce:	f44f 7260 	mov.w	r2, #896	@ 0x380
 800c2d2:	1a89      	subs	r1, r1, r2
 800c2d4:	d022      	beq.n	800c31c <ai_buffer_fmt_name+0x98>
 800c2d6:	1fc9      	subs	r1, r1, #7
 800c2d8:	d02f      	beq.n	800c33a <ai_buffer_fmt_name+0xb6>
 800c2da:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 800c2de:	1a89      	subs	r1, r1, r2
 800c2e0:	d01f      	beq.n	800c322 <ai_buffer_fmt_name+0x9e>
 800c2e2:	390f      	subs	r1, #15
 800c2e4:	d02c      	beq.n	800c340 <ai_buffer_fmt_name+0xbc>
 800c2e6:	f240 72f1 	movw	r2, #2033	@ 0x7f1
 800c2ea:	1a89      	subs	r1, r1, r2
 800c2ec:	d01c      	beq.n	800c328 <ai_buffer_fmt_name+0xa4>
 800c2ee:	f44f 027e 	mov.w	r2, #16646144	@ 0xfe0000
 800c2f2:	1a89      	subs	r1, r1, r2
 800c2f4:	d003      	beq.n	800c2fe <ai_buffer_fmt_name+0x7a>
 800c2f6:	e032      	b.n	800c35e <ai_buffer_fmt_name+0xda>
 800c2f8:	f20f 4008 	addw	r0, pc, #1032	@ 0x408
 800c2fc:	4770      	bx	lr
 800c2fe:	f20f 4010 	addw	r0, pc, #1040	@ 0x410
 800c302:	4770      	bx	lr
 800c304:	f20f 402c 	addw	r0, pc, #1068	@ 0x42c
 800c308:	4770      	bx	lr
 800c30a:	f20f 4030 	addw	r0, pc, #1072	@ 0x430
 800c30e:	4770      	bx	lr
 800c310:	f20f 4030 	addw	r0, pc, #1072	@ 0x430
 800c314:	4770      	bx	lr
 800c316:	f20f 403c 	addw	r0, pc, #1084	@ 0x43c
 800c31a:	4770      	bx	lr
 800c31c:	f20f 4044 	addw	r0, pc, #1092	@ 0x444
 800c320:	4770      	bx	lr
 800c322:	f20f 4048 	addw	r0, pc, #1096	@ 0x448
 800c326:	4770      	bx	lr
 800c328:	f20f 4048 	addw	r0, pc, #1096	@ 0x448
 800c32c:	4770      	bx	lr
 800c32e:	f20f 4054 	addw	r0, pc, #1108	@ 0x454
 800c332:	4770      	bx	lr
 800c334:	f20f 405c 	addw	r0, pc, #1116	@ 0x45c
 800c338:	4770      	bx	lr
 800c33a:	f20f 4060 	addw	r0, pc, #1120	@ 0x460
 800c33e:	4770      	bx	lr
 800c340:	f20f 4060 	addw	r0, pc, #1120	@ 0x460
 800c344:	4770      	bx	lr
 800c346:	f20f 406c 	addw	r0, pc, #1132	@ 0x46c
 800c34a:	4770      	bx	lr
 800c34c:	f20f 406c 	addw	r0, pc, #1132	@ 0x46c
 800c350:	4770      	bx	lr
 800c352:	f20f 4070 	addw	r0, pc, #1136	@ 0x470
 800c356:	4770      	bx	lr
 800c358:	f20f 40e0 	addw	r0, pc, #1248	@ 0x4e0
 800c35c:	4770      	bx	lr
 800c35e:	0b80      	lsrs	r0, r0, #14
 800c360:	0380      	lsls	r0, r0, #14
 800c362:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800c366:	2840      	cmp	r0, #64	@ 0x40
 800c368:	d009      	beq.n	800c37e <ai_buffer_fmt_name+0xfa>
 800c36a:	f8df 129c 	ldr.w	r1, [pc, #668]	@ 800c608 <.text_20>
 800c36e:	4288      	cmp	r0, r1
 800c370:	d00b      	beq.n	800c38a <ai_buffer_fmt_name+0x106>
 800c372:	f8df 1298 	ldr.w	r1, [pc, #664]	@ 800c60c <.text_21>
 800c376:	4288      	cmp	r0, r1
 800c378:	d004      	beq.n	800c384 <ai_buffer_fmt_name+0x100>
 800c37a:	a064      	add	r0, pc, #400	@ (adr r0, 800c50c <.text_13>)
 800c37c:	4770      	bx	lr
 800c37e:	f20f 5008 	addw	r0, pc, #1288	@ 0x508
 800c382:	4770      	bx	lr
 800c384:	f20f 5018 	addw	r0, pc, #1304	@ 0x518
 800c388:	4770      	bx	lr
 800c38a:	f20f 5028 	addw	r0, pc, #1320	@ 0x528
 800c38e:	4770      	bx	lr

0800c390 <ai_buffer_fmt_valid>:
 800c390:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
 800c394:	f1b0 0140 	subs.w	r1, r0, #64	@ 0x40
 800c398:	d03e      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c39a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800c39e:	1a89      	subs	r1, r1, r2
 800c3a0:	d03a      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3a2:	3980      	subs	r1, #128	@ 0x80
 800c3a4:	d038      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3a6:	f44f 7260 	mov.w	r2, #896	@ 0x380
 800c3aa:	1a89      	subs	r1, r1, r2
 800c3ac:	d034      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3ae:	1fc9      	subs	r1, r1, #7
 800c3b0:	d032      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3b2:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 800c3b6:	1a89      	subs	r1, r1, r2
 800c3b8:	d02e      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3ba:	390f      	subs	r1, #15
 800c3bc:	d02c      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3be:	f240 72f1 	movw	r2, #2033	@ 0x7f1
 800c3c2:	1a89      	subs	r1, r1, r2
 800c3c4:	d028      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3c6:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 800c3ca:	1a89      	subs	r1, r1, r2
 800c3cc:	d024      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3ce:	4a91      	ldr	r2, [pc, #580]	@ (800c614 <.text_23>)
 800c3d0:	1a89      	subs	r1, r1, r2
 800c3d2:	d021      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3d4:	3980      	subs	r1, #128	@ 0x80
 800c3d6:	d01f      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3d8:	f44f 7260 	mov.w	r2, #896	@ 0x380
 800c3dc:	1a89      	subs	r1, r1, r2
 800c3de:	d01b      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3e0:	1fc9      	subs	r1, r1, #7
 800c3e2:	d019      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3e4:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 800c3e8:	1a89      	subs	r1, r1, r2
 800c3ea:	d015      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3ec:	390f      	subs	r1, #15
 800c3ee:	d013      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3f0:	f240 72f1 	movw	r2, #2033	@ 0x7f1
 800c3f4:	1a89      	subs	r1, r1, r2
 800c3f6:	d00f      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c3f8:	f44f 027e 	mov.w	r2, #16646144	@ 0xfe0000
 800c3fc:	1a89      	subs	r1, r1, r2
 800c3fe:	bf1f      	itttt	ne
 800c400:	0b80      	lsrne	r0, r0, #14
 800c402:	0380      	lslne	r0, r0, #14
 800c404:	f040 0040 	orrne.w	r0, r0, #64	@ 0x40
 800c408:	2840      	cmpne	r0, #64	@ 0x40
 800c40a:	d005      	beq.n	800c418 <ai_buffer_fmt_valid+0x88>
 800c40c:	4b7e      	ldr	r3, [pc, #504]	@ (800c608 <.text_20>)
 800c40e:	4298      	cmp	r0, r3
 800c410:	bf1c      	itt	ne
 800c412:	4b7e      	ldrne	r3, [pc, #504]	@ (800c60c <.text_21>)
 800c414:	4298      	cmpne	r0, r3
 800c416:	d101      	bne.n	800c41c <ai_buffer_fmt_valid+0x8c>
 800c418:	2001      	movs	r0, #1
 800c41a:	4770      	bx	lr
 800c41c:	2000      	movs	r0, #0
 800c41e:	4770      	bx	lr

0800c420 <ai_buffer_fmt_get_formats>:
 800c420:	497d      	ldr	r1, [pc, #500]	@ (800c618 <.text_24>)
 800c422:	6001      	str	r1, [r0, #0]
 800c424:	2011      	movs	r0, #17
 800c426:	4770      	bx	lr

0800c428 <ai_array_to_buffer_fmt>:
 800c428:	4601      	mov	r1, r0
 800c42a:	2040      	movs	r0, #64	@ 0x40
 800c42c:	f3c1 4243 	ubfx	r2, r1, #17, #4
 800c430:	2a02      	cmp	r2, #2
 800c432:	d104      	bne.n	800c43e <ai_array_to_buffer_fmt+0x16>
 800c434:	4879      	ldr	r0, [pc, #484]	@ (800c61c <.text_25>)
 800c436:	4008      	ands	r0, r1
 800c438:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800c43c:	e052      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c43e:	f021 427e 	bic.w	r2, r1, #4261412864	@ 0xfe000000
 800c442:	4b71      	ldr	r3, [pc, #452]	@ (800c608 <.text_20>)
 800c444:	1ad2      	subs	r2, r2, r3
 800c446:	d046      	beq.n	800c4d6 <ai_array_to_buffer_fmt+0xae>
 800c448:	3a80      	subs	r2, #128	@ 0x80
 800c44a:	d034      	beq.n	800c4b6 <ai_array_to_buffer_fmt+0x8e>
 800c44c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800c450:	1ad2      	subs	r2, r2, r3
 800c452:	d02a      	beq.n	800c4aa <ai_array_to_buffer_fmt+0x82>
 800c454:	1fd2      	subs	r2, r2, #7
 800c456:	d040      	beq.n	800c4da <ai_array_to_buffer_fmt+0xb2>
 800c458:	f240 33f9 	movw	r3, #1017	@ 0x3f9
 800c45c:	1ad2      	subs	r2, r2, r3
 800c45e:	d026      	beq.n	800c4ae <ai_array_to_buffer_fmt+0x86>
 800c460:	3a0f      	subs	r2, #15
 800c462:	d03c      	beq.n	800c4de <ai_array_to_buffer_fmt+0xb6>
 800c464:	f240 73f1 	movw	r3, #2033	@ 0x7f1
 800c468:	1ad2      	subs	r2, r2, r3
 800c46a:	d022      	beq.n	800c4b2 <ai_array_to_buffer_fmt+0x8a>
 800c46c:	f44f 33fa 	mov.w	r3, #128000	@ 0x1f400
 800c470:	1ad2      	subs	r2, r2, r3
 800c472:	d036      	beq.n	800c4e2 <ai_array_to_buffer_fmt+0xba>
 800c474:	4b67      	ldr	r3, [pc, #412]	@ (800c614 <.text_23>)
 800c476:	1ad2      	subs	r2, r2, r3
 800c478:	d027      	beq.n	800c4ca <ai_array_to_buffer_fmt+0xa2>
 800c47a:	3a80      	subs	r2, #128	@ 0x80
 800c47c:	d023      	beq.n	800c4c6 <ai_array_to_buffer_fmt+0x9e>
 800c47e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800c482:	1ad2      	subs	r2, r2, r3
 800c484:	d019      	beq.n	800c4ba <ai_array_to_buffer_fmt+0x92>
 800c486:	1fd2      	subs	r2, r2, #7
 800c488:	d021      	beq.n	800c4ce <ai_array_to_buffer_fmt+0xa6>
 800c48a:	f240 33f9 	movw	r3, #1017	@ 0x3f9
 800c48e:	1ad2      	subs	r2, r2, r3
 800c490:	d015      	beq.n	800c4be <ai_array_to_buffer_fmt+0x96>
 800c492:	3a0f      	subs	r2, #15
 800c494:	d01d      	beq.n	800c4d2 <ai_array_to_buffer_fmt+0xaa>
 800c496:	f240 73f1 	movw	r3, #2033	@ 0x7f1
 800c49a:	1ad2      	subs	r2, r2, r3
 800c49c:	d011      	beq.n	800c4c2 <ai_array_to_buffer_fmt+0x9a>
 800c49e:	f44f 037e 	mov.w	r3, #16646144	@ 0xfe0000
 800c4a2:	1ad2      	subs	r2, r2, r3
 800c4a4:	d11e      	bne.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4a6:	485e      	ldr	r0, [pc, #376]	@ (800c620 <.text_26>)
 800c4a8:	e01c      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4aa:	485e      	ldr	r0, [pc, #376]	@ (800c624 <.text_27>)
 800c4ac:	e01a      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4ae:	485e      	ldr	r0, [pc, #376]	@ (800c628 <.text_28>)
 800c4b0:	e018      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4b2:	485e      	ldr	r0, [pc, #376]	@ (800c62c <.text_29>)
 800c4b4:	e016      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4b6:	485e      	ldr	r0, [pc, #376]	@ (800c630 <.text_30>)
 800c4b8:	e014      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4ba:	485e      	ldr	r0, [pc, #376]	@ (800c634 <.text_31>)
 800c4bc:	e012      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4be:	485e      	ldr	r0, [pc, #376]	@ (800c638 <.text_32>)
 800c4c0:	e010      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4c2:	485e      	ldr	r0, [pc, #376]	@ (800c63c <.text_33>)
 800c4c4:	e00e      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4c6:	485e      	ldr	r0, [pc, #376]	@ (800c640 <.text_34>)
 800c4c8:	e00c      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4ca:	4850      	ldr	r0, [pc, #320]	@ (800c60c <.text_21>)
 800c4cc:	e00a      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4ce:	485d      	ldr	r0, [pc, #372]	@ (800c644 <.text_35>)
 800c4d0:	e008      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4d2:	485d      	ldr	r0, [pc, #372]	@ (800c648 <.text_36>)
 800c4d4:	e006      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	e004      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4da:	485c      	ldr	r0, [pc, #368]	@ (800c64c <.text_37>)
 800c4dc:	e002      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4de:	485c      	ldr	r0, [pc, #368]	@ (800c650 <.text_38>)
 800c4e0:	e000      	b.n	800c4e4 <ai_array_to_buffer_fmt+0xbc>
 800c4e2:	485c      	ldr	r0, [pc, #368]	@ (800c654 <.text_39>)
 800c4e4:	004a      	lsls	r2, r1, #1
 800c4e6:	bf4c      	ite	mi
 800c4e8:	f04f 4280 	movmi.w	r2, #1073741824	@ 0x40000000
 800c4ec:	2200      	movpl	r2, #0
 800c4ee:	4310      	orrs	r0, r2
 800c4f0:	008a      	lsls	r2, r1, #2
 800c4f2:	bf4c      	ite	mi
 800c4f4:	f04f 5200 	movmi.w	r2, #536870912	@ 0x20000000
 800c4f8:	2200      	movpl	r2, #0
 800c4fa:	4310      	orrs	r0, r2
 800c4fc:	0109      	lsls	r1, r1, #4
 800c4fe:	bf4c      	ite	mi
 800c500:	f04f 6100 	movmi.w	r1, #134217728	@ 0x8000000
 800c504:	2100      	movpl	r1, #0
 800c506:	4308      	orrs	r0, r1
 800c508:	4770      	bx	lr
	...

0800c50c <.text_13>:
 800c50c:	00000000 	.word	0x00000000

0800c510 <ai_buffer_to_array_fmt>:
 800c510:	4602      	mov	r2, r0
 800c512:	f022 407e 	bic.w	r0, r2, #4261412864	@ 0xfe000000
 800c516:	3840      	subs	r0, #64	@ 0x40
 800c518:	d033      	beq.n	800c582 <ai_buffer_to_array_fmt+0x72>
 800c51a:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 800c51e:	1a40      	subs	r0, r0, r1
 800c520:	d049      	beq.n	800c5b6 <ai_buffer_to_array_fmt+0xa6>
 800c522:	3880      	subs	r0, #128	@ 0x80
 800c524:	d037      	beq.n	800c596 <ai_buffer_to_array_fmt+0x86>
 800c526:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800c52a:	1a40      	subs	r0, r0, r1
 800c52c:	d02d      	beq.n	800c58a <ai_buffer_to_array_fmt+0x7a>
 800c52e:	1fc0      	subs	r0, r0, #7
 800c530:	d043      	beq.n	800c5ba <ai_buffer_to_array_fmt+0xaa>
 800c532:	f240 31f9 	movw	r1, #1017	@ 0x3f9
 800c536:	1a40      	subs	r0, r0, r1
 800c538:	d029      	beq.n	800c58e <ai_buffer_to_array_fmt+0x7e>
 800c53a:	380f      	subs	r0, #15
 800c53c:	d03f      	beq.n	800c5be <ai_buffer_to_array_fmt+0xae>
 800c53e:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 800c542:	1a40      	subs	r0, r0, r1
 800c544:	d025      	beq.n	800c592 <ai_buffer_to_array_fmt+0x82>
 800c546:	f44f 31fa 	mov.w	r1, #128000	@ 0x1f400
 800c54a:	1a40      	subs	r0, r0, r1
 800c54c:	d039      	beq.n	800c5c2 <ai_buffer_to_array_fmt+0xb2>
 800c54e:	4931      	ldr	r1, [pc, #196]	@ (800c614 <.text_23>)
 800c550:	1a40      	subs	r0, r0, r1
 800c552:	d02a      	beq.n	800c5aa <ai_buffer_to_array_fmt+0x9a>
 800c554:	3880      	subs	r0, #128	@ 0x80
 800c556:	d026      	beq.n	800c5a6 <ai_buffer_to_array_fmt+0x96>
 800c558:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800c55c:	1a40      	subs	r0, r0, r1
 800c55e:	d01c      	beq.n	800c59a <ai_buffer_to_array_fmt+0x8a>
 800c560:	1fc0      	subs	r0, r0, #7
 800c562:	d024      	beq.n	800c5ae <ai_buffer_to_array_fmt+0x9e>
 800c564:	f240 31f9 	movw	r1, #1017	@ 0x3f9
 800c568:	1a40      	subs	r0, r0, r1
 800c56a:	d018      	beq.n	800c59e <ai_buffer_to_array_fmt+0x8e>
 800c56c:	380f      	subs	r0, #15
 800c56e:	d020      	beq.n	800c5b2 <ai_buffer_to_array_fmt+0xa2>
 800c570:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 800c574:	1a40      	subs	r0, r0, r1
 800c576:	d014      	beq.n	800c5a2 <ai_buffer_to_array_fmt+0x92>
 800c578:	f44f 017e 	mov.w	r1, #16646144	@ 0xfe0000
 800c57c:	1a40      	subs	r0, r0, r1
 800c57e:	d002      	beq.n	800c586 <ai_buffer_to_array_fmt+0x76>
 800c580:	e021      	b.n	800c5c6 <ai_buffer_to_array_fmt+0xb6>
 800c582:	2040      	movs	r0, #64	@ 0x40
 800c584:	e029      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c586:	4826      	ldr	r0, [pc, #152]	@ (800c620 <.text_26>)
 800c588:	e027      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c58a:	4826      	ldr	r0, [pc, #152]	@ (800c624 <.text_27>)
 800c58c:	e025      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c58e:	4826      	ldr	r0, [pc, #152]	@ (800c628 <.text_28>)
 800c590:	e023      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c592:	4826      	ldr	r0, [pc, #152]	@ (800c62c <.text_29>)
 800c594:	e021      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c596:	4826      	ldr	r0, [pc, #152]	@ (800c630 <.text_30>)
 800c598:	e01f      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c59a:	4826      	ldr	r0, [pc, #152]	@ (800c634 <.text_31>)
 800c59c:	e01d      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c59e:	4826      	ldr	r0, [pc, #152]	@ (800c638 <.text_32>)
 800c5a0:	e01b      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c5a2:	4826      	ldr	r0, [pc, #152]	@ (800c63c <.text_33>)
 800c5a4:	e019      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c5a6:	4826      	ldr	r0, [pc, #152]	@ (800c640 <.text_34>)
 800c5a8:	e017      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c5aa:	4818      	ldr	r0, [pc, #96]	@ (800c60c <.text_21>)
 800c5ac:	e015      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c5ae:	4825      	ldr	r0, [pc, #148]	@ (800c644 <.text_35>)
 800c5b0:	e013      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c5b2:	4825      	ldr	r0, [pc, #148]	@ (800c648 <.text_36>)
 800c5b4:	e011      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c5b6:	4814      	ldr	r0, [pc, #80]	@ (800c608 <.text_20>)
 800c5b8:	e00f      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c5ba:	4824      	ldr	r0, [pc, #144]	@ (800c64c <.text_37>)
 800c5bc:	e00d      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c5be:	4824      	ldr	r0, [pc, #144]	@ (800c650 <.text_38>)
 800c5c0:	e00b      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c5c2:	4824      	ldr	r0, [pc, #144]	@ (800c654 <.text_39>)
 800c5c4:	e009      	b.n	800c5da <ai_buffer_to_array_fmt+0xca>
 800c5c6:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 800c5ca:	f3c2 000d 	ubfx	r0, r2, #0, #14
 800c5ce:	2900      	cmp	r1, #0
 800c5d0:	bf14      	ite	ne
 800c5d2:	f440 0004 	orrne.w	r0, r0, #8650752	@ 0x840000
 800c5d6:	f440 2080 	orreq.w	r0, r0, #262144	@ 0x40000
 800c5da:	0051      	lsls	r1, r2, #1
 800c5dc:	bf48      	it	mi
 800c5de:	f040 4080 	orrmi.w	r0, r0, #1073741824	@ 0x40000000
 800c5e2:	0091      	lsls	r1, r2, #2
 800c5e4:	bf48      	it	mi
 800c5e6:	f040 5000 	orrmi.w	r0, r0, #536870912	@ 0x20000000
 800c5ea:	0111      	lsls	r1, r2, #4
 800c5ec:	bf48      	it	mi
 800c5ee:	f040 6000 	orrmi.w	r0, r0, #134217728	@ 0x8000000
 800c5f2:	4770      	bx	lr

0800c5f4 <.text_15>:
 800c5f4:	002a040f 	.word	0x002a040f

0800c5f8 <.text_16>:
 800c5f8:	003bf7f1 	.word	0x003bf7f1

0800c5fc <.text_17>:
 800c5fc:	002be80f 	.word	0x002be80f

0800c600 <.text_18>:
 800c600:	00b9fff1 	.word	0x00b9fff1

0800c604 <.text_19>:
 800c604:	004df000 	.word	0x004df000

0800c608 <.text_20>:
 800c608:	00040040 	.word	0x00040040

0800c60c <.text_21>:
 800c60c:	00840040 	.word	0x00840040

0800c610 <.text_22>:
 800c610:	0801a104 	.word	0x0801a104

0800c614 <.text_23>:
 800c614:	007dfc00 	.word	0x007dfc00

0800c618 <.text_24>:
 800c618:	0801a180 	.word	0x0801a180

0800c61c <.text_25>:
 800c61c:	00803fff 	.word	0x00803fff

0800c620 <.text_26>:
 800c620:	01821040 	.word	0x01821040

0800c624 <.text_27>:
 800c624:	00040440 	.word	0x00040440

0800c628 <.text_28>:
 800c628:	00040840 	.word	0x00040840

0800c62c <.text_29>:
 800c62c:	00041040 	.word	0x00041040

0800c630 <.text_30>:
 800c630:	000400c0 	.word	0x000400c0

0800c634 <.text_31>:
 800c634:	00840440 	.word	0x00840440

0800c638 <.text_32>:
 800c638:	00840840 	.word	0x00840840

0800c63c <.text_33>:
 800c63c:	00841040 	.word	0x00841040

0800c640 <.text_34>:
 800c640:	008400c0 	.word	0x008400c0

0800c644 <.text_35>:
 800c644:	00840447 	.word	0x00840447

0800c648 <.text_36>:
 800c648:	0084084f 	.word	0x0084084f

0800c64c <.text_37>:
 800c64c:	00040447 	.word	0x00040447

0800c650 <.text_38>:
 800c650:	0004084f 	.word	0x0004084f

0800c654 <.text_39>:
 800c654:	00060440 	.word	0x00060440

0800c658 <ai_array_get_byte_size>:
 800c658:	b909      	cbnz	r1, 800c65e <ai_array_get_byte_size+0x6>
 800c65a:	2000      	movs	r0, #0
 800c65c:	4770      	bx	lr
 800c65e:	11c3      	asrs	r3, r0, #7
 800c660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c664:	4359      	muls	r1, r3
 800c666:	1dc9      	adds	r1, r1, #7
 800c668:	08c9      	lsrs	r1, r1, #3
 800c66a:	ea4f 5c60 	mov.w	ip, r0, asr #21
 800c66e:	1440      	asrs	r0, r0, #17
 800c670:	f000 000f 	and.w	r0, r0, #15
 800c674:	00c9      	lsls	r1, r1, #3
 800c676:	f00c 0c03 	and.w	ip, ip, #3
 800c67a:	2804      	cmp	r0, #4
 800c67c:	fa21 f10c 	lsr.w	r1, r1, ip
 800c680:	d006      	beq.n	800c690 <ai_array_get_byte_size+0x38>
 800c682:	2808      	cmp	r0, #8
 800c684:	bf08      	it	eq
 800c686:	eb01 2103 	addeq.w	r1, r1, r3, lsl #8
 800c68a:	1dc9      	adds	r1, r1, #7
 800c68c:	08c8      	lsrs	r0, r1, #3
 800c68e:	4770      	bx	lr
 800c690:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800c694:	1dc9      	adds	r1, r1, #7
 800c696:	08c8      	lsrs	r0, r1, #3
 800c698:	4770      	bx	lr

0800c69a <ai_array_get_data_byte_size>:
 800c69a:	b909      	cbnz	r1, 800c6a0 <ai_array_get_data_byte_size+0x6>
 800c69c:	2000      	movs	r0, #0
 800c69e:	4770      	bx	lr
 800c6a0:	11c2      	asrs	r2, r0, #7
 800c6a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c6a6:	4351      	muls	r1, r2
 800c6a8:	1dc9      	adds	r1, r1, #7
 800c6aa:	08c9      	lsrs	r1, r1, #3
 800c6ac:	1540      	asrs	r0, r0, #21
 800c6ae:	00c9      	lsls	r1, r1, #3
 800c6b0:	f000 0003 	and.w	r0, r0, #3
 800c6b4:	40c1      	lsrs	r1, r0
 800c6b6:	1dc9      	adds	r1, r1, #7
 800c6b8:	08c8      	lsrs	r0, r1, #3
 800c6ba:	4770      	bx	lr

0800c6bc <ai_array_get_elems_from_size>:
 800c6bc:	b909      	cbnz	r1, 800c6c2 <ai_array_get_elems_from_size+0x6>
 800c6be:	2000      	movs	r0, #0
 800c6c0:	4770      	bx	lr
 800c6c2:	1442      	asrs	r2, r0, #17
 800c6c4:	00c9      	lsls	r1, r1, #3
 800c6c6:	f002 020f 	and.w	r2, r2, #15
 800c6ca:	2a04      	cmp	r2, #4
 800c6cc:	d007      	beq.n	800c6de <ai_array_get_elems_from_size+0x22>
 800c6ce:	2a08      	cmp	r2, #8
 800c6d0:	bf02      	ittt	eq
 800c6d2:	11c2      	asreq	r2, r0, #7
 800c6d4:	f002 027f 	andeq.w	r2, r2, #127	@ 0x7f
 800c6d8:	eba1 2102 	subeq.w	r1, r1, r2, lsl #8
 800c6dc:	e004      	b.n	800c6e8 <ai_array_get_elems_from_size+0x2c>
 800c6de:	11c3      	asrs	r3, r0, #7
 800c6e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6e4:	eba1 1103 	sub.w	r1, r1, r3, lsl #4
 800c6e8:	1542      	asrs	r2, r0, #21
 800c6ea:	f002 0203 	and.w	r2, r2, #3
 800c6ee:	4091      	lsls	r1, r2
 800c6f0:	1dc9      	adds	r1, r1, #7
 800c6f2:	08c9      	lsrs	r1, r1, #3
 800c6f4:	11c0      	asrs	r0, r0, #7
 800c6f6:	00c9      	lsls	r1, r1, #3
 800c6f8:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800c6fc:	fbb1 f0f0 	udiv	r0, r1, r0
 800c700:	4770      	bx	lr
	...

0800c704 <.text_43>:
 800c704:	5f544d46 	.word	0x5f544d46
 800c708:	454e4f4e 	.word	0x454e4f4e
 800c70c:	00          	.byte	0x00
 800c70d:	00          	.byte	0x00
	...

0800c710 <.text_44>:
 800c710:	5f544d46 	.word	0x5f544d46
 800c714:	414f4c46 	.word	0x414f4c46
 800c718:	0054      	.short	0x0054
	...

0800c71c <.text_45>:
 800c71c:	5f544d46 	.word	0x5f544d46
 800c720:	414f4c46 	.word	0x414f4c46
 800c724:	00343654 	.word	0x00343654

0800c728 <.text_46>:
 800c728:	5f544d46 	.word	0x5f544d46
 800c72c:	414f4c46 	.word	0x414f4c46
 800c730:	00363154 	.word	0x00363154

0800c734 <.text_47>:
 800c734:	5f544d46 	.word	0x5f544d46
 800c738:	00003855 	.word	0x00003855

0800c73c <.text_48>:
 800c73c:	5f544d46 	.word	0x5f544d46
 800c740:	00363155 	.word	0x00363155

0800c744 <.text_49>:
 800c744:	5f544d46 	.word	0x5f544d46
 800c748:	00323355 	.word	0x00323355

0800c74c <.text_50>:
 800c74c:	5f544d46 	.word	0x5f544d46
 800c750:	00343655 	.word	0x00343655

0800c754 <.text_51>:
 800c754:	5f544d46 	.word	0x5f544d46
 800c758:	00003155 	.word	0x00003155

0800c75c <.text_52>:
 800c75c:	5f544d46 	.word	0x5f544d46
 800c760:	00003455 	.word	0x00003455

0800c764 <.text_53>:
 800c764:	5f544d46 	.word	0x5f544d46
 800c768:	00003853 	.word	0x00003853

0800c76c <.text_54>:
 800c76c:	5f544d46 	.word	0x5f544d46
 800c770:	00363153 	.word	0x00363153

0800c774 <.text_55>:
 800c774:	5f544d46 	.word	0x5f544d46
 800c778:	00323353 	.word	0x00323353

0800c77c <.text_56>:
 800c77c:	5f544d46 	.word	0x5f544d46
 800c780:	00343653 	.word	0x00343653

0800c784 <.text_57>:
 800c784:	5f544d46 	.word	0x5f544d46
 800c788:	00003153 	.word	0x00003153

0800c78c <.text_58>:
 800c78c:	5f544d46 	.word	0x5f544d46
 800c790:	00003453 	.word	0x00003453

0800c794 <.text_59>:
 800c794:	5f544d46 	.word	0x5f544d46
 800c798:	0051      	.short	0x0051
	...

0800c79c <.text_60>:
 800c79c:	5f544d46 	.word	0x5f544d46
 800c7a0:	00003751 	.word	0x00003751

0800c7a4 <.text_61>:
 800c7a4:	5f544d46 	.word	0x5f544d46
 800c7a8:	00353151 	.word	0x00353151

0800c7ac <.text_62>:
 800c7ac:	5f544d46 	.word	0x5f544d46
 800c7b0:	00313351 	.word	0x00313351

0800c7b4 <.text_63>:
 800c7b4:	5f544d46 	.word	0x5f544d46
 800c7b8:	00005155 	.word	0x00005155

0800c7bc <.text_64>:
 800c7bc:	5f544d46 	.word	0x5f544d46
 800c7c0:	00375155 	.word	0x00375155

0800c7c4 <.text_65>:
 800c7c4:	5f544d46 	.word	0x5f544d46
 800c7c8:	35315155 	.word	0x35315155
 800c7cc:	00          	.byte	0x00
 800c7cd:	00          	.byte	0x00
	...

0800c7d0 <.text_66>:
 800c7d0:	5f544d46 	.word	0x5f544d46
 800c7d4:	31335155 	.word	0x31335155
 800c7d8:	00          	.byte	0x00
 800c7d9:	00          	.byte	0x00
	...

0800c7dc <.text_67>:
 800c7dc:	5f544d46 	.word	0x5f544d46
 800c7e0:	3454554c 	.word	0x3454554c
 800c7e4:	4f4c465f 	.word	0x4f4c465f
 800c7e8:	00005441 	.word	0x00005441

0800c7ec <.text_68>:
 800c7ec:	5f544d46 	.word	0x5f544d46
 800c7f0:	3854554c 	.word	0x3854554c
 800c7f4:	4f4c465f 	.word	0x4f4c465f
 800c7f8:	00005441 	.word	0x00005441

0800c7fc <.text_69>:
 800c7fc:	5f544d46 	.word	0x5f544d46
 800c800:	3454554c 	.word	0x3454554c
 800c804:	3531515f 	.word	0x3531515f
 800c808:	00          	.byte	0x00
 800c809:	00          	.byte	0x00
	...

0800c80c <.text_70>:
 800c80c:	5f544d46 	.word	0x5f544d46
 800c810:	3854554c 	.word	0x3854554c
 800c814:	3531515f 	.word	0x3531515f
 800c818:	00          	.byte	0x00
 800c819:	00          	.byte	0x00
	...

0800c81c <.text_71>:
 800c81c:	5f544d46 	.word	0x5f544d46
 800c820:	3454554c 	.word	0x3454554c
 800c824:	3151555f 	.word	0x3151555f
 800c828:	0035      	.short	0x0035
	...

0800c82c <.text_72>:
 800c82c:	5f544d46 	.word	0x5f544d46
 800c830:	3854554c 	.word	0x3854554c
 800c834:	3151555f 	.word	0x3151555f
 800c838:	0035      	.short	0x0035
	...

0800c83c <.text_73>:
 800c83c:	5f544d46 	.word	0x5f544d46
 800c840:	4c4f4f42 	.word	0x4c4f4f42
 800c844:	00          	.byte	0x00
 800c845:	00          	.byte	0x00
	...

0800c848 <.text_74>:
 800c848:	415f4941 	.word	0x415f4941
 800c84c:	59415252 	.word	0x59415252
 800c850:	524f465f 	.word	0x524f465f
 800c854:	5f54414d 	.word	0x5f54414d
 800c858:	454e4f4e 	.word	0x454e4f4e
 800c85c:	00          	.byte	0x00
 800c85d:	00          	.byte	0x00
	...

0800c860 <.text_75>:
 800c860:	415f4941 	.word	0x415f4941
 800c864:	59415252 	.word	0x59415252
 800c868:	524f465f 	.word	0x524f465f
 800c86c:	5f54414d 	.word	0x5f54414d
 800c870:	0051      	.short	0x0051
	...

0800c874 <.text_76>:
 800c874:	415f4941 	.word	0x415f4941
 800c878:	59415252 	.word	0x59415252
 800c87c:	524f465f 	.word	0x524f465f
 800c880:	5f54414d 	.word	0x5f54414d
 800c884:	00005155 	.word	0x00005155

0800c888 <.text_77>:
 800c888:	425f4941 	.word	0x425f4941
 800c88c:	45464655 	.word	0x45464655
 800c890:	4f465f52 	.word	0x4f465f52
 800c894:	54414d52 	.word	0x54414d52
 800c898:	4e4f4e5f 	.word	0x4e4f4e5f
 800c89c:	0045      	.short	0x0045
	...

0800c8a0 <.text_78>:
 800c8a0:	425f4941 	.word	0x425f4941
 800c8a4:	45464655 	.word	0x45464655
 800c8a8:	4f465f52 	.word	0x4f465f52
 800c8ac:	54414d52 	.word	0x54414d52
 800c8b0:	0000515f 	.word	0x0000515f

0800c8b4 <.text_79>:
 800c8b4:	425f4941 	.word	0x425f4941
 800c8b8:	45464655 	.word	0x45464655
 800c8bc:	4f465f52 	.word	0x4f465f52
 800c8c0:	54414d52 	.word	0x54414d52
 800c8c4:	0051555f 	.word	0x0051555f

0800c8c8 <ai_version_get>:
 800c8c8:	0409      	lsls	r1, r1, #16
 800c8ca:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800c8ce:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 800c8d2:	4770      	bx	lr

0800c8d4 <ai_platform_version_get>:
 800c8d4:	a251      	add	r2, pc, #324	@ (adr r2, 800ca1c <.text_10>)
 800c8d6:	6813      	ldr	r3, [r2, #0]
 800c8d8:	b081      	sub	sp, #4
 800c8da:	0e02      	lsrs	r2, r0, #24
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	f88d 2000 	strb.w	r2, [sp]
 800c8e2:	0c03      	lsrs	r3, r0, #16
 800c8e4:	0a00      	lsrs	r0, r0, #8
 800c8e6:	f88d 0002 	strb.w	r0, [sp, #2]
 800c8ea:	f88d 3001 	strb.w	r3, [sp, #1]
 800c8ee:	9800      	ldr	r0, [sp, #0]
 800c8f0:	b001      	add	sp, #4
 800c8f2:	4770      	bx	lr

0800c8f4 <get_tensor_size>:
 800c8f4:	b470      	push	{r4, r5, r6}
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	b121      	cbz	r1, 800c904 <get_tensor_size+0x10>
 800c8fa:	6990      	ldr	r0, [r2, #24]
 800c8fc:	6843      	ldr	r3, [r0, #4]
 800c8fe:	bc70      	pop	{r4, r5, r6}
 800c900:	4618      	mov	r0, r3
 800c902:	4770      	bx	lr
 800c904:	6894      	ldr	r4, [r2, #8]
 800c906:	0a24      	lsrs	r4, r4, #8
 800c908:	f04f 0301 	mov.w	r3, #1
 800c90c:	d01e      	beq.n	800c94c <get_tensor_size+0x58>
 800c90e:	68d2      	ldr	r2, [r2, #12]
 800c910:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800c914:	4620      	mov	r0, r4
 800c916:	1f0d      	subs	r5, r1, #4
 800c918:	f010 0103 	ands.w	r1, r0, #3
 800c91c:	f000 8006 	beq.w	800c92c <get_tensor_size+0x38>
 800c920:	f855 6904 	ldr.w	r6, [r5], #-4
 800c924:	1e64      	subs	r4, r4, #1
 800c926:	4373      	muls	r3, r6
 800c928:	1e49      	subs	r1, r1, #1
 800c92a:	d1f9      	bne.n	800c920 <get_tensor_size+0x2c>
 800c92c:	0880      	lsrs	r0, r0, #2
 800c92e:	d00d      	beq.n	800c94c <get_tensor_size+0x58>
 800c930:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800c934:	3910      	subs	r1, #16
 800c936:	68ca      	ldr	r2, [r1, #12]
 800c938:	688c      	ldr	r4, [r1, #8]
 800c93a:	684d      	ldr	r5, [r1, #4]
 800c93c:	f851 6910 	ldr.w	r6, [r1], #-16
 800c940:	4362      	muls	r2, r4
 800c942:	436a      	muls	r2, r5
 800c944:	4372      	muls	r2, r6
 800c946:	4353      	muls	r3, r2
 800c948:	1e40      	subs	r0, r0, #1
 800c94a:	d1f4      	bne.n	800c936 <get_tensor_size+0x42>
 800c94c:	bc70      	pop	{r4, r5, r6}
 800c94e:	4618      	mov	r0, r3
 800c950:	4770      	bx	lr

0800c952 <get_tensor_byte_size>:
 800c952:	4601      	mov	r1, r0
 800c954:	68c8      	ldr	r0, [r1, #12]
 800c956:	694b      	ldr	r3, [r1, #20]
 800c958:	68c0      	ldr	r0, [r0, #12]
 800c95a:	68da      	ldr	r2, [r3, #12]
 800c95c:	698b      	ldr	r3, [r1, #24]
 800c95e:	4906      	ldr	r1, [pc, #24]	@ (800c978 <.text_6>)
 800c960:	f8d3 c000 	ldr.w	ip, [r3]
 800c964:	4350      	muls	r0, r2
 800c966:	ea01 0c0c 	and.w	ip, r1, ip
 800c96a:	4a04      	ldr	r2, [pc, #16]	@ (800c97c <.text_7>)
 800c96c:	4594      	cmp	ip, r2
 800c96e:	bf04      	itt	eq
 800c970:	1dc0      	addeq	r0, r0, #7
 800c972:	08c0      	lsreq	r0, r0, #3
 800c974:	4770      	bx	lr
	...

0800c978 <.text_6>:
 800c978:	017fffff 	.word	0x017fffff

0800c97c <.text_7>:
 800c97c:	000400c0 	.word	0x000400c0

0800c980 <ai_from_buffer_to_array>:
 800c980:	b570      	push	{r4, r5, r6, lr}
 800c982:	4604      	mov	r4, r0
 800c984:	460d      	mov	r5, r1
 800c986:	b084      	sub	sp, #16
 800c988:	2101      	movs	r1, #1
 800c98a:	4628      	mov	r0, r5
 800c98c:	f7f3 fc28 	bl	80001e0 <ai_buffer_get_size>
 800c990:	69a9      	ldr	r1, [r5, #24]
 800c992:	4606      	mov	r6, r0
 800c994:	6808      	ldr	r0, [r1, #0]
 800c996:	4346      	muls	r6, r0
 800c998:	6828      	ldr	r0, [r5, #0]
 800c99a:	f7ff fdb9 	bl	800c510 <ai_buffer_to_array_fmt>
 800c99e:	9000      	str	r0, [sp, #0]
 800c9a0:	9601      	str	r6, [sp, #4]
 800c9a2:	6869      	ldr	r1, [r5, #4]
 800c9a4:	9102      	str	r1, [sp, #8]
 800c9a6:	9103      	str	r1, [sp, #12]
 800c9a8:	4669      	mov	r1, sp
 800c9aa:	e891 006c 	ldmia.w	r1, {r2, r3, r5, r6}
 800c9ae:	e884 006c 	stmia.w	r4, {r2, r3, r5, r6}
 800c9b2:	b004      	add	sp, #16
 800c9b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9b8 <ai_from_array_to_buffer>:
 800c9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9bc:	460d      	mov	r5, r1
 800c9be:	bf00      	nop
 800c9c0:	a117      	add	r1, pc, #92	@ (adr r1, 800ca20 <.text_11>)
 800c9c2:	e891 00cc 	ldmia.w	r1, {r2, r3, r6, r7}
 800c9c6:	b08b      	sub	sp, #44	@ 0x2c
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	a807      	add	r0, sp, #28
 800c9cc:	ea4f 0c0d 	mov.w	ip, sp
 800c9d0:	e880 00cc 	stmia.w	r0, {r2, r3, r6, r7}
 800c9d4:	a316      	add	r3, pc, #88	@ (adr r3, 800ca30 <.text_12>)
 800c9d6:	e893 0f07 	ldmia.w	r3, {r0, r1, r2, r8, r9, sl, fp}
 800c9da:	e88c 0f07 	stmia.w	ip, {r0, r1, r2, r8, r9, sl, fp}
 800c9de:	6828      	ldr	r0, [r5, #0]
 800c9e0:	f7ff fd22 	bl	800c428 <ai_array_to_buffer_fmt>
 800c9e4:	9000      	str	r0, [sp, #0]
 800c9e6:	68e8      	ldr	r0, [r5, #12]
 800c9e8:	9001      	str	r0, [sp, #4]
 800c9ea:	6828      	ldr	r0, [r5, #0]
 800c9ec:	f7ff fd1c 	bl	800c428 <ai_array_to_buffer_fmt>
 800c9f0:	f3c0 10c6 	ubfx	r0, r0, #7, #7
 800c9f4:	2801      	cmp	r0, #1
 800c9f6:	6868      	ldr	r0, [r5, #4]
 800c9f8:	d102      	bne.n	800ca00 <ai_from_array_to_buffer+0x48>
 800c9fa:	301f      	adds	r0, #31
 800c9fc:	0940      	lsrs	r0, r0, #5
 800c9fe:	0140      	lsls	r0, r0, #5
 800ca00:	9004      	str	r0, [sp, #16]
 800ca02:	aa07      	add	r2, sp, #28
 800ca04:	6869      	ldr	r1, [r5, #4]
 800ca06:	9108      	str	r1, [sp, #32]
 800ca08:	9206      	str	r2, [sp, #24]
 800ca0a:	4668      	mov	r0, sp
 800ca0c:	e890 41ea 	ldmia.w	r0, {r1, r3, r5, r6, r7, r8, lr}
 800ca10:	e884 41ea 	stmia.w	r4, {r1, r3, r5, r6, r7, r8, lr}
 800ca14:	b00b      	add	sp, #44	@ 0x2c
 800ca16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ca1c <.text_10>:
 800ca1c:	00000000 	.word	0x00000000

0800ca20 <.text_11>:
 800ca20:	00000001 	.word	0x00000001
 800ca24:	00000000 	.word	0x00000000
 800ca28:	00000001 	.word	0x00000001
 800ca2c:	00000001 	.word	0x00000001

0800ca30 <.text_12>:
	...
 800ca44:	00000401 	.word	0x00000401
 800ca48:	00000000 	.word	0x00000000

0800ca4c <ai_math_elementwise_mul_int8>:
 800ca4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca50:	b085      	sub	sp, #20
 800ca52:	460c      	mov	r4, r1
 800ca54:	2100      	movs	r1, #0
 800ca56:	4605      	mov	r5, r0
 800ca58:	f99d a040 	ldrsb.w	sl, [sp, #64]	@ 0x40
 800ca5c:	f8ad 1000 	strh.w	r1, [sp]
 800ca60:	ee20 0a80 	vmul.f32	s0, s1, s0
 800ca64:	4690      	mov	r8, r2
 800ca66:	461f      	mov	r7, r3
 800ca68:	4668      	mov	r0, sp
 800ca6a:	ee80 0a01 	vdiv.f32	s0, s0, s2
 800ca6e:	f7ff f865 	bl	800bb3c <align_factor>
 800ca72:	4681      	mov	r9, r0
 800ca74:	f9bd 0000 	ldrsh.w	r0, [sp]
 800ca78:	1e40      	subs	r0, r0, #1
 800ca7a:	2815      	cmp	r0, #21
 800ca7c:	d207      	bcs.n	800ca8e <ai_math_elementwise_mul_int8+0x42>
 800ca7e:	f8bd 1000 	ldrh.w	r1, [sp]
 800ca82:	2201      	movs	r2, #1
 800ca84:	fa0a f001 	lsl.w	r0, sl, r1
 800ca88:	408a      	lsls	r2, r1
 800ca8a:	eb00 0a52 	add.w	sl, r0, r2, lsr #1
 800ca8e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	@ 0x38
 800ca92:	f99d 103c 	ldrsb.w	r1, [sp, #60]	@ 0x3c
 800ca96:	9701      	str	r7, [sp, #4]
 800ca98:	9202      	str	r2, [sp, #8]
 800ca9a:	eac2 4702 	pkhbt	r7, r2, r2, lsl #16
 800ca9e:	9801      	ldr	r0, [sp, #4]
 800caa0:	0880      	lsrs	r0, r0, #2
 800caa2:	eac1 4c01 	pkhbt	ip, r1, r1, lsl #16
 800caa6:	462a      	mov	r2, r5
 800caa8:	4623      	mov	r3, r4
 800caaa:	f000 80b3 	beq.w	800cc14 <ai_math_elementwise_mul_int8+0x1c8>
 800caae:	9703      	str	r7, [sp, #12]
 800cab0:	f8cd c008 	str.w	ip, [sp, #8]
 800cab4:	f858 5b04 	ldr.w	r5, [r8], #4
 800cab8:	f853 eb04 	ldr.w	lr, [r3], #4
 800cabc:	ea4f 2c35 	mov.w	ip, r5, ror #8
 800cac0:	fa2f f48c 	sxtb16	r4, ip
 800cac4:	ea4f 273e 	mov.w	r7, lr, ror #8
 800cac8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800cacc:	fa2f f787 	sxtb16	r7, r7
 800cad0:	fad7 fc0c 	ssub16	ip, r7, ip
 800cad4:	9f03      	ldr	r7, [sp, #12]
 800cad6:	fa2f fe8e 	sxtb16	lr, lr
 800cada:	fade f707 	ssub16	r7, lr, r7
 800cade:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cae2:	fad4 fe0e 	ssub16	lr, r4, lr
 800cae6:	9c02      	ldr	r4, [sp, #8]
 800cae8:	fa2f f585 	sxtb16	r5, r5
 800caec:	fad5 f404 	ssub16	r4, r5, r4
 800caf0:	fb17 f504 	smulbb	r5, r7, r4
 800caf4:	fb17 f634 	smultt	r6, r7, r4
 800caf8:	f9bd 4000 	ldrsh.w	r4, [sp]
 800cafc:	fb1c f70e 	smulbb	r7, ip, lr
 800cb00:	fb1c fc3e 	smultt	ip, ip, lr
 800cb04:	2c16      	cmp	r4, #22
 800cb06:	f102 0e02 	add.w	lr, r2, #2
 800cb0a:	db28      	blt.n	800cb5e <ai_math_elementwise_mul_int8+0x112>
 800cb0c:	f8bd b000 	ldrh.w	fp, [sp]
 800cb10:	2401      	movs	r4, #1
 800cb12:	f1ab 0b02 	sub.w	fp, fp, #2
 800cb16:	fa04 f40b 	lsl.w	r4, r4, fp
 800cb1a:	fb55 4509 	smmla	r5, r5, r9, r4
 800cb1e:	fb56 4b09 	smmla	fp, r6, r9, r4
 800cb22:	fb57 4709 	smmla	r7, r7, r9, r4
 800cb26:	f8bd 6000 	ldrh.w	r6, [sp]
 800cb2a:	1e76      	subs	r6, r6, #1
 800cb2c:	4135      	asrs	r5, r6
 800cb2e:	4137      	asrs	r7, r6
 800cb30:	4455      	add	r5, sl
 800cb32:	4457      	add	r7, sl
 800cb34:	fa4b fb06 	asr.w	fp, fp, r6
 800cb38:	44d3      	add	fp, sl
 800cb3a:	fb5c 4c09 	smmla	ip, ip, r9, r4
 800cb3e:	f305 0407 	ssat	r4, #8, r5
 800cb42:	f802 4b01 	strb.w	r4, [r2], #1
 800cb46:	f307 0707 	ssat	r7, #8, r7
 800cb4a:	f802 7b01 	strb.w	r7, [r2], #1
 800cb4e:	fa4c fc06 	asr.w	ip, ip, r6
 800cb52:	f30b 0707 	ssat	r7, #8, fp
 800cb56:	44d4      	add	ip, sl
 800cb58:	f88e 7000 	strb.w	r7, [lr]
 800cb5c:	e052      	b.n	800cc04 <ai_math_elementwise_mul_int8+0x1b8>
 800cb5e:	2c01      	cmp	r4, #1
 800cb60:	db28      	blt.n	800cbb4 <ai_math_elementwise_mul_int8+0x168>
 800cb62:	006d      	lsls	r5, r5, #1
 800cb64:	fb55 a409 	smmla	r4, r5, r9, sl
 800cb68:	0076      	lsls	r6, r6, #1
 800cb6a:	fb56 a509 	smmla	r5, r6, r9, sl
 800cb6e:	f8bd 6000 	ldrh.w	r6, [sp]
 800cb72:	4134      	asrs	r4, r6
 800cb74:	f304 0407 	ssat	r4, #8, r4
 800cb78:	f802 4b01 	strb.w	r4, [r2], #1
 800cb7c:	007f      	lsls	r7, r7, #1
 800cb7e:	f8bd 4000 	ldrh.w	r4, [sp]
 800cb82:	fb57 a709 	smmla	r7, r7, r9, sl
 800cb86:	4127      	asrs	r7, r4
 800cb88:	f307 0707 	ssat	r7, #8, r7
 800cb8c:	f802 7b01 	strb.w	r7, [r2], #1
 800cb90:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800cb94:	f8bd 7000 	ldrh.w	r7, [sp]
 800cb98:	413d      	asrs	r5, r7
 800cb9a:	f305 0707 	ssat	r7, #8, r5
 800cb9e:	f88e 7000 	strb.w	r7, [lr]
 800cba2:	fb5c ac09 	smmla	ip, ip, r9, sl
 800cba6:	f8bd 7000 	ldrh.w	r7, [sp]
 800cbaa:	fa4c f407 	asr.w	r4, ip, r7
 800cbae:	f304 0707 	ssat	r7, #8, r4
 800cbb2:	e029      	b.n	800cc08 <ai_math_elementwise_mul_int8+0x1bc>
 800cbb4:	f1c4 0401 	rsb	r4, r4, #1
 800cbb8:	40a5      	lsls	r5, r4
 800cbba:	f305 051f 	ssat	r5, #32, r5
 800cbbe:	40a7      	lsls	r7, r4
 800cbc0:	fb55 f519 	smmulr	r5, r5, r9
 800cbc4:	4455      	add	r5, sl
 800cbc6:	40a6      	lsls	r6, r4
 800cbc8:	f306 061f 	ssat	r6, #32, r6
 800cbcc:	f307 071f 	ssat	r7, #32, r7
 800cbd0:	fb57 f719 	smmulr	r7, r7, r9
 800cbd4:	4457      	add	r7, sl
 800cbd6:	fb56 f619 	smmulr	r6, r6, r9
 800cbda:	fa0c fc04 	lsl.w	ip, ip, r4
 800cbde:	f30c 0c1f 	ssat	ip, #32, ip
 800cbe2:	f305 0407 	ssat	r4, #8, r5
 800cbe6:	f802 4b01 	strb.w	r4, [r2], #1
 800cbea:	f307 0707 	ssat	r7, #8, r7
 800cbee:	f802 7b01 	strb.w	r7, [r2], #1
 800cbf2:	4456      	add	r6, sl
 800cbf4:	fb5c fc19 	smmulr	ip, ip, r9
 800cbf8:	f306 0707 	ssat	r7, #8, r6
 800cbfc:	f88e 7000 	strb.w	r7, [lr]
 800cc00:	eb0a 0c0c 	add.w	ip, sl, ip
 800cc04:	f30c 0707 	ssat	r7, #8, ip
 800cc08:	1c92      	adds	r2, r2, #2
 800cc0a:	1e40      	subs	r0, r0, #1
 800cc0c:	f88e 7001 	strb.w	r7, [lr, #1]
 800cc10:	f47f af50 	bne.w	800cab4 <ai_math_elementwise_mul_int8+0x68>
 800cc14:	9801      	ldr	r0, [sp, #4]
 800cc16:	f010 0f03 	tst.w	r0, #3
 800cc1a:	d03b      	beq.n	800cc94 <ai_math_elementwise_mul_int8+0x248>
 800cc1c:	f99d 7038 	ldrsb.w	r7, [sp, #56]	@ 0x38
 800cc20:	f000 0003 	and.w	r0, r0, #3
 800cc24:	f05f 0601 	movs.w	r6, #1
 800cc28:	f913 4b01 	ldrsb.w	r4, [r3], #1
 800cc2c:	eba4 0e07 	sub.w	lr, r4, r7
 800cc30:	f918 4b01 	ldrsb.w	r4, [r8], #1
 800cc34:	1a64      	subs	r4, r4, r1
 800cc36:	fb14 fe0e 	smulbb	lr, r4, lr
 800cc3a:	f9bd 4000 	ldrsh.w	r4, [sp]
 800cc3e:	2c16      	cmp	r4, #22
 800cc40:	db0a      	blt.n	800cc58 <ai_math_elementwise_mul_int8+0x20c>
 800cc42:	f8bd 4000 	ldrh.w	r4, [sp]
 800cc46:	1ea5      	subs	r5, r4, #2
 800cc48:	fa06 f505 	lsl.w	r5, r6, r5
 800cc4c:	fb5e 5e09 	smmla	lr, lr, r9, r5
 800cc50:	1e65      	subs	r5, r4, #1
 800cc52:	fa4e fe05 	asr.w	lr, lr, r5
 800cc56:	e015      	b.n	800cc84 <ai_math_elementwise_mul_int8+0x238>
 800cc58:	2c01      	cmp	r4, #1
 800cc5a:	db09      	blt.n	800cc70 <ai_math_elementwise_mul_int8+0x224>
 800cc5c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800cc60:	f8bd 4000 	ldrh.w	r4, [sp]
 800cc64:	fb5e ae09 	smmla	lr, lr, r9, sl
 800cc68:	fa4e fe04 	asr.w	lr, lr, r4
 800cc6c:	e00c      	b.n	800cc88 <ai_math_elementwise_mul_int8+0x23c>
 800cc6e:	bf00      	nop
 800cc70:	f8bd 4000 	ldrh.w	r4, [sp]
 800cc74:	f1c4 0401 	rsb	r4, r4, #1
 800cc78:	fa0e fe04 	lsl.w	lr, lr, r4
 800cc7c:	f30e 0e1f 	ssat	lr, #32, lr
 800cc80:	fb5e fe19 	smmulr	lr, lr, r9
 800cc84:	eb0a 0e0e 	add.w	lr, sl, lr
 800cc88:	f30e 0e07 	ssat	lr, #8, lr
 800cc8c:	1e40      	subs	r0, r0, #1
 800cc8e:	f802 eb01 	strb.w	lr, [r2], #1
 800cc92:	d1c9      	bne.n	800cc28 <ai_math_elementwise_mul_int8+0x1dc>
 800cc94:	b005      	add	sp, #20
 800cc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800cc9c <ai_math_elementwise_sum_int8>:
 800cc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca0:	f99d 7028 	ldrsb.w	r7, [sp, #40]	@ 0x28
 800cca4:	ee80 0a01 	vdiv.f32	s0, s0, s2
 800cca8:	eec0 0a81 	vdiv.f32	s1, s1, s2
 800ccac:	ee10 4a10 	vmov	r4, s0
 800ccb0:	ee10 5a90 	vmov	r5, s1
 800ccb4:	f99d c02c 	ldrsb.w	ip, [sp, #44]	@ 0x2c
 800ccb8:	f3c4 54c7 	ubfx	r4, r4, #23, #8
 800ccbc:	f3c5 55c7 	ubfx	r5, r5, #23, #8
 800ccc0:	f1c4 047e 	rsb	r4, r4, #126	@ 0x7e
 800ccc4:	f1c5 057e 	rsb	r5, r5, #126	@ 0x7e
 800ccc8:	42ac      	cmp	r4, r5
 800ccca:	bfc8      	it	gt
 800cccc:	462c      	movgt	r4, r5
 800ccce:	f104 061f 	add.w	r6, r4, #31
 800ccd2:	2e1f      	cmp	r6, #31
 800ccd4:	f99d 6024 	ldrsb.w	r6, [sp, #36]	@ 0x24
 800ccd8:	bfb4      	ite	lt
 800ccda:	341e      	addlt	r4, #30
 800ccdc:	241e      	movge	r4, #30
 800ccde:	4276      	negs	r6, r6
 800cce0:	ee03 6a10 	vmov	s6, r6
 800cce4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800cce8:	f1a4 0a08 	sub.w	sl, r4, #8
 800ccec:	469b      	mov	fp, r3
 800ccee:	2501      	movs	r5, #1
 800ccf0:	fa05 f60a 	lsl.w	r6, r5, sl
 800ccf4:	1e63      	subs	r3, r4, #1
 800ccf6:	fa05 f303 	lsl.w	r3, r5, r3
 800ccfa:	ee01 3a10 	vmov	s2, r3
 800ccfe:	f1a4 0309 	sub.w	r3, r4, #9
 800cd02:	409d      	lsls	r5, r3
 800cd04:	eeb0 2a00 	vmov.f32	s4, #0	@ 0x40000000  2.0
 800cd08:	eef0 2a00 	vmov.f32	s5, #0	@ 0x40000000  2.0
 800cd0c:	eef8 1ac1 	vcvt.f32.s32	s3, s2
 800cd10:	ee20 2a02 	vmul.f32	s4, s0, s4
 800cd14:	ee23 0a00 	vmul.f32	s0, s6, s0
 800cd18:	ee03 7a10 	vmov	s6, r7
 800cd1c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800cd20:	ee03 0a60 	vmls.f32	s0, s6, s1
 800cd24:	ee60 2aa2 	vmul.f32	s5, s1, s5
 800cd28:	ee00 ca90 	vmov	s1, ip
 800cd2c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800cd30:	ee30 0a20 	vadd.f32	s0, s0, s1
 800cd34:	ee00 6a90 	vmov	s1, r6
 800cd38:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800cd3c:	ee20 0a20 	vmul.f32	s0, s0, s1
 800cd40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cd44:	ee10 7a10 	vmov	r7, s0
 800cd48:	19ef      	adds	r7, r5, r7
 800cd4a:	1e7f      	subs	r7, r7, #1
 800cd4c:	ee22 2a21 	vmul.f32	s4, s4, s3
 800cd50:	ee62 1aa1 	vmul.f32	s3, s5, s3
 800cd54:	ea5f 069b 	movs.w	r6, fp, lsr #2
 800cd58:	eebd 1ac2 	vcvt.s32.f32	s2, s4
 800cd5c:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 800cd60:	4603      	mov	r3, r0
 800cd62:	460c      	mov	r4, r1
 800cd64:	4615      	mov	r5, r2
 800cd66:	d03f      	beq.n	800cde8 <ai_math_elementwise_sum_int8+0x14c>
 800cd68:	ea4f 0006 	mov.w	r0, r6
 800cd6c:	ee11 6a10 	vmov	r6, s2
 800cd70:	ee11 1a90 	vmov	r1, s3
 800cd74:	f854 eb04 	ldr.w	lr, [r4], #4
 800cd78:	f855 8b04 	ldr.w	r8, [r5], #4
 800cd7c:	ea4f 220e 	mov.w	r2, lr, lsl #8
 800cd80:	f022 1cff 	bic.w	ip, r2, #16711935	@ 0xff00ff
 800cd84:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800cd88:	f022 12ff 	bic.w	r2, r2, #16711935	@ 0xff00ff
 800cd8c:	f02e 1eff 	bic.w	lr, lr, #16711935	@ 0xff00ff
 800cd90:	f028 18ff 	bic.w	r8, r8, #16711935	@ 0xff00ff
 800cd94:	fb36 790c 	smlawb	r9, r6, ip, r7
 800cd98:	fb31 9902 	smlawb	r9, r1, r2, r9
 800cd9c:	fa49 f90a 	asr.w	r9, r9, sl
 800cda0:	f309 0907 	ssat	r9, #8, r9
 800cda4:	f803 9b01 	strb.w	r9, [r3], #1
 800cda8:	fb36 790e 	smlawb	r9, r6, lr, r7
 800cdac:	fb31 9908 	smlawb	r9, r1, r8, r9
 800cdb0:	fa49 f90a 	asr.w	r9, r9, sl
 800cdb4:	f309 0907 	ssat	r9, #8, r9
 800cdb8:	f803 9b01 	strb.w	r9, [r3], #1
 800cdbc:	fb36 7c1c 	smlawt	ip, r6, ip, r7
 800cdc0:	fb31 c212 	smlawt	r2, r1, r2, ip
 800cdc4:	fa42 f20a 	asr.w	r2, r2, sl
 800cdc8:	f302 0207 	ssat	r2, #8, r2
 800cdcc:	f803 2b01 	strb.w	r2, [r3], #1
 800cdd0:	fb36 721e 	smlawt	r2, r6, lr, r7
 800cdd4:	fb31 2218 	smlawt	r2, r1, r8, r2
 800cdd8:	fa42 f20a 	asr.w	r2, r2, sl
 800cddc:	f302 0207 	ssat	r2, #8, r2
 800cde0:	1e40      	subs	r0, r0, #1
 800cde2:	f803 2b01 	strb.w	r2, [r3], #1
 800cde6:	d1c5      	bne.n	800cd74 <ai_math_elementwise_sum_int8+0xd8>
 800cde8:	f01b 0f03 	tst.w	fp, #3
 800cdec:	f000 8019 	beq.w	800ce22 <ai_math_elementwise_sum_int8+0x186>
 800cdf0:	f00b 0003 	and.w	r0, fp, #3
 800cdf4:	ee11 1a10 	vmov	r1, s2
 800cdf8:	ee11 2a90 	vmov	r2, s3
 800cdfc:	f914 6b01 	ldrsb.w	r6, [r4], #1
 800ce00:	0236      	lsls	r6, r6, #8
 800ce02:	fb31 7606 	smlawb	r6, r1, r6, r7
 800ce06:	f915 cb01 	ldrsb.w	ip, [r5], #1
 800ce0a:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 800ce0e:	fb32 660c 	smlawb	r6, r2, ip, r6
 800ce12:	fa46 f60a 	asr.w	r6, r6, sl
 800ce16:	f306 0607 	ssat	r6, #8, r6
 800ce1a:	1e40      	subs	r0, r0, #1
 800ce1c:	f803 6b01 	strb.w	r6, [r3], #1
 800ce20:	d1ec      	bne.n	800cdfc <ai_math_elementwise_sum_int8+0x160>
 800ce22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce26 <strcmp>:
 800ce26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce2e:	2a01      	cmp	r2, #1
 800ce30:	bf28      	it	cs
 800ce32:	429a      	cmpcs	r2, r3
 800ce34:	d0f7      	beq.n	800ce26 <strcmp>
 800ce36:	1ad0      	subs	r0, r2, r3
 800ce38:	4770      	bx	lr

0800ce3a <__aeabi_memset>:
 800ce3a:	b470      	push	{r4, r5, r6}
 800ce3c:	0784      	lsls	r4, r0, #30
 800ce3e:	d046      	beq.n	800cece <__aeabi_memset+0x94>
 800ce40:	1e4c      	subs	r4, r1, #1
 800ce42:	2900      	cmp	r1, #0
 800ce44:	d041      	beq.n	800ceca <__aeabi_memset+0x90>
 800ce46:	b2d5      	uxtb	r5, r2
 800ce48:	4603      	mov	r3, r0
 800ce4a:	e002      	b.n	800ce52 <__aeabi_memset+0x18>
 800ce4c:	1e61      	subs	r1, r4, #1
 800ce4e:	b3e4      	cbz	r4, 800ceca <__aeabi_memset+0x90>
 800ce50:	460c      	mov	r4, r1
 800ce52:	f803 5b01 	strb.w	r5, [r3], #1
 800ce56:	0799      	lsls	r1, r3, #30
 800ce58:	d1f8      	bne.n	800ce4c <__aeabi_memset+0x12>
 800ce5a:	2c03      	cmp	r4, #3
 800ce5c:	d92e      	bls.n	800cebc <__aeabi_memset+0x82>
 800ce5e:	b2d5      	uxtb	r5, r2
 800ce60:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800ce64:	2c0f      	cmp	r4, #15
 800ce66:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800ce6a:	d919      	bls.n	800cea0 <__aeabi_memset+0x66>
 800ce6c:	4626      	mov	r6, r4
 800ce6e:	f103 0110 	add.w	r1, r3, #16
 800ce72:	3e10      	subs	r6, #16
 800ce74:	2e0f      	cmp	r6, #15
 800ce76:	f841 5c10 	str.w	r5, [r1, #-16]
 800ce7a:	f841 5c0c 	str.w	r5, [r1, #-12]
 800ce7e:	f841 5c08 	str.w	r5, [r1, #-8]
 800ce82:	f841 5c04 	str.w	r5, [r1, #-4]
 800ce86:	f101 0110 	add.w	r1, r1, #16
 800ce8a:	d8f2      	bhi.n	800ce72 <__aeabi_memset+0x38>
 800ce8c:	f1a4 0110 	sub.w	r1, r4, #16
 800ce90:	f021 010f 	bic.w	r1, r1, #15
 800ce94:	f004 040f 	and.w	r4, r4, #15
 800ce98:	3110      	adds	r1, #16
 800ce9a:	2c03      	cmp	r4, #3
 800ce9c:	440b      	add	r3, r1
 800ce9e:	d90d      	bls.n	800cebc <__aeabi_memset+0x82>
 800cea0:	461e      	mov	r6, r3
 800cea2:	4621      	mov	r1, r4
 800cea4:	3904      	subs	r1, #4
 800cea6:	2903      	cmp	r1, #3
 800cea8:	f846 5b04 	str.w	r5, [r6], #4
 800ceac:	d8fa      	bhi.n	800cea4 <__aeabi_memset+0x6a>
 800ceae:	1f21      	subs	r1, r4, #4
 800ceb0:	f021 0103 	bic.w	r1, r1, #3
 800ceb4:	3104      	adds	r1, #4
 800ceb6:	440b      	add	r3, r1
 800ceb8:	f004 0403 	and.w	r4, r4, #3
 800cebc:	b12c      	cbz	r4, 800ceca <__aeabi_memset+0x90>
 800cebe:	b2d2      	uxtb	r2, r2
 800cec0:	441c      	add	r4, r3
 800cec2:	f803 2b01 	strb.w	r2, [r3], #1
 800cec6:	42a3      	cmp	r3, r4
 800cec8:	d1fb      	bne.n	800cec2 <__aeabi_memset+0x88>
 800ceca:	bc70      	pop	{r4, r5, r6}
 800cecc:	4770      	bx	lr
 800cece:	460c      	mov	r4, r1
 800ced0:	4603      	mov	r3, r0
 800ced2:	e7c2      	b.n	800ce5a <__aeabi_memset+0x20>
	...

0800cee0 <memchr>:
 800cee0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800cee4:	2a10      	cmp	r2, #16
 800cee6:	db2b      	blt.n	800cf40 <memchr+0x60>
 800cee8:	f010 0f07 	tst.w	r0, #7
 800ceec:	d008      	beq.n	800cf00 <memchr+0x20>
 800ceee:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cef2:	3a01      	subs	r2, #1
 800cef4:	428b      	cmp	r3, r1
 800cef6:	d02d      	beq.n	800cf54 <memchr+0x74>
 800cef8:	f010 0f07 	tst.w	r0, #7
 800cefc:	b342      	cbz	r2, 800cf50 <memchr+0x70>
 800cefe:	d1f6      	bne.n	800ceee <memchr+0xe>
 800cf00:	b4f0      	push	{r4, r5, r6, r7}
 800cf02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800cf06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800cf0a:	f022 0407 	bic.w	r4, r2, #7
 800cf0e:	f07f 0700 	mvns.w	r7, #0
 800cf12:	2300      	movs	r3, #0
 800cf14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800cf18:	3c08      	subs	r4, #8
 800cf1a:	ea85 0501 	eor.w	r5, r5, r1
 800cf1e:	ea86 0601 	eor.w	r6, r6, r1
 800cf22:	fa85 f547 	uadd8	r5, r5, r7
 800cf26:	faa3 f587 	sel	r5, r3, r7
 800cf2a:	fa86 f647 	uadd8	r6, r6, r7
 800cf2e:	faa5 f687 	sel	r6, r5, r7
 800cf32:	b98e      	cbnz	r6, 800cf58 <memchr+0x78>
 800cf34:	d1ee      	bne.n	800cf14 <memchr+0x34>
 800cf36:	bcf0      	pop	{r4, r5, r6, r7}
 800cf38:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800cf3c:	f002 0207 	and.w	r2, r2, #7
 800cf40:	b132      	cbz	r2, 800cf50 <memchr+0x70>
 800cf42:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cf46:	3a01      	subs	r2, #1
 800cf48:	ea83 0301 	eor.w	r3, r3, r1
 800cf4c:	b113      	cbz	r3, 800cf54 <memchr+0x74>
 800cf4e:	d1f8      	bne.n	800cf42 <memchr+0x62>
 800cf50:	2000      	movs	r0, #0
 800cf52:	4770      	bx	lr
 800cf54:	3801      	subs	r0, #1
 800cf56:	4770      	bx	lr
 800cf58:	2d00      	cmp	r5, #0
 800cf5a:	bf06      	itte	eq
 800cf5c:	4635      	moveq	r5, r6
 800cf5e:	3803      	subeq	r0, #3
 800cf60:	3807      	subne	r0, #7
 800cf62:	f015 0f01 	tst.w	r5, #1
 800cf66:	d107      	bne.n	800cf78 <memchr+0x98>
 800cf68:	3001      	adds	r0, #1
 800cf6a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800cf6e:	bf02      	ittt	eq
 800cf70:	3001      	addeq	r0, #1
 800cf72:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 800cf76:	3001      	addeq	r0, #1
 800cf78:	bcf0      	pop	{r4, r5, r6, r7}
 800cf7a:	3801      	subs	r0, #1
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop

0800cf80 <strlen>:
 800cf80:	4603      	mov	r3, r0
 800cf82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf86:	2a00      	cmp	r2, #0
 800cf88:	d1fb      	bne.n	800cf82 <strlen+0x2>
 800cf8a:	1a18      	subs	r0, r3, r0
 800cf8c:	3801      	subs	r0, #1
 800cf8e:	4770      	bx	lr

0800cf90 <__aeabi_drsub>:
 800cf90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800cf94:	e002      	b.n	800cf9c <__adddf3>
 800cf96:	bf00      	nop

0800cf98 <__aeabi_dsub>:
 800cf98:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800cf9c <__adddf3>:
 800cf9c:	b530      	push	{r4, r5, lr}
 800cf9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800cfa2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800cfa6:	ea94 0f05 	teq	r4, r5
 800cfaa:	bf08      	it	eq
 800cfac:	ea90 0f02 	teqeq	r0, r2
 800cfb0:	bf1f      	itttt	ne
 800cfb2:	ea54 0c00 	orrsne.w	ip, r4, r0
 800cfb6:	ea55 0c02 	orrsne.w	ip, r5, r2
 800cfba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800cfbe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800cfc2:	f000 80e2 	beq.w	800d18a <__adddf3+0x1ee>
 800cfc6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800cfca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800cfce:	bfb8      	it	lt
 800cfd0:	426d      	neglt	r5, r5
 800cfd2:	dd0c      	ble.n	800cfee <__adddf3+0x52>
 800cfd4:	442c      	add	r4, r5
 800cfd6:	ea80 0202 	eor.w	r2, r0, r2
 800cfda:	ea81 0303 	eor.w	r3, r1, r3
 800cfde:	ea82 0000 	eor.w	r0, r2, r0
 800cfe2:	ea83 0101 	eor.w	r1, r3, r1
 800cfe6:	ea80 0202 	eor.w	r2, r0, r2
 800cfea:	ea81 0303 	eor.w	r3, r1, r3
 800cfee:	2d36      	cmp	r5, #54	@ 0x36
 800cff0:	bf88      	it	hi
 800cff2:	bd30      	pophi	{r4, r5, pc}
 800cff4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800cff8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800cffc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800d000:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800d004:	d002      	beq.n	800d00c <__adddf3+0x70>
 800d006:	4240      	negs	r0, r0
 800d008:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d00c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800d010:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d014:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800d018:	d002      	beq.n	800d020 <__adddf3+0x84>
 800d01a:	4252      	negs	r2, r2
 800d01c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800d020:	ea94 0f05 	teq	r4, r5
 800d024:	f000 80a7 	beq.w	800d176 <__adddf3+0x1da>
 800d028:	f1a4 0401 	sub.w	r4, r4, #1
 800d02c:	f1d5 0e20 	rsbs	lr, r5, #32
 800d030:	db0d      	blt.n	800d04e <__adddf3+0xb2>
 800d032:	fa02 fc0e 	lsl.w	ip, r2, lr
 800d036:	fa22 f205 	lsr.w	r2, r2, r5
 800d03a:	1880      	adds	r0, r0, r2
 800d03c:	f141 0100 	adc.w	r1, r1, #0
 800d040:	fa03 f20e 	lsl.w	r2, r3, lr
 800d044:	1880      	adds	r0, r0, r2
 800d046:	fa43 f305 	asr.w	r3, r3, r5
 800d04a:	4159      	adcs	r1, r3
 800d04c:	e00e      	b.n	800d06c <__adddf3+0xd0>
 800d04e:	f1a5 0520 	sub.w	r5, r5, #32
 800d052:	f10e 0e20 	add.w	lr, lr, #32
 800d056:	2a01      	cmp	r2, #1
 800d058:	fa03 fc0e 	lsl.w	ip, r3, lr
 800d05c:	bf28      	it	cs
 800d05e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800d062:	fa43 f305 	asr.w	r3, r3, r5
 800d066:	18c0      	adds	r0, r0, r3
 800d068:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800d06c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800d070:	d507      	bpl.n	800d082 <__adddf3+0xe6>
 800d072:	f04f 0e00 	mov.w	lr, #0
 800d076:	f1dc 0c00 	rsbs	ip, ip, #0
 800d07a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800d07e:	eb6e 0101 	sbc.w	r1, lr, r1
 800d082:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800d086:	d31b      	bcc.n	800d0c0 <__adddf3+0x124>
 800d088:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800d08c:	d30c      	bcc.n	800d0a8 <__adddf3+0x10c>
 800d08e:	0849      	lsrs	r1, r1, #1
 800d090:	ea5f 0030 	movs.w	r0, r0, rrx
 800d094:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800d098:	f104 0401 	add.w	r4, r4, #1
 800d09c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800d0a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800d0a4:	f080 809a 	bcs.w	800d1dc <__adddf3+0x240>
 800d0a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800d0ac:	bf08      	it	eq
 800d0ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800d0b2:	f150 0000 	adcs.w	r0, r0, #0
 800d0b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d0ba:	ea41 0105 	orr.w	r1, r1, r5
 800d0be:	bd30      	pop	{r4, r5, pc}
 800d0c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800d0c4:	4140      	adcs	r0, r0
 800d0c6:	eb41 0101 	adc.w	r1, r1, r1
 800d0ca:	3c01      	subs	r4, #1
 800d0cc:	bf28      	it	cs
 800d0ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800d0d2:	d2e9      	bcs.n	800d0a8 <__adddf3+0x10c>
 800d0d4:	f091 0f00 	teq	r1, #0
 800d0d8:	bf04      	itt	eq
 800d0da:	4601      	moveq	r1, r0
 800d0dc:	2000      	moveq	r0, #0
 800d0de:	fab1 f381 	clz	r3, r1
 800d0e2:	bf08      	it	eq
 800d0e4:	3320      	addeq	r3, #32
 800d0e6:	f1a3 030b 	sub.w	r3, r3, #11
 800d0ea:	f1b3 0220 	subs.w	r2, r3, #32
 800d0ee:	da0c      	bge.n	800d10a <__adddf3+0x16e>
 800d0f0:	320c      	adds	r2, #12
 800d0f2:	dd08      	ble.n	800d106 <__adddf3+0x16a>
 800d0f4:	f102 0c14 	add.w	ip, r2, #20
 800d0f8:	f1c2 020c 	rsb	r2, r2, #12
 800d0fc:	fa01 f00c 	lsl.w	r0, r1, ip
 800d100:	fa21 f102 	lsr.w	r1, r1, r2
 800d104:	e00c      	b.n	800d120 <__adddf3+0x184>
 800d106:	f102 0214 	add.w	r2, r2, #20
 800d10a:	bfd8      	it	le
 800d10c:	f1c2 0c20 	rsble	ip, r2, #32
 800d110:	fa01 f102 	lsl.w	r1, r1, r2
 800d114:	fa20 fc0c 	lsr.w	ip, r0, ip
 800d118:	bfdc      	itt	le
 800d11a:	ea41 010c 	orrle.w	r1, r1, ip
 800d11e:	4090      	lslle	r0, r2
 800d120:	1ae4      	subs	r4, r4, r3
 800d122:	bfa2      	ittt	ge
 800d124:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800d128:	4329      	orrge	r1, r5
 800d12a:	bd30      	popge	{r4, r5, pc}
 800d12c:	ea6f 0404 	mvn.w	r4, r4
 800d130:	3c1f      	subs	r4, #31
 800d132:	da1c      	bge.n	800d16e <__adddf3+0x1d2>
 800d134:	340c      	adds	r4, #12
 800d136:	dc0e      	bgt.n	800d156 <__adddf3+0x1ba>
 800d138:	f104 0414 	add.w	r4, r4, #20
 800d13c:	f1c4 0220 	rsb	r2, r4, #32
 800d140:	fa20 f004 	lsr.w	r0, r0, r4
 800d144:	fa01 f302 	lsl.w	r3, r1, r2
 800d148:	ea40 0003 	orr.w	r0, r0, r3
 800d14c:	fa21 f304 	lsr.w	r3, r1, r4
 800d150:	ea45 0103 	orr.w	r1, r5, r3
 800d154:	bd30      	pop	{r4, r5, pc}
 800d156:	f1c4 040c 	rsb	r4, r4, #12
 800d15a:	f1c4 0220 	rsb	r2, r4, #32
 800d15e:	fa20 f002 	lsr.w	r0, r0, r2
 800d162:	fa01 f304 	lsl.w	r3, r1, r4
 800d166:	ea40 0003 	orr.w	r0, r0, r3
 800d16a:	4629      	mov	r1, r5
 800d16c:	bd30      	pop	{r4, r5, pc}
 800d16e:	fa21 f004 	lsr.w	r0, r1, r4
 800d172:	4629      	mov	r1, r5
 800d174:	bd30      	pop	{r4, r5, pc}
 800d176:	f094 0f00 	teq	r4, #0
 800d17a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800d17e:	bf06      	itte	eq
 800d180:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800d184:	3401      	addeq	r4, #1
 800d186:	3d01      	subne	r5, #1
 800d188:	e74e      	b.n	800d028 <__adddf3+0x8c>
 800d18a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800d18e:	bf18      	it	ne
 800d190:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d194:	d029      	beq.n	800d1ea <__adddf3+0x24e>
 800d196:	ea94 0f05 	teq	r4, r5
 800d19a:	bf08      	it	eq
 800d19c:	ea90 0f02 	teqeq	r0, r2
 800d1a0:	d005      	beq.n	800d1ae <__adddf3+0x212>
 800d1a2:	ea54 0c00 	orrs.w	ip, r4, r0
 800d1a6:	bf04      	itt	eq
 800d1a8:	4619      	moveq	r1, r3
 800d1aa:	4610      	moveq	r0, r2
 800d1ac:	bd30      	pop	{r4, r5, pc}
 800d1ae:	ea91 0f03 	teq	r1, r3
 800d1b2:	bf1e      	ittt	ne
 800d1b4:	2100      	movne	r1, #0
 800d1b6:	2000      	movne	r0, #0
 800d1b8:	bd30      	popne	{r4, r5, pc}
 800d1ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800d1be:	d105      	bne.n	800d1cc <__adddf3+0x230>
 800d1c0:	0040      	lsls	r0, r0, #1
 800d1c2:	4149      	adcs	r1, r1
 800d1c4:	bf28      	it	cs
 800d1c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800d1ca:	bd30      	pop	{r4, r5, pc}
 800d1cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800d1d0:	bf3c      	itt	cc
 800d1d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800d1d6:	bd30      	popcc	{r4, r5, pc}
 800d1d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800d1dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800d1e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d1e4:	f04f 0000 	mov.w	r0, #0
 800d1e8:	bd30      	pop	{r4, r5, pc}
 800d1ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800d1ee:	bf1a      	itte	ne
 800d1f0:	4619      	movne	r1, r3
 800d1f2:	4610      	movne	r0, r2
 800d1f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800d1f8:	bf1c      	itt	ne
 800d1fa:	460b      	movne	r3, r1
 800d1fc:	4602      	movne	r2, r0
 800d1fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800d202:	bf06      	itte	eq
 800d204:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800d208:	ea91 0f03 	teqeq	r1, r3
 800d20c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800d210:	bd30      	pop	{r4, r5, pc}
 800d212:	bf00      	nop

0800d214 <__aeabi_ui2d>:
 800d214:	f090 0f00 	teq	r0, #0
 800d218:	bf04      	itt	eq
 800d21a:	2100      	moveq	r1, #0
 800d21c:	4770      	bxeq	lr
 800d21e:	b530      	push	{r4, r5, lr}
 800d220:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800d224:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800d228:	f04f 0500 	mov.w	r5, #0
 800d22c:	f04f 0100 	mov.w	r1, #0
 800d230:	e750      	b.n	800d0d4 <__adddf3+0x138>
 800d232:	bf00      	nop

0800d234 <__aeabi_i2d>:
 800d234:	f090 0f00 	teq	r0, #0
 800d238:	bf04      	itt	eq
 800d23a:	2100      	moveq	r1, #0
 800d23c:	4770      	bxeq	lr
 800d23e:	b530      	push	{r4, r5, lr}
 800d240:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800d244:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800d248:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800d24c:	bf48      	it	mi
 800d24e:	4240      	negmi	r0, r0
 800d250:	f04f 0100 	mov.w	r1, #0
 800d254:	e73e      	b.n	800d0d4 <__adddf3+0x138>
 800d256:	bf00      	nop

0800d258 <__aeabi_f2d>:
 800d258:	0042      	lsls	r2, r0, #1
 800d25a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800d25e:	ea4f 0131 	mov.w	r1, r1, rrx
 800d262:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800d266:	bf1f      	itttt	ne
 800d268:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800d26c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800d270:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800d274:	4770      	bxne	lr
 800d276:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800d27a:	bf08      	it	eq
 800d27c:	4770      	bxeq	lr
 800d27e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800d282:	bf04      	itt	eq
 800d284:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800d288:	4770      	bxeq	lr
 800d28a:	b530      	push	{r4, r5, lr}
 800d28c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800d290:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800d294:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800d298:	e71c      	b.n	800d0d4 <__adddf3+0x138>
 800d29a:	bf00      	nop

0800d29c <__aeabi_ul2d>:
 800d29c:	ea50 0201 	orrs.w	r2, r0, r1
 800d2a0:	bf08      	it	eq
 800d2a2:	4770      	bxeq	lr
 800d2a4:	b530      	push	{r4, r5, lr}
 800d2a6:	f04f 0500 	mov.w	r5, #0
 800d2aa:	e00a      	b.n	800d2c2 <__aeabi_l2d+0x16>

0800d2ac <__aeabi_l2d>:
 800d2ac:	ea50 0201 	orrs.w	r2, r0, r1
 800d2b0:	bf08      	it	eq
 800d2b2:	4770      	bxeq	lr
 800d2b4:	b530      	push	{r4, r5, lr}
 800d2b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800d2ba:	d502      	bpl.n	800d2c2 <__aeabi_l2d+0x16>
 800d2bc:	4240      	negs	r0, r0
 800d2be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d2c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800d2c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800d2ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800d2ce:	f43f aed8 	beq.w	800d082 <__adddf3+0xe6>
 800d2d2:	f04f 0203 	mov.w	r2, #3
 800d2d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d2da:	bf18      	it	ne
 800d2dc:	3203      	addne	r2, #3
 800d2de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d2e2:	bf18      	it	ne
 800d2e4:	3203      	addne	r2, #3
 800d2e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800d2ea:	f1c2 0320 	rsb	r3, r2, #32
 800d2ee:	fa00 fc03 	lsl.w	ip, r0, r3
 800d2f2:	fa20 f002 	lsr.w	r0, r0, r2
 800d2f6:	fa01 fe03 	lsl.w	lr, r1, r3
 800d2fa:	ea40 000e 	orr.w	r0, r0, lr
 800d2fe:	fa21 f102 	lsr.w	r1, r1, r2
 800d302:	4414      	add	r4, r2
 800d304:	e6bd      	b.n	800d082 <__adddf3+0xe6>
 800d306:	bf00      	nop

0800d308 <__aeabi_dmul>:
 800d308:	b570      	push	{r4, r5, r6, lr}
 800d30a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800d30e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800d312:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800d316:	bf1d      	ittte	ne
 800d318:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800d31c:	ea94 0f0c 	teqne	r4, ip
 800d320:	ea95 0f0c 	teqne	r5, ip
 800d324:	f000 f8de 	bleq	800d4e4 <__aeabi_dmul+0x1dc>
 800d328:	442c      	add	r4, r5
 800d32a:	ea81 0603 	eor.w	r6, r1, r3
 800d32e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800d332:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800d336:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800d33a:	bf18      	it	ne
 800d33c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800d340:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800d344:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d348:	d038      	beq.n	800d3bc <__aeabi_dmul+0xb4>
 800d34a:	fba0 ce02 	umull	ip, lr, r0, r2
 800d34e:	f04f 0500 	mov.w	r5, #0
 800d352:	fbe1 e502 	umlal	lr, r5, r1, r2
 800d356:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800d35a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800d35e:	f04f 0600 	mov.w	r6, #0
 800d362:	fbe1 5603 	umlal	r5, r6, r1, r3
 800d366:	f09c 0f00 	teq	ip, #0
 800d36a:	bf18      	it	ne
 800d36c:	f04e 0e01 	orrne.w	lr, lr, #1
 800d370:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800d374:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800d378:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800d37c:	d204      	bcs.n	800d388 <__aeabi_dmul+0x80>
 800d37e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800d382:	416d      	adcs	r5, r5
 800d384:	eb46 0606 	adc.w	r6, r6, r6
 800d388:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800d38c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800d390:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800d394:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800d398:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800d39c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800d3a0:	bf88      	it	hi
 800d3a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800d3a6:	d81e      	bhi.n	800d3e6 <__aeabi_dmul+0xde>
 800d3a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800d3ac:	bf08      	it	eq
 800d3ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800d3b2:	f150 0000 	adcs.w	r0, r0, #0
 800d3b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d3ba:	bd70      	pop	{r4, r5, r6, pc}
 800d3bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800d3c0:	ea46 0101 	orr.w	r1, r6, r1
 800d3c4:	ea40 0002 	orr.w	r0, r0, r2
 800d3c8:	ea81 0103 	eor.w	r1, r1, r3
 800d3cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800d3d0:	bfc2      	ittt	gt
 800d3d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 800d3d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800d3da:	bd70      	popgt	{r4, r5, r6, pc}
 800d3dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800d3e0:	f04f 0e00 	mov.w	lr, #0
 800d3e4:	3c01      	subs	r4, #1
 800d3e6:	f300 80ab 	bgt.w	800d540 <__aeabi_dmul+0x238>
 800d3ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800d3ee:	bfde      	ittt	le
 800d3f0:	2000      	movle	r0, #0
 800d3f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800d3f6:	bd70      	pople	{r4, r5, r6, pc}
 800d3f8:	f1c4 0400 	rsb	r4, r4, #0
 800d3fc:	3c20      	subs	r4, #32
 800d3fe:	da35      	bge.n	800d46c <__aeabi_dmul+0x164>
 800d400:	340c      	adds	r4, #12
 800d402:	dc1b      	bgt.n	800d43c <__aeabi_dmul+0x134>
 800d404:	f104 0414 	add.w	r4, r4, #20
 800d408:	f1c4 0520 	rsb	r5, r4, #32
 800d40c:	fa00 f305 	lsl.w	r3, r0, r5
 800d410:	fa20 f004 	lsr.w	r0, r0, r4
 800d414:	fa01 f205 	lsl.w	r2, r1, r5
 800d418:	ea40 0002 	orr.w	r0, r0, r2
 800d41c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800d420:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800d424:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800d428:	fa21 f604 	lsr.w	r6, r1, r4
 800d42c:	eb42 0106 	adc.w	r1, r2, r6
 800d430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d434:	bf08      	it	eq
 800d436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d43a:	bd70      	pop	{r4, r5, r6, pc}
 800d43c:	f1c4 040c 	rsb	r4, r4, #12
 800d440:	f1c4 0520 	rsb	r5, r4, #32
 800d444:	fa00 f304 	lsl.w	r3, r0, r4
 800d448:	fa20 f005 	lsr.w	r0, r0, r5
 800d44c:	fa01 f204 	lsl.w	r2, r1, r4
 800d450:	ea40 0002 	orr.w	r0, r0, r2
 800d454:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800d458:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800d45c:	f141 0100 	adc.w	r1, r1, #0
 800d460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d464:	bf08      	it	eq
 800d466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d46a:	bd70      	pop	{r4, r5, r6, pc}
 800d46c:	f1c4 0520 	rsb	r5, r4, #32
 800d470:	fa00 f205 	lsl.w	r2, r0, r5
 800d474:	ea4e 0e02 	orr.w	lr, lr, r2
 800d478:	fa20 f304 	lsr.w	r3, r0, r4
 800d47c:	fa01 f205 	lsl.w	r2, r1, r5
 800d480:	ea43 0302 	orr.w	r3, r3, r2
 800d484:	fa21 f004 	lsr.w	r0, r1, r4
 800d488:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800d48c:	fa21 f204 	lsr.w	r2, r1, r4
 800d490:	ea20 0002 	bic.w	r0, r0, r2
 800d494:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800d498:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d49c:	bf08      	it	eq
 800d49e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d4a2:	bd70      	pop	{r4, r5, r6, pc}
 800d4a4:	f094 0f00 	teq	r4, #0
 800d4a8:	d10f      	bne.n	800d4ca <__aeabi_dmul+0x1c2>
 800d4aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800d4ae:	0040      	lsls	r0, r0, #1
 800d4b0:	eb41 0101 	adc.w	r1, r1, r1
 800d4b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800d4b8:	bf08      	it	eq
 800d4ba:	3c01      	subeq	r4, #1
 800d4bc:	d0f7      	beq.n	800d4ae <__aeabi_dmul+0x1a6>
 800d4be:	ea41 0106 	orr.w	r1, r1, r6
 800d4c2:	f095 0f00 	teq	r5, #0
 800d4c6:	bf18      	it	ne
 800d4c8:	4770      	bxne	lr
 800d4ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800d4ce:	0052      	lsls	r2, r2, #1
 800d4d0:	eb43 0303 	adc.w	r3, r3, r3
 800d4d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800d4d8:	bf08      	it	eq
 800d4da:	3d01      	subeq	r5, #1
 800d4dc:	d0f7      	beq.n	800d4ce <__aeabi_dmul+0x1c6>
 800d4de:	ea43 0306 	orr.w	r3, r3, r6
 800d4e2:	4770      	bx	lr
 800d4e4:	ea94 0f0c 	teq	r4, ip
 800d4e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800d4ec:	bf18      	it	ne
 800d4ee:	ea95 0f0c 	teqne	r5, ip
 800d4f2:	d00c      	beq.n	800d50e <__aeabi_dmul+0x206>
 800d4f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800d4f8:	bf18      	it	ne
 800d4fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800d4fe:	d1d1      	bne.n	800d4a4 <__aeabi_dmul+0x19c>
 800d500:	ea81 0103 	eor.w	r1, r1, r3
 800d504:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800d508:	f04f 0000 	mov.w	r0, #0
 800d50c:	bd70      	pop	{r4, r5, r6, pc}
 800d50e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800d512:	bf06      	itte	eq
 800d514:	4610      	moveq	r0, r2
 800d516:	4619      	moveq	r1, r3
 800d518:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800d51c:	d019      	beq.n	800d552 <__aeabi_dmul+0x24a>
 800d51e:	ea94 0f0c 	teq	r4, ip
 800d522:	d102      	bne.n	800d52a <__aeabi_dmul+0x222>
 800d524:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800d528:	d113      	bne.n	800d552 <__aeabi_dmul+0x24a>
 800d52a:	ea95 0f0c 	teq	r5, ip
 800d52e:	d105      	bne.n	800d53c <__aeabi_dmul+0x234>
 800d530:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800d534:	bf1c      	itt	ne
 800d536:	4610      	movne	r0, r2
 800d538:	4619      	movne	r1, r3
 800d53a:	d10a      	bne.n	800d552 <__aeabi_dmul+0x24a>
 800d53c:	ea81 0103 	eor.w	r1, r1, r3
 800d540:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800d544:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800d548:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d54c:	f04f 0000 	mov.w	r0, #0
 800d550:	bd70      	pop	{r4, r5, r6, pc}
 800d552:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800d556:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800d55a:	bd70      	pop	{r4, r5, r6, pc}

0800d55c <__aeabi_ddiv>:
 800d55c:	b570      	push	{r4, r5, r6, lr}
 800d55e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800d562:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800d566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800d56a:	bf1d      	ittte	ne
 800d56c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800d570:	ea94 0f0c 	teqne	r4, ip
 800d574:	ea95 0f0c 	teqne	r5, ip
 800d578:	f000 f8a7 	bleq	800d6ca <__aeabi_ddiv+0x16e>
 800d57c:	eba4 0405 	sub.w	r4, r4, r5
 800d580:	ea81 0e03 	eor.w	lr, r1, r3
 800d584:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800d588:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800d58c:	f000 8088 	beq.w	800d6a0 <__aeabi_ddiv+0x144>
 800d590:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d594:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800d598:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800d59c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800d5a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d5a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800d5a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800d5ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800d5b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800d5b4:	429d      	cmp	r5, r3
 800d5b6:	bf08      	it	eq
 800d5b8:	4296      	cmpeq	r6, r2
 800d5ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800d5be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800d5c2:	d202      	bcs.n	800d5ca <__aeabi_ddiv+0x6e>
 800d5c4:	085b      	lsrs	r3, r3, #1
 800d5c6:	ea4f 0232 	mov.w	r2, r2, rrx
 800d5ca:	1ab6      	subs	r6, r6, r2
 800d5cc:	eb65 0503 	sbc.w	r5, r5, r3
 800d5d0:	085b      	lsrs	r3, r3, #1
 800d5d2:	ea4f 0232 	mov.w	r2, r2, rrx
 800d5d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d5da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800d5de:	ebb6 0e02 	subs.w	lr, r6, r2
 800d5e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800d5e6:	bf22      	ittt	cs
 800d5e8:	1ab6      	subcs	r6, r6, r2
 800d5ea:	4675      	movcs	r5, lr
 800d5ec:	ea40 000c 	orrcs.w	r0, r0, ip
 800d5f0:	085b      	lsrs	r3, r3, #1
 800d5f2:	ea4f 0232 	mov.w	r2, r2, rrx
 800d5f6:	ebb6 0e02 	subs.w	lr, r6, r2
 800d5fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 800d5fe:	bf22      	ittt	cs
 800d600:	1ab6      	subcs	r6, r6, r2
 800d602:	4675      	movcs	r5, lr
 800d604:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800d608:	085b      	lsrs	r3, r3, #1
 800d60a:	ea4f 0232 	mov.w	r2, r2, rrx
 800d60e:	ebb6 0e02 	subs.w	lr, r6, r2
 800d612:	eb75 0e03 	sbcs.w	lr, r5, r3
 800d616:	bf22      	ittt	cs
 800d618:	1ab6      	subcs	r6, r6, r2
 800d61a:	4675      	movcs	r5, lr
 800d61c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800d620:	085b      	lsrs	r3, r3, #1
 800d622:	ea4f 0232 	mov.w	r2, r2, rrx
 800d626:	ebb6 0e02 	subs.w	lr, r6, r2
 800d62a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800d62e:	bf22      	ittt	cs
 800d630:	1ab6      	subcs	r6, r6, r2
 800d632:	4675      	movcs	r5, lr
 800d634:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800d638:	ea55 0e06 	orrs.w	lr, r5, r6
 800d63c:	d018      	beq.n	800d670 <__aeabi_ddiv+0x114>
 800d63e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800d642:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800d646:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800d64a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800d64e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800d652:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d656:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800d65a:	d1c0      	bne.n	800d5de <__aeabi_ddiv+0x82>
 800d65c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800d660:	d10b      	bne.n	800d67a <__aeabi_ddiv+0x11e>
 800d662:	ea41 0100 	orr.w	r1, r1, r0
 800d666:	f04f 0000 	mov.w	r0, #0
 800d66a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d66e:	e7b6      	b.n	800d5de <__aeabi_ddiv+0x82>
 800d670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800d674:	bf04      	itt	eq
 800d676:	4301      	orreq	r1, r0
 800d678:	2000      	moveq	r0, #0
 800d67a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800d67e:	bf88      	it	hi
 800d680:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800d684:	f63f aeaf 	bhi.w	800d3e6 <__aeabi_dmul+0xde>
 800d688:	ebb5 0c03 	subs.w	ip, r5, r3
 800d68c:	bf04      	itt	eq
 800d68e:	ebb6 0c02 	subseq.w	ip, r6, r2
 800d692:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800d696:	f150 0000 	adcs.w	r0, r0, #0
 800d69a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d69e:	bd70      	pop	{r4, r5, r6, pc}
 800d6a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800d6a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800d6a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800d6ac:	bfc2      	ittt	gt
 800d6ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 800d6b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800d6b6:	bd70      	popgt	{r4, r5, r6, pc}
 800d6b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800d6bc:	f04f 0e00 	mov.w	lr, #0
 800d6c0:	3c01      	subs	r4, #1
 800d6c2:	e690      	b.n	800d3e6 <__aeabi_dmul+0xde>
 800d6c4:	ea45 0e06 	orr.w	lr, r5, r6
 800d6c8:	e68d      	b.n	800d3e6 <__aeabi_dmul+0xde>
 800d6ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800d6ce:	ea94 0f0c 	teq	r4, ip
 800d6d2:	bf08      	it	eq
 800d6d4:	ea95 0f0c 	teqeq	r5, ip
 800d6d8:	f43f af3b 	beq.w	800d552 <__aeabi_dmul+0x24a>
 800d6dc:	ea94 0f0c 	teq	r4, ip
 800d6e0:	d10a      	bne.n	800d6f8 <__aeabi_ddiv+0x19c>
 800d6e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800d6e6:	f47f af34 	bne.w	800d552 <__aeabi_dmul+0x24a>
 800d6ea:	ea95 0f0c 	teq	r5, ip
 800d6ee:	f47f af25 	bne.w	800d53c <__aeabi_dmul+0x234>
 800d6f2:	4610      	mov	r0, r2
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	e72c      	b.n	800d552 <__aeabi_dmul+0x24a>
 800d6f8:	ea95 0f0c 	teq	r5, ip
 800d6fc:	d106      	bne.n	800d70c <__aeabi_ddiv+0x1b0>
 800d6fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800d702:	f43f aefd 	beq.w	800d500 <__aeabi_dmul+0x1f8>
 800d706:	4610      	mov	r0, r2
 800d708:	4619      	mov	r1, r3
 800d70a:	e722      	b.n	800d552 <__aeabi_dmul+0x24a>
 800d70c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800d710:	bf18      	it	ne
 800d712:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800d716:	f47f aec5 	bne.w	800d4a4 <__aeabi_dmul+0x19c>
 800d71a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800d71e:	f47f af0d 	bne.w	800d53c <__aeabi_dmul+0x234>
 800d722:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800d726:	f47f aeeb 	bne.w	800d500 <__aeabi_dmul+0x1f8>
 800d72a:	e712      	b.n	800d552 <__aeabi_dmul+0x24a>

0800d72c <__gedf2>:
 800d72c:	f04f 3cff 	mov.w	ip, #4294967295
 800d730:	e006      	b.n	800d740 <__cmpdf2+0x4>
 800d732:	bf00      	nop

0800d734 <__ledf2>:
 800d734:	f04f 0c01 	mov.w	ip, #1
 800d738:	e002      	b.n	800d740 <__cmpdf2+0x4>
 800d73a:	bf00      	nop

0800d73c <__cmpdf2>:
 800d73c:	f04f 0c01 	mov.w	ip, #1
 800d740:	f84d cd04 	str.w	ip, [sp, #-4]!
 800d744:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800d748:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800d74c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800d750:	bf18      	it	ne
 800d752:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800d756:	d01b      	beq.n	800d790 <__cmpdf2+0x54>
 800d758:	b001      	add	sp, #4
 800d75a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800d75e:	bf0c      	ite	eq
 800d760:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800d764:	ea91 0f03 	teqne	r1, r3
 800d768:	bf02      	ittt	eq
 800d76a:	ea90 0f02 	teqeq	r0, r2
 800d76e:	2000      	moveq	r0, #0
 800d770:	4770      	bxeq	lr
 800d772:	f110 0f00 	cmn.w	r0, #0
 800d776:	ea91 0f03 	teq	r1, r3
 800d77a:	bf58      	it	pl
 800d77c:	4299      	cmppl	r1, r3
 800d77e:	bf08      	it	eq
 800d780:	4290      	cmpeq	r0, r2
 800d782:	bf2c      	ite	cs
 800d784:	17d8      	asrcs	r0, r3, #31
 800d786:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800d78a:	f040 0001 	orr.w	r0, r0, #1
 800d78e:	4770      	bx	lr
 800d790:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800d794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800d798:	d102      	bne.n	800d7a0 <__cmpdf2+0x64>
 800d79a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800d79e:	d107      	bne.n	800d7b0 <__cmpdf2+0x74>
 800d7a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800d7a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800d7a8:	d1d6      	bne.n	800d758 <__cmpdf2+0x1c>
 800d7aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800d7ae:	d0d3      	beq.n	800d758 <__cmpdf2+0x1c>
 800d7b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop

0800d7b8 <__aeabi_cdrcmple>:
 800d7b8:	4684      	mov	ip, r0
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	4662      	mov	r2, ip
 800d7be:	468c      	mov	ip, r1
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	4663      	mov	r3, ip
 800d7c4:	e000      	b.n	800d7c8 <__aeabi_cdcmpeq>
 800d7c6:	bf00      	nop

0800d7c8 <__aeabi_cdcmpeq>:
 800d7c8:	b501      	push	{r0, lr}
 800d7ca:	f7ff ffb7 	bl	800d73c <__cmpdf2>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	bf48      	it	mi
 800d7d2:	f110 0f00 	cmnmi.w	r0, #0
 800d7d6:	bd01      	pop	{r0, pc}

0800d7d8 <__aeabi_dcmpeq>:
 800d7d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800d7dc:	f7ff fff4 	bl	800d7c8 <__aeabi_cdcmpeq>
 800d7e0:	bf0c      	ite	eq
 800d7e2:	2001      	moveq	r0, #1
 800d7e4:	2000      	movne	r0, #0
 800d7e6:	f85d fb08 	ldr.w	pc, [sp], #8
 800d7ea:	bf00      	nop

0800d7ec <__aeabi_dcmplt>:
 800d7ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 800d7f0:	f7ff ffea 	bl	800d7c8 <__aeabi_cdcmpeq>
 800d7f4:	bf34      	ite	cc
 800d7f6:	2001      	movcc	r0, #1
 800d7f8:	2000      	movcs	r0, #0
 800d7fa:	f85d fb08 	ldr.w	pc, [sp], #8
 800d7fe:	bf00      	nop

0800d800 <__aeabi_dcmple>:
 800d800:	f84d ed08 	str.w	lr, [sp, #-8]!
 800d804:	f7ff ffe0 	bl	800d7c8 <__aeabi_cdcmpeq>
 800d808:	bf94      	ite	ls
 800d80a:	2001      	movls	r0, #1
 800d80c:	2000      	movhi	r0, #0
 800d80e:	f85d fb08 	ldr.w	pc, [sp], #8
 800d812:	bf00      	nop

0800d814 <__aeabi_dcmpge>:
 800d814:	f84d ed08 	str.w	lr, [sp, #-8]!
 800d818:	f7ff ffce 	bl	800d7b8 <__aeabi_cdrcmple>
 800d81c:	bf94      	ite	ls
 800d81e:	2001      	movls	r0, #1
 800d820:	2000      	movhi	r0, #0
 800d822:	f85d fb08 	ldr.w	pc, [sp], #8
 800d826:	bf00      	nop

0800d828 <__aeabi_dcmpgt>:
 800d828:	f84d ed08 	str.w	lr, [sp, #-8]!
 800d82c:	f7ff ffc4 	bl	800d7b8 <__aeabi_cdrcmple>
 800d830:	bf34      	ite	cc
 800d832:	2001      	movcc	r0, #1
 800d834:	2000      	movcs	r0, #0
 800d836:	f85d fb08 	ldr.w	pc, [sp], #8
 800d83a:	bf00      	nop

0800d83c <__aeabi_dcmpun>:
 800d83c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800d840:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800d844:	d102      	bne.n	800d84c <__aeabi_dcmpun+0x10>
 800d846:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800d84a:	d10a      	bne.n	800d862 <__aeabi_dcmpun+0x26>
 800d84c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800d850:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800d854:	d102      	bne.n	800d85c <__aeabi_dcmpun+0x20>
 800d856:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800d85a:	d102      	bne.n	800d862 <__aeabi_dcmpun+0x26>
 800d85c:	f04f 0000 	mov.w	r0, #0
 800d860:	4770      	bx	lr
 800d862:	f04f 0001 	mov.w	r0, #1
 800d866:	4770      	bx	lr

0800d868 <__aeabi_d2iz>:
 800d868:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800d86c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800d870:	d215      	bcs.n	800d89e <__aeabi_d2iz+0x36>
 800d872:	d511      	bpl.n	800d898 <__aeabi_d2iz+0x30>
 800d874:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800d878:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800d87c:	d912      	bls.n	800d8a4 <__aeabi_d2iz+0x3c>
 800d87e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800d882:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d886:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800d88a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800d88e:	fa23 f002 	lsr.w	r0, r3, r2
 800d892:	bf18      	it	ne
 800d894:	4240      	negne	r0, r0
 800d896:	4770      	bx	lr
 800d898:	f04f 0000 	mov.w	r0, #0
 800d89c:	4770      	bx	lr
 800d89e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800d8a2:	d105      	bne.n	800d8b0 <__aeabi_d2iz+0x48>
 800d8a4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800d8a8:	bf08      	it	eq
 800d8aa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800d8ae:	4770      	bx	lr
 800d8b0:	f04f 0000 	mov.w	r0, #0
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop

0800d8b8 <__aeabi_d2uiz>:
 800d8b8:	004a      	lsls	r2, r1, #1
 800d8ba:	d211      	bcs.n	800d8e0 <__aeabi_d2uiz+0x28>
 800d8bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800d8c0:	d211      	bcs.n	800d8e6 <__aeabi_d2uiz+0x2e>
 800d8c2:	d50d      	bpl.n	800d8e0 <__aeabi_d2uiz+0x28>
 800d8c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800d8c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800d8cc:	d40e      	bmi.n	800d8ec <__aeabi_d2uiz+0x34>
 800d8ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800d8d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d8d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800d8da:	fa23 f002 	lsr.w	r0, r3, r2
 800d8de:	4770      	bx	lr
 800d8e0:	f04f 0000 	mov.w	r0, #0
 800d8e4:	4770      	bx	lr
 800d8e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800d8ea:	d102      	bne.n	800d8f2 <__aeabi_d2uiz+0x3a>
 800d8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f0:	4770      	bx	lr
 800d8f2:	f04f 0000 	mov.w	r0, #0
 800d8f6:	4770      	bx	lr

0800d8f8 <__aeabi_d2f>:
 800d8f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800d8fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800d900:	bf24      	itt	cs
 800d902:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800d906:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800d90a:	d90d      	bls.n	800d928 <__aeabi_d2f+0x30>
 800d90c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800d910:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800d914:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800d918:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800d91c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800d920:	bf08      	it	eq
 800d922:	f020 0001 	biceq.w	r0, r0, #1
 800d926:	4770      	bx	lr
 800d928:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800d92c:	d121      	bne.n	800d972 <__aeabi_d2f+0x7a>
 800d92e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800d932:	bfbc      	itt	lt
 800d934:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800d938:	4770      	bxlt	lr
 800d93a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800d93e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800d942:	f1c2 0218 	rsb	r2, r2, #24
 800d946:	f1c2 0c20 	rsb	ip, r2, #32
 800d94a:	fa10 f30c 	lsls.w	r3, r0, ip
 800d94e:	fa20 f002 	lsr.w	r0, r0, r2
 800d952:	bf18      	it	ne
 800d954:	f040 0001 	orrne.w	r0, r0, #1
 800d958:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800d95c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800d960:	fa03 fc0c 	lsl.w	ip, r3, ip
 800d964:	ea40 000c 	orr.w	r0, r0, ip
 800d968:	fa23 f302 	lsr.w	r3, r3, r2
 800d96c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d970:	e7cc      	b.n	800d90c <__aeabi_d2f+0x14>
 800d972:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800d976:	d107      	bne.n	800d988 <__aeabi_d2f+0x90>
 800d978:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800d97c:	bf1e      	ittt	ne
 800d97e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800d982:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800d986:	4770      	bxne	lr
 800d988:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800d98c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800d990:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop

0800d998 <__aeabi_uldivmod>:
 800d998:	b953      	cbnz	r3, 800d9b0 <__aeabi_uldivmod+0x18>
 800d99a:	b94a      	cbnz	r2, 800d9b0 <__aeabi_uldivmod+0x18>
 800d99c:	2900      	cmp	r1, #0
 800d99e:	bf08      	it	eq
 800d9a0:	2800      	cmpeq	r0, #0
 800d9a2:	bf1c      	itt	ne
 800d9a4:	f04f 31ff 	movne.w	r1, #4294967295
 800d9a8:	f04f 30ff 	movne.w	r0, #4294967295
 800d9ac:	f000 b9d4 	b.w	800dd58 <__aeabi_idiv0>
 800d9b0:	f1ad 0c08 	sub.w	ip, sp, #8
 800d9b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800d9b8:	f000 f870 	bl	800da9c <__udivmoddi4>
 800d9bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d9c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9c4:	b004      	add	sp, #16
 800d9c6:	4770      	bx	lr

0800d9c8 <__aeabi_f2lz>:
 800d9c8:	ee07 0a90 	vmov	s15, r0
 800d9cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d4:	d401      	bmi.n	800d9da <__aeabi_f2lz+0x12>
 800d9d6:	f000 b823 	b.w	800da20 <__aeabi_f2ulz>
 800d9da:	eef1 7a67 	vneg.f32	s15, s15
 800d9de:	b508      	push	{r3, lr}
 800d9e0:	ee17 0a90 	vmov	r0, s15
 800d9e4:	f000 f81c 	bl	800da20 <__aeabi_f2ulz>
 800d9e8:	4240      	negs	r0, r0
 800d9ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d9ee:	bd08      	pop	{r3, pc}

0800d9f0 <__aeabi_d2lz>:
 800d9f0:	b538      	push	{r3, r4, r5, lr}
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	460d      	mov	r5, r1
 800d9fa:	f7ff fef7 	bl	800d7ec <__aeabi_dcmplt>
 800d9fe:	b928      	cbnz	r0, 800da0c <__aeabi_d2lz+0x1c>
 800da00:	4620      	mov	r0, r4
 800da02:	4629      	mov	r1, r5
 800da04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da08:	f000 b82a 	b.w	800da60 <__aeabi_d2ulz>
 800da0c:	4620      	mov	r0, r4
 800da0e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800da12:	f000 f825 	bl	800da60 <__aeabi_d2ulz>
 800da16:	4240      	negs	r0, r0
 800da18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800da1c:	bd38      	pop	{r3, r4, r5, pc}
 800da1e:	bf00      	nop

0800da20 <__aeabi_f2ulz>:
 800da20:	b5d0      	push	{r4, r6, r7, lr}
 800da22:	f7ff fc19 	bl	800d258 <__aeabi_f2d>
 800da26:	4b0c      	ldr	r3, [pc, #48]	@ (800da58 <__aeabi_f2ulz+0x38>)
 800da28:	2200      	movs	r2, #0
 800da2a:	4606      	mov	r6, r0
 800da2c:	460f      	mov	r7, r1
 800da2e:	f7ff fc6b 	bl	800d308 <__aeabi_dmul>
 800da32:	f7ff ff41 	bl	800d8b8 <__aeabi_d2uiz>
 800da36:	4604      	mov	r4, r0
 800da38:	f7ff fbec 	bl	800d214 <__aeabi_ui2d>
 800da3c:	4b07      	ldr	r3, [pc, #28]	@ (800da5c <__aeabi_f2ulz+0x3c>)
 800da3e:	2200      	movs	r2, #0
 800da40:	f7ff fc62 	bl	800d308 <__aeabi_dmul>
 800da44:	4602      	mov	r2, r0
 800da46:	460b      	mov	r3, r1
 800da48:	4630      	mov	r0, r6
 800da4a:	4639      	mov	r1, r7
 800da4c:	f7ff faa4 	bl	800cf98 <__aeabi_dsub>
 800da50:	f7ff ff32 	bl	800d8b8 <__aeabi_d2uiz>
 800da54:	4621      	mov	r1, r4
 800da56:	bdd0      	pop	{r4, r6, r7, pc}
 800da58:	3df00000 	.word	0x3df00000
 800da5c:	41f00000 	.word	0x41f00000

0800da60 <__aeabi_d2ulz>:
 800da60:	b5d0      	push	{r4, r6, r7, lr}
 800da62:	4b0c      	ldr	r3, [pc, #48]	@ (800da94 <__aeabi_d2ulz+0x34>)
 800da64:	2200      	movs	r2, #0
 800da66:	4606      	mov	r6, r0
 800da68:	460f      	mov	r7, r1
 800da6a:	f7ff fc4d 	bl	800d308 <__aeabi_dmul>
 800da6e:	f7ff ff23 	bl	800d8b8 <__aeabi_d2uiz>
 800da72:	4604      	mov	r4, r0
 800da74:	f7ff fbce 	bl	800d214 <__aeabi_ui2d>
 800da78:	4b07      	ldr	r3, [pc, #28]	@ (800da98 <__aeabi_d2ulz+0x38>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	f7ff fc44 	bl	800d308 <__aeabi_dmul>
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	4630      	mov	r0, r6
 800da86:	4639      	mov	r1, r7
 800da88:	f7ff fa86 	bl	800cf98 <__aeabi_dsub>
 800da8c:	f7ff ff14 	bl	800d8b8 <__aeabi_d2uiz>
 800da90:	4621      	mov	r1, r4
 800da92:	bdd0      	pop	{r4, r6, r7, pc}
 800da94:	3df00000 	.word	0x3df00000
 800da98:	41f00000 	.word	0x41f00000

0800da9c <__udivmoddi4>:
 800da9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daa0:	9d08      	ldr	r5, [sp, #32]
 800daa2:	460c      	mov	r4, r1
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d14e      	bne.n	800db46 <__udivmoddi4+0xaa>
 800daa8:	4694      	mov	ip, r2
 800daaa:	458c      	cmp	ip, r1
 800daac:	4686      	mov	lr, r0
 800daae:	fab2 f282 	clz	r2, r2
 800dab2:	d962      	bls.n	800db7a <__udivmoddi4+0xde>
 800dab4:	b14a      	cbz	r2, 800daca <__udivmoddi4+0x2e>
 800dab6:	f1c2 0320 	rsb	r3, r2, #32
 800daba:	4091      	lsls	r1, r2
 800dabc:	fa20 f303 	lsr.w	r3, r0, r3
 800dac0:	fa0c fc02 	lsl.w	ip, ip, r2
 800dac4:	4319      	orrs	r1, r3
 800dac6:	fa00 fe02 	lsl.w	lr, r0, r2
 800daca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800dace:	fa1f f68c 	uxth.w	r6, ip
 800dad2:	fbb1 f4f7 	udiv	r4, r1, r7
 800dad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800dada:	fb07 1114 	mls	r1, r7, r4, r1
 800dade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800dae2:	fb04 f106 	mul.w	r1, r4, r6
 800dae6:	4299      	cmp	r1, r3
 800dae8:	d90a      	bls.n	800db00 <__udivmoddi4+0x64>
 800daea:	eb1c 0303 	adds.w	r3, ip, r3
 800daee:	f104 30ff 	add.w	r0, r4, #4294967295
 800daf2:	f080 8112 	bcs.w	800dd1a <__udivmoddi4+0x27e>
 800daf6:	4299      	cmp	r1, r3
 800daf8:	f240 810f 	bls.w	800dd1a <__udivmoddi4+0x27e>
 800dafc:	3c02      	subs	r4, #2
 800dafe:	4463      	add	r3, ip
 800db00:	1a59      	subs	r1, r3, r1
 800db02:	fa1f f38e 	uxth.w	r3, lr
 800db06:	fbb1 f0f7 	udiv	r0, r1, r7
 800db0a:	fb07 1110 	mls	r1, r7, r0, r1
 800db0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800db12:	fb00 f606 	mul.w	r6, r0, r6
 800db16:	429e      	cmp	r6, r3
 800db18:	d90a      	bls.n	800db30 <__udivmoddi4+0x94>
 800db1a:	eb1c 0303 	adds.w	r3, ip, r3
 800db1e:	f100 31ff 	add.w	r1, r0, #4294967295
 800db22:	f080 80fc 	bcs.w	800dd1e <__udivmoddi4+0x282>
 800db26:	429e      	cmp	r6, r3
 800db28:	f240 80f9 	bls.w	800dd1e <__udivmoddi4+0x282>
 800db2c:	4463      	add	r3, ip
 800db2e:	3802      	subs	r0, #2
 800db30:	1b9b      	subs	r3, r3, r6
 800db32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800db36:	2100      	movs	r1, #0
 800db38:	b11d      	cbz	r5, 800db42 <__udivmoddi4+0xa6>
 800db3a:	40d3      	lsrs	r3, r2
 800db3c:	2200      	movs	r2, #0
 800db3e:	e9c5 3200 	strd	r3, r2, [r5]
 800db42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db46:	428b      	cmp	r3, r1
 800db48:	d905      	bls.n	800db56 <__udivmoddi4+0xba>
 800db4a:	b10d      	cbz	r5, 800db50 <__udivmoddi4+0xb4>
 800db4c:	e9c5 0100 	strd	r0, r1, [r5]
 800db50:	2100      	movs	r1, #0
 800db52:	4608      	mov	r0, r1
 800db54:	e7f5      	b.n	800db42 <__udivmoddi4+0xa6>
 800db56:	fab3 f183 	clz	r1, r3
 800db5a:	2900      	cmp	r1, #0
 800db5c:	d146      	bne.n	800dbec <__udivmoddi4+0x150>
 800db5e:	42a3      	cmp	r3, r4
 800db60:	d302      	bcc.n	800db68 <__udivmoddi4+0xcc>
 800db62:	4290      	cmp	r0, r2
 800db64:	f0c0 80f0 	bcc.w	800dd48 <__udivmoddi4+0x2ac>
 800db68:	1a86      	subs	r6, r0, r2
 800db6a:	eb64 0303 	sbc.w	r3, r4, r3
 800db6e:	2001      	movs	r0, #1
 800db70:	2d00      	cmp	r5, #0
 800db72:	d0e6      	beq.n	800db42 <__udivmoddi4+0xa6>
 800db74:	e9c5 6300 	strd	r6, r3, [r5]
 800db78:	e7e3      	b.n	800db42 <__udivmoddi4+0xa6>
 800db7a:	2a00      	cmp	r2, #0
 800db7c:	f040 8090 	bne.w	800dca0 <__udivmoddi4+0x204>
 800db80:	eba1 040c 	sub.w	r4, r1, ip
 800db84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800db88:	fa1f f78c 	uxth.w	r7, ip
 800db8c:	2101      	movs	r1, #1
 800db8e:	fbb4 f6f8 	udiv	r6, r4, r8
 800db92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800db96:	fb08 4416 	mls	r4, r8, r6, r4
 800db9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800db9e:	fb07 f006 	mul.w	r0, r7, r6
 800dba2:	4298      	cmp	r0, r3
 800dba4:	d908      	bls.n	800dbb8 <__udivmoddi4+0x11c>
 800dba6:	eb1c 0303 	adds.w	r3, ip, r3
 800dbaa:	f106 34ff 	add.w	r4, r6, #4294967295
 800dbae:	d202      	bcs.n	800dbb6 <__udivmoddi4+0x11a>
 800dbb0:	4298      	cmp	r0, r3
 800dbb2:	f200 80cd 	bhi.w	800dd50 <__udivmoddi4+0x2b4>
 800dbb6:	4626      	mov	r6, r4
 800dbb8:	1a1c      	subs	r4, r3, r0
 800dbba:	fa1f f38e 	uxth.w	r3, lr
 800dbbe:	fbb4 f0f8 	udiv	r0, r4, r8
 800dbc2:	fb08 4410 	mls	r4, r8, r0, r4
 800dbc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dbca:	fb00 f707 	mul.w	r7, r0, r7
 800dbce:	429f      	cmp	r7, r3
 800dbd0:	d908      	bls.n	800dbe4 <__udivmoddi4+0x148>
 800dbd2:	eb1c 0303 	adds.w	r3, ip, r3
 800dbd6:	f100 34ff 	add.w	r4, r0, #4294967295
 800dbda:	d202      	bcs.n	800dbe2 <__udivmoddi4+0x146>
 800dbdc:	429f      	cmp	r7, r3
 800dbde:	f200 80b0 	bhi.w	800dd42 <__udivmoddi4+0x2a6>
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	1bdb      	subs	r3, r3, r7
 800dbe6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800dbea:	e7a5      	b.n	800db38 <__udivmoddi4+0x9c>
 800dbec:	f1c1 0620 	rsb	r6, r1, #32
 800dbf0:	408b      	lsls	r3, r1
 800dbf2:	fa22 f706 	lsr.w	r7, r2, r6
 800dbf6:	431f      	orrs	r7, r3
 800dbf8:	fa20 fc06 	lsr.w	ip, r0, r6
 800dbfc:	fa04 f301 	lsl.w	r3, r4, r1
 800dc00:	ea43 030c 	orr.w	r3, r3, ip
 800dc04:	40f4      	lsrs	r4, r6
 800dc06:	fa00 f801 	lsl.w	r8, r0, r1
 800dc0a:	0c38      	lsrs	r0, r7, #16
 800dc0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800dc10:	fbb4 fef0 	udiv	lr, r4, r0
 800dc14:	fa1f fc87 	uxth.w	ip, r7
 800dc18:	fb00 441e 	mls	r4, r0, lr, r4
 800dc1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800dc20:	fb0e f90c 	mul.w	r9, lr, ip
 800dc24:	45a1      	cmp	r9, r4
 800dc26:	fa02 f201 	lsl.w	r2, r2, r1
 800dc2a:	d90a      	bls.n	800dc42 <__udivmoddi4+0x1a6>
 800dc2c:	193c      	adds	r4, r7, r4
 800dc2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 800dc32:	f080 8084 	bcs.w	800dd3e <__udivmoddi4+0x2a2>
 800dc36:	45a1      	cmp	r9, r4
 800dc38:	f240 8081 	bls.w	800dd3e <__udivmoddi4+0x2a2>
 800dc3c:	f1ae 0e02 	sub.w	lr, lr, #2
 800dc40:	443c      	add	r4, r7
 800dc42:	eba4 0409 	sub.w	r4, r4, r9
 800dc46:	fa1f f983 	uxth.w	r9, r3
 800dc4a:	fbb4 f3f0 	udiv	r3, r4, r0
 800dc4e:	fb00 4413 	mls	r4, r0, r3, r4
 800dc52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800dc56:	fb03 fc0c 	mul.w	ip, r3, ip
 800dc5a:	45a4      	cmp	ip, r4
 800dc5c:	d907      	bls.n	800dc6e <__udivmoddi4+0x1d2>
 800dc5e:	193c      	adds	r4, r7, r4
 800dc60:	f103 30ff 	add.w	r0, r3, #4294967295
 800dc64:	d267      	bcs.n	800dd36 <__udivmoddi4+0x29a>
 800dc66:	45a4      	cmp	ip, r4
 800dc68:	d965      	bls.n	800dd36 <__udivmoddi4+0x29a>
 800dc6a:	3b02      	subs	r3, #2
 800dc6c:	443c      	add	r4, r7
 800dc6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800dc72:	fba0 9302 	umull	r9, r3, r0, r2
 800dc76:	eba4 040c 	sub.w	r4, r4, ip
 800dc7a:	429c      	cmp	r4, r3
 800dc7c:	46ce      	mov	lr, r9
 800dc7e:	469c      	mov	ip, r3
 800dc80:	d351      	bcc.n	800dd26 <__udivmoddi4+0x28a>
 800dc82:	d04e      	beq.n	800dd22 <__udivmoddi4+0x286>
 800dc84:	b155      	cbz	r5, 800dc9c <__udivmoddi4+0x200>
 800dc86:	ebb8 030e 	subs.w	r3, r8, lr
 800dc8a:	eb64 040c 	sbc.w	r4, r4, ip
 800dc8e:	fa04 f606 	lsl.w	r6, r4, r6
 800dc92:	40cb      	lsrs	r3, r1
 800dc94:	431e      	orrs	r6, r3
 800dc96:	40cc      	lsrs	r4, r1
 800dc98:	e9c5 6400 	strd	r6, r4, [r5]
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	e750      	b.n	800db42 <__udivmoddi4+0xa6>
 800dca0:	f1c2 0320 	rsb	r3, r2, #32
 800dca4:	fa20 f103 	lsr.w	r1, r0, r3
 800dca8:	fa0c fc02 	lsl.w	ip, ip, r2
 800dcac:	fa24 f303 	lsr.w	r3, r4, r3
 800dcb0:	4094      	lsls	r4, r2
 800dcb2:	430c      	orrs	r4, r1
 800dcb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800dcb8:	fa00 fe02 	lsl.w	lr, r0, r2
 800dcbc:	fa1f f78c 	uxth.w	r7, ip
 800dcc0:	fbb3 f0f8 	udiv	r0, r3, r8
 800dcc4:	fb08 3110 	mls	r1, r8, r0, r3
 800dcc8:	0c23      	lsrs	r3, r4, #16
 800dcca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800dcce:	fb00 f107 	mul.w	r1, r0, r7
 800dcd2:	4299      	cmp	r1, r3
 800dcd4:	d908      	bls.n	800dce8 <__udivmoddi4+0x24c>
 800dcd6:	eb1c 0303 	adds.w	r3, ip, r3
 800dcda:	f100 36ff 	add.w	r6, r0, #4294967295
 800dcde:	d22c      	bcs.n	800dd3a <__udivmoddi4+0x29e>
 800dce0:	4299      	cmp	r1, r3
 800dce2:	d92a      	bls.n	800dd3a <__udivmoddi4+0x29e>
 800dce4:	3802      	subs	r0, #2
 800dce6:	4463      	add	r3, ip
 800dce8:	1a5b      	subs	r3, r3, r1
 800dcea:	b2a4      	uxth	r4, r4
 800dcec:	fbb3 f1f8 	udiv	r1, r3, r8
 800dcf0:	fb08 3311 	mls	r3, r8, r1, r3
 800dcf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800dcf8:	fb01 f307 	mul.w	r3, r1, r7
 800dcfc:	42a3      	cmp	r3, r4
 800dcfe:	d908      	bls.n	800dd12 <__udivmoddi4+0x276>
 800dd00:	eb1c 0404 	adds.w	r4, ip, r4
 800dd04:	f101 36ff 	add.w	r6, r1, #4294967295
 800dd08:	d213      	bcs.n	800dd32 <__udivmoddi4+0x296>
 800dd0a:	42a3      	cmp	r3, r4
 800dd0c:	d911      	bls.n	800dd32 <__udivmoddi4+0x296>
 800dd0e:	3902      	subs	r1, #2
 800dd10:	4464      	add	r4, ip
 800dd12:	1ae4      	subs	r4, r4, r3
 800dd14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd18:	e739      	b.n	800db8e <__udivmoddi4+0xf2>
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	e6f0      	b.n	800db00 <__udivmoddi4+0x64>
 800dd1e:	4608      	mov	r0, r1
 800dd20:	e706      	b.n	800db30 <__udivmoddi4+0x94>
 800dd22:	45c8      	cmp	r8, r9
 800dd24:	d2ae      	bcs.n	800dc84 <__udivmoddi4+0x1e8>
 800dd26:	ebb9 0e02 	subs.w	lr, r9, r2
 800dd2a:	eb63 0c07 	sbc.w	ip, r3, r7
 800dd2e:	3801      	subs	r0, #1
 800dd30:	e7a8      	b.n	800dc84 <__udivmoddi4+0x1e8>
 800dd32:	4631      	mov	r1, r6
 800dd34:	e7ed      	b.n	800dd12 <__udivmoddi4+0x276>
 800dd36:	4603      	mov	r3, r0
 800dd38:	e799      	b.n	800dc6e <__udivmoddi4+0x1d2>
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	e7d4      	b.n	800dce8 <__udivmoddi4+0x24c>
 800dd3e:	46d6      	mov	lr, sl
 800dd40:	e77f      	b.n	800dc42 <__udivmoddi4+0x1a6>
 800dd42:	4463      	add	r3, ip
 800dd44:	3802      	subs	r0, #2
 800dd46:	e74d      	b.n	800dbe4 <__udivmoddi4+0x148>
 800dd48:	4606      	mov	r6, r0
 800dd4a:	4623      	mov	r3, r4
 800dd4c:	4608      	mov	r0, r1
 800dd4e:	e70f      	b.n	800db70 <__udivmoddi4+0xd4>
 800dd50:	3e02      	subs	r6, #2
 800dd52:	4463      	add	r3, ip
 800dd54:	e730      	b.n	800dbb8 <__udivmoddi4+0x11c>
 800dd56:	bf00      	nop

0800dd58 <__aeabi_idiv0>:
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop

0800dd5c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d002      	beq.n	800dd72 <case_insensitive_strcmp+0x16>
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d101      	bne.n	800dd76 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800dd72:	2301      	movs	r3, #1
 800dd74:	e056      	b.n	800de24 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d10d      	bne.n	800dd9a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	e050      	b.n	800de24 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d101      	bne.n	800dd8e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	e04a      	b.n	800de24 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	3301      	adds	r3, #1
 800dd92:	607b      	str	r3, [r7, #4]
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	3301      	adds	r3, #1
 800dd98:	603b      	str	r3, [r7, #0]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	73fb      	strb	r3, [r7, #15]
 800dda0:	7bfb      	ldrb	r3, [r7, #15]
 800dda2:	3301      	adds	r3, #1
 800dda4:	4a22      	ldr	r2, [pc, #136]	@ (800de30 <case_insensitive_strcmp+0xd4>)
 800dda6:	4413      	add	r3, r2
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	f003 0303 	and.w	r3, r3, #3
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d103      	bne.n	800ddba <case_insensitive_strcmp+0x5e>
 800ddb2:	7bfb      	ldrb	r3, [r7, #15]
 800ddb4:	f103 0220 	add.w	r2, r3, #32
 800ddb8:	e000      	b.n	800ddbc <case_insensitive_strcmp+0x60>
 800ddba:	7bfa      	ldrb	r2, [r7, #15]
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	73bb      	strb	r3, [r7, #14]
 800ddc2:	7bbb      	ldrb	r3, [r7, #14]
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	491a      	ldr	r1, [pc, #104]	@ (800de30 <case_insensitive_strcmp+0xd4>)
 800ddc8:	440b      	add	r3, r1
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	f003 0303 	and.w	r3, r3, #3
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d102      	bne.n	800ddda <case_insensitive_strcmp+0x7e>
 800ddd4:	7bbb      	ldrb	r3, [r7, #14]
 800ddd6:	3320      	adds	r3, #32
 800ddd8:	e000      	b.n	800dddc <case_insensitive_strcmp+0x80>
 800ddda:	7bbb      	ldrb	r3, [r7, #14]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d0d0      	beq.n	800dd82 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	737b      	strb	r3, [r7, #13]
 800dde6:	7b7b      	ldrb	r3, [r7, #13]
 800dde8:	3301      	adds	r3, #1
 800ddea:	4a11      	ldr	r2, [pc, #68]	@ (800de30 <case_insensitive_strcmp+0xd4>)
 800ddec:	4413      	add	r3, r2
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	f003 0303 	and.w	r3, r3, #3
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d103      	bne.n	800de00 <case_insensitive_strcmp+0xa4>
 800ddf8:	7b7b      	ldrb	r3, [r7, #13]
 800ddfa:	f103 0220 	add.w	r2, r3, #32
 800ddfe:	e000      	b.n	800de02 <case_insensitive_strcmp+0xa6>
 800de00:	7b7a      	ldrb	r2, [r7, #13]
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	733b      	strb	r3, [r7, #12]
 800de08:	7b3b      	ldrb	r3, [r7, #12]
 800de0a:	3301      	adds	r3, #1
 800de0c:	4908      	ldr	r1, [pc, #32]	@ (800de30 <case_insensitive_strcmp+0xd4>)
 800de0e:	440b      	add	r3, r1
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	f003 0303 	and.w	r3, r3, #3
 800de16:	2b01      	cmp	r3, #1
 800de18:	d102      	bne.n	800de20 <case_insensitive_strcmp+0xc4>
 800de1a:	7b3b      	ldrb	r3, [r7, #12]
 800de1c:	3320      	adds	r3, #32
 800de1e:	e000      	b.n	800de22 <case_insensitive_strcmp+0xc6>
 800de20:	7b3b      	ldrb	r3, [r7, #12]
 800de22:	1ad3      	subs	r3, r2, r3
}
 800de24:	4618      	mov	r0, r3
 800de26:	3714      	adds	r7, #20
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr
 800de30:	0801a278 	.word	0x0801a278

0800de34 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2028      	movs	r0, #40	@ 0x28
 800de42:	4798      	blx	r3
 800de44:	60f8      	str	r0, [r7, #12]
    if (node)
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d004      	beq.n	800de56 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800de4c:	2228      	movs	r2, #40	@ 0x28
 800de4e:	2100      	movs	r1, #0
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f006 fd37 	bl	80148c4 <memset>
    }

    return node;
 800de56:	68fb      	ldr	r3, [r7, #12]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800de68:	2300      	movs	r3, #0
 800de6a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800de6c:	e03d      	b.n	800deea <cJSON_Delete+0x8a>
    {
        next = item->next;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d108      	bne.n	800de92 <cJSON_Delete+0x32>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d004      	beq.n	800de92 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7ff ffe7 	bl	800de60 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10c      	bne.n	800deb8 <cJSON_Delete+0x58>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d008      	beq.n	800deb8 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800dea6:	4b15      	ldr	r3, [pc, #84]	@ (800defc <cJSON_Delete+0x9c>)
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	6912      	ldr	r2, [r2, #16]
 800deae:	4610      	mov	r0, r2
 800deb0:	4798      	blx	r3
            item->valuestring = NULL;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10c      	bne.n	800dede <cJSON_Delete+0x7e>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a1b      	ldr	r3, [r3, #32]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d008      	beq.n	800dede <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 800decc:	4b0b      	ldr	r3, [pc, #44]	@ (800defc <cJSON_Delete+0x9c>)
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	6a12      	ldr	r2, [r2, #32]
 800ded4:	4610      	mov	r0, r2
 800ded6:	4798      	blx	r3
            item->string = NULL;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2200      	movs	r2, #0
 800dedc:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800dede:	4b07      	ldr	r3, [pc, #28]	@ (800defc <cJSON_Delete+0x9c>)
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	4798      	blx	r3
        item = next;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d1be      	bne.n	800de6e <cJSON_Delete+0xe>
    }
}
 800def0:	bf00      	nop
 800def2:	bf00      	nop
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	20000000 	.word	0x20000000

0800df00 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800df00:	b480      	push	{r7}
 800df02:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800df04:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800df06:	4618      	mov	r0, r3
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b098      	sub	sp, #96	@ 0x60
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
    double number = 0;
 800df1a:	f04f 0200 	mov.w	r2, #0
 800df1e:	f04f 0300 	mov.w	r3, #0
 800df22:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800df26:	2300      	movs	r3, #0
 800df28:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800df2a:	f7ff ffe9 	bl	800df00 <get_decimal_point>
 800df2e:	4603      	mov	r3, r0
 800df30:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800df34:	2300      	movs	r3, #0
 800df36:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d003      	beq.n	800df46 <parse_number+0x36>
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d101      	bne.n	800df4a <parse_number+0x3a>
    {
        return false;
 800df46:	2300      	movs	r3, #0
 800df48:	e0a0      	b.n	800e08c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800df4a:	2300      	movs	r3, #0
 800df4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800df4e:	e03d      	b.n	800dfcc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	6899      	ldr	r1, [r3, #8]
 800df58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df5a:	440b      	add	r3, r1
 800df5c:	4413      	add	r3, r2
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	2b45      	cmp	r3, #69	@ 0x45
 800df62:	dc17      	bgt.n	800df94 <parse_number+0x84>
 800df64:	2b2b      	cmp	r3, #43	@ 0x2b
 800df66:	db40      	blt.n	800dfea <parse_number+0xda>
 800df68:	3b2b      	subs	r3, #43	@ 0x2b
 800df6a:	2201      	movs	r2, #1
 800df6c:	409a      	lsls	r2, r3
 800df6e:	4b4c      	ldr	r3, [pc, #304]	@ (800e0a0 <parse_number+0x190>)
 800df70:	4013      	ands	r3, r2
 800df72:	2b00      	cmp	r3, #0
 800df74:	bf14      	ite	ne
 800df76:	2301      	movne	r3, #1
 800df78:	2300      	moveq	r3, #0
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d10b      	bne.n	800df98 <parse_number+0x88>
 800df80:	f002 0308 	and.w	r3, r2, #8
 800df84:	2b00      	cmp	r3, #0
 800df86:	bf14      	ite	ne
 800df88:	2301      	movne	r3, #1
 800df8a:	2300      	moveq	r3, #0
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d111      	bne.n	800dfb6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800df92:	e02a      	b.n	800dfea <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800df94:	2b65      	cmp	r3, #101	@ 0x65
 800df96:	d128      	bne.n	800dfea <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	6899      	ldr	r1, [r3, #8]
 800dfa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfa2:	440b      	add	r3, r1
 800dfa4:	4413      	add	r3, r2
 800dfa6:	7819      	ldrb	r1, [r3, #0]
 800dfa8:	f107 0208 	add.w	r2, r7, #8
 800dfac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfae:	4413      	add	r3, r2
 800dfb0:	460a      	mov	r2, r1
 800dfb2:	701a      	strb	r2, [r3, #0]
                break;
 800dfb4:	e007      	b.n	800dfc6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800dfb6:	f107 0208 	add.w	r2, r7, #8
 800dfba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfbc:	4413      	add	r3, r2
 800dfbe:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800dfc2:	701a      	strb	r2, [r3, #0]
                break;
 800dfc4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800dfc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfc8:	3301      	adds	r3, #1
 800dfca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dfcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfce:	2b3e      	cmp	r3, #62	@ 0x3e
 800dfd0:	d80d      	bhi.n	800dfee <parse_number+0xde>
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00a      	beq.n	800dfee <parse_number+0xde>
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	689a      	ldr	r2, [r3, #8]
 800dfdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfde:	441a      	add	r2, r3
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d3b3      	bcc.n	800df50 <parse_number+0x40>
        }
    }
loop_end:
 800dfe8:	e001      	b.n	800dfee <parse_number+0xde>
                goto loop_end;
 800dfea:	bf00      	nop
 800dfec:	e000      	b.n	800dff0 <parse_number+0xe0>
loop_end:
 800dfee:	bf00      	nop
    number_c_string[i] = '\0';
 800dff0:	f107 0208 	add.w	r2, r7, #8
 800dff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dff6:	4413      	add	r3, r2
 800dff8:	2200      	movs	r2, #0
 800dffa:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800dffc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800e000:	f107 0308 	add.w	r3, r7, #8
 800e004:	4611      	mov	r1, r2
 800e006:	4618      	mov	r0, r3
 800e008:	f005 f870 	bl	80130ec <strtod>
 800e00c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 800e010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e012:	f107 0308 	add.w	r3, r7, #8
 800e016:	429a      	cmp	r2, r3
 800e018:	d101      	bne.n	800e01e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800e01a:	2300      	movs	r3, #0
 800e01c:	e036      	b.n	800e08c <parse_number+0x17c>
    }

    item->valuedouble = number;
 800e01e:	6879      	ldr	r1, [r7, #4]
 800e020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e024:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800e028:	a31b      	add	r3, pc, #108	@ (adr r3, 800e098 <parse_number+0x188>)
 800e02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e032:	f7ff fbef 	bl	800d814 <__aeabi_dcmpge>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d004      	beq.n	800e046 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800e042:	615a      	str	r2, [r3, #20]
 800e044:	e015      	b.n	800e072 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800e046:	f04f 0200 	mov.w	r2, #0
 800e04a:	4b16      	ldr	r3, [pc, #88]	@ (800e0a4 <parse_number+0x194>)
 800e04c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e050:	f7ff fbd6 	bl	800d800 <__aeabi_dcmple>
 800e054:	4603      	mov	r3, r0
 800e056:	2b00      	cmp	r3, #0
 800e058:	d004      	beq.n	800e064 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e060:	615a      	str	r2, [r3, #20]
 800e062:	e006      	b.n	800e072 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800e064:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e068:	f7ff fbfe 	bl	800d868 <__aeabi_d2iz>
 800e06c:	4602      	mov	r2, r0
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2208      	movs	r2, #8
 800e076:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	689b      	ldr	r3, [r3, #8]
 800e07c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e07e:	f107 0208 	add.w	r2, r7, #8
 800e082:	1a8a      	subs	r2, r1, r2
 800e084:	441a      	add	r2, r3
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	609a      	str	r2, [r3, #8]
    return true;
 800e08a:	2301      	movs	r3, #1
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3760      	adds	r7, #96	@ 0x60
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	f3af 8000 	nop.w
 800e098:	ffc00000 	.word	0xffc00000
 800e09c:	41dfffff 	.word	0x41dfffff
 800e0a0:	04007fe5 	.word	0x04007fe5
 800e0a4:	c1e00000 	.word	0xc1e00000

0800e0a8 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	60bb      	str	r3, [r7, #8]
 800e0bc:	e04c      	b.n	800e158 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	2b2f      	cmp	r3, #47	@ 0x2f
 800e0c8:	d90f      	bls.n	800e0ea <parse_hex4+0x42>
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	2b39      	cmp	r3, #57	@ 0x39
 800e0d4:	d809      	bhi.n	800e0ea <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	4413      	add	r3, r2
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	3b30      	subs	r3, #48	@ 0x30
 800e0e6:	60fb      	str	r3, [r7, #12]
 800e0e8:	e02d      	b.n	800e146 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	2b40      	cmp	r3, #64	@ 0x40
 800e0f4:	d90f      	bls.n	800e116 <parse_hex4+0x6e>
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	2b46      	cmp	r3, #70	@ 0x46
 800e100:	d809      	bhi.n	800e116 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	4413      	add	r3, r2
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	4413      	add	r3, r2
 800e110:	3b37      	subs	r3, #55	@ 0x37
 800e112:	60fb      	str	r3, [r7, #12]
 800e114:	e017      	b.n	800e146 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	4413      	add	r3, r2
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	2b60      	cmp	r3, #96	@ 0x60
 800e120:	d90f      	bls.n	800e142 <parse_hex4+0x9a>
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	4413      	add	r3, r2
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	2b66      	cmp	r3, #102	@ 0x66
 800e12c:	d809      	bhi.n	800e142 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	4413      	add	r3, r2
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	461a      	mov	r2, r3
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	4413      	add	r3, r2
 800e13c:	3b57      	subs	r3, #87	@ 0x57
 800e13e:	60fb      	str	r3, [r7, #12]
 800e140:	e001      	b.n	800e146 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800e142:	2300      	movs	r3, #0
 800e144:	e00c      	b.n	800e160 <parse_hex4+0xb8>
        }

        if (i < 3)
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	2b02      	cmp	r3, #2
 800e14a:	d802      	bhi.n	800e152 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	011b      	lsls	r3, r3, #4
 800e150:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	3301      	adds	r3, #1
 800e156:	60bb      	str	r3, [r7, #8]
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	2b03      	cmp	r3, #3
 800e15c:	d9af      	bls.n	800e0be <parse_hex4+0x16>
        }
    }

    return h;
 800e15e:	68fb      	ldr	r3, [r7, #12]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3714      	adds	r7, #20
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr

0800e16c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b08a      	sub	sp, #40	@ 0x28
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800e178:	2300      	movs	r3, #0
 800e17a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800e17c:	2300      	movs	r3, #0
 800e17e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800e184:	2300      	movs	r3, #0
 800e186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 800e190:	2300      	movs	r3, #0
 800e192:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800e196:	2300      	movs	r3, #0
 800e198:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800e19c:	68ba      	ldr	r2, [r7, #8]
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	2b05      	cmp	r3, #5
 800e1a4:	f340 80b7 	ble.w	800e316 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	3302      	adds	r3, #2
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7ff ff7b 	bl	800e0a8 <parse_hex4>
 800e1b2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800e1ba:	d304      	bcc.n	800e1c6 <utf16_literal_to_utf8+0x5a>
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800e1c2:	f0c0 80aa 	bcc.w	800e31a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800e1cc:	d337      	bcc.n	800e23e <utf16_literal_to_utf8+0xd2>
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800e1d4:	d233      	bcs.n	800e23e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	3306      	adds	r3, #6
 800e1da:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800e1e0:	230c      	movs	r3, #12
 800e1e2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800e1e6:	68ba      	ldr	r2, [r7, #8]
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	1ad3      	subs	r3, r2, r3
 800e1ec:	2b05      	cmp	r3, #5
 800e1ee:	f340 8096 	ble.w	800e31e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	2b5c      	cmp	r3, #92	@ 0x5c
 800e1f8:	f040 8093 	bne.w	800e322 <utf16_literal_to_utf8+0x1b6>
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	3301      	adds	r3, #1
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	2b75      	cmp	r3, #117	@ 0x75
 800e204:	f040 808d 	bne.w	800e322 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	3302      	adds	r3, #2
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7ff ff4b 	bl	800e0a8 <parse_hex4>
 800e212:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800e21a:	f0c0 8084 	bcc.w	800e326 <utf16_literal_to_utf8+0x1ba>
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800e224:	d27f      	bcs.n	800e326 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	029a      	lsls	r2, r3, #10
 800e22a:	4b43      	ldr	r3, [pc, #268]	@ (800e338 <utf16_literal_to_utf8+0x1cc>)
 800e22c:	4013      	ands	r3, r2
 800e22e:	693a      	ldr	r2, [r7, #16]
 800e230:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e234:	4313      	orrs	r3, r2
 800e236:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800e23a:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800e23c:	e004      	b.n	800e248 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800e23e:	2306      	movs	r3, #6
 800e240:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800e248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e24c:	d803      	bhi.n	800e256 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800e24e:	2301      	movs	r3, #1
 800e250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e254:	e01f      	b.n	800e296 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800e256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e258:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e25c:	d206      	bcs.n	800e26c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800e25e:	2302      	movs	r3, #2
 800e260:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800e264:	23c0      	movs	r3, #192	@ 0xc0
 800e266:	f887 3020 	strb.w	r3, [r7, #32]
 800e26a:	e014      	b.n	800e296 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800e26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e272:	d206      	bcs.n	800e282 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800e274:	2303      	movs	r3, #3
 800e276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800e27a:	23e0      	movs	r3, #224	@ 0xe0
 800e27c:	f887 3020 	strb.w	r3, [r7, #32]
 800e280:	e009      	b.n	800e296 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800e282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e284:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800e288:	d24f      	bcs.n	800e32a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800e28a:	2304      	movs	r3, #4
 800e28c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800e290:	23f0      	movs	r3, #240	@ 0xf0
 800e292:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800e296:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e29a:	3b01      	subs	r3, #1
 800e29c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e2a0:	e015      	b.n	800e2ce <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2aa:	b2da      	uxtb	r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6819      	ldr	r1, [r3, #0]
 800e2b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e2b4:	440b      	add	r3, r1
 800e2b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e2ba:	b2d2      	uxtb	r2, r2
 800e2bc:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800e2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c0:	099b      	lsrs	r3, r3, #6
 800e2c2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800e2c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e2ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d1e5      	bne.n	800e2a2 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800e2d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d909      	bls.n	800e2f2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800e2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e0:	b2d9      	uxtb	r1, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e2ea:	430a      	orrs	r2, r1
 800e2ec:	b2d2      	uxtb	r2, r2
 800e2ee:	701a      	strb	r2, [r3, #0]
 800e2f0:	e007      	b.n	800e302 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e2fe:	b2d2      	uxtb	r2, r2
 800e300:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e30a:	441a      	add	r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800e310:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e314:	e00b      	b.n	800e32e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800e316:	bf00      	nop
 800e318:	e008      	b.n	800e32c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800e31a:	bf00      	nop
 800e31c:	e006      	b.n	800e32c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800e31e:	bf00      	nop
 800e320:	e004      	b.n	800e32c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800e322:	bf00      	nop
 800e324:	e002      	b.n	800e32c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800e326:	bf00      	nop
 800e328:	e000      	b.n	800e32c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800e32a:	bf00      	nop

fail:
    return 0;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3728      	adds	r7, #40	@ 0x28
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	000ffc00 	.word	0x000ffc00

0800e33c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b08a      	sub	sp, #40	@ 0x28
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	3301      	adds	r3, #1
 800e350:	4413      	add	r3, r2
 800e352:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	3301      	adds	r3, #1
 800e35e:	4413      	add	r3, r2
 800e360:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800e362:	2300      	movs	r3, #0
 800e364:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800e366:	2300      	movs	r3, #0
 800e368:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	689b      	ldr	r3, [r3, #8]
 800e372:	4413      	add	r3, r2
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	2b22      	cmp	r3, #34	@ 0x22
 800e378:	f040 8103 	bne.w	800e582 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800e37c:	2300      	movs	r3, #0
 800e37e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800e380:	2300      	movs	r3, #0
 800e382:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800e384:	e017      	b.n	800e3b6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800e386:	6a3b      	ldr	r3, [r7, #32]
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	2b5c      	cmp	r3, #92	@ 0x5c
 800e38c:	d110      	bne.n	800e3b0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800e38e:	6a3b      	ldr	r3, [r7, #32]
 800e390:	1c5a      	adds	r2, r3, #1
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	1ad3      	subs	r3, r2, r3
 800e398:	461a      	mov	r2, r3
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	f080 80f1 	bcs.w	800e586 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	61bb      	str	r3, [r7, #24]
                input_end++;
 800e3aa:	6a3b      	ldr	r3, [r7, #32]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800e3b0:	6a3b      	ldr	r3, [r7, #32]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	6a3a      	ldr	r2, [r7, #32]
 800e3bc:	1ad3      	subs	r3, r2, r3
 800e3be:	461a      	mov	r2, r3
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d203      	bcs.n	800e3d0 <parse_string+0x94>
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	2b22      	cmp	r3, #34	@ 0x22
 800e3ce:	d1da      	bne.n	800e386 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6a3a      	ldr	r2, [r7, #32]
 800e3d6:	1ad3      	subs	r3, r2, r3
 800e3d8:	461a      	mov	r2, r3
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	f080 80d3 	bcs.w	800e58a <parse_string+0x24e>
 800e3e4:	6a3b      	ldr	r3, [r7, #32]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	2b22      	cmp	r3, #34	@ 0x22
 800e3ea:	f040 80ce 	bne.w	800e58a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	6a3a      	ldr	r2, [r7, #32]
 800e3fa:	1ad3      	subs	r3, r2, r3
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	1ad3      	subs	r3, r2, r3
 800e402:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	691b      	ldr	r3, [r3, #16]
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	3201      	adds	r2, #1
 800e40c:	4610      	mov	r0, r2
 800e40e:	4798      	blx	r3
 800e410:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	2b00      	cmp	r3, #0
 800e416:	f000 80ba 	beq.w	800e58e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800e41e:	e094      	b.n	800e54a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 800e420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	2b5c      	cmp	r3, #92	@ 0x5c
 800e426:	d008      	beq.n	800e43a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800e428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e42a:	1c53      	adds	r3, r2, #1
 800e42c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	1c59      	adds	r1, r3, #1
 800e432:	60f9      	str	r1, [r7, #12]
 800e434:	7812      	ldrb	r2, [r2, #0]
 800e436:	701a      	strb	r2, [r3, #0]
 800e438:	e087      	b.n	800e54a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800e43a:	2302      	movs	r3, #2
 800e43c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800e43e:	6a3a      	ldr	r2, [r7, #32]
 800e440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	2b00      	cmp	r3, #0
 800e446:	f340 80a4 	ble.w	800e592 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800e44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e44c:	3301      	adds	r3, #1
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	2b75      	cmp	r3, #117	@ 0x75
 800e452:	f300 80a0 	bgt.w	800e596 <parse_string+0x25a>
 800e456:	2b5c      	cmp	r3, #92	@ 0x5c
 800e458:	da04      	bge.n	800e464 <parse_string+0x128>
 800e45a:	2b22      	cmp	r3, #34	@ 0x22
 800e45c:	d05c      	beq.n	800e518 <parse_string+0x1dc>
 800e45e:	2b2f      	cmp	r3, #47	@ 0x2f
 800e460:	d05a      	beq.n	800e518 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800e462:	e098      	b.n	800e596 <parse_string+0x25a>
            switch (input_pointer[1])
 800e464:	3b5c      	subs	r3, #92	@ 0x5c
 800e466:	2b19      	cmp	r3, #25
 800e468:	f200 8095 	bhi.w	800e596 <parse_string+0x25a>
 800e46c:	a201      	add	r2, pc, #4	@ (adr r2, 800e474 <parse_string+0x138>)
 800e46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e472:	bf00      	nop
 800e474:	0800e519 	.word	0x0800e519
 800e478:	0800e597 	.word	0x0800e597
 800e47c:	0800e597 	.word	0x0800e597
 800e480:	0800e597 	.word	0x0800e597
 800e484:	0800e597 	.word	0x0800e597
 800e488:	0800e597 	.word	0x0800e597
 800e48c:	0800e4dd 	.word	0x0800e4dd
 800e490:	0800e597 	.word	0x0800e597
 800e494:	0800e597 	.word	0x0800e597
 800e498:	0800e597 	.word	0x0800e597
 800e49c:	0800e4e9 	.word	0x0800e4e9
 800e4a0:	0800e597 	.word	0x0800e597
 800e4a4:	0800e597 	.word	0x0800e597
 800e4a8:	0800e597 	.word	0x0800e597
 800e4ac:	0800e597 	.word	0x0800e597
 800e4b0:	0800e597 	.word	0x0800e597
 800e4b4:	0800e597 	.word	0x0800e597
 800e4b8:	0800e597 	.word	0x0800e597
 800e4bc:	0800e4f5 	.word	0x0800e4f5
 800e4c0:	0800e597 	.word	0x0800e597
 800e4c4:	0800e597 	.word	0x0800e597
 800e4c8:	0800e597 	.word	0x0800e597
 800e4cc:	0800e501 	.word	0x0800e501
 800e4d0:	0800e597 	.word	0x0800e597
 800e4d4:	0800e50d 	.word	0x0800e50d
 800e4d8:	0800e529 	.word	0x0800e529
                    *output_pointer++ = '\b';
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	1c5a      	adds	r2, r3, #1
 800e4e0:	60fa      	str	r2, [r7, #12]
 800e4e2:	2208      	movs	r2, #8
 800e4e4:	701a      	strb	r2, [r3, #0]
                    break;
 800e4e6:	e02c      	b.n	800e542 <parse_string+0x206>
                    *output_pointer++ = '\f';
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	1c5a      	adds	r2, r3, #1
 800e4ec:	60fa      	str	r2, [r7, #12]
 800e4ee:	220c      	movs	r2, #12
 800e4f0:	701a      	strb	r2, [r3, #0]
                    break;
 800e4f2:	e026      	b.n	800e542 <parse_string+0x206>
                    *output_pointer++ = '\n';
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	1c5a      	adds	r2, r3, #1
 800e4f8:	60fa      	str	r2, [r7, #12]
 800e4fa:	220a      	movs	r2, #10
 800e4fc:	701a      	strb	r2, [r3, #0]
                    break;
 800e4fe:	e020      	b.n	800e542 <parse_string+0x206>
                    *output_pointer++ = '\r';
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	1c5a      	adds	r2, r3, #1
 800e504:	60fa      	str	r2, [r7, #12]
 800e506:	220d      	movs	r2, #13
 800e508:	701a      	strb	r2, [r3, #0]
                    break;
 800e50a:	e01a      	b.n	800e542 <parse_string+0x206>
                    *output_pointer++ = '\t';
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	1c5a      	adds	r2, r3, #1
 800e510:	60fa      	str	r2, [r7, #12]
 800e512:	2209      	movs	r2, #9
 800e514:	701a      	strb	r2, [r3, #0]
                    break;
 800e516:	e014      	b.n	800e542 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800e518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	1c59      	adds	r1, r3, #1
 800e520:	60f9      	str	r1, [r7, #12]
 800e522:	7812      	ldrb	r2, [r2, #0]
 800e524:	701a      	strb	r2, [r3, #0]
                    break;
 800e526:	e00c      	b.n	800e542 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800e528:	f107 030c 	add.w	r3, r7, #12
 800e52c:	461a      	mov	r2, r3
 800e52e:	6a39      	ldr	r1, [r7, #32]
 800e530:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e532:	f7ff fe1b 	bl	800e16c <utf16_literal_to_utf8>
 800e536:	4603      	mov	r3, r0
 800e538:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800e53a:	7dfb      	ldrb	r3, [r7, #23]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d02c      	beq.n	800e59a <parse_string+0x25e>
                    break;
 800e540:	bf00      	nop
            }
            input_pointer += sequence_length;
 800e542:	7dfb      	ldrb	r3, [r7, #23]
 800e544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e546:	4413      	add	r3, r2
 800e548:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800e54a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e54c:	6a3b      	ldr	r3, [r7, #32]
 800e54e:	429a      	cmp	r2, r3
 800e550:	f4ff af66 	bcc.w	800e420 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2200      	movs	r2, #0
 800e558:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2210      	movs	r2, #16
 800e55e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	69fa      	ldr	r2, [r7, #28]
 800e564:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	6a3a      	ldr	r2, [r7, #32]
 800e56c:	1ad3      	subs	r3, r2, r3
 800e56e:	461a      	mov	r2, r3
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	1c5a      	adds	r2, r3, #1
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	609a      	str	r2, [r3, #8]

    return true;
 800e57e:	2301      	movs	r3, #1
 800e580:	e020      	b.n	800e5c4 <parse_string+0x288>
        goto fail;
 800e582:	bf00      	nop
 800e584:	e00a      	b.n	800e59c <parse_string+0x260>
                    goto fail;
 800e586:	bf00      	nop
 800e588:	e008      	b.n	800e59c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800e58a:	bf00      	nop
 800e58c:	e006      	b.n	800e59c <parse_string+0x260>
            goto fail; /* allocation failure */
 800e58e:	bf00      	nop
 800e590:	e004      	b.n	800e59c <parse_string+0x260>
                goto fail;
 800e592:	bf00      	nop
 800e594:	e002      	b.n	800e59c <parse_string+0x260>
                    goto fail;
 800e596:	bf00      	nop
 800e598:	e000      	b.n	800e59c <parse_string+0x260>
                        goto fail;
 800e59a:	bf00      	nop

fail:
    if (output != NULL)
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d005      	beq.n	800e5ae <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	695b      	ldr	r3, [r3, #20]
 800e5a6:	69f8      	ldr	r0, [r7, #28]
 800e5a8:	4798      	blx	r3
        output = NULL;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800e5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d006      	beq.n	800e5c2 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5ba:	1ad3      	subs	r3, r2, r3
 800e5bc:	461a      	mov	r2, r3
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	609a      	str	r2, [r3, #8]
    }

    return false;
 800e5c2:	2300      	movs	r3, #0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3728      	adds	r7, #40	@ 0x28
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d003      	beq.n	800e5e2 <buffer_skip_whitespace+0x16>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d101      	bne.n	800e5e6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	e02c      	b.n	800e640 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d005      	beq.n	800e5f8 <buffer_skip_whitespace+0x2c>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	689a      	ldr	r2, [r3, #8]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d306      	bcc.n	800e606 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	e021      	b.n	800e640 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	1c5a      	adds	r2, r3, #1
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d00d      	beq.n	800e628 <buffer_skip_whitespace+0x5c>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	689a      	ldr	r2, [r3, #8]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	429a      	cmp	r2, r3
 800e616:	d207      	bcs.n	800e628 <buffer_skip_whitespace+0x5c>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	4413      	add	r3, r2
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	2b20      	cmp	r3, #32
 800e626:	d9e9      	bls.n	800e5fc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	689a      	ldr	r2, [r3, #8]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	429a      	cmp	r2, r3
 800e632:	d104      	bne.n	800e63e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	1e5a      	subs	r2, r3, #1
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800e63e:	687b      	ldr	r3, [r7, #4]
}
 800e640:	4618      	mov	r0, r3
 800e642:	370c      	adds	r7, #12
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d007      	beq.n	800e66a <skip_utf8_bom+0x1e>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d003      	beq.n	800e66a <skip_utf8_bom+0x1e>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d001      	beq.n	800e66e <skip_utf8_bom+0x22>
    {
        return NULL;
 800e66a:	2300      	movs	r3, #0
 800e66c:	e01c      	b.n	800e6a8 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d018      	beq.n	800e6a6 <skip_utf8_bom+0x5a>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	1d1a      	adds	r2, r3, #4
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d211      	bcs.n	800e6a6 <skip_utf8_bom+0x5a>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	689b      	ldr	r3, [r3, #8]
 800e68a:	4413      	add	r3, r2
 800e68c:	2203      	movs	r2, #3
 800e68e:	4908      	ldr	r1, [pc, #32]	@ (800e6b0 <skip_utf8_bom+0x64>)
 800e690:	4618      	mov	r0, r3
 800e692:	f006 f91f 	bl	80148d4 <strncmp>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d104      	bne.n	800e6a6 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	1cda      	adds	r2, r3, #3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800e6a6:	687b      	ldr	r3, [r7, #4]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	08019f30 	.word	0x08019f30

0800e6b4 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b086      	sub	sp, #24
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d101      	bne.n	800e6ca <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	e00c      	b.n	800e6e4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800e6ca:	68f8      	ldr	r0, [r7, #12]
 800e6cc:	f7fe fc58 	bl	800cf80 <strlen>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	68ba      	ldr	r2, [r7, #8]
 800e6da:	6979      	ldr	r1, [r7, #20]
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f000 f805 	bl	800e6ec <cJSON_ParseWithLengthOpts>
 800e6e2:	4603      	mov	r3, r0
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3718      	adds	r7, #24
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b08e      	sub	sp, #56	@ 0x38
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	607a      	str	r2, [r7, #4]
 800e6f8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800e6fa:	f107 0318 	add.w	r3, r7, #24
 800e6fe:	2200      	movs	r2, #0
 800e700:	601a      	str	r2, [r3, #0]
 800e702:	605a      	str	r2, [r3, #4]
 800e704:	609a      	str	r2, [r3, #8]
 800e706:	60da      	str	r2, [r3, #12]
 800e708:	611a      	str	r2, [r3, #16]
 800e70a:	615a      	str	r2, [r3, #20]
 800e70c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800e70e:	2300      	movs	r3, #0
 800e710:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 800e712:	4b41      	ldr	r3, [pc, #260]	@ (800e818 <cJSON_ParseWithLengthOpts+0x12c>)
 800e714:	2200      	movs	r2, #0
 800e716:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800e718:	4b3f      	ldr	r3, [pc, #252]	@ (800e818 <cJSON_ParseWithLengthOpts+0x12c>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d042      	beq.n	800e7aa <cJSON_ParseWithLengthOpts+0xbe>
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d03f      	beq.n	800e7aa <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800e732:	2300      	movs	r3, #0
 800e734:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800e736:	4a39      	ldr	r2, [pc, #228]	@ (800e81c <cJSON_ParseWithLengthOpts+0x130>)
 800e738:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e73c:	ca07      	ldmia	r2, {r0, r1, r2}
 800e73e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800e742:	4836      	ldr	r0, [pc, #216]	@ (800e81c <cJSON_ParseWithLengthOpts+0x130>)
 800e744:	f7ff fb76 	bl	800de34 <cJSON_New_Item>
 800e748:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800e74a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d02e      	beq.n	800e7ae <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800e750:	f107 0318 	add.w	r3, r7, #24
 800e754:	4618      	mov	r0, r3
 800e756:	f7ff ff79 	bl	800e64c <skip_utf8_bom>
 800e75a:	4603      	mov	r3, r0
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7ff ff35 	bl	800e5cc <buffer_skip_whitespace>
 800e762:	4603      	mov	r3, r0
 800e764:	4619      	mov	r1, r3
 800e766:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e768:	f000 f868 	bl	800e83c <parse_value>
 800e76c:	4603      	mov	r3, r0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d01f      	beq.n	800e7b2 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00e      	beq.n	800e796 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800e778:	f107 0318 	add.w	r3, r7, #24
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7ff ff25 	bl	800e5cc <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800e782:	6a3a      	ldr	r2, [r7, #32]
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	429a      	cmp	r2, r3
 800e788:	d215      	bcs.n	800e7b6 <cJSON_ParseWithLengthOpts+0xca>
 800e78a:	69ba      	ldr	r2, [r7, #24]
 800e78c:	6a3b      	ldr	r3, [r7, #32]
 800e78e:	4413      	add	r3, r2
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d10f      	bne.n	800e7b6 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d004      	beq.n	800e7a6 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800e79c:	69ba      	ldr	r2, [r7, #24]
 800e79e:	6a3b      	ldr	r3, [r7, #32]
 800e7a0:	441a      	add	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	601a      	str	r2, [r3, #0]
    }

    return item;
 800e7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7a8:	e031      	b.n	800e80e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800e7aa:	bf00      	nop
 800e7ac:	e004      	b.n	800e7b8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800e7ae:	bf00      	nop
 800e7b0:	e002      	b.n	800e7b8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800e7b2:	bf00      	nop
 800e7b4:	e000      	b.n	800e7b8 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800e7b6:	bf00      	nop

fail:
    if (item != NULL)
 800e7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d002      	beq.n	800e7c4 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800e7be:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e7c0:	f7ff fb4e 	bl	800de60 <cJSON_Delete>
    }

    if (value != NULL)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d020      	beq.n	800e80c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800e7d2:	6a3a      	ldr	r2, [r7, #32]
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d202      	bcs.n	800e7e0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800e7da:	6a3b      	ldr	r3, [r7, #32]
 800e7dc:	617b      	str	r3, [r7, #20]
 800e7de:	e005      	b.n	800e7ec <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d002      	beq.n	800e7ec <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d004      	beq.n	800e7fc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800e7f2:	693a      	ldr	r2, [r7, #16]
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	441a      	add	r2, r3
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800e7fc:	4b06      	ldr	r3, [pc, #24]	@ (800e818 <cJSON_ParseWithLengthOpts+0x12c>)
 800e7fe:	461a      	mov	r2, r3
 800e800:	f107 0310 	add.w	r3, r7, #16
 800e804:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e808:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800e80c:	2300      	movs	r3, #0
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3738      	adds	r7, #56	@ 0x38
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	20000afc 	.word	0x20000afc
 800e81c:	20000000 	.word	0x20000000

0800e820 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800e828:	2200      	movs	r2, #0
 800e82a:	2100      	movs	r1, #0
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f7ff ff41 	bl	800e6b4 <cJSON_ParseWithOpts>
 800e832:	4603      	mov	r3, r0
}
 800e834:	4618      	mov	r0, r3
 800e836:	3708      	adds	r7, #8
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d003      	beq.n	800e854 <parse_value+0x18>
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d101      	bne.n	800e858 <parse_value+0x1c>
    {
        return false; /* no input */
 800e854:	2300      	movs	r3, #0
 800e856:	e0d2      	b.n	800e9fe <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d01d      	beq.n	800e89a <parse_value+0x5e>
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	689b      	ldr	r3, [r3, #8]
 800e862:	1d1a      	adds	r2, r3, #4
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d816      	bhi.n	800e89a <parse_value+0x5e>
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	4413      	add	r3, r2
 800e876:	2204      	movs	r2, #4
 800e878:	4963      	ldr	r1, [pc, #396]	@ (800ea08 <parse_value+0x1cc>)
 800e87a:	4618      	mov	r0, r3
 800e87c:	f006 f82a 	bl	80148d4 <strncmp>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d109      	bne.n	800e89a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2204      	movs	r2, #4
 800e88a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	1d1a      	adds	r2, r3, #4
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	609a      	str	r2, [r3, #8]
        return true;
 800e896:	2301      	movs	r3, #1
 800e898:	e0b1      	b.n	800e9fe <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d01d      	beq.n	800e8dc <parse_value+0xa0>
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	1d5a      	adds	r2, r3, #5
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d816      	bhi.n	800e8dc <parse_value+0xa0>
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	2205      	movs	r2, #5
 800e8ba:	4954      	ldr	r1, [pc, #336]	@ (800ea0c <parse_value+0x1d0>)
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f006 f809 	bl	80148d4 <strncmp>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d109      	bne.n	800e8dc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	1d5a      	adds	r2, r3, #5
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	609a      	str	r2, [r3, #8]
        return true;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e090      	b.n	800e9fe <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d020      	beq.n	800e924 <parse_value+0xe8>
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	689b      	ldr	r3, [r3, #8]
 800e8e6:	1d1a      	adds	r2, r3, #4
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d819      	bhi.n	800e924 <parse_value+0xe8>
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	681a      	ldr	r2, [r3, #0]
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	4413      	add	r3, r2
 800e8fa:	2204      	movs	r2, #4
 800e8fc:	4944      	ldr	r1, [pc, #272]	@ (800ea10 <parse_value+0x1d4>)
 800e8fe:	4618      	mov	r0, r3
 800e900:	f005 ffe8 	bl	80148d4 <strncmp>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d10c      	bne.n	800e924 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2202      	movs	r2, #2
 800e90e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	689b      	ldr	r3, [r3, #8]
 800e91a:	1d1a      	adds	r2, r3, #4
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	609a      	str	r2, [r3, #8]
        return true;
 800e920:	2301      	movs	r3, #1
 800e922:	e06c      	b.n	800e9fe <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d013      	beq.n	800e952 <parse_value+0x116>
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	689a      	ldr	r2, [r3, #8]
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	429a      	cmp	r2, r3
 800e934:	d20d      	bcs.n	800e952 <parse_value+0x116>
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	4413      	add	r3, r2
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	2b22      	cmp	r3, #34	@ 0x22
 800e944:	d105      	bne.n	800e952 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800e946:	6839      	ldr	r1, [r7, #0]
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f7ff fcf7 	bl	800e33c <parse_string>
 800e94e:	4603      	mov	r3, r0
 800e950:	e055      	b.n	800e9fe <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d023      	beq.n	800e9a0 <parse_value+0x164>
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	689a      	ldr	r2, [r3, #8]
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	429a      	cmp	r2, r3
 800e962:	d21d      	bcs.n	800e9a0 <parse_value+0x164>
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	4413      	add	r3, r2
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	2b2d      	cmp	r3, #45	@ 0x2d
 800e972:	d00f      	beq.n	800e994 <parse_value+0x158>
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	689b      	ldr	r3, [r3, #8]
 800e97c:	4413      	add	r3, r2
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	2b2f      	cmp	r3, #47	@ 0x2f
 800e982:	d90d      	bls.n	800e9a0 <parse_value+0x164>
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	4413      	add	r3, r2
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	2b39      	cmp	r3, #57	@ 0x39
 800e992:	d805      	bhi.n	800e9a0 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800e994:	6839      	ldr	r1, [r7, #0]
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f7ff faba 	bl	800df10 <parse_number>
 800e99c:	4603      	mov	r3, r0
 800e99e:	e02e      	b.n	800e9fe <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d013      	beq.n	800e9ce <parse_value+0x192>
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	689a      	ldr	r2, [r3, #8]
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d20d      	bcs.n	800e9ce <parse_value+0x192>
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	2b5b      	cmp	r3, #91	@ 0x5b
 800e9c0:	d105      	bne.n	800e9ce <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800e9c2:	6839      	ldr	r1, [r7, #0]
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 f825 	bl	800ea14 <parse_array>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	e017      	b.n	800e9fe <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d013      	beq.n	800e9fc <parse_value+0x1c0>
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	689a      	ldr	r2, [r3, #8]
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d20d      	bcs.n	800e9fc <parse_value+0x1c0>
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	4413      	add	r3, r2
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	2b7b      	cmp	r3, #123	@ 0x7b
 800e9ee:	d105      	bne.n	800e9fc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800e9f0:	6839      	ldr	r1, [r7, #0]
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f000 f8d2 	bl	800eb9c <parse_object>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	e000      	b.n	800e9fe <parse_value+0x1c2>
    }

    return false;
 800e9fc:	2300      	movs	r3, #0
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	08019f04 	.word	0x08019f04
 800ea0c:	08019f34 	.word	0x08019f34
 800ea10:	08019f3c 	.word	0x08019f3c

0800ea14 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b086      	sub	sp, #24
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800ea1e:	2300      	movs	r3, #0
 800ea20:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800ea22:	2300      	movs	r3, #0
 800ea24:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ea2e:	d301      	bcc.n	800ea34 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800ea30:	2300      	movs	r3, #0
 800ea32:	e0af      	b.n	800eb94 <parse_array+0x180>
    }
    input_buffer->depth++;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	1c5a      	adds	r2, r3, #1
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	4413      	add	r3, r2
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	2b5b      	cmp	r3, #91	@ 0x5b
 800ea4c:	f040 8094 	bne.w	800eb78 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	1c5a      	adds	r2, r3, #1
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800ea5a:	6838      	ldr	r0, [r7, #0]
 800ea5c:	f7ff fdb6 	bl	800e5cc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00d      	beq.n	800ea82 <parse_array+0x6e>
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	689a      	ldr	r2, [r3, #8]
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d207      	bcs.n	800ea82 <parse_array+0x6e>
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	2b5d      	cmp	r3, #93	@ 0x5d
 800ea80:	d061      	beq.n	800eb46 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d005      	beq.n	800ea94 <parse_array+0x80>
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	689a      	ldr	r2, [r3, #8]
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d305      	bcc.n	800eaa0 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	1e5a      	subs	r2, r3, #1
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	609a      	str	r2, [r3, #8]
        goto fail;
 800ea9e:	e072      	b.n	800eb86 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	689b      	ldr	r3, [r3, #8]
 800eaa4:	1e5a      	subs	r2, r3, #1
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	3310      	adds	r3, #16
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7ff f9c0 	bl	800de34 <cJSON_New_Item>
 800eab4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d05f      	beq.n	800eb7c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d104      	bne.n	800eacc <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	617b      	str	r3, [r7, #20]
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	613b      	str	r3, [r7, #16]
 800eaca:	e007      	b.n	800eadc <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	68fa      	ldr	r2, [r7, #12]
 800ead0:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	693a      	ldr	r2, [r7, #16]
 800ead6:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	1c5a      	adds	r2, r3, #1
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800eae6:	6838      	ldr	r0, [r7, #0]
 800eae8:	f7ff fd70 	bl	800e5cc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800eaec:	6839      	ldr	r1, [r7, #0]
 800eaee:	6938      	ldr	r0, [r7, #16]
 800eaf0:	f7ff fea4 	bl	800e83c <parse_value>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d042      	beq.n	800eb80 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800eafa:	6838      	ldr	r0, [r7, #0]
 800eafc:	f7ff fd66 	bl	800e5cc <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00d      	beq.n	800eb22 <parse_array+0x10e>
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	689a      	ldr	r2, [r3, #8]
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d207      	bcs.n	800eb22 <parse_array+0x10e>
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	689b      	ldr	r3, [r3, #8]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	2b2c      	cmp	r3, #44	@ 0x2c
 800eb20:	d0c3      	beq.n	800eaaa <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d02d      	beq.n	800eb84 <parse_array+0x170>
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	689a      	ldr	r2, [r3, #8]
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d227      	bcs.n	800eb84 <parse_array+0x170>
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	2b5d      	cmp	r3, #93	@ 0x5d
 800eb42:	d11f      	bne.n	800eb84 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800eb44:	e000      	b.n	800eb48 <parse_array+0x134>
        goto success;
 800eb46:	bf00      	nop
    input_buffer->depth--;
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	1e5a      	subs	r2, r3, #1
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d002      	beq.n	800eb5e <parse_array+0x14a>
        head->prev = current_item;
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	693a      	ldr	r2, [r7, #16]
 800eb5c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2220      	movs	r2, #32
 800eb62:	60da      	str	r2, [r3, #12]
    item->child = head;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	697a      	ldr	r2, [r7, #20]
 800eb68:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	689b      	ldr	r3, [r3, #8]
 800eb6e:	1c5a      	adds	r2, r3, #1
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	609a      	str	r2, [r3, #8]

    return true;
 800eb74:	2301      	movs	r3, #1
 800eb76:	e00d      	b.n	800eb94 <parse_array+0x180>
        goto fail;
 800eb78:	bf00      	nop
 800eb7a:	e004      	b.n	800eb86 <parse_array+0x172>
            goto fail; /* allocation failure */
 800eb7c:	bf00      	nop
 800eb7e:	e002      	b.n	800eb86 <parse_array+0x172>
            goto fail; /* failed to parse value */
 800eb80:	bf00      	nop
 800eb82:	e000      	b.n	800eb86 <parse_array+0x172>
        goto fail; /* expected end of array */
 800eb84:	bf00      	nop

fail:
    if (head != NULL)
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d002      	beq.n	800eb92 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800eb8c:	6978      	ldr	r0, [r7, #20]
 800eb8e:	f7ff f967 	bl	800de60 <cJSON_Delete>
    }

    return false;
 800eb92:	2300      	movs	r3, #0
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3718      	adds	r7, #24
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b086      	sub	sp, #24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800eba6:	2300      	movs	r3, #0
 800eba8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ebb6:	d301      	bcc.n	800ebbc <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800ebb8:	2300      	movs	r3, #0
 800ebba:	e0f7      	b.n	800edac <parse_object+0x210>
    }
    input_buffer->depth++;
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	1c5a      	adds	r2, r3, #1
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	f000 80db 	beq.w	800ed84 <parse_object+0x1e8>
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	689a      	ldr	r2, [r3, #8]
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	f080 80d4 	bcs.w	800ed84 <parse_object+0x1e8>
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	4413      	add	r3, r2
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	2b7b      	cmp	r3, #123	@ 0x7b
 800ebea:	f040 80cb 	bne.w	800ed84 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	1c5a      	adds	r2, r3, #1
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800ebf8:	6838      	ldr	r0, [r7, #0]
 800ebfa:	f7ff fce7 	bl	800e5cc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00e      	beq.n	800ec22 <parse_object+0x86>
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	689a      	ldr	r2, [r3, #8]
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d208      	bcs.n	800ec22 <parse_object+0x86>
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	689b      	ldr	r3, [r3, #8]
 800ec18:	4413      	add	r3, r2
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	2b7d      	cmp	r3, #125	@ 0x7d
 800ec1e:	f000 8098 	beq.w	800ed52 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d005      	beq.n	800ec34 <parse_object+0x98>
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	689a      	ldr	r2, [r3, #8]
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d305      	bcc.n	800ec40 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	1e5a      	subs	r2, r3, #1
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	609a      	str	r2, [r3, #8]
        goto fail;
 800ec3e:	e0ae      	b.n	800ed9e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	1e5a      	subs	r2, r3, #1
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	3310      	adds	r3, #16
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7ff f8f0 	bl	800de34 <cJSON_New_Item>
 800ec54:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f000 8095 	beq.w	800ed88 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d104      	bne.n	800ec6e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	617b      	str	r3, [r7, #20]
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	613b      	str	r3, [r7, #16]
 800ec6c:	e007      	b.n	800ec7e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	693a      	ldr	r2, [r7, #16]
 800ec78:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f000 8083 	beq.w	800ed8c <parse_object+0x1f0>
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	1c5a      	adds	r2, r3, #1
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d27b      	bcs.n	800ed8c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	1c5a      	adds	r2, r3, #1
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800ec9e:	6838      	ldr	r0, [r7, #0]
 800eca0:	f7ff fc94 	bl	800e5cc <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800eca4:	6839      	ldr	r1, [r7, #0]
 800eca6:	6938      	ldr	r0, [r7, #16]
 800eca8:	f7ff fb48 	bl	800e33c <parse_string>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d06e      	beq.n	800ed90 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800ecb2:	6838      	ldr	r0, [r7, #0]
 800ecb4:	f7ff fc8a 	bl	800e5cc <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	691a      	ldr	r2, [r3, #16]
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d063      	beq.n	800ed94 <parse_object+0x1f8>
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	689a      	ldr	r2, [r3, #8]
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d25d      	bcs.n	800ed94 <parse_object+0x1f8>
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	689b      	ldr	r3, [r3, #8]
 800ece0:	4413      	add	r3, r2
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	2b3a      	cmp	r3, #58	@ 0x3a
 800ece6:	d155      	bne.n	800ed94 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	1c5a      	adds	r2, r3, #1
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800ecf2:	6838      	ldr	r0, [r7, #0]
 800ecf4:	f7ff fc6a 	bl	800e5cc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800ecf8:	6839      	ldr	r1, [r7, #0]
 800ecfa:	6938      	ldr	r0, [r7, #16]
 800ecfc:	f7ff fd9e 	bl	800e83c <parse_value>
 800ed00:	4603      	mov	r3, r0
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d048      	beq.n	800ed98 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800ed06:	6838      	ldr	r0, [r7, #0]
 800ed08:	f7ff fc60 	bl	800e5cc <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d00d      	beq.n	800ed2e <parse_object+0x192>
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	689a      	ldr	r2, [r3, #8]
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d207      	bcs.n	800ed2e <parse_object+0x192>
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	4413      	add	r3, r2
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	2b2c      	cmp	r3, #44	@ 0x2c
 800ed2c:	d08d      	beq.n	800ec4a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d033      	beq.n	800ed9c <parse_object+0x200>
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	689a      	ldr	r2, [r3, #8]
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d22d      	bcs.n	800ed9c <parse_object+0x200>
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	689b      	ldr	r3, [r3, #8]
 800ed48:	4413      	add	r3, r2
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	2b7d      	cmp	r3, #125	@ 0x7d
 800ed4e:	d125      	bne.n	800ed9c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 800ed50:	e000      	b.n	800ed54 <parse_object+0x1b8>
        goto success; /* empty object */
 800ed52:	bf00      	nop
    input_buffer->depth--;
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	1e5a      	subs	r2, r3, #1
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d002      	beq.n	800ed6a <parse_object+0x1ce>
        head->prev = current_item;
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	693a      	ldr	r2, [r7, #16]
 800ed68:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2240      	movs	r2, #64	@ 0x40
 800ed6e:	60da      	str	r2, [r3, #12]
    item->child = head;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	697a      	ldr	r2, [r7, #20]
 800ed74:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	1c5a      	adds	r2, r3, #1
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	609a      	str	r2, [r3, #8]
    return true;
 800ed80:	2301      	movs	r3, #1
 800ed82:	e013      	b.n	800edac <parse_object+0x210>
        goto fail; /* not an object */
 800ed84:	bf00      	nop
 800ed86:	e00a      	b.n	800ed9e <parse_object+0x202>
            goto fail; /* allocation failure */
 800ed88:	bf00      	nop
 800ed8a:	e008      	b.n	800ed9e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800ed8c:	bf00      	nop
 800ed8e:	e006      	b.n	800ed9e <parse_object+0x202>
            goto fail; /* failed to parse name */
 800ed90:	bf00      	nop
 800ed92:	e004      	b.n	800ed9e <parse_object+0x202>
            goto fail; /* invalid object */
 800ed94:	bf00      	nop
 800ed96:	e002      	b.n	800ed9e <parse_object+0x202>
            goto fail; /* failed to parse value */
 800ed98:	bf00      	nop
 800ed9a:	e000      	b.n	800ed9e <parse_object+0x202>
        goto fail; /* expected end of object */
 800ed9c:	bf00      	nop

fail:
    if (head != NULL)
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d002      	beq.n	800edaa <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800eda4:	6978      	ldr	r0, [r7, #20]
 800eda6:	f7ff f85b 	bl	800de60 <cJSON_Delete>
    }

    return false;
 800edaa:	2300      	movs	r3, #0
}
 800edac:	4618      	mov	r0, r3
 800edae:	3718      	adds	r7, #24
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <cJSON_GetArraySize>:
    return true;
}

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b085      	sub	sp, #20
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 800edbc:	2300      	movs	r3, #0
 800edbe:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 800edc0:	2300      	movs	r3, #0
 800edc2:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <cJSON_GetArraySize+0x1a>
    {
        return 0;
 800edca:	2300      	movs	r3, #0
 800edcc:	e00d      	b.n	800edea <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 800edd4:	e005      	b.n	800ede2 <cJSON_GetArraySize+0x2e>
    {
        size++;
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	3301      	adds	r3, #1
 800edda:	60bb      	str	r3, [r7, #8]
        child = child->next;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1f6      	bne.n	800edd6 <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 800ede8:	68bb      	ldr	r3, [r7, #8]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3714      	adds	r7, #20
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 800edf6:	b480      	push	{r7}
 800edf8:	b085      	sub	sp, #20
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
 800edfe:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 800ee00:	2300      	movs	r3, #0
 800ee02:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d101      	bne.n	800ee0e <get_array_item+0x18>
    {
        return NULL;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	e010      	b.n	800ee30 <get_array_item+0x3a>
    }

    current_child = array->child;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	689b      	ldr	r3, [r3, #8]
 800ee12:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 800ee14:	e005      	b.n	800ee22 <get_array_item+0x2c>
    {
        index--;
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	3b01      	subs	r3, #1
 800ee1a:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d002      	beq.n	800ee2e <get_array_item+0x38>
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d1f3      	bne.n	800ee16 <get_array_item+0x20>
    }

    return current_child;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3714      	adds	r7, #20
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	6039      	str	r1, [r7, #0]
    if (index < 0)
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	da01      	bge.n	800ee50 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	e005      	b.n	800ee5c <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	4619      	mov	r1, r3
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f7ff ffce 	bl	800edf6 <get_array_item>
 800ee5a:	4603      	mov	r3, r0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b086      	sub	sp, #24
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800ee70:	2300      	movs	r3, #0
 800ee72:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d002      	beq.n	800ee80 <get_object_item+0x1c>
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d101      	bne.n	800ee84 <get_object_item+0x20>
    {
        return NULL;
 800ee80:	2300      	movs	r3, #0
 800ee82:	e033      	b.n	800eeec <get_object_item+0x88>
    }

    current_element = object->child;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d017      	beq.n	800eec0 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800ee90:	e002      	b.n	800ee98 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d01c      	beq.n	800eed8 <get_object_item+0x74>
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d018      	beq.n	800eed8 <get_object_item+0x74>
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	6a1b      	ldr	r3, [r3, #32]
 800eeaa:	4619      	mov	r1, r3
 800eeac:	68b8      	ldr	r0, [r7, #8]
 800eeae:	f7fd ffba 	bl	800ce26 <strcmp>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1ec      	bne.n	800ee92 <get_object_item+0x2e>
 800eeb8:	e00e      	b.n	800eed8 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d008      	beq.n	800eed8 <get_object_item+0x74>
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	6a1b      	ldr	r3, [r3, #32]
 800eeca:	4619      	mov	r1, r3
 800eecc:	68b8      	ldr	r0, [r7, #8]
 800eece:	f7fe ff45 	bl	800dd5c <case_insensitive_strcmp>
 800eed2:	4603      	mov	r3, r0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d1f0      	bne.n	800eeba <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d003      	beq.n	800eee6 <get_object_item+0x82>
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	6a1b      	ldr	r3, [r3, #32]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d101      	bne.n	800eeea <get_object_item+0x86>
        return NULL;
 800eee6:	2300      	movs	r3, #0
 800eee8:	e000      	b.n	800eeec <get_object_item+0x88>
    }

    return current_element;
 800eeea:	697b      	ldr	r3, [r7, #20]
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3718      	adds	r7, #24
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800eefe:	2200      	movs	r2, #0
 800ef00:	6839      	ldr	r1, [r7, #0]
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f7ff ffae 	bl	800ee64 <get_object_item>
 800ef08:	4603      	mov	r3, r0
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
	...

0800ef14 <load_mfcc_data>:
            strcpy(name, "Sconosciuto");
            break;
    }
}

void load_mfcc_data(const char* filename) {
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b0a6      	sub	sp, #152	@ 0x98
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
    FILE* file = fopen(filename, "r");
 800ef1c:	4964      	ldr	r1, [pc, #400]	@ (800f0b0 <load_mfcc_data+0x19c>)
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f005 f9b0 	bl	8014284 <fopen>
 800ef24:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    if (!file) {
 800ef28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d115      	bne.n	800ef5c <load_mfcc_data+0x48>
        char errfile[100];
        sprintf(errfile, "Errore nell'apertura del file: %s\n", filename);
 800ef30:	f107 0308 	add.w	r3, r7, #8
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	495f      	ldr	r1, [pc, #380]	@ (800f0b4 <load_mfcc_data+0x1a0>)
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f005 fac9 	bl	80144d0 <siprintf>
        HAL_UART_Transmit(&huart2, (const char*)errfile, strlen(errfile), HAL_MAX_DELAY);
 800ef3e:	f107 0308 	add.w	r3, r7, #8
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fe f81c 	bl	800cf80 <strlen>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	b29a      	uxth	r2, r3
 800ef4c:	f107 0108 	add.w	r1, r7, #8
 800ef50:	f04f 33ff 	mov.w	r3, #4294967295
 800ef54:	4858      	ldr	r0, [pc, #352]	@ (800f0b8 <load_mfcc_data+0x1a4>)
 800ef56:	f002 fa1b 	bl	8011390 <HAL_UART_Transmit>
 800ef5a:	e0a5      	b.n	800f0a8 <load_mfcc_data+0x194>
        return;
    }

    fseek(file, 0, SEEK_END);
 800ef5c:	2202      	movs	r2, #2
 800ef5e:	2100      	movs	r1, #0
 800ef60:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800ef64:	f005 fa02 	bl	801436c <fseek>
    long length = ftell(file);
 800ef68:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800ef6c:	f005 fa08 	bl	8014380 <ftell>
 800ef70:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    fseek(file, 0, SEEK_SET);
 800ef74:	2200      	movs	r2, #0
 800ef76:	2100      	movs	r1, #0
 800ef78:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800ef7c:	f005 f9f6 	bl	801436c <fseek>

    char* data = (char*)malloc(length + 1);
 800ef80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ef84:	3301      	adds	r3, #1
 800ef86:	4618      	mov	r0, r3
 800ef88:	f003 f9b4 	bl	80122f4 <malloc>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    fread(data, 1, length, file);
 800ef92:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ef96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ef9a:	2101      	movs	r1, #1
 800ef9c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800efa0:	f005 f9d4 	bl	801434c <fread>
    fclose(file);
 800efa4:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800efa8:	f004 ff6e 	bl	8013e88 <fclose>
    data[length] = '\0';
 800efac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800efb0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800efb4:	4413      	add	r3, r2
 800efb6:	2200      	movs	r2, #0
 800efb8:	701a      	strb	r2, [r3, #0]

    cJSON* json = cJSON_Parse(data);
 800efba:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800efbe:	f7ff fc2f 	bl	800e820 <cJSON_Parse>
 800efc2:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (json == NULL) {
 800efc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d10b      	bne.n	800efe2 <load_mfcc_data+0xce>
        HAL_UART_Transmit(&huart2, "Errore nel parsing del JSON\n", 100, HAL_MAX_DELAY);
 800efca:	f04f 33ff 	mov.w	r3, #4294967295
 800efce:	2264      	movs	r2, #100	@ 0x64
 800efd0:	493a      	ldr	r1, [pc, #232]	@ (800f0bc <load_mfcc_data+0x1a8>)
 800efd2:	4839      	ldr	r0, [pc, #228]	@ (800f0b8 <load_mfcc_data+0x1a4>)
 800efd4:	f002 f9dc 	bl	8011390 <HAL_UART_Transmit>
        free(data);
 800efd8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800efdc:	f003 f992 	bl	8012304 <free>
        return;
 800efe0:	e062      	b.n	800f0a8 <load_mfcc_data+0x194>
    }

    cJSON* mfccs = cJSON_GetObjectItem(json, "mfccs");
 800efe2:	4937      	ldr	r1, [pc, #220]	@ (800f0c0 <load_mfcc_data+0x1ac>)
 800efe4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800efe6:	f7ff ff85 	bl	800eef4 <cJSON_GetObjectItem>
 800efea:	67b8      	str	r0, [r7, #120]	@ 0x78
    if (mfccs != NULL) {
 800efec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d053      	beq.n	800f09a <load_mfcc_data+0x186>
        cJSON* mfcc = NULL;
 800eff2:	2300      	movs	r3, #0
 800eff4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        int count = 0; // Conta i MFCC caricati
 800eff8:	2300      	movs	r3, #0
 800effa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        cJSON_ArrayForEach(mfcc, mfccs) {
 800effe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f000:	2b00      	cmp	r3, #0
 800f002:	d002      	beq.n	800f00a <load_mfcc_data+0xf6>
 800f004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	e000      	b.n	800f00c <load_mfcc_data+0xf8>
 800f00a:	2300      	movs	r3, #0
 800f00c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f010:	e03f      	b.n	800f092 <load_mfcc_data+0x17e>
            if (count < EXPECTED_MFCC_SIZE) {
 800f012:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f016:	2bae      	cmp	r3, #174	@ 0xae
 800f018:	dc36      	bgt.n	800f088 <load_mfcc_data+0x174>
                cJSON* values = cJSON_GetObjectItem(mfcc, "value");
 800f01a:	492a      	ldr	r1, [pc, #168]	@ (800f0c4 <load_mfcc_data+0x1b0>)
 800f01c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800f020:	f7ff ff68 	bl	800eef4 <cJSON_GetObjectItem>
 800f024:	6778      	str	r0, [r7, #116]	@ 0x74
                if (values) {
 800f026:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d02d      	beq.n	800f088 <load_mfcc_data+0x174>
                    int value_count = cJSON_GetArraySize(values);
 800f02c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800f02e:	f7ff fec1 	bl	800edb4 <cJSON_GetArraySize>
 800f032:	6738      	str	r0, [r7, #112]	@ 0x70
                    for (int i = 0; i < value_count && i < EXPECTED_MFCC_SIZE; i++) {
 800f034:	2300      	movs	r3, #0
 800f036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f03a:	e01c      	b.n	800f076 <load_mfcc_data+0x162>
                        float value = (float)cJSON_GetArrayItem(values, i)->valuedouble;
 800f03c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800f040:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800f042:	f7ff fefb 	bl	800ee3c <cJSON_GetArrayItem>
 800f046:	4603      	mov	r3, r0
 800f048:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800f04c:	4610      	mov	r0, r2
 800f04e:	4619      	mov	r1, r3
 800f050:	f7fe fc52 	bl	800d8f8 <__aeabi_d2f>
 800f054:	4603      	mov	r3, r0
 800f056:	66fb      	str	r3, [r7, #108]	@ 0x6c
                        mfcc_data[count++] = value; // Riempie mfcc_data
 800f058:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f05c:	1c5a      	adds	r2, r3, #1
 800f05e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800f062:	4a19      	ldr	r2, [pc, #100]	@ (800f0c8 <load_mfcc_data+0x1b4>)
 800f064:	009b      	lsls	r3, r3, #2
 800f066:	4413      	add	r3, r2
 800f068:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f06a:	601a      	str	r2, [r3, #0]
                    for (int i = 0; i < value_count && i < EXPECTED_MFCC_SIZE; i++) {
 800f06c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f070:	3301      	adds	r3, #1
 800f072:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f076:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f07a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f07c:	429a      	cmp	r2, r3
 800f07e:	da03      	bge.n	800f088 <load_mfcc_data+0x174>
 800f080:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f084:	2bae      	cmp	r3, #174	@ 0xae
 800f086:	ddd9      	ble.n	800f03c <load_mfcc_data+0x128>
        cJSON_ArrayForEach(mfcc, mfccs) {
 800f088:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f092:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1bb      	bne.n	800f012 <load_mfcc_data+0xfe>
                }
            }
        }
    }

    cJSON_Delete(json);
 800f09a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800f09c:	f7fe fee0 	bl	800de60 <cJSON_Delete>
    free(data);
 800f0a0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800f0a4:	f003 f92e 	bl	8012304 <free>
}
 800f0a8:	3798      	adds	r7, #152	@ 0x98
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	0801a04c 	.word	0x0801a04c
 800f0b4:	0801a050 	.word	0x0801a050
 800f0b8:	20000b04 	.word	0x20000b04
 800f0bc:	0801a074 	.word	0x0801a074
 800f0c0:	0801a094 	.word	0x0801a094
 800f0c4:	0801a09c 	.word	0x0801a09c
 800f0c8:	20000c0c 	.word	0x20000c0c

0800f0cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f0cc:	b5b0      	push	{r4, r5, r7, lr}
 800f0ce:	f5ad 2dac 	sub.w	sp, sp, #352256	@ 0x56000
 800f0d2:	f5ad 6de0 	sub.w	sp, sp, #1792	@ 0x700
 800f0d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_UART_Transmit(&huart2, "Inizio del programma", 100, HAL_MAX_DELAY);
 800f0d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0dc:	2264      	movs	r2, #100	@ 0x64
 800f0de:	49c9      	ldr	r1, [pc, #804]	@ (800f404 <main+0x338>)
 800f0e0:	48c9      	ldr	r0, [pc, #804]	@ (800f408 <main+0x33c>)
 800f0e2:	f002 f955 	bl	8011390 <HAL_UART_Transmit>
    	size_t weights_size;
    };


    AI_ALIGNED(4) ai_u8 activations[AI_MODELLITE_DATA_ACTIVATIONS_SIZE];
    ai_buffer activations_buffer = AI_BUFFER_INIT(AI_BUFFER_FORMAT_U8,1,1,AI_MODELLITE_DATA_ACTIVATIONS_SIZE,1,activations);
 800f0e6:	f507 23ac 	add.w	r3, r7, #352256	@ 0x56000
 800f0ea:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f0ee:	f6a3 7338 	subw	r3, r3, #3896	@ 0xf38
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	6013      	str	r3, [r2, #0]
 800f0f8:	6053      	str	r3, [r2, #4]
 800f0fa:	6093      	str	r3, [r2, #8]
 800f0fc:	60d3      	str	r3, [r2, #12]
 800f0fe:	6113      	str	r3, [r2, #16]
 800f100:	6153      	str	r3, [r2, #20]
 800f102:	6193      	str	r3, [r2, #24]
 800f104:	f507 23ac 	add.w	r3, r7, #352256	@ 0x56000
 800f108:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f10c:	f6a3 7338 	subw	r3, r3, #3896	@ 0xf38
 800f110:	2201      	movs	r2, #1
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	f507 23ac 	add.w	r3, r7, #352256	@ 0x56000
 800f118:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f11c:	f6a3 7338 	subw	r3, r3, #3896	@ 0xf38
 800f120:	f507 22aa 	add.w	r2, r7, #348160	@ 0x55000
 800f124:	f202 72e4 	addw	r2, r2, #2020	@ 0x7e4
 800f128:	605a      	str	r2, [r3, #4]
 800f12a:	f507 23ac 	add.w	r3, r7, #352256	@ 0x56000
 800f12e:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f132:	f6a3 7338 	subw	r3, r3, #3896	@ 0xf38
 800f136:	2201      	movs	r2, #1
 800f138:	609a      	str	r2, [r3, #8]
 800f13a:	f507 23ac 	add.w	r3, r7, #352256	@ 0x56000
 800f13e:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f142:	f6a3 7338 	subw	r3, r3, #3896	@ 0xf38
 800f146:	4ab1      	ldr	r2, [pc, #708]	@ (800f40c <main+0x340>)
 800f148:	60da      	str	r2, [r3, #12]
 800f14a:	f507 23ac 	add.w	r3, r7, #352256	@ 0x56000
 800f14e:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f152:	f6a3 7338 	subw	r3, r3, #3896	@ 0xf38
 800f156:	f640 721c 	movw	r2, #3868	@ 0xf1c
 800f15a:	611a      	str	r2, [r3, #16]
 800f15c:	f507 23ac 	add.w	r3, r7, #352256	@ 0x56000
 800f160:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f164:	f6a3 7338 	subw	r3, r3, #3896	@ 0xf38
 800f168:	2201      	movs	r2, #1
 800f16a:	751a      	strb	r2, [r3, #20]

    AI_ALIGNED(4) ai_float input_data[INPUT_SIZE];
    ai_buffer input_buffer = AI_BUFFER_INIT(AI_BUFFER_FORMAT_FLOAT, 1, 1, INPUT_SIZE, 1, input_data);
 800f16c:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f170:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f174:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f178:	461a      	mov	r2, r3
 800f17a:	2300      	movs	r3, #0
 800f17c:	6013      	str	r3, [r2, #0]
 800f17e:	6053      	str	r3, [r2, #4]
 800f180:	6093      	str	r3, [r2, #8]
 800f182:	60d3      	str	r3, [r2, #12]
 800f184:	6113      	str	r3, [r2, #16]
 800f186:	6153      	str	r3, [r2, #20]
 800f188:	6193      	str	r3, [r2, #24]
 800f18a:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f18e:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f192:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f196:	2201      	movs	r2, #1
 800f198:	601a      	str	r2, [r3, #0]
 800f19a:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f19e:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f1a2:	f5a3 7238 	sub.w	r2, r3, #736	@ 0x2e0
 800f1a6:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f1aa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800f1ae:	3b04      	subs	r3, #4
 800f1b0:	6053      	str	r3, [r2, #4]
 800f1b2:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f1b6:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f1ba:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f1be:	2201      	movs	r2, #1
 800f1c0:	609a      	str	r2, [r3, #8]
 800f1c2:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f1c6:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f1ca:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f1ce:	4a90      	ldr	r2, [pc, #576]	@ (800f410 <main+0x344>)
 800f1d0:	60da      	str	r2, [r3, #12]
 800f1d2:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f1d6:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f1da:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f1de:	f640 02e3 	movw	r2, #2275	@ 0x8e3
 800f1e2:	611a      	str	r2, [r3, #16]
 800f1e4:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f1e8:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f1ec:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	751a      	strb	r2, [r3, #20]

    AI_ALIGNED(4) ai_float output_data[OUTPUT_SIZE];
    ai_buffer output_buffer = AI_BUFFER_INIT(AI_BUFFER_FORMAT_FLOAT, 1, 1, OUTPUT_SIZE, 1, output_data);
 800f1f4:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f1f8:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f1fc:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800f200:	461a      	mov	r2, r3
 800f202:	2300      	movs	r3, #0
 800f204:	6013      	str	r3, [r2, #0]
 800f206:	6053      	str	r3, [r2, #4]
 800f208:	6093      	str	r3, [r2, #8]
 800f20a:	60d3      	str	r3, [r2, #12]
 800f20c:	6113      	str	r3, [r2, #16]
 800f20e:	6153      	str	r3, [r2, #20]
 800f210:	6193      	str	r3, [r2, #24]
 800f212:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f216:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f21a:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800f21e:	2201      	movs	r2, #1
 800f220:	601a      	str	r2, [r3, #0]
 800f222:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f226:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f22a:	f5a3 7249 	sub.w	r2, r3, #804	@ 0x324
 800f22e:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f232:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f236:	3b08      	subs	r3, #8
 800f238:	6053      	str	r3, [r2, #4]
 800f23a:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f23e:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f242:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800f246:	2201      	movs	r2, #1
 800f248:	609a      	str	r2, [r3, #8]
 800f24a:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f24e:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f252:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800f256:	4a6e      	ldr	r2, [pc, #440]	@ (800f410 <main+0x344>)
 800f258:	60da      	str	r2, [r3, #12]
 800f25a:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f25e:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f262:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800f266:	220a      	movs	r2, #10
 800f268:	611a      	str	r2, [r3, #16]
 800f26a:	f507 23a6 	add.w	r3, r7, #339968	@ 0x53000
 800f26e:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f272:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800f276:	2201      	movs	r2, #1
 800f278:	751a      	strb	r2, [r3, #20]

    AI_ALIGNED(4) ai_u8 weights[AI_MODELLITE_DATA_WEIGHTS_SIZE];
    ai_buffer weights_buffer = AI_BUFFER_INIT(AI_BUFFER_FORMAT_U8, 1, 1, AI_MODELLITE_DATA_WEIGHTS_SIZE, 1, weights);
 800f27a:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f27e:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800f282:	461a      	mov	r2, r3
 800f284:	2300      	movs	r3, #0
 800f286:	6013      	str	r3, [r2, #0]
 800f288:	6053      	str	r3, [r2, #4]
 800f28a:	6093      	str	r3, [r2, #8]
 800f28c:	60d3      	str	r3, [r2, #12]
 800f28e:	6113      	str	r3, [r2, #16]
 800f290:	6153      	str	r3, [r2, #20]
 800f292:	6193      	str	r3, [r2, #24]
 800f294:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f298:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800f29c:	2201      	movs	r2, #1
 800f29e:	601a      	str	r2, [r3, #0]
 800f2a0:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f2a4:	f5a3 725f 	sub.w	r2, r3, #892	@ 0x37c
 800f2a8:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f2ac:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 800f2b0:	6053      	str	r3, [r2, #4]
 800f2b2:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f2b6:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	609a      	str	r2, [r3, #8]
 800f2be:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f2c2:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800f2c6:	4a51      	ldr	r2, [pc, #324]	@ (800f40c <main+0x340>)
 800f2c8:	60da      	str	r2, [r3, #12]
 800f2ca:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f2ce:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800f2d2:	4a50      	ldr	r2, [pc, #320]	@ (800f414 <main+0x348>)
 800f2d4:	611a      	str	r2, [r3, #16]
 800f2d6:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f2da:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800f2de:	2201      	movs	r2, #1
 800f2e0:	751a      	strb	r2, [r3, #20]

    AI_ALIGNED(4) ai_float mfcc_data[EXPECTED_MFCC_SIZE];
    ai_buffer mfcc_buffer = AI_BUFFER_INIT(AI_BUFFER_FORMAT_FLOAT, 1, 1, OUTPUT_SIZE, 1, mfcc_data);
 800f2e2:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f2e6:	f2a3 6354 	subw	r3, r3, #1620	@ 0x654
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	6013      	str	r3, [r2, #0]
 800f2f0:	6053      	str	r3, [r2, #4]
 800f2f2:	6093      	str	r3, [r2, #8]
 800f2f4:	60d3      	str	r3, [r2, #12]
 800f2f6:	6113      	str	r3, [r2, #16]
 800f2f8:	6153      	str	r3, [r2, #20]
 800f2fa:	6193      	str	r3, [r2, #24]
 800f2fc:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f300:	f2a3 6354 	subw	r3, r3, #1620	@ 0x654
 800f304:	2201      	movs	r2, #1
 800f306:	601a      	str	r2, [r3, #0]
 800f308:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f30c:	f2a3 6254 	subw	r2, r3, #1620	@ 0x654
 800f310:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f314:	f5a3 63c7 	sub.w	r3, r3, #1592	@ 0x638
 800f318:	6053      	str	r3, [r2, #4]
 800f31a:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f31e:	f2a3 6354 	subw	r3, r3, #1620	@ 0x654
 800f322:	2201      	movs	r2, #1
 800f324:	609a      	str	r2, [r3, #8]
 800f326:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f32a:	f2a3 6354 	subw	r3, r3, #1620	@ 0x654
 800f32e:	4a38      	ldr	r2, [pc, #224]	@ (800f410 <main+0x344>)
 800f330:	60da      	str	r2, [r3, #12]
 800f332:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f336:	f2a3 6354 	subw	r3, r3, #1620	@ 0x654
 800f33a:	220a      	movs	r2, #10
 800f33c:	611a      	str	r2, [r3, #16]
 800f33e:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f342:	f2a3 6354 	subw	r3, r3, #1620	@ 0x654
 800f346:	2201      	movs	r2, #1
 800f348:	751a      	strb	r2, [r3, #20]
    /* Create an instance of the model */
    ai_handle model_handle;
    ai_error err;
    ai_model_config model_config;

    model_config.activations = activations_buffer;
 800f34a:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f34e:	f2a3 629c 	subw	r2, r3, #1692	@ 0x69c
 800f352:	f507 23ac 	add.w	r3, r7, #352256	@ 0x56000
 800f356:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800f35a:	f6a3 7338 	subw	r3, r3, #3896	@ 0xf38
 800f35e:	4614      	mov	r4, r2
 800f360:	461d      	mov	r5, r3
 800f362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f366:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f36a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    model_config.activations.data = (uint8_t*)malloc(model_config.activations.size);
 800f36e:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f372:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800f376:	691b      	ldr	r3, [r3, #16]
 800f378:	4618      	mov	r0, r3
 800f37a:	f002 ffbb 	bl	80122f4 <malloc>
 800f37e:	4603      	mov	r3, r0
 800f380:	461a      	mov	r2, r3
 800f382:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f386:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800f38a:	605a      	str	r2, [r3, #4]
    model_config.activations.size = 64;
 800f38c:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f390:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800f394:	2240      	movs	r2, #64	@ 0x40
 800f396:	611a      	str	r2, [r3, #16]

    model_config.weights = weights_buffer;
 800f398:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f39c:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800f3a0:	f507 62e0 	add.w	r2, r7, #1792	@ 0x700
 800f3a4:	f5a2 725f 	sub.w	r2, r2, #892	@ 0x37c
 800f3a8:	f103 041c 	add.w	r4, r3, #28
 800f3ac:	4615      	mov	r5, r2
 800f3ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f3b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    model_config.weights.data = (uint8_t*)malloc(model_config.weights.size);
 800f3ba:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f3be:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800f3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f002 ff95 	bl	80122f4 <malloc>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f3d2:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800f3d6:	621a      	str	r2, [r3, #32]
    model_config.weights.size = 256;
 800f3d8:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f3dc:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800f3e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f3e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (model_config.activations.data == NULL || model_config.weights.data == NULL) {
 800f3e6:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f3ea:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d011      	beq.n	800f418 <main+0x34c>
 800f3f4:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f3f8:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800f3fc:	6a1b      	ldr	r3, [r3, #32]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d10c      	bne.n	800f41c <main+0x350>
 800f402:	e009      	b.n	800f418 <main+0x34c>
 800f404:	0801a0a4 	.word	0x0801a0a4
 800f408:	20000b04 	.word	0x20000b04
 800f40c:	00040440 	.word	0x00040440
 800f410:	01821040 	.word	0x01821040
 800f414:	0005303c 	.word	0x0005303c
        Error_Handler();
 800f418:	f000 f982 	bl	800f720 <Error_Handler>
    }


    err = ai_modellite_create(&model_handle, &model_config.activations);
 800f41c:	f507 62e0 	add.w	r2, r7, #1792	@ 0x700
 800f420:	f2a2 629c 	subw	r2, r2, #1692	@ 0x69c
 800f424:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f428:	f5a3 63cb 	sub.w	r3, r3, #1624	@ 0x658
 800f42c:	4611      	mov	r1, r2
 800f42e:	4618      	mov	r0, r3
 800f430:	f000 f97c 	bl	800f72c <ai_modellite_create>
 800f434:	4602      	mov	r2, r0
 800f436:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f43a:	f2a3 635c 	subw	r3, r3, #1628	@ 0x65c
 800f43e:	601a      	str	r2, [r3, #0]
    // Initialize the model
    if (err.type != AI_ERROR_NONE) {
 800f440:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f444:	f2a3 635c 	subw	r3, r3, #1628	@ 0x65c
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d01f      	beq.n	800f48e <main+0x3c2>
    	char erriniz[100];
    	sprintf(erriniz, "Errore durante l'inizializzazione del modello: %d\n", err.type);
 800f44e:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f452:	f2a3 635c 	subw	r3, r3, #1628	@ 0x65c
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	461a      	mov	r2, r3
 800f45a:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f45e:	f5a3 63e0 	sub.w	r3, r3, #1792	@ 0x700
 800f462:	491d      	ldr	r1, [pc, #116]	@ (800f4d8 <main+0x40c>)
 800f464:	4618      	mov	r0, r3
 800f466:	f005 f833 	bl	80144d0 <siprintf>
    	HAL_UART_Transmit(&huart2,(uint8_t*)erriniz, strlen(erriniz), HAL_MAX_DELAY);
 800f46a:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f46e:	f5a3 63e0 	sub.w	r3, r3, #1792	@ 0x700
 800f472:	4618      	mov	r0, r3
 800f474:	f7fd fd84 	bl	800cf80 <strlen>
 800f478:	4603      	mov	r3, r0
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	f507 61e0 	add.w	r1, r7, #1792	@ 0x700
 800f480:	f5a1 61e0 	sub.w	r1, r1, #1792	@ 0x700
 800f484:	f04f 33ff 	mov.w	r3, #4294967295
 800f488:	4814      	ldr	r0, [pc, #80]	@ (800f4dc <main+0x410>)
 800f48a:	f001 ff81 	bl	8011390 <HAL_UART_Transmit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f48e:	f000 fbab 	bl	800fbe8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f492:	f000 f827 	bl	800f4e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f496:	f000 f8e7 	bl	800f668 <MX_GPIO_Init>
  MX_DMA_Init();
 800f49a:	f000 f8bd 	bl	800f618 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800f49e:	f000 f891 	bl	800f5c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  load_mfcc_data("Resources/mfcc.json");
 800f4a2:	480f      	ldr	r0, [pc, #60]	@ (800f4e0 <main+0x414>)
 800f4a4:	f7ff fd36 	bl	800ef14 <load_mfcc_data>

  free(model_config.activations.data); // Libera la memoria delle attivazioni
 800f4a8:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f4ac:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f002 ff26 	bl	8012304 <free>
  free(model_config.weights.data); // Libera la memoria dei pesi
 800f4b8:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 800f4bc:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 800f4c0:	6a1b      	ldr	r3, [r3, #32]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f002 ff1e 	bl	8012304 <free>

  // Ritorna o termina il programma
  return 0;
 800f4c8:	2300      	movs	r3, #0
        sprintf(message, "Strumento riconosciuto: %s\n", instrument_name);
        HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);

    }
  /* USER CODE END 3 */
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f507 27ac 	add.w	r7, r7, #352256	@ 0x56000
 800f4d0:	f507 67e0 	add.w	r7, r7, #1792	@ 0x700
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bdb0      	pop	{r4, r5, r7, pc}
 800f4d8:	0801a0bc 	.word	0x0801a0bc
 800f4dc:	20000b04 	.word	0x20000b04
 800f4e0:	0801a0f0 	.word	0x0801a0f0

0800f4e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b094      	sub	sp, #80	@ 0x50
 800f4e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f4ea:	f107 0320 	add.w	r3, r7, #32
 800f4ee:	2230      	movs	r2, #48	@ 0x30
 800f4f0:	2100      	movs	r1, #0
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f005 f9e6 	bl	80148c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f4f8:	f107 030c 	add.w	r3, r7, #12
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	601a      	str	r2, [r3, #0]
 800f500:	605a      	str	r2, [r3, #4]
 800f502:	609a      	str	r2, [r3, #8]
 800f504:	60da      	str	r2, [r3, #12]
 800f506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f508:	2300      	movs	r3, #0
 800f50a:	60bb      	str	r3, [r7, #8]
 800f50c:	4b2b      	ldr	r3, [pc, #172]	@ (800f5bc <SystemClock_Config+0xd8>)
 800f50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f510:	4a2a      	ldr	r2, [pc, #168]	@ (800f5bc <SystemClock_Config+0xd8>)
 800f512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f516:	6413      	str	r3, [r2, #64]	@ 0x40
 800f518:	4b28      	ldr	r3, [pc, #160]	@ (800f5bc <SystemClock_Config+0xd8>)
 800f51a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f51c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f520:	60bb      	str	r3, [r7, #8]
 800f522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800f524:	2300      	movs	r3, #0
 800f526:	607b      	str	r3, [r7, #4]
 800f528:	4b25      	ldr	r3, [pc, #148]	@ (800f5c0 <SystemClock_Config+0xdc>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800f530:	4a23      	ldr	r2, [pc, #140]	@ (800f5c0 <SystemClock_Config+0xdc>)
 800f532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f536:	6013      	str	r3, [r2, #0]
 800f538:	4b21      	ldr	r3, [pc, #132]	@ (800f5c0 <SystemClock_Config+0xdc>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800f540:	607b      	str	r3, [r7, #4]
 800f542:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800f544:	2302      	movs	r3, #2
 800f546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800f548:	2301      	movs	r3, #1
 800f54a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800f54c:	2310      	movs	r3, #16
 800f54e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f550:	2302      	movs	r3, #2
 800f552:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800f554:	2300      	movs	r3, #0
 800f556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800f558:	2310      	movs	r3, #16
 800f55a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800f55c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800f560:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800f562:	2304      	movs	r3, #4
 800f564:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800f566:	2307      	movs	r3, #7
 800f568:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f56a:	f107 0320 	add.w	r3, r7, #32
 800f56e:	4618      	mov	r0, r3
 800f570:	f001 f9be 	bl	80108f0 <HAL_RCC_OscConfig>
 800f574:	4603      	mov	r3, r0
 800f576:	2b00      	cmp	r3, #0
 800f578:	d001      	beq.n	800f57e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800f57a:	f000 f8d1 	bl	800f720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f57e:	230f      	movs	r3, #15
 800f580:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f582:	2302      	movs	r3, #2
 800f584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f586:	2300      	movs	r3, #0
 800f588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800f58a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f58e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800f590:	2300      	movs	r3, #0
 800f592:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800f594:	f107 030c 	add.w	r3, r7, #12
 800f598:	2102      	movs	r1, #2
 800f59a:	4618      	mov	r0, r3
 800f59c:	f001 fc20 	bl	8010de0 <HAL_RCC_ClockConfig>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d001      	beq.n	800f5aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800f5a6:	f000 f8bb 	bl	800f720 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	2100      	movs	r1, #0
 800f5ae:	2000      	movs	r0, #0
 800f5b0:	f001 fcfc 	bl	8010fac <HAL_RCC_MCOConfig>
}
 800f5b4:	bf00      	nop
 800f5b6:	3750      	adds	r7, #80	@ 0x50
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	40023800 	.word	0x40023800
 800f5c0:	40007000 	.word	0x40007000

0800f5c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800f5c8:	4b11      	ldr	r3, [pc, #68]	@ (800f610 <MX_USART2_UART_Init+0x4c>)
 800f5ca:	4a12      	ldr	r2, [pc, #72]	@ (800f614 <MX_USART2_UART_Init+0x50>)
 800f5cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800f5ce:	4b10      	ldr	r3, [pc, #64]	@ (800f610 <MX_USART2_UART_Init+0x4c>)
 800f5d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800f5d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800f5d6:	4b0e      	ldr	r3, [pc, #56]	@ (800f610 <MX_USART2_UART_Init+0x4c>)
 800f5d8:	2200      	movs	r2, #0
 800f5da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800f5dc:	4b0c      	ldr	r3, [pc, #48]	@ (800f610 <MX_USART2_UART_Init+0x4c>)
 800f5de:	2200      	movs	r2, #0
 800f5e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800f5e2:	4b0b      	ldr	r3, [pc, #44]	@ (800f610 <MX_USART2_UART_Init+0x4c>)
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800f5e8:	4b09      	ldr	r3, [pc, #36]	@ (800f610 <MX_USART2_UART_Init+0x4c>)
 800f5ea:	220c      	movs	r2, #12
 800f5ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f5ee:	4b08      	ldr	r3, [pc, #32]	@ (800f610 <MX_USART2_UART_Init+0x4c>)
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800f5f4:	4b06      	ldr	r3, [pc, #24]	@ (800f610 <MX_USART2_UART_Init+0x4c>)
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800f5fa:	4805      	ldr	r0, [pc, #20]	@ (800f610 <MX_USART2_UART_Init+0x4c>)
 800f5fc:	f001 fe78 	bl	80112f0 <HAL_UART_Init>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d001      	beq.n	800f60a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800f606:	f000 f88b 	bl	800f720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800f60a:	bf00      	nop
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	20000b04 	.word	0x20000b04
 800f614:	40004400 	.word	0x40004400

0800f618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800f61e:	2300      	movs	r3, #0
 800f620:	607b      	str	r3, [r7, #4]
 800f622:	4b10      	ldr	r3, [pc, #64]	@ (800f664 <MX_DMA_Init+0x4c>)
 800f624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f626:	4a0f      	ldr	r2, [pc, #60]	@ (800f664 <MX_DMA_Init+0x4c>)
 800f628:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f62c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f62e:	4b0d      	ldr	r3, [pc, #52]	@ (800f664 <MX_DMA_Init+0x4c>)
 800f630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f636:	607b      	str	r3, [r7, #4]
 800f638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800f63a:	2200      	movs	r2, #0
 800f63c:	2100      	movs	r1, #0
 800f63e:	2010      	movs	r0, #16
 800f640:	f000 fc1f 	bl	800fe82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800f644:	2010      	movs	r0, #16
 800f646:	f000 fc38 	bl	800feba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800f64a:	2200      	movs	r2, #0
 800f64c:	2100      	movs	r1, #0
 800f64e:	2011      	movs	r0, #17
 800f650:	f000 fc17 	bl	800fe82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800f654:	2011      	movs	r0, #17
 800f656:	f000 fc30 	bl	800feba <HAL_NVIC_EnableIRQ>

}
 800f65a:	bf00      	nop
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	40023800 	.word	0x40023800

0800f668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b08a      	sub	sp, #40	@ 0x28
 800f66c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f66e:	f107 0314 	add.w	r3, r7, #20
 800f672:	2200      	movs	r2, #0
 800f674:	601a      	str	r2, [r3, #0]
 800f676:	605a      	str	r2, [r3, #4]
 800f678:	609a      	str	r2, [r3, #8]
 800f67a:	60da      	str	r2, [r3, #12]
 800f67c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f67e:	2300      	movs	r3, #0
 800f680:	613b      	str	r3, [r7, #16]
 800f682:	4b25      	ldr	r3, [pc, #148]	@ (800f718 <MX_GPIO_Init+0xb0>)
 800f684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f686:	4a24      	ldr	r2, [pc, #144]	@ (800f718 <MX_GPIO_Init+0xb0>)
 800f688:	f043 0304 	orr.w	r3, r3, #4
 800f68c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f68e:	4b22      	ldr	r3, [pc, #136]	@ (800f718 <MX_GPIO_Init+0xb0>)
 800f690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f692:	f003 0304 	and.w	r3, r3, #4
 800f696:	613b      	str	r3, [r7, #16]
 800f698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f69a:	2300      	movs	r3, #0
 800f69c:	60fb      	str	r3, [r7, #12]
 800f69e:	4b1e      	ldr	r3, [pc, #120]	@ (800f718 <MX_GPIO_Init+0xb0>)
 800f6a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6a2:	4a1d      	ldr	r2, [pc, #116]	@ (800f718 <MX_GPIO_Init+0xb0>)
 800f6a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6a8:	6313      	str	r3, [r2, #48]	@ 0x30
 800f6aa:	4b1b      	ldr	r3, [pc, #108]	@ (800f718 <MX_GPIO_Init+0xb0>)
 800f6ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6b2:	60fb      	str	r3, [r7, #12]
 800f6b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	60bb      	str	r3, [r7, #8]
 800f6ba:	4b17      	ldr	r3, [pc, #92]	@ (800f718 <MX_GPIO_Init+0xb0>)
 800f6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6be:	4a16      	ldr	r2, [pc, #88]	@ (800f718 <MX_GPIO_Init+0xb0>)
 800f6c0:	f043 0301 	orr.w	r3, r3, #1
 800f6c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800f6c6:	4b14      	ldr	r3, [pc, #80]	@ (800f718 <MX_GPIO_Init+0xb0>)
 800f6c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6ca:	f003 0301 	and.w	r3, r3, #1
 800f6ce:	60bb      	str	r3, [r7, #8]
 800f6d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	607b      	str	r3, [r7, #4]
 800f6d6:	4b10      	ldr	r3, [pc, #64]	@ (800f718 <MX_GPIO_Init+0xb0>)
 800f6d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6da:	4a0f      	ldr	r2, [pc, #60]	@ (800f718 <MX_GPIO_Init+0xb0>)
 800f6dc:	f043 0302 	orr.w	r3, r3, #2
 800f6e0:	6313      	str	r3, [r2, #48]	@ 0x30
 800f6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f718 <MX_GPIO_Init+0xb0>)
 800f6e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6e6:	f003 0302 	and.w	r3, r3, #2
 800f6ea:	607b      	str	r3, [r7, #4]
 800f6ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800f6ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f6f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6f4:	2302      	movs	r3, #2
 800f6f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800f700:	2300      	movs	r3, #0
 800f702:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f704:	f107 0314 	add.w	r3, r7, #20
 800f708:	4619      	mov	r1, r3
 800f70a:	4804      	ldr	r0, [pc, #16]	@ (800f71c <MX_GPIO_Init+0xb4>)
 800f70c:	f000 ff6c 	bl	80105e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800f710:	bf00      	nop
 800f712:	3728      	adds	r7, #40	@ 0x28
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	40023800 	.word	0x40023800
 800f71c:	40020000 	.word	0x40020000

0800f720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f720:	b480      	push	{r7}
 800f722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800f724:	b672      	cpsid	i
}
 800f726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800f728:	bf00      	nop
 800f72a:	e7fd      	b.n	800f728 <Error_Handler+0x8>

0800f72c <ai_modellite_create>:


AI_API_ENTRY
ai_error ai_modellite_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af02      	add	r7, sp, #8
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800f736:	2300      	movs	r3, #0
 800f738:	9301      	str	r3, [sp, #4]
 800f73a:	2305      	movs	r3, #5
 800f73c:	9300      	str	r3, [sp, #0]
 800f73e:	2301      	movs	r3, #1
 800f740:	4a04      	ldr	r2, [pc, #16]	@ (800f754 <ai_modellite_create+0x28>)
 800f742:	6839      	ldr	r1, [r7, #0]
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f7f1 fa55 	bl	8000bf4 <ai_platform_network_create>
 800f74a:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	200008b4 	.word	0x200008b4

0800f758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f75e:	2300      	movs	r3, #0
 800f760:	607b      	str	r3, [r7, #4]
 800f762:	4b14      	ldr	r3, [pc, #80]	@ (800f7b4 <HAL_MspInit+0x5c>)
 800f764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f766:	4a13      	ldr	r2, [pc, #76]	@ (800f7b4 <HAL_MspInit+0x5c>)
 800f768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f76c:	6453      	str	r3, [r2, #68]	@ 0x44
 800f76e:	4b11      	ldr	r3, [pc, #68]	@ (800f7b4 <HAL_MspInit+0x5c>)
 800f770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f776:	607b      	str	r3, [r7, #4]
 800f778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f77a:	2300      	movs	r3, #0
 800f77c:	603b      	str	r3, [r7, #0]
 800f77e:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b4 <HAL_MspInit+0x5c>)
 800f780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f782:	4a0c      	ldr	r2, [pc, #48]	@ (800f7b4 <HAL_MspInit+0x5c>)
 800f784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f788:	6413      	str	r3, [r2, #64]	@ 0x40
 800f78a:	4b0a      	ldr	r3, [pc, #40]	@ (800f7b4 <HAL_MspInit+0x5c>)
 800f78c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f78e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f792:	603b      	str	r3, [r7, #0]
 800f794:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800f796:	2007      	movs	r0, #7
 800f798:	f000 fb68 	bl	800fe6c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800f79c:	2200      	movs	r2, #0
 800f79e:	2100      	movs	r1, #0
 800f7a0:	2005      	movs	r0, #5
 800f7a2:	f000 fb6e 	bl	800fe82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800f7a6:	2005      	movs	r0, #5
 800f7a8:	f000 fb87 	bl	800feba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f7ac:	bf00      	nop
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	40023800 	.word	0x40023800

0800f7b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b08a      	sub	sp, #40	@ 0x28
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f7c0:	f107 0314 	add.w	r3, r7, #20
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	601a      	str	r2, [r3, #0]
 800f7c8:	605a      	str	r2, [r3, #4]
 800f7ca:	609a      	str	r2, [r3, #8]
 800f7cc:	60da      	str	r2, [r3, #12]
 800f7ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4a4b      	ldr	r2, [pc, #300]	@ (800f904 <HAL_UART_MspInit+0x14c>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	f040 8090 	bne.w	800f8fc <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800f7dc:	2300      	movs	r3, #0
 800f7de:	613b      	str	r3, [r7, #16]
 800f7e0:	4b49      	ldr	r3, [pc, #292]	@ (800f908 <HAL_UART_MspInit+0x150>)
 800f7e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7e4:	4a48      	ldr	r2, [pc, #288]	@ (800f908 <HAL_UART_MspInit+0x150>)
 800f7e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f7ea:	6413      	str	r3, [r2, #64]	@ 0x40
 800f7ec:	4b46      	ldr	r3, [pc, #280]	@ (800f908 <HAL_UART_MspInit+0x150>)
 800f7ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f7f4:	613b      	str	r3, [r7, #16]
 800f7f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	60fb      	str	r3, [r7, #12]
 800f7fc:	4b42      	ldr	r3, [pc, #264]	@ (800f908 <HAL_UART_MspInit+0x150>)
 800f7fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f800:	4a41      	ldr	r2, [pc, #260]	@ (800f908 <HAL_UART_MspInit+0x150>)
 800f802:	f043 0301 	orr.w	r3, r3, #1
 800f806:	6313      	str	r3, [r2, #48]	@ 0x30
 800f808:	4b3f      	ldr	r3, [pc, #252]	@ (800f908 <HAL_UART_MspInit+0x150>)
 800f80a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f80c:	f003 0301 	and.w	r3, r3, #1
 800f810:	60fb      	str	r3, [r7, #12]
 800f812:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800f814:	230c      	movs	r3, #12
 800f816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f818:	2302      	movs	r3, #2
 800f81a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f81c:	2300      	movs	r3, #0
 800f81e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f820:	2300      	movs	r3, #0
 800f822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f824:	2307      	movs	r3, #7
 800f826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f828:	f107 0314 	add.w	r3, r7, #20
 800f82c:	4619      	mov	r1, r3
 800f82e:	4837      	ldr	r0, [pc, #220]	@ (800f90c <HAL_UART_MspInit+0x154>)
 800f830:	f000 feda 	bl	80105e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800f834:	4b36      	ldr	r3, [pc, #216]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f836:	4a37      	ldr	r2, [pc, #220]	@ (800f914 <HAL_UART_MspInit+0x15c>)
 800f838:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800f83a:	4b35      	ldr	r3, [pc, #212]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f83c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800f840:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f842:	4b33      	ldr	r3, [pc, #204]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f844:	2200      	movs	r2, #0
 800f846:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f848:	4b31      	ldr	r3, [pc, #196]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f84a:	2200      	movs	r2, #0
 800f84c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f84e:	4b30      	ldr	r3, [pc, #192]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f850:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f854:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f856:	4b2e      	ldr	r3, [pc, #184]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f858:	2200      	movs	r2, #0
 800f85a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f85c:	4b2c      	ldr	r3, [pc, #176]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f85e:	2200      	movs	r2, #0
 800f860:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800f862:	4b2b      	ldr	r3, [pc, #172]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f864:	2200      	movs	r2, #0
 800f866:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800f868:	4b29      	ldr	r3, [pc, #164]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f86a:	2200      	movs	r2, #0
 800f86c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f86e:	4b28      	ldr	r3, [pc, #160]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f870:	2200      	movs	r2, #0
 800f872:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800f874:	4826      	ldr	r0, [pc, #152]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f876:	f000 fb3b 	bl	800fef0 <HAL_DMA_Init>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d001      	beq.n	800f884 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800f880:	f7ff ff4e 	bl	800f720 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a22      	ldr	r2, [pc, #136]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f888:	63da      	str	r2, [r3, #60]	@ 0x3c
 800f88a:	4a21      	ldr	r2, [pc, #132]	@ (800f910 <HAL_UART_MspInit+0x158>)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800f890:	4b21      	ldr	r3, [pc, #132]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f892:	4a22      	ldr	r2, [pc, #136]	@ (800f91c <HAL_UART_MspInit+0x164>)
 800f894:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800f896:	4b20      	ldr	r3, [pc, #128]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f898:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800f89c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f89e:	4b1e      	ldr	r3, [pc, #120]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f8a0:	2240      	movs	r2, #64	@ 0x40
 800f8a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f8a4:	4b1c      	ldr	r3, [pc, #112]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f8aa:	4b1b      	ldr	r3, [pc, #108]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f8ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f8b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f8b2:	4b19      	ldr	r3, [pc, #100]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f8b8:	4b17      	ldr	r3, [pc, #92]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800f8be:	4b16      	ldr	r3, [pc, #88]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f8c4:	4b14      	ldr	r3, [pc, #80]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f8ca:	4b13      	ldr	r3, [pc, #76]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800f8d0:	4811      	ldr	r0, [pc, #68]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f8d2:	f000 fb0d 	bl	800fef0 <HAL_DMA_Init>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d001      	beq.n	800f8e0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800f8dc:	f7ff ff20 	bl	800f720 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	4a0d      	ldr	r2, [pc, #52]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f8e4:	639a      	str	r2, [r3, #56]	@ 0x38
 800f8e6:	4a0c      	ldr	r2, [pc, #48]	@ (800f918 <HAL_UART_MspInit+0x160>)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	2100      	movs	r1, #0
 800f8f0:	2026      	movs	r0, #38	@ 0x26
 800f8f2:	f000 fac6 	bl	800fe82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f8f6:	2026      	movs	r0, #38	@ 0x26
 800f8f8:	f000 fadf 	bl	800feba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800f8fc:	bf00      	nop
 800f8fe:	3728      	adds	r7, #40	@ 0x28
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	40004400 	.word	0x40004400
 800f908:	40023800 	.word	0x40023800
 800f90c:	40020000 	.word	0x40020000
 800f910:	20000b4c 	.word	0x20000b4c
 800f914:	40026088 	.word	0x40026088
 800f918:	20000bac 	.word	0x20000bac
 800f91c:	400260a0 	.word	0x400260a0

0800f920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f920:	b480      	push	{r7}
 800f922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800f924:	bf00      	nop
 800f926:	e7fd      	b.n	800f924 <NMI_Handler+0x4>

0800f928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f928:	b480      	push	{r7}
 800f92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f92c:	bf00      	nop
 800f92e:	e7fd      	b.n	800f92c <HardFault_Handler+0x4>

0800f930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f930:	b480      	push	{r7}
 800f932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f934:	bf00      	nop
 800f936:	e7fd      	b.n	800f934 <MemManage_Handler+0x4>

0800f938 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f938:	b480      	push	{r7}
 800f93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f93c:	bf00      	nop
 800f93e:	e7fd      	b.n	800f93c <BusFault_Handler+0x4>

0800f940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f940:	b480      	push	{r7}
 800f942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f944:	bf00      	nop
 800f946:	e7fd      	b.n	800f944 <UsageFault_Handler+0x4>

0800f948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f948:	b480      	push	{r7}
 800f94a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f94c:	bf00      	nop
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr

0800f956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f956:	b480      	push	{r7}
 800f958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f95a:	bf00      	nop
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f964:	b480      	push	{r7}
 800f966:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f968:	bf00      	nop
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr

0800f972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f972:	b580      	push	{r7, lr}
 800f974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f976:	f000 f989 	bl	800fc8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f97a:	bf00      	nop
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800f97e:	b480      	push	{r7}
 800f980:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800f982:	bf00      	nop
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr

0800f98c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800f990:	4802      	ldr	r0, [pc, #8]	@ (800f99c <DMA1_Stream5_IRQHandler+0x10>)
 800f992:	f000 fbed 	bl	8010170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800f996:	bf00      	nop
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	20000b4c 	.word	0x20000b4c

0800f9a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800f9a4:	4802      	ldr	r0, [pc, #8]	@ (800f9b0 <DMA1_Stream6_IRQHandler+0x10>)
 800f9a6:	f000 fbe3 	bl	8010170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800f9aa:	bf00      	nop
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	20000bac 	.word	0x20000bac

0800f9b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800f9b8:	4802      	ldr	r0, [pc, #8]	@ (800f9c4 <USART2_IRQHandler+0x10>)
 800f9ba:	f001 fd75 	bl	80114a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800f9be:	bf00      	nop
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	20000b04 	.word	0x20000b04

0800f9c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	af00      	add	r7, sp, #0
  return 1;
 800f9cc:	2301      	movs	r3, #1
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr

0800f9d8 <_kill>:

int _kill(int pid, int sig)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800f9e2:	f004 fff5 	bl	80149d0 <__errno>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2216      	movs	r2, #22
 800f9ea:	601a      	str	r2, [r3, #0]
  return -1;
 800f9ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3708      	adds	r7, #8
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <_exit>:

void _exit (int status)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800fa00:	f04f 31ff 	mov.w	r1, #4294967295
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f7ff ffe7 	bl	800f9d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800fa0a:	bf00      	nop
 800fa0c:	e7fd      	b.n	800fa0a <_exit+0x12>

0800fa0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800fa0e:	b580      	push	{r7, lr}
 800fa10:	b086      	sub	sp, #24
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	60f8      	str	r0, [r7, #12]
 800fa16:	60b9      	str	r1, [r7, #8]
 800fa18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	617b      	str	r3, [r7, #20]
 800fa1e:	e00a      	b.n	800fa36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800fa20:	f3af 8000 	nop.w
 800fa24:	4601      	mov	r1, r0
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	1c5a      	adds	r2, r3, #1
 800fa2a:	60ba      	str	r2, [r7, #8]
 800fa2c:	b2ca      	uxtb	r2, r1
 800fa2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	3301      	adds	r3, #1
 800fa34:	617b      	str	r3, [r7, #20]
 800fa36:	697a      	ldr	r2, [r7, #20]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	dbf0      	blt.n	800fa20 <_read+0x12>
  }

  return len;
 800fa3e:	687b      	ldr	r3, [r7, #4]
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3718      	adds	r7, #24
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b086      	sub	sp, #24
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fa54:	2300      	movs	r3, #0
 800fa56:	617b      	str	r3, [r7, #20]
 800fa58:	e009      	b.n	800fa6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	1c5a      	adds	r2, r3, #1
 800fa5e:	60ba      	str	r2, [r7, #8]
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	4618      	mov	r0, r3
 800fa64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	617b      	str	r3, [r7, #20]
 800fa6e:	697a      	ldr	r2, [r7, #20]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	dbf1      	blt.n	800fa5a <_write+0x12>
  }
  return len;
 800fa76:	687b      	ldr	r3, [r7, #4]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3718      	adds	r7, #24
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <_close>:

int _close(int file)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800fa88:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800faa8:	605a      	str	r2, [r3, #4]
  return 0;
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	370c      	adds	r7, #12
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr

0800fab8 <_isatty>:

int _isatty(int file)
{
 800fab8:	b480      	push	{r7}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800fac0:	2301      	movs	r3, #1
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	370c      	adds	r7, #12
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800face:	b480      	push	{r7}
 800fad0:	b085      	sub	sp, #20
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	60f8      	str	r0, [r7, #12]
 800fad6:	60b9      	str	r1, [r7, #8]
 800fad8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800fada:	2300      	movs	r3, #0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3714      	adds	r7, #20
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <_open>:

int _open(char *path, int flags, ...)
{
 800fae8:	b40e      	push	{r1, r2, r3}
 800faea:	b480      	push	{r7}
 800faec:	b082      	sub	sp, #8
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 800faf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3708      	adds	r7, #8
 800fafa:	46bd      	mov	sp, r7
 800fafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb00:	b003      	add	sp, #12
 800fb02:	4770      	bx	lr

0800fb04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b086      	sub	sp, #24
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800fb0c:	4a14      	ldr	r2, [pc, #80]	@ (800fb60 <_sbrk+0x5c>)
 800fb0e:	4b15      	ldr	r3, [pc, #84]	@ (800fb64 <_sbrk+0x60>)
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800fb18:	4b13      	ldr	r3, [pc, #76]	@ (800fb68 <_sbrk+0x64>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d102      	bne.n	800fb26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800fb20:	4b11      	ldr	r3, [pc, #68]	@ (800fb68 <_sbrk+0x64>)
 800fb22:	4a12      	ldr	r2, [pc, #72]	@ (800fb6c <_sbrk+0x68>)
 800fb24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800fb26:	4b10      	ldr	r3, [pc, #64]	@ (800fb68 <_sbrk+0x64>)
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	693a      	ldr	r2, [r7, #16]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d207      	bcs.n	800fb44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800fb34:	f004 ff4c 	bl	80149d0 <__errno>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	220c      	movs	r2, #12
 800fb3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800fb3e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb42:	e009      	b.n	800fb58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800fb44:	4b08      	ldr	r3, [pc, #32]	@ (800fb68 <_sbrk+0x64>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800fb4a:	4b07      	ldr	r3, [pc, #28]	@ (800fb68 <_sbrk+0x64>)
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	4413      	add	r3, r2
 800fb52:	4a05      	ldr	r2, [pc, #20]	@ (800fb68 <_sbrk+0x64>)
 800fb54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800fb56:	68fb      	ldr	r3, [r7, #12]
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3718      	adds	r7, #24
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	20018000 	.word	0x20018000
 800fb64:	00000400 	.word	0x00000400
 800fb68:	20000f60 	.word	0x20000f60
 800fb6c:	200010b8 	.word	0x200010b8

0800fb70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800fb70:	b480      	push	{r7}
 800fb72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800fb74:	4b06      	ldr	r3, [pc, #24]	@ (800fb90 <SystemInit+0x20>)
 800fb76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb7a:	4a05      	ldr	r2, [pc, #20]	@ (800fb90 <SystemInit+0x20>)
 800fb7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fb80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800fb84:	bf00      	nop
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	e000ed00 	.word	0xe000ed00

0800fb94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800fb94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800fbcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800fb98:	f7ff ffea 	bl	800fb70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800fb9c:	480c      	ldr	r0, [pc, #48]	@ (800fbd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800fb9e:	490d      	ldr	r1, [pc, #52]	@ (800fbd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800fba0:	4a0d      	ldr	r2, [pc, #52]	@ (800fbd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800fba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800fba4:	e002      	b.n	800fbac <LoopCopyDataInit>

0800fba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800fba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800fba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800fbaa:	3304      	adds	r3, #4

0800fbac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800fbac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800fbae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800fbb0:	d3f9      	bcc.n	800fba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800fbb2:	4a0a      	ldr	r2, [pc, #40]	@ (800fbdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800fbb4:	4c0a      	ldr	r4, [pc, #40]	@ (800fbe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800fbb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800fbb8:	e001      	b.n	800fbbe <LoopFillZerobss>

0800fbba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800fbba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800fbbc:	3204      	adds	r2, #4

0800fbbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800fbbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800fbc0:	d3fb      	bcc.n	800fbba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800fbc2:	f004 ff0b 	bl	80149dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800fbc6:	f7ff fa81 	bl	800f0cc <main>
  bx  lr    
 800fbca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800fbcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800fbd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800fbd4:	20000ae0 	.word	0x20000ae0
  ldr r2, =_sidata
 800fbd8:	0801aa88 	.word	0x0801aa88
  ldr r2, =_sbss
 800fbdc:	20000ae0 	.word	0x20000ae0
  ldr r4, =_ebss
 800fbe0:	200010b4 	.word	0x200010b4

0800fbe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fbe4:	e7fe      	b.n	800fbe4 <ADC_IRQHandler>
	...

0800fbe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800fbec:	4b0e      	ldr	r3, [pc, #56]	@ (800fc28 <HAL_Init+0x40>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4a0d      	ldr	r2, [pc, #52]	@ (800fc28 <HAL_Init+0x40>)
 800fbf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fbf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800fbf8:	4b0b      	ldr	r3, [pc, #44]	@ (800fc28 <HAL_Init+0x40>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4a0a      	ldr	r2, [pc, #40]	@ (800fc28 <HAL_Init+0x40>)
 800fbfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800fc02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fc04:	4b08      	ldr	r3, [pc, #32]	@ (800fc28 <HAL_Init+0x40>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4a07      	ldr	r2, [pc, #28]	@ (800fc28 <HAL_Init+0x40>)
 800fc0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fc0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800fc10:	2003      	movs	r0, #3
 800fc12:	f000 f92b 	bl	800fe6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800fc16:	2000      	movs	r0, #0
 800fc18:	f000 f808 	bl	800fc2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800fc1c:	f7ff fd9c 	bl	800f758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800fc20:	2300      	movs	r3, #0
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	40023c00 	.word	0x40023c00

0800fc2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b082      	sub	sp, #8
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800fc34:	4b12      	ldr	r3, [pc, #72]	@ (800fc80 <HAL_InitTick+0x54>)
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	4b12      	ldr	r3, [pc, #72]	@ (800fc84 <HAL_InitTick+0x58>)
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc42:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc46:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f000 f943 	bl	800fed6 <HAL_SYSTICK_Config>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d001      	beq.n	800fc5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800fc56:	2301      	movs	r3, #1
 800fc58:	e00e      	b.n	800fc78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2b0f      	cmp	r3, #15
 800fc5e:	d80a      	bhi.n	800fc76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800fc60:	2200      	movs	r2, #0
 800fc62:	6879      	ldr	r1, [r7, #4]
 800fc64:	f04f 30ff 	mov.w	r0, #4294967295
 800fc68:	f000 f90b 	bl	800fe82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800fc6c:	4a06      	ldr	r2, [pc, #24]	@ (800fc88 <HAL_InitTick+0x5c>)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800fc72:	2300      	movs	r3, #0
 800fc74:	e000      	b.n	800fc78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800fc76:	2301      	movs	r3, #1
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	20000900 	.word	0x20000900
 800fc84:	20000908 	.word	0x20000908
 800fc88:	20000904 	.word	0x20000904

0800fc8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800fc90:	4b06      	ldr	r3, [pc, #24]	@ (800fcac <HAL_IncTick+0x20>)
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	461a      	mov	r2, r3
 800fc96:	4b06      	ldr	r3, [pc, #24]	@ (800fcb0 <HAL_IncTick+0x24>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	4413      	add	r3, r2
 800fc9c:	4a04      	ldr	r2, [pc, #16]	@ (800fcb0 <HAL_IncTick+0x24>)
 800fc9e:	6013      	str	r3, [r2, #0]
}
 800fca0:	bf00      	nop
 800fca2:	46bd      	mov	sp, r7
 800fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop
 800fcac:	20000908 	.word	0x20000908
 800fcb0:	20000f64 	.word	0x20000f64

0800fcb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	af00      	add	r7, sp, #0
  return uwTick;
 800fcb8:	4b03      	ldr	r3, [pc, #12]	@ (800fcc8 <HAL_GetTick+0x14>)
 800fcba:	681b      	ldr	r3, [r3, #0]
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr
 800fcc6:	bf00      	nop
 800fcc8:	20000f64 	.word	0x20000f64

0800fccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b085      	sub	sp, #20
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f003 0307 	and.w	r3, r3, #7
 800fcda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800fcdc:	4b0c      	ldr	r3, [pc, #48]	@ (800fd10 <__NVIC_SetPriorityGrouping+0x44>)
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800fce2:	68ba      	ldr	r2, [r7, #8]
 800fce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800fce8:	4013      	ands	r3, r2
 800fcea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800fcf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800fcf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fcfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800fcfe:	4a04      	ldr	r2, [pc, #16]	@ (800fd10 <__NVIC_SetPriorityGrouping+0x44>)
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	60d3      	str	r3, [r2, #12]
}
 800fd04:	bf00      	nop
 800fd06:	3714      	adds	r7, #20
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	e000ed00 	.word	0xe000ed00

0800fd14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800fd14:	b480      	push	{r7}
 800fd16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800fd18:	4b04      	ldr	r3, [pc, #16]	@ (800fd2c <__NVIC_GetPriorityGrouping+0x18>)
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	0a1b      	lsrs	r3, r3, #8
 800fd1e:	f003 0307 	and.w	r3, r3, #7
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr
 800fd2c:	e000ed00 	.word	0xe000ed00

0800fd30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b083      	sub	sp, #12
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	4603      	mov	r3, r0
 800fd38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fd3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	db0b      	blt.n	800fd5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fd42:	79fb      	ldrb	r3, [r7, #7]
 800fd44:	f003 021f 	and.w	r2, r3, #31
 800fd48:	4907      	ldr	r1, [pc, #28]	@ (800fd68 <__NVIC_EnableIRQ+0x38>)
 800fd4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd4e:	095b      	lsrs	r3, r3, #5
 800fd50:	2001      	movs	r0, #1
 800fd52:	fa00 f202 	lsl.w	r2, r0, r2
 800fd56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800fd5a:	bf00      	nop
 800fd5c:	370c      	adds	r7, #12
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop
 800fd68:	e000e100 	.word	0xe000e100

0800fd6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	4603      	mov	r3, r0
 800fd74:	6039      	str	r1, [r7, #0]
 800fd76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fd78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	db0a      	blt.n	800fd96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	b2da      	uxtb	r2, r3
 800fd84:	490c      	ldr	r1, [pc, #48]	@ (800fdb8 <__NVIC_SetPriority+0x4c>)
 800fd86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd8a:	0112      	lsls	r2, r2, #4
 800fd8c:	b2d2      	uxtb	r2, r2
 800fd8e:	440b      	add	r3, r1
 800fd90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800fd94:	e00a      	b.n	800fdac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	b2da      	uxtb	r2, r3
 800fd9a:	4908      	ldr	r1, [pc, #32]	@ (800fdbc <__NVIC_SetPriority+0x50>)
 800fd9c:	79fb      	ldrb	r3, [r7, #7]
 800fd9e:	f003 030f 	and.w	r3, r3, #15
 800fda2:	3b04      	subs	r3, #4
 800fda4:	0112      	lsls	r2, r2, #4
 800fda6:	b2d2      	uxtb	r2, r2
 800fda8:	440b      	add	r3, r1
 800fdaa:	761a      	strb	r2, [r3, #24]
}
 800fdac:	bf00      	nop
 800fdae:	370c      	adds	r7, #12
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr
 800fdb8:	e000e100 	.word	0xe000e100
 800fdbc:	e000ed00 	.word	0xe000ed00

0800fdc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b089      	sub	sp, #36	@ 0x24
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f003 0307 	and.w	r3, r3, #7
 800fdd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	f1c3 0307 	rsb	r3, r3, #7
 800fdda:	2b04      	cmp	r3, #4
 800fddc:	bf28      	it	cs
 800fdde:	2304      	movcs	r3, #4
 800fde0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800fde2:	69fb      	ldr	r3, [r7, #28]
 800fde4:	3304      	adds	r3, #4
 800fde6:	2b06      	cmp	r3, #6
 800fde8:	d902      	bls.n	800fdf0 <NVIC_EncodePriority+0x30>
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	3b03      	subs	r3, #3
 800fdee:	e000      	b.n	800fdf2 <NVIC_EncodePriority+0x32>
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fdf4:	f04f 32ff 	mov.w	r2, #4294967295
 800fdf8:	69bb      	ldr	r3, [r7, #24]
 800fdfa:	fa02 f303 	lsl.w	r3, r2, r3
 800fdfe:	43da      	mvns	r2, r3
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	401a      	ands	r2, r3
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800fe08:	f04f 31ff 	mov.w	r1, #4294967295
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	fa01 f303 	lsl.w	r3, r1, r3
 800fe12:	43d9      	mvns	r1, r3
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fe18:	4313      	orrs	r3, r2
         );
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3724      	adds	r7, #36	@ 0x24
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe24:	4770      	bx	lr
	...

0800fe28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	3b01      	subs	r3, #1
 800fe34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fe38:	d301      	bcc.n	800fe3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	e00f      	b.n	800fe5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fe3e:	4a0a      	ldr	r2, [pc, #40]	@ (800fe68 <SysTick_Config+0x40>)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	3b01      	subs	r3, #1
 800fe44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800fe46:	210f      	movs	r1, #15
 800fe48:	f04f 30ff 	mov.w	r0, #4294967295
 800fe4c:	f7ff ff8e 	bl	800fd6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fe50:	4b05      	ldr	r3, [pc, #20]	@ (800fe68 <SysTick_Config+0x40>)
 800fe52:	2200      	movs	r2, #0
 800fe54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fe56:	4b04      	ldr	r3, [pc, #16]	@ (800fe68 <SysTick_Config+0x40>)
 800fe58:	2207      	movs	r2, #7
 800fe5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3708      	adds	r7, #8
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	e000e010 	.word	0xe000e010

0800fe6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f7ff ff29 	bl	800fccc <__NVIC_SetPriorityGrouping>
}
 800fe7a:	bf00      	nop
 800fe7c:	3708      	adds	r7, #8
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}

0800fe82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fe82:	b580      	push	{r7, lr}
 800fe84:	b086      	sub	sp, #24
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	4603      	mov	r3, r0
 800fe8a:	60b9      	str	r1, [r7, #8]
 800fe8c:	607a      	str	r2, [r7, #4]
 800fe8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800fe90:	2300      	movs	r3, #0
 800fe92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800fe94:	f7ff ff3e 	bl	800fd14 <__NVIC_GetPriorityGrouping>
 800fe98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800fe9a:	687a      	ldr	r2, [r7, #4]
 800fe9c:	68b9      	ldr	r1, [r7, #8]
 800fe9e:	6978      	ldr	r0, [r7, #20]
 800fea0:	f7ff ff8e 	bl	800fdc0 <NVIC_EncodePriority>
 800fea4:	4602      	mov	r2, r0
 800fea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feaa:	4611      	mov	r1, r2
 800feac:	4618      	mov	r0, r3
 800feae:	f7ff ff5d 	bl	800fd6c <__NVIC_SetPriority>
}
 800feb2:	bf00      	nop
 800feb4:	3718      	adds	r7, #24
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}

0800feba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800feba:	b580      	push	{r7, lr}
 800febc:	b082      	sub	sp, #8
 800febe:	af00      	add	r7, sp, #0
 800fec0:	4603      	mov	r3, r0
 800fec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800fec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fec8:	4618      	mov	r0, r3
 800feca:	f7ff ff31 	bl	800fd30 <__NVIC_EnableIRQ>
}
 800fece:	bf00      	nop
 800fed0:	3708      	adds	r7, #8
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}

0800fed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800fed6:	b580      	push	{r7, lr}
 800fed8:	b082      	sub	sp, #8
 800feda:	af00      	add	r7, sp, #0
 800fedc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f7ff ffa2 	bl	800fe28 <SysTick_Config>
 800fee4:	4603      	mov	r3, r0
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
	...

0800fef0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b086      	sub	sp, #24
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800fef8:	2300      	movs	r3, #0
 800fefa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800fefc:	f7ff feda 	bl	800fcb4 <HAL_GetTick>
 800ff00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d101      	bne.n	800ff0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ff08:	2301      	movs	r3, #1
 800ff0a:	e099      	b.n	8010040 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2202      	movs	r2, #2
 800ff10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f022 0201 	bic.w	r2, r2, #1
 800ff2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ff2c:	e00f      	b.n	800ff4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ff2e:	f7ff fec1 	bl	800fcb4 <HAL_GetTick>
 800ff32:	4602      	mov	r2, r0
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	1ad3      	subs	r3, r2, r3
 800ff38:	2b05      	cmp	r3, #5
 800ff3a:	d908      	bls.n	800ff4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2220      	movs	r2, #32
 800ff40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2203      	movs	r2, #3
 800ff46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800ff4a:	2303      	movs	r3, #3
 800ff4c:	e078      	b.n	8010040 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f003 0301 	and.w	r3, r3, #1
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d1e8      	bne.n	800ff2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ff64:	697a      	ldr	r2, [r7, #20]
 800ff66:	4b38      	ldr	r3, [pc, #224]	@ (8010048 <HAL_DMA_Init+0x158>)
 800ff68:	4013      	ands	r3, r2
 800ff6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	685a      	ldr	r2, [r3, #4]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ff7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	691b      	ldr	r3, [r3, #16]
 800ff80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ff86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	699b      	ldr	r3, [r3, #24]
 800ff8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ff92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6a1b      	ldr	r3, [r3, #32]
 800ff98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ff9a:	697a      	ldr	r2, [r7, #20]
 800ff9c:	4313      	orrs	r3, r2
 800ff9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffa4:	2b04      	cmp	r3, #4
 800ffa6:	d107      	bne.n	800ffb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	697a      	ldr	r2, [r7, #20]
 800ffb4:	4313      	orrs	r3, r2
 800ffb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	697a      	ldr	r2, [r7, #20]
 800ffbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	695b      	ldr	r3, [r3, #20]
 800ffc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	f023 0307 	bic.w	r3, r3, #7
 800ffce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffd4:	697a      	ldr	r2, [r7, #20]
 800ffd6:	4313      	orrs	r3, r2
 800ffd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffde:	2b04      	cmp	r3, #4
 800ffe0:	d117      	bne.n	8010012 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffe6:	697a      	ldr	r2, [r7, #20]
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d00e      	beq.n	8010012 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 fa7b 	bl	80104f0 <DMA_CheckFifoParam>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d008      	beq.n	8010012 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2240      	movs	r2, #64	@ 0x40
 8010004:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2201      	movs	r2, #1
 801000a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 801000e:	2301      	movs	r3, #1
 8010010:	e016      	b.n	8010040 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	697a      	ldr	r2, [r7, #20]
 8010018:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 fa32 	bl	8010484 <DMA_CalcBaseAndBitshift>
 8010020:	4603      	mov	r3, r0
 8010022:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010028:	223f      	movs	r2, #63	@ 0x3f
 801002a:	409a      	lsls	r2, r3
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2201      	movs	r2, #1
 801003a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801003e:	2300      	movs	r3, #0
}
 8010040:	4618      	mov	r0, r3
 8010042:	3718      	adds	r7, #24
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	f010803f 	.word	0xf010803f

0801004c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010058:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801005a:	f7ff fe2b 	bl	800fcb4 <HAL_GetTick>
 801005e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010066:	b2db      	uxtb	r3, r3
 8010068:	2b02      	cmp	r3, #2
 801006a:	d008      	beq.n	801007e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2280      	movs	r2, #128	@ 0x80
 8010070:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 801007a:	2301      	movs	r3, #1
 801007c:	e052      	b.n	8010124 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f022 0216 	bic.w	r2, r2, #22
 801008c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	695a      	ldr	r2, [r3, #20]
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801009c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d103      	bne.n	80100ae <HAL_DMA_Abort+0x62>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d007      	beq.n	80100be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	681a      	ldr	r2, [r3, #0]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	f022 0208 	bic.w	r2, r2, #8
 80100bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	681a      	ldr	r2, [r3, #0]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f022 0201 	bic.w	r2, r2, #1
 80100cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80100ce:	e013      	b.n	80100f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80100d0:	f7ff fdf0 	bl	800fcb4 <HAL_GetTick>
 80100d4:	4602      	mov	r2, r0
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	1ad3      	subs	r3, r2, r3
 80100da:	2b05      	cmp	r3, #5
 80100dc:	d90c      	bls.n	80100f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2220      	movs	r2, #32
 80100e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2203      	movs	r2, #3
 80100e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2200      	movs	r2, #0
 80100f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80100f4:	2303      	movs	r3, #3
 80100f6:	e015      	b.n	8010124 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f003 0301 	and.w	r3, r3, #1
 8010102:	2b00      	cmp	r3, #0
 8010104:	d1e4      	bne.n	80100d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801010a:	223f      	movs	r2, #63	@ 0x3f
 801010c:	409a      	lsls	r2, r3
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2201      	movs	r2, #1
 8010116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2200      	movs	r2, #0
 801011e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8010122:	2300      	movs	r3, #0
}
 8010124:	4618      	mov	r0, r3
 8010126:	3710      	adds	r7, #16
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801013a:	b2db      	uxtb	r3, r3
 801013c:	2b02      	cmp	r3, #2
 801013e:	d004      	beq.n	801014a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2280      	movs	r2, #128	@ 0x80
 8010144:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8010146:	2301      	movs	r3, #1
 8010148:	e00c      	b.n	8010164 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2205      	movs	r2, #5
 801014e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f022 0201 	bic.w	r2, r2, #1
 8010160:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8010162:	2300      	movs	r3, #0
}
 8010164:	4618      	mov	r0, r3
 8010166:	370c      	adds	r7, #12
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr

08010170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b086      	sub	sp, #24
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8010178:	2300      	movs	r3, #0
 801017a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801017c:	4b8e      	ldr	r3, [pc, #568]	@ (80103b8 <HAL_DMA_IRQHandler+0x248>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	4a8e      	ldr	r2, [pc, #568]	@ (80103bc <HAL_DMA_IRQHandler+0x24c>)
 8010182:	fba2 2303 	umull	r2, r3, r2, r3
 8010186:	0a9b      	lsrs	r3, r3, #10
 8010188:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801018e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8010190:	693b      	ldr	r3, [r7, #16]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801019a:	2208      	movs	r2, #8
 801019c:	409a      	lsls	r2, r3
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	4013      	ands	r3, r2
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d01a      	beq.n	80101dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f003 0304 	and.w	r3, r3, #4
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d013      	beq.n	80101dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	681a      	ldr	r2, [r3, #0]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f022 0204 	bic.w	r2, r2, #4
 80101c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101c8:	2208      	movs	r2, #8
 80101ca:	409a      	lsls	r2, r3
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101d4:	f043 0201 	orr.w	r2, r3, #1
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101e0:	2201      	movs	r2, #1
 80101e2:	409a      	lsls	r2, r3
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	4013      	ands	r3, r2
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d012      	beq.n	8010212 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	695b      	ldr	r3, [r3, #20]
 80101f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d00b      	beq.n	8010212 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101fe:	2201      	movs	r2, #1
 8010200:	409a      	lsls	r2, r3
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801020a:	f043 0202 	orr.w	r2, r3, #2
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010216:	2204      	movs	r2, #4
 8010218:	409a      	lsls	r2, r3
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	4013      	ands	r3, r2
 801021e:	2b00      	cmp	r3, #0
 8010220:	d012      	beq.n	8010248 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f003 0302 	and.w	r3, r3, #2
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00b      	beq.n	8010248 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010234:	2204      	movs	r2, #4
 8010236:	409a      	lsls	r2, r3
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010240:	f043 0204 	orr.w	r2, r3, #4
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801024c:	2210      	movs	r2, #16
 801024e:	409a      	lsls	r2, r3
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	4013      	ands	r3, r2
 8010254:	2b00      	cmp	r3, #0
 8010256:	d043      	beq.n	80102e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f003 0308 	and.w	r3, r3, #8
 8010262:	2b00      	cmp	r3, #0
 8010264:	d03c      	beq.n	80102e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801026a:	2210      	movs	r2, #16
 801026c:	409a      	lsls	r2, r3
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801027c:	2b00      	cmp	r3, #0
 801027e:	d018      	beq.n	80102b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801028a:	2b00      	cmp	r3, #0
 801028c:	d108      	bne.n	80102a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010292:	2b00      	cmp	r3, #0
 8010294:	d024      	beq.n	80102e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	4798      	blx	r3
 801029e:	e01f      	b.n	80102e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d01b      	beq.n	80102e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	4798      	blx	r3
 80102b0:	e016      	b.n	80102e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d107      	bne.n	80102d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	f022 0208 	bic.w	r2, r2, #8
 80102ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d003      	beq.n	80102e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80102e4:	2220      	movs	r2, #32
 80102e6:	409a      	lsls	r2, r3
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	4013      	ands	r3, r2
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	f000 808f 	beq.w	8010410 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f003 0310 	and.w	r3, r3, #16
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f000 8087 	beq.w	8010410 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010306:	2220      	movs	r2, #32
 8010308:	409a      	lsls	r2, r3
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010314:	b2db      	uxtb	r3, r3
 8010316:	2b05      	cmp	r3, #5
 8010318:	d136      	bne.n	8010388 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	681a      	ldr	r2, [r3, #0]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	f022 0216 	bic.w	r2, r2, #22
 8010328:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	695a      	ldr	r2, [r3, #20]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010338:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801033e:	2b00      	cmp	r3, #0
 8010340:	d103      	bne.n	801034a <HAL_DMA_IRQHandler+0x1da>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010346:	2b00      	cmp	r3, #0
 8010348:	d007      	beq.n	801035a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	681a      	ldr	r2, [r3, #0]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f022 0208 	bic.w	r2, r2, #8
 8010358:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801035e:	223f      	movs	r2, #63	@ 0x3f
 8010360:	409a      	lsls	r2, r3
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2201      	movs	r2, #1
 801036a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801037a:	2b00      	cmp	r3, #0
 801037c:	d07e      	beq.n	801047c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	4798      	blx	r3
        }
        return;
 8010386:	e079      	b.n	801047c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010392:	2b00      	cmp	r3, #0
 8010394:	d01d      	beq.n	80103d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d10d      	bne.n	80103c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d031      	beq.n	8010410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	4798      	blx	r3
 80103b4:	e02c      	b.n	8010410 <HAL_DMA_IRQHandler+0x2a0>
 80103b6:	bf00      	nop
 80103b8:	20000900 	.word	0x20000900
 80103bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d023      	beq.n	8010410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	4798      	blx	r3
 80103d0:	e01e      	b.n	8010410 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d10f      	bne.n	8010400 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	681a      	ldr	r2, [r3, #0]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f022 0210 	bic.w	r2, r2, #16
 80103ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2201      	movs	r2, #1
 80103f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010404:	2b00      	cmp	r3, #0
 8010406:	d003      	beq.n	8010410 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010414:	2b00      	cmp	r3, #0
 8010416:	d032      	beq.n	801047e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801041c:	f003 0301 	and.w	r3, r3, #1
 8010420:	2b00      	cmp	r3, #0
 8010422:	d022      	beq.n	801046a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2205      	movs	r2, #5
 8010428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f022 0201 	bic.w	r2, r2, #1
 801043a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	3301      	adds	r3, #1
 8010440:	60bb      	str	r3, [r7, #8]
 8010442:	697a      	ldr	r2, [r7, #20]
 8010444:	429a      	cmp	r2, r3
 8010446:	d307      	bcc.n	8010458 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f003 0301 	and.w	r3, r3, #1
 8010452:	2b00      	cmp	r3, #0
 8010454:	d1f2      	bne.n	801043c <HAL_DMA_IRQHandler+0x2cc>
 8010456:	e000      	b.n	801045a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8010458:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2201      	movs	r2, #1
 801045e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801046e:	2b00      	cmp	r3, #0
 8010470:	d005      	beq.n	801047e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	4798      	blx	r3
 801047a:	e000      	b.n	801047e <HAL_DMA_IRQHandler+0x30e>
        return;
 801047c:	bf00      	nop
    }
  }
}
 801047e:	3718      	adds	r7, #24
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8010484:	b480      	push	{r7}
 8010486:	b085      	sub	sp, #20
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	b2db      	uxtb	r3, r3
 8010492:	3b10      	subs	r3, #16
 8010494:	4a14      	ldr	r2, [pc, #80]	@ (80104e8 <DMA_CalcBaseAndBitshift+0x64>)
 8010496:	fba2 2303 	umull	r2, r3, r2, r3
 801049a:	091b      	lsrs	r3, r3, #4
 801049c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801049e:	4a13      	ldr	r2, [pc, #76]	@ (80104ec <DMA_CalcBaseAndBitshift+0x68>)
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	4413      	add	r3, r2
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	461a      	mov	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	2b03      	cmp	r3, #3
 80104b0:	d909      	bls.n	80104c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80104ba:	f023 0303 	bic.w	r3, r3, #3
 80104be:	1d1a      	adds	r2, r3, #4
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80104c4:	e007      	b.n	80104d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80104ce:	f023 0303 	bic.w	r3, r3, #3
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3714      	adds	r7, #20
 80104de:	46bd      	mov	sp, r7
 80104e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop
 80104e8:	aaaaaaab 	.word	0xaaaaaaab
 80104ec:	0801a21c 	.word	0x0801a21c

080104f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b085      	sub	sp, #20
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80104f8:	2300      	movs	r3, #0
 80104fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010500:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	699b      	ldr	r3, [r3, #24]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d11f      	bne.n	801054a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	2b03      	cmp	r3, #3
 801050e:	d856      	bhi.n	80105be <DMA_CheckFifoParam+0xce>
 8010510:	a201      	add	r2, pc, #4	@ (adr r2, 8010518 <DMA_CheckFifoParam+0x28>)
 8010512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010516:	bf00      	nop
 8010518:	08010529 	.word	0x08010529
 801051c:	0801053b 	.word	0x0801053b
 8010520:	08010529 	.word	0x08010529
 8010524:	080105bf 	.word	0x080105bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801052c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010530:	2b00      	cmp	r3, #0
 8010532:	d046      	beq.n	80105c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8010534:	2301      	movs	r3, #1
 8010536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010538:	e043      	b.n	80105c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801053e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8010542:	d140      	bne.n	80105c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8010544:	2301      	movs	r3, #1
 8010546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010548:	e03d      	b.n	80105c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	699b      	ldr	r3, [r3, #24]
 801054e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010552:	d121      	bne.n	8010598 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	2b03      	cmp	r3, #3
 8010558:	d837      	bhi.n	80105ca <DMA_CheckFifoParam+0xda>
 801055a:	a201      	add	r2, pc, #4	@ (adr r2, 8010560 <DMA_CheckFifoParam+0x70>)
 801055c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010560:	08010571 	.word	0x08010571
 8010564:	08010577 	.word	0x08010577
 8010568:	08010571 	.word	0x08010571
 801056c:	08010589 	.word	0x08010589
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8010570:	2301      	movs	r3, #1
 8010572:	73fb      	strb	r3, [r7, #15]
      break;
 8010574:	e030      	b.n	80105d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801057a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801057e:	2b00      	cmp	r3, #0
 8010580:	d025      	beq.n	80105ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8010582:	2301      	movs	r3, #1
 8010584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010586:	e022      	b.n	80105ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801058c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8010590:	d11f      	bne.n	80105d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8010592:	2301      	movs	r3, #1
 8010594:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8010596:	e01c      	b.n	80105d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	2b02      	cmp	r3, #2
 801059c:	d903      	bls.n	80105a6 <DMA_CheckFifoParam+0xb6>
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	d003      	beq.n	80105ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80105a4:	e018      	b.n	80105d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80105a6:	2301      	movs	r3, #1
 80105a8:	73fb      	strb	r3, [r7, #15]
      break;
 80105aa:	e015      	b.n	80105d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d00e      	beq.n	80105d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80105b8:	2301      	movs	r3, #1
 80105ba:	73fb      	strb	r3, [r7, #15]
      break;
 80105bc:	e00b      	b.n	80105d6 <DMA_CheckFifoParam+0xe6>
      break;
 80105be:	bf00      	nop
 80105c0:	e00a      	b.n	80105d8 <DMA_CheckFifoParam+0xe8>
      break;
 80105c2:	bf00      	nop
 80105c4:	e008      	b.n	80105d8 <DMA_CheckFifoParam+0xe8>
      break;
 80105c6:	bf00      	nop
 80105c8:	e006      	b.n	80105d8 <DMA_CheckFifoParam+0xe8>
      break;
 80105ca:	bf00      	nop
 80105cc:	e004      	b.n	80105d8 <DMA_CheckFifoParam+0xe8>
      break;
 80105ce:	bf00      	nop
 80105d0:	e002      	b.n	80105d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80105d2:	bf00      	nop
 80105d4:	e000      	b.n	80105d8 <DMA_CheckFifoParam+0xe8>
      break;
 80105d6:	bf00      	nop
    }
  } 
  
  return status; 
 80105d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3714      	adds	r7, #20
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr
 80105e6:	bf00      	nop

080105e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b089      	sub	sp, #36	@ 0x24
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80105f2:	2300      	movs	r3, #0
 80105f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80105f6:	2300      	movs	r3, #0
 80105f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80105fa:	2300      	movs	r3, #0
 80105fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80105fe:	2300      	movs	r3, #0
 8010600:	61fb      	str	r3, [r7, #28]
 8010602:	e159      	b.n	80108b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010604:	2201      	movs	r2, #1
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	fa02 f303 	lsl.w	r3, r2, r3
 801060c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	697a      	ldr	r2, [r7, #20]
 8010614:	4013      	ands	r3, r2
 8010616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010618:	693a      	ldr	r2, [r7, #16]
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	429a      	cmp	r2, r3
 801061e:	f040 8148 	bne.w	80108b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	f003 0303 	and.w	r3, r3, #3
 801062a:	2b01      	cmp	r3, #1
 801062c:	d005      	beq.n	801063a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010636:	2b02      	cmp	r3, #2
 8010638:	d130      	bne.n	801069c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	689b      	ldr	r3, [r3, #8]
 801063e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010640:	69fb      	ldr	r3, [r7, #28]
 8010642:	005b      	lsls	r3, r3, #1
 8010644:	2203      	movs	r2, #3
 8010646:	fa02 f303 	lsl.w	r3, r2, r3
 801064a:	43db      	mvns	r3, r3
 801064c:	69ba      	ldr	r2, [r7, #24]
 801064e:	4013      	ands	r3, r2
 8010650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	68da      	ldr	r2, [r3, #12]
 8010656:	69fb      	ldr	r3, [r7, #28]
 8010658:	005b      	lsls	r3, r3, #1
 801065a:	fa02 f303 	lsl.w	r3, r2, r3
 801065e:	69ba      	ldr	r2, [r7, #24]
 8010660:	4313      	orrs	r3, r2
 8010662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	69ba      	ldr	r2, [r7, #24]
 8010668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010670:	2201      	movs	r2, #1
 8010672:	69fb      	ldr	r3, [r7, #28]
 8010674:	fa02 f303 	lsl.w	r3, r2, r3
 8010678:	43db      	mvns	r3, r3
 801067a:	69ba      	ldr	r2, [r7, #24]
 801067c:	4013      	ands	r3, r2
 801067e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	091b      	lsrs	r3, r3, #4
 8010686:	f003 0201 	and.w	r2, r3, #1
 801068a:	69fb      	ldr	r3, [r7, #28]
 801068c:	fa02 f303 	lsl.w	r3, r2, r3
 8010690:	69ba      	ldr	r2, [r7, #24]
 8010692:	4313      	orrs	r3, r2
 8010694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	69ba      	ldr	r2, [r7, #24]
 801069a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	f003 0303 	and.w	r3, r3, #3
 80106a4:	2b03      	cmp	r3, #3
 80106a6:	d017      	beq.n	80106d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	68db      	ldr	r3, [r3, #12]
 80106ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80106ae:	69fb      	ldr	r3, [r7, #28]
 80106b0:	005b      	lsls	r3, r3, #1
 80106b2:	2203      	movs	r2, #3
 80106b4:	fa02 f303 	lsl.w	r3, r2, r3
 80106b8:	43db      	mvns	r3, r3
 80106ba:	69ba      	ldr	r2, [r7, #24]
 80106bc:	4013      	ands	r3, r2
 80106be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	689a      	ldr	r2, [r3, #8]
 80106c4:	69fb      	ldr	r3, [r7, #28]
 80106c6:	005b      	lsls	r3, r3, #1
 80106c8:	fa02 f303 	lsl.w	r3, r2, r3
 80106cc:	69ba      	ldr	r2, [r7, #24]
 80106ce:	4313      	orrs	r3, r2
 80106d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	69ba      	ldr	r2, [r7, #24]
 80106d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	685b      	ldr	r3, [r3, #4]
 80106dc:	f003 0303 	and.w	r3, r3, #3
 80106e0:	2b02      	cmp	r3, #2
 80106e2:	d123      	bne.n	801072c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	08da      	lsrs	r2, r3, #3
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	3208      	adds	r2, #8
 80106ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80106f2:	69fb      	ldr	r3, [r7, #28]
 80106f4:	f003 0307 	and.w	r3, r3, #7
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	220f      	movs	r2, #15
 80106fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010700:	43db      	mvns	r3, r3
 8010702:	69ba      	ldr	r2, [r7, #24]
 8010704:	4013      	ands	r3, r2
 8010706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	691a      	ldr	r2, [r3, #16]
 801070c:	69fb      	ldr	r3, [r7, #28]
 801070e:	f003 0307 	and.w	r3, r3, #7
 8010712:	009b      	lsls	r3, r3, #2
 8010714:	fa02 f303 	lsl.w	r3, r2, r3
 8010718:	69ba      	ldr	r2, [r7, #24]
 801071a:	4313      	orrs	r3, r2
 801071c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801071e:	69fb      	ldr	r3, [r7, #28]
 8010720:	08da      	lsrs	r2, r3, #3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	3208      	adds	r2, #8
 8010726:	69b9      	ldr	r1, [r7, #24]
 8010728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	005b      	lsls	r3, r3, #1
 8010736:	2203      	movs	r2, #3
 8010738:	fa02 f303 	lsl.w	r3, r2, r3
 801073c:	43db      	mvns	r3, r3
 801073e:	69ba      	ldr	r2, [r7, #24]
 8010740:	4013      	ands	r3, r2
 8010742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	f003 0203 	and.w	r2, r3, #3
 801074c:	69fb      	ldr	r3, [r7, #28]
 801074e:	005b      	lsls	r3, r3, #1
 8010750:	fa02 f303 	lsl.w	r3, r2, r3
 8010754:	69ba      	ldr	r2, [r7, #24]
 8010756:	4313      	orrs	r3, r2
 8010758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	69ba      	ldr	r2, [r7, #24]
 801075e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	685b      	ldr	r3, [r3, #4]
 8010764:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010768:	2b00      	cmp	r3, #0
 801076a:	f000 80a2 	beq.w	80108b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801076e:	2300      	movs	r3, #0
 8010770:	60fb      	str	r3, [r7, #12]
 8010772:	4b57      	ldr	r3, [pc, #348]	@ (80108d0 <HAL_GPIO_Init+0x2e8>)
 8010774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010776:	4a56      	ldr	r2, [pc, #344]	@ (80108d0 <HAL_GPIO_Init+0x2e8>)
 8010778:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801077c:	6453      	str	r3, [r2, #68]	@ 0x44
 801077e:	4b54      	ldr	r3, [pc, #336]	@ (80108d0 <HAL_GPIO_Init+0x2e8>)
 8010780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010786:	60fb      	str	r3, [r7, #12]
 8010788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801078a:	4a52      	ldr	r2, [pc, #328]	@ (80108d4 <HAL_GPIO_Init+0x2ec>)
 801078c:	69fb      	ldr	r3, [r7, #28]
 801078e:	089b      	lsrs	r3, r3, #2
 8010790:	3302      	adds	r3, #2
 8010792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010798:	69fb      	ldr	r3, [r7, #28]
 801079a:	f003 0303 	and.w	r3, r3, #3
 801079e:	009b      	lsls	r3, r3, #2
 80107a0:	220f      	movs	r2, #15
 80107a2:	fa02 f303 	lsl.w	r3, r2, r3
 80107a6:	43db      	mvns	r3, r3
 80107a8:	69ba      	ldr	r2, [r7, #24]
 80107aa:	4013      	ands	r3, r2
 80107ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	4a49      	ldr	r2, [pc, #292]	@ (80108d8 <HAL_GPIO_Init+0x2f0>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d019      	beq.n	80107ea <HAL_GPIO_Init+0x202>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	4a48      	ldr	r2, [pc, #288]	@ (80108dc <HAL_GPIO_Init+0x2f4>)
 80107ba:	4293      	cmp	r3, r2
 80107bc:	d013      	beq.n	80107e6 <HAL_GPIO_Init+0x1fe>
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	4a47      	ldr	r2, [pc, #284]	@ (80108e0 <HAL_GPIO_Init+0x2f8>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d00d      	beq.n	80107e2 <HAL_GPIO_Init+0x1fa>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4a46      	ldr	r2, [pc, #280]	@ (80108e4 <HAL_GPIO_Init+0x2fc>)
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d007      	beq.n	80107de <HAL_GPIO_Init+0x1f6>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	4a45      	ldr	r2, [pc, #276]	@ (80108e8 <HAL_GPIO_Init+0x300>)
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d101      	bne.n	80107da <HAL_GPIO_Init+0x1f2>
 80107d6:	2304      	movs	r3, #4
 80107d8:	e008      	b.n	80107ec <HAL_GPIO_Init+0x204>
 80107da:	2307      	movs	r3, #7
 80107dc:	e006      	b.n	80107ec <HAL_GPIO_Init+0x204>
 80107de:	2303      	movs	r3, #3
 80107e0:	e004      	b.n	80107ec <HAL_GPIO_Init+0x204>
 80107e2:	2302      	movs	r3, #2
 80107e4:	e002      	b.n	80107ec <HAL_GPIO_Init+0x204>
 80107e6:	2301      	movs	r3, #1
 80107e8:	e000      	b.n	80107ec <HAL_GPIO_Init+0x204>
 80107ea:	2300      	movs	r3, #0
 80107ec:	69fa      	ldr	r2, [r7, #28]
 80107ee:	f002 0203 	and.w	r2, r2, #3
 80107f2:	0092      	lsls	r2, r2, #2
 80107f4:	4093      	lsls	r3, r2
 80107f6:	69ba      	ldr	r2, [r7, #24]
 80107f8:	4313      	orrs	r3, r2
 80107fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80107fc:	4935      	ldr	r1, [pc, #212]	@ (80108d4 <HAL_GPIO_Init+0x2ec>)
 80107fe:	69fb      	ldr	r3, [r7, #28]
 8010800:	089b      	lsrs	r3, r3, #2
 8010802:	3302      	adds	r3, #2
 8010804:	69ba      	ldr	r2, [r7, #24]
 8010806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801080a:	4b38      	ldr	r3, [pc, #224]	@ (80108ec <HAL_GPIO_Init+0x304>)
 801080c:	689b      	ldr	r3, [r3, #8]
 801080e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	43db      	mvns	r3, r3
 8010814:	69ba      	ldr	r2, [r7, #24]
 8010816:	4013      	ands	r3, r2
 8010818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010822:	2b00      	cmp	r3, #0
 8010824:	d003      	beq.n	801082e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8010826:	69ba      	ldr	r2, [r7, #24]
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	4313      	orrs	r3, r2
 801082c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801082e:	4a2f      	ldr	r2, [pc, #188]	@ (80108ec <HAL_GPIO_Init+0x304>)
 8010830:	69bb      	ldr	r3, [r7, #24]
 8010832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010834:	4b2d      	ldr	r3, [pc, #180]	@ (80108ec <HAL_GPIO_Init+0x304>)
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	43db      	mvns	r3, r3
 801083e:	69ba      	ldr	r2, [r7, #24]
 8010840:	4013      	ands	r3, r2
 8010842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801084c:	2b00      	cmp	r3, #0
 801084e:	d003      	beq.n	8010858 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8010850:	69ba      	ldr	r2, [r7, #24]
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	4313      	orrs	r3, r2
 8010856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010858:	4a24      	ldr	r2, [pc, #144]	@ (80108ec <HAL_GPIO_Init+0x304>)
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801085e:	4b23      	ldr	r3, [pc, #140]	@ (80108ec <HAL_GPIO_Init+0x304>)
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	43db      	mvns	r3, r3
 8010868:	69ba      	ldr	r2, [r7, #24]
 801086a:	4013      	ands	r3, r2
 801086c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010876:	2b00      	cmp	r3, #0
 8010878:	d003      	beq.n	8010882 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801087a:	69ba      	ldr	r2, [r7, #24]
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	4313      	orrs	r3, r2
 8010880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010882:	4a1a      	ldr	r2, [pc, #104]	@ (80108ec <HAL_GPIO_Init+0x304>)
 8010884:	69bb      	ldr	r3, [r7, #24]
 8010886:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010888:	4b18      	ldr	r3, [pc, #96]	@ (80108ec <HAL_GPIO_Init+0x304>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	43db      	mvns	r3, r3
 8010892:	69ba      	ldr	r2, [r7, #24]
 8010894:	4013      	ands	r3, r2
 8010896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d003      	beq.n	80108ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80108a4:	69ba      	ldr	r2, [r7, #24]
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	4313      	orrs	r3, r2
 80108aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80108ac:	4a0f      	ldr	r2, [pc, #60]	@ (80108ec <HAL_GPIO_Init+0x304>)
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80108b2:	69fb      	ldr	r3, [r7, #28]
 80108b4:	3301      	adds	r3, #1
 80108b6:	61fb      	str	r3, [r7, #28]
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	2b0f      	cmp	r3, #15
 80108bc:	f67f aea2 	bls.w	8010604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80108c0:	bf00      	nop
 80108c2:	bf00      	nop
 80108c4:	3724      	adds	r7, #36	@ 0x24
 80108c6:	46bd      	mov	sp, r7
 80108c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	40023800 	.word	0x40023800
 80108d4:	40013800 	.word	0x40013800
 80108d8:	40020000 	.word	0x40020000
 80108dc:	40020400 	.word	0x40020400
 80108e0:	40020800 	.word	0x40020800
 80108e4:	40020c00 	.word	0x40020c00
 80108e8:	40021000 	.word	0x40021000
 80108ec:	40013c00 	.word	0x40013c00

080108f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b086      	sub	sp, #24
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d101      	bne.n	8010902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80108fe:	2301      	movs	r3, #1
 8010900:	e267      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f003 0301 	and.w	r3, r3, #1
 801090a:	2b00      	cmp	r3, #0
 801090c:	d075      	beq.n	80109fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 801090e:	4b88      	ldr	r3, [pc, #544]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010910:	689b      	ldr	r3, [r3, #8]
 8010912:	f003 030c 	and.w	r3, r3, #12
 8010916:	2b04      	cmp	r3, #4
 8010918:	d00c      	beq.n	8010934 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801091a:	4b85      	ldr	r3, [pc, #532]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 801091c:	689b      	ldr	r3, [r3, #8]
 801091e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8010922:	2b08      	cmp	r3, #8
 8010924:	d112      	bne.n	801094c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010926:	4b82      	ldr	r3, [pc, #520]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801092e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010932:	d10b      	bne.n	801094c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010934:	4b7e      	ldr	r3, [pc, #504]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801093c:	2b00      	cmp	r3, #0
 801093e:	d05b      	beq.n	80109f8 <HAL_RCC_OscConfig+0x108>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d157      	bne.n	80109f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010948:	2301      	movs	r3, #1
 801094a:	e242      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	685b      	ldr	r3, [r3, #4]
 8010950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010954:	d106      	bne.n	8010964 <HAL_RCC_OscConfig+0x74>
 8010956:	4b76      	ldr	r3, [pc, #472]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	4a75      	ldr	r2, [pc, #468]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 801095c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010960:	6013      	str	r3, [r2, #0]
 8010962:	e01d      	b.n	80109a0 <HAL_RCC_OscConfig+0xb0>
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	685b      	ldr	r3, [r3, #4]
 8010968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801096c:	d10c      	bne.n	8010988 <HAL_RCC_OscConfig+0x98>
 801096e:	4b70      	ldr	r3, [pc, #448]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	4a6f      	ldr	r2, [pc, #444]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010978:	6013      	str	r3, [r2, #0]
 801097a:	4b6d      	ldr	r3, [pc, #436]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4a6c      	ldr	r2, [pc, #432]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010984:	6013      	str	r3, [r2, #0]
 8010986:	e00b      	b.n	80109a0 <HAL_RCC_OscConfig+0xb0>
 8010988:	4b69      	ldr	r3, [pc, #420]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	4a68      	ldr	r2, [pc, #416]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 801098e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010992:	6013      	str	r3, [r2, #0]
 8010994:	4b66      	ldr	r3, [pc, #408]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	4a65      	ldr	r2, [pc, #404]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 801099a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801099e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d013      	beq.n	80109d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80109a8:	f7ff f984 	bl	800fcb4 <HAL_GetTick>
 80109ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80109ae:	e008      	b.n	80109c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80109b0:	f7ff f980 	bl	800fcb4 <HAL_GetTick>
 80109b4:	4602      	mov	r2, r0
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	1ad3      	subs	r3, r2, r3
 80109ba:	2b64      	cmp	r3, #100	@ 0x64
 80109bc:	d901      	bls.n	80109c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80109be:	2303      	movs	r3, #3
 80109c0:	e207      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80109c2:	4b5b      	ldr	r3, [pc, #364]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d0f0      	beq.n	80109b0 <HAL_RCC_OscConfig+0xc0>
 80109ce:	e014      	b.n	80109fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80109d0:	f7ff f970 	bl	800fcb4 <HAL_GetTick>
 80109d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80109d6:	e008      	b.n	80109ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80109d8:	f7ff f96c 	bl	800fcb4 <HAL_GetTick>
 80109dc:	4602      	mov	r2, r0
 80109de:	693b      	ldr	r3, [r7, #16]
 80109e0:	1ad3      	subs	r3, r2, r3
 80109e2:	2b64      	cmp	r3, #100	@ 0x64
 80109e4:	d901      	bls.n	80109ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80109e6:	2303      	movs	r3, #3
 80109e8:	e1f3      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80109ea:	4b51      	ldr	r3, [pc, #324]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d1f0      	bne.n	80109d8 <HAL_RCC_OscConfig+0xe8>
 80109f6:	e000      	b.n	80109fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80109f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f003 0302 	and.w	r3, r3, #2
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d063      	beq.n	8010ace <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8010a06:	4b4a      	ldr	r3, [pc, #296]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010a08:	689b      	ldr	r3, [r3, #8]
 8010a0a:	f003 030c 	and.w	r3, r3, #12
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d00b      	beq.n	8010a2a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010a12:	4b47      	ldr	r3, [pc, #284]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010a14:	689b      	ldr	r3, [r3, #8]
 8010a16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8010a1a:	2b08      	cmp	r3, #8
 8010a1c:	d11c      	bne.n	8010a58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010a1e:	4b44      	ldr	r3, [pc, #272]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d116      	bne.n	8010a58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010a2a:	4b41      	ldr	r3, [pc, #260]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	f003 0302 	and.w	r3, r3, #2
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d005      	beq.n	8010a42 <HAL_RCC_OscConfig+0x152>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	68db      	ldr	r3, [r3, #12]
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d001      	beq.n	8010a42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8010a3e:	2301      	movs	r3, #1
 8010a40:	e1c7      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010a42:	4b3b      	ldr	r3, [pc, #236]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	691b      	ldr	r3, [r3, #16]
 8010a4e:	00db      	lsls	r3, r3, #3
 8010a50:	4937      	ldr	r1, [pc, #220]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010a52:	4313      	orrs	r3, r2
 8010a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010a56:	e03a      	b.n	8010ace <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	68db      	ldr	r3, [r3, #12]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d020      	beq.n	8010aa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010a60:	4b34      	ldr	r3, [pc, #208]	@ (8010b34 <HAL_RCC_OscConfig+0x244>)
 8010a62:	2201      	movs	r2, #1
 8010a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a66:	f7ff f925 	bl	800fcb4 <HAL_GetTick>
 8010a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010a6c:	e008      	b.n	8010a80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010a6e:	f7ff f921 	bl	800fcb4 <HAL_GetTick>
 8010a72:	4602      	mov	r2, r0
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	1ad3      	subs	r3, r2, r3
 8010a78:	2b02      	cmp	r3, #2
 8010a7a:	d901      	bls.n	8010a80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010a7c:	2303      	movs	r3, #3
 8010a7e:	e1a8      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010a80:	4b2b      	ldr	r3, [pc, #172]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f003 0302 	and.w	r3, r3, #2
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d0f0      	beq.n	8010a6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010a8c:	4b28      	ldr	r3, [pc, #160]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	691b      	ldr	r3, [r3, #16]
 8010a98:	00db      	lsls	r3, r3, #3
 8010a9a:	4925      	ldr	r1, [pc, #148]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010a9c:	4313      	orrs	r3, r2
 8010a9e:	600b      	str	r3, [r1, #0]
 8010aa0:	e015      	b.n	8010ace <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010aa2:	4b24      	ldr	r3, [pc, #144]	@ (8010b34 <HAL_RCC_OscConfig+0x244>)
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010aa8:	f7ff f904 	bl	800fcb4 <HAL_GetTick>
 8010aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010aae:	e008      	b.n	8010ac2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010ab0:	f7ff f900 	bl	800fcb4 <HAL_GetTick>
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	1ad3      	subs	r3, r2, r3
 8010aba:	2b02      	cmp	r3, #2
 8010abc:	d901      	bls.n	8010ac2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8010abe:	2303      	movs	r3, #3
 8010ac0:	e187      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f003 0302 	and.w	r3, r3, #2
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1f0      	bne.n	8010ab0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f003 0308 	and.w	r3, r3, #8
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d036      	beq.n	8010b48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	695b      	ldr	r3, [r3, #20]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d016      	beq.n	8010b10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010ae2:	4b15      	ldr	r3, [pc, #84]	@ (8010b38 <HAL_RCC_OscConfig+0x248>)
 8010ae4:	2201      	movs	r2, #1
 8010ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010ae8:	f7ff f8e4 	bl	800fcb4 <HAL_GetTick>
 8010aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010aee:	e008      	b.n	8010b02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010af0:	f7ff f8e0 	bl	800fcb4 <HAL_GetTick>
 8010af4:	4602      	mov	r2, r0
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	1ad3      	subs	r3, r2, r3
 8010afa:	2b02      	cmp	r3, #2
 8010afc:	d901      	bls.n	8010b02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8010afe:	2303      	movs	r3, #3
 8010b00:	e167      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010b02:	4b0b      	ldr	r3, [pc, #44]	@ (8010b30 <HAL_RCC_OscConfig+0x240>)
 8010b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b06:	f003 0302 	and.w	r3, r3, #2
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d0f0      	beq.n	8010af0 <HAL_RCC_OscConfig+0x200>
 8010b0e:	e01b      	b.n	8010b48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010b10:	4b09      	ldr	r3, [pc, #36]	@ (8010b38 <HAL_RCC_OscConfig+0x248>)
 8010b12:	2200      	movs	r2, #0
 8010b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010b16:	f7ff f8cd 	bl	800fcb4 <HAL_GetTick>
 8010b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010b1c:	e00e      	b.n	8010b3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010b1e:	f7ff f8c9 	bl	800fcb4 <HAL_GetTick>
 8010b22:	4602      	mov	r2, r0
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	1ad3      	subs	r3, r2, r3
 8010b28:	2b02      	cmp	r3, #2
 8010b2a:	d907      	bls.n	8010b3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8010b2c:	2303      	movs	r3, #3
 8010b2e:	e150      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
 8010b30:	40023800 	.word	0x40023800
 8010b34:	42470000 	.word	0x42470000
 8010b38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010b3c:	4b88      	ldr	r3, [pc, #544]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b40:	f003 0302 	and.w	r3, r3, #2
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d1ea      	bne.n	8010b1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f003 0304 	and.w	r3, r3, #4
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f000 8097 	beq.w	8010c84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010b56:	2300      	movs	r3, #0
 8010b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010b5a:	4b81      	ldr	r3, [pc, #516]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d10f      	bne.n	8010b86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010b66:	2300      	movs	r3, #0
 8010b68:	60bb      	str	r3, [r7, #8]
 8010b6a:	4b7d      	ldr	r3, [pc, #500]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b6e:	4a7c      	ldr	r2, [pc, #496]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8010b76:	4b7a      	ldr	r3, [pc, #488]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010b7e:	60bb      	str	r3, [r7, #8]
 8010b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010b82:	2301      	movs	r3, #1
 8010b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010b86:	4b77      	ldr	r3, [pc, #476]	@ (8010d64 <HAL_RCC_OscConfig+0x474>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d118      	bne.n	8010bc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010b92:	4b74      	ldr	r3, [pc, #464]	@ (8010d64 <HAL_RCC_OscConfig+0x474>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	4a73      	ldr	r2, [pc, #460]	@ (8010d64 <HAL_RCC_OscConfig+0x474>)
 8010b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010b9e:	f7ff f889 	bl	800fcb4 <HAL_GetTick>
 8010ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010ba4:	e008      	b.n	8010bb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010ba6:	f7ff f885 	bl	800fcb4 <HAL_GetTick>
 8010baa:	4602      	mov	r2, r0
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	1ad3      	subs	r3, r2, r3
 8010bb0:	2b02      	cmp	r3, #2
 8010bb2:	d901      	bls.n	8010bb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8010bb4:	2303      	movs	r3, #3
 8010bb6:	e10c      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010bb8:	4b6a      	ldr	r3, [pc, #424]	@ (8010d64 <HAL_RCC_OscConfig+0x474>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d0f0      	beq.n	8010ba6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d106      	bne.n	8010bda <HAL_RCC_OscConfig+0x2ea>
 8010bcc:	4b64      	ldr	r3, [pc, #400]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bd0:	4a63      	ldr	r2, [pc, #396]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010bd2:	f043 0301 	orr.w	r3, r3, #1
 8010bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8010bd8:	e01c      	b.n	8010c14 <HAL_RCC_OscConfig+0x324>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	689b      	ldr	r3, [r3, #8]
 8010bde:	2b05      	cmp	r3, #5
 8010be0:	d10c      	bne.n	8010bfc <HAL_RCC_OscConfig+0x30c>
 8010be2:	4b5f      	ldr	r3, [pc, #380]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010be6:	4a5e      	ldr	r2, [pc, #376]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010be8:	f043 0304 	orr.w	r3, r3, #4
 8010bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8010bee:	4b5c      	ldr	r3, [pc, #368]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bf2:	4a5b      	ldr	r2, [pc, #364]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010bf4:	f043 0301 	orr.w	r3, r3, #1
 8010bf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8010bfa:	e00b      	b.n	8010c14 <HAL_RCC_OscConfig+0x324>
 8010bfc:	4b58      	ldr	r3, [pc, #352]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c00:	4a57      	ldr	r2, [pc, #348]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010c02:	f023 0301 	bic.w	r3, r3, #1
 8010c06:	6713      	str	r3, [r2, #112]	@ 0x70
 8010c08:	4b55      	ldr	r3, [pc, #340]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c0c:	4a54      	ldr	r2, [pc, #336]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010c0e:	f023 0304 	bic.w	r3, r3, #4
 8010c12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	689b      	ldr	r3, [r3, #8]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d015      	beq.n	8010c48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010c1c:	f7ff f84a 	bl	800fcb4 <HAL_GetTick>
 8010c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010c22:	e00a      	b.n	8010c3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010c24:	f7ff f846 	bl	800fcb4 <HAL_GetTick>
 8010c28:	4602      	mov	r2, r0
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	1ad3      	subs	r3, r2, r3
 8010c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d901      	bls.n	8010c3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8010c36:	2303      	movs	r3, #3
 8010c38:	e0cb      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010c3a:	4b49      	ldr	r3, [pc, #292]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c3e:	f003 0302 	and.w	r3, r3, #2
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d0ee      	beq.n	8010c24 <HAL_RCC_OscConfig+0x334>
 8010c46:	e014      	b.n	8010c72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010c48:	f7ff f834 	bl	800fcb4 <HAL_GetTick>
 8010c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010c4e:	e00a      	b.n	8010c66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010c50:	f7ff f830 	bl	800fcb4 <HAL_GetTick>
 8010c54:	4602      	mov	r2, r0
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	1ad3      	subs	r3, r2, r3
 8010c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d901      	bls.n	8010c66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8010c62:	2303      	movs	r3, #3
 8010c64:	e0b5      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010c66:	4b3e      	ldr	r3, [pc, #248]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c6a:	f003 0302 	and.w	r3, r3, #2
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d1ee      	bne.n	8010c50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8010c72:	7dfb      	ldrb	r3, [r7, #23]
 8010c74:	2b01      	cmp	r3, #1
 8010c76:	d105      	bne.n	8010c84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010c78:	4b39      	ldr	r3, [pc, #228]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c7c:	4a38      	ldr	r2, [pc, #224]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010c82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	699b      	ldr	r3, [r3, #24]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	f000 80a1 	beq.w	8010dd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010c8e:	4b34      	ldr	r3, [pc, #208]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010c90:	689b      	ldr	r3, [r3, #8]
 8010c92:	f003 030c 	and.w	r3, r3, #12
 8010c96:	2b08      	cmp	r3, #8
 8010c98:	d05c      	beq.n	8010d54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	699b      	ldr	r3, [r3, #24]
 8010c9e:	2b02      	cmp	r3, #2
 8010ca0:	d141      	bne.n	8010d26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010ca2:	4b31      	ldr	r3, [pc, #196]	@ (8010d68 <HAL_RCC_OscConfig+0x478>)
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010ca8:	f7ff f804 	bl	800fcb4 <HAL_GetTick>
 8010cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010cae:	e008      	b.n	8010cc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010cb0:	f7ff f800 	bl	800fcb4 <HAL_GetTick>
 8010cb4:	4602      	mov	r2, r0
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	1ad3      	subs	r3, r2, r3
 8010cba:	2b02      	cmp	r3, #2
 8010cbc:	d901      	bls.n	8010cc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8010cbe:	2303      	movs	r3, #3
 8010cc0:	e087      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010cc2:	4b27      	ldr	r3, [pc, #156]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d1f0      	bne.n	8010cb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	69da      	ldr	r2, [r3, #28]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6a1b      	ldr	r3, [r3, #32]
 8010cd6:	431a      	orrs	r2, r3
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cdc:	019b      	lsls	r3, r3, #6
 8010cde:	431a      	orrs	r2, r3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ce4:	085b      	lsrs	r3, r3, #1
 8010ce6:	3b01      	subs	r3, #1
 8010ce8:	041b      	lsls	r3, r3, #16
 8010cea:	431a      	orrs	r2, r3
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cf0:	061b      	lsls	r3, r3, #24
 8010cf2:	491b      	ldr	r1, [pc, #108]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010cf4:	4313      	orrs	r3, r2
 8010cf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8010d68 <HAL_RCC_OscConfig+0x478>)
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010cfe:	f7fe ffd9 	bl	800fcb4 <HAL_GetTick>
 8010d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010d04:	e008      	b.n	8010d18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010d06:	f7fe ffd5 	bl	800fcb4 <HAL_GetTick>
 8010d0a:	4602      	mov	r2, r0
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	1ad3      	subs	r3, r2, r3
 8010d10:	2b02      	cmp	r3, #2
 8010d12:	d901      	bls.n	8010d18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8010d14:	2303      	movs	r3, #3
 8010d16:	e05c      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010d18:	4b11      	ldr	r3, [pc, #68]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d0f0      	beq.n	8010d06 <HAL_RCC_OscConfig+0x416>
 8010d24:	e054      	b.n	8010dd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010d26:	4b10      	ldr	r3, [pc, #64]	@ (8010d68 <HAL_RCC_OscConfig+0x478>)
 8010d28:	2200      	movs	r2, #0
 8010d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010d2c:	f7fe ffc2 	bl	800fcb4 <HAL_GetTick>
 8010d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010d32:	e008      	b.n	8010d46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010d34:	f7fe ffbe 	bl	800fcb4 <HAL_GetTick>
 8010d38:	4602      	mov	r2, r0
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	1ad3      	subs	r3, r2, r3
 8010d3e:	2b02      	cmp	r3, #2
 8010d40:	d901      	bls.n	8010d46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8010d42:	2303      	movs	r3, #3
 8010d44:	e045      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010d46:	4b06      	ldr	r3, [pc, #24]	@ (8010d60 <HAL_RCC_OscConfig+0x470>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d1f0      	bne.n	8010d34 <HAL_RCC_OscConfig+0x444>
 8010d52:	e03d      	b.n	8010dd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	699b      	ldr	r3, [r3, #24]
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d107      	bne.n	8010d6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	e038      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
 8010d60:	40023800 	.word	0x40023800
 8010d64:	40007000 	.word	0x40007000
 8010d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8010ddc <HAL_RCC_OscConfig+0x4ec>)
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	699b      	ldr	r3, [r3, #24]
 8010d76:	2b01      	cmp	r3, #1
 8010d78:	d028      	beq.n	8010dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d121      	bne.n	8010dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d11a      	bne.n	8010dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010d96:	68fa      	ldr	r2, [r7, #12]
 8010d98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8010d9c:	4013      	ands	r3, r2
 8010d9e:	687a      	ldr	r2, [r7, #4]
 8010da0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8010da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d111      	bne.n	8010dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010db2:	085b      	lsrs	r3, r3, #1
 8010db4:	3b01      	subs	r3, #1
 8010db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d107      	bne.n	8010dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d001      	beq.n	8010dd0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e000      	b.n	8010dd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8010dd0:	2300      	movs	r3, #0
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3718      	adds	r7, #24
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	40023800 	.word	0x40023800

08010de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b084      	sub	sp, #16
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d101      	bne.n	8010df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010df0:	2301      	movs	r3, #1
 8010df2:	e0cc      	b.n	8010f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010df4:	4b68      	ldr	r3, [pc, #416]	@ (8010f98 <HAL_RCC_ClockConfig+0x1b8>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f003 0307 	and.w	r3, r3, #7
 8010dfc:	683a      	ldr	r2, [r7, #0]
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d90c      	bls.n	8010e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010e02:	4b65      	ldr	r3, [pc, #404]	@ (8010f98 <HAL_RCC_ClockConfig+0x1b8>)
 8010e04:	683a      	ldr	r2, [r7, #0]
 8010e06:	b2d2      	uxtb	r2, r2
 8010e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010e0a:	4b63      	ldr	r3, [pc, #396]	@ (8010f98 <HAL_RCC_ClockConfig+0x1b8>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	f003 0307 	and.w	r3, r3, #7
 8010e12:	683a      	ldr	r2, [r7, #0]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d001      	beq.n	8010e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010e18:	2301      	movs	r3, #1
 8010e1a:	e0b8      	b.n	8010f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f003 0302 	and.w	r3, r3, #2
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d020      	beq.n	8010e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f003 0304 	and.w	r3, r3, #4
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d005      	beq.n	8010e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010e34:	4b59      	ldr	r3, [pc, #356]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010e36:	689b      	ldr	r3, [r3, #8]
 8010e38:	4a58      	ldr	r2, [pc, #352]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010e3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8010e3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f003 0308 	and.w	r3, r3, #8
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d005      	beq.n	8010e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010e4c:	4b53      	ldr	r3, [pc, #332]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010e4e:	689b      	ldr	r3, [r3, #8]
 8010e50:	4a52      	ldr	r2, [pc, #328]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010e52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8010e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010e58:	4b50      	ldr	r3, [pc, #320]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010e5a:	689b      	ldr	r3, [r3, #8]
 8010e5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	689b      	ldr	r3, [r3, #8]
 8010e64:	494d      	ldr	r1, [pc, #308]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010e66:	4313      	orrs	r3, r2
 8010e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f003 0301 	and.w	r3, r3, #1
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d044      	beq.n	8010f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d107      	bne.n	8010e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e7e:	4b47      	ldr	r3, [pc, #284]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d119      	bne.n	8010ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	e07f      	b.n	8010f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	685b      	ldr	r3, [r3, #4]
 8010e92:	2b02      	cmp	r3, #2
 8010e94:	d003      	beq.n	8010e9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010e9a:	2b03      	cmp	r3, #3
 8010e9c:	d107      	bne.n	8010eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d109      	bne.n	8010ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010eaa:	2301      	movs	r3, #1
 8010eac:	e06f      	b.n	8010f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010eae:	4b3b      	ldr	r3, [pc, #236]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f003 0302 	and.w	r3, r3, #2
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d101      	bne.n	8010ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010eba:	2301      	movs	r3, #1
 8010ebc:	e067      	b.n	8010f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010ebe:	4b37      	ldr	r3, [pc, #220]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010ec0:	689b      	ldr	r3, [r3, #8]
 8010ec2:	f023 0203 	bic.w	r2, r3, #3
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	4934      	ldr	r1, [pc, #208]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010ecc:	4313      	orrs	r3, r2
 8010ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010ed0:	f7fe fef0 	bl	800fcb4 <HAL_GetTick>
 8010ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010ed6:	e00a      	b.n	8010eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010ed8:	f7fe feec 	bl	800fcb4 <HAL_GetTick>
 8010edc:	4602      	mov	r2, r0
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	1ad3      	subs	r3, r2, r3
 8010ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d901      	bls.n	8010eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010eea:	2303      	movs	r3, #3
 8010eec:	e04f      	b.n	8010f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010eee:	4b2b      	ldr	r3, [pc, #172]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010ef0:	689b      	ldr	r3, [r3, #8]
 8010ef2:	f003 020c 	and.w	r2, r3, #12
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	009b      	lsls	r3, r3, #2
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d1eb      	bne.n	8010ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010f00:	4b25      	ldr	r3, [pc, #148]	@ (8010f98 <HAL_RCC_ClockConfig+0x1b8>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	f003 0307 	and.w	r3, r3, #7
 8010f08:	683a      	ldr	r2, [r7, #0]
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d20c      	bcs.n	8010f28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010f0e:	4b22      	ldr	r3, [pc, #136]	@ (8010f98 <HAL_RCC_ClockConfig+0x1b8>)
 8010f10:	683a      	ldr	r2, [r7, #0]
 8010f12:	b2d2      	uxtb	r2, r2
 8010f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010f16:	4b20      	ldr	r3, [pc, #128]	@ (8010f98 <HAL_RCC_ClockConfig+0x1b8>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	f003 0307 	and.w	r3, r3, #7
 8010f1e:	683a      	ldr	r2, [r7, #0]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d001      	beq.n	8010f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010f24:	2301      	movs	r3, #1
 8010f26:	e032      	b.n	8010f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	f003 0304 	and.w	r3, r3, #4
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d008      	beq.n	8010f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010f34:	4b19      	ldr	r3, [pc, #100]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010f36:	689b      	ldr	r3, [r3, #8]
 8010f38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	4916      	ldr	r1, [pc, #88]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010f42:	4313      	orrs	r3, r2
 8010f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	f003 0308 	and.w	r3, r3, #8
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d009      	beq.n	8010f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010f52:	4b12      	ldr	r3, [pc, #72]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010f54:	689b      	ldr	r3, [r3, #8]
 8010f56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	691b      	ldr	r3, [r3, #16]
 8010f5e:	00db      	lsls	r3, r3, #3
 8010f60:	490e      	ldr	r1, [pc, #56]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010f62:	4313      	orrs	r3, r2
 8010f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8010f66:	f000 f889 	bl	801107c <HAL_RCC_GetSysClockFreq>
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8010f9c <HAL_RCC_ClockConfig+0x1bc>)
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	091b      	lsrs	r3, r3, #4
 8010f72:	f003 030f 	and.w	r3, r3, #15
 8010f76:	490a      	ldr	r1, [pc, #40]	@ (8010fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8010f78:	5ccb      	ldrb	r3, [r1, r3]
 8010f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8010f7e:	4a09      	ldr	r2, [pc, #36]	@ (8010fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8010f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8010f82:	4b09      	ldr	r3, [pc, #36]	@ (8010fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7fe fe50 	bl	800fc2c <HAL_InitTick>

  return HAL_OK;
 8010f8c:	2300      	movs	r3, #0
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3710      	adds	r7, #16
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
 8010f96:	bf00      	nop
 8010f98:	40023c00 	.word	0x40023c00
 8010f9c:	40023800 	.word	0x40023800
 8010fa0:	0801a204 	.word	0x0801a204
 8010fa4:	20000900 	.word	0x20000900
 8010fa8:	20000904 	.word	0x20000904

08010fac <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b08c      	sub	sp, #48	@ 0x30
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d129      	bne.n	8011012 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	61bb      	str	r3, [r7, #24]
 8010fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8011070 <HAL_RCC_MCOConfig+0xc4>)
 8010fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8011070 <HAL_RCC_MCOConfig+0xc4>)
 8010fc8:	f043 0301 	orr.w	r3, r3, #1
 8010fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8010fce:	4b28      	ldr	r3, [pc, #160]	@ (8011070 <HAL_RCC_MCOConfig+0xc4>)
 8010fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fd2:	f003 0301 	and.w	r3, r3, #1
 8010fd6:	61bb      	str	r3, [r7, #24]
 8010fd8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8010fda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010fe0:	2302      	movs	r3, #2
 8010fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8010fec:	2300      	movs	r3, #0
 8010fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8010ff0:	f107 031c 	add.w	r3, r7, #28
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	481f      	ldr	r0, [pc, #124]	@ (8011074 <HAL_RCC_MCOConfig+0xc8>)
 8010ff8:	f7ff faf6 	bl	80105e8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8010ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8011070 <HAL_RCC_MCOConfig+0xc4>)
 8010ffe:	689b      	ldr	r3, [r3, #8]
 8011000:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8011004:	68b9      	ldr	r1, [r7, #8]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	430b      	orrs	r3, r1
 801100a:	4919      	ldr	r1, [pc, #100]	@ (8011070 <HAL_RCC_MCOConfig+0xc4>)
 801100c:	4313      	orrs	r3, r2
 801100e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8011010:	e029      	b.n	8011066 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8011012:	2300      	movs	r3, #0
 8011014:	617b      	str	r3, [r7, #20]
 8011016:	4b16      	ldr	r3, [pc, #88]	@ (8011070 <HAL_RCC_MCOConfig+0xc4>)
 8011018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801101a:	4a15      	ldr	r2, [pc, #84]	@ (8011070 <HAL_RCC_MCOConfig+0xc4>)
 801101c:	f043 0304 	orr.w	r3, r3, #4
 8011020:	6313      	str	r3, [r2, #48]	@ 0x30
 8011022:	4b13      	ldr	r3, [pc, #76]	@ (8011070 <HAL_RCC_MCOConfig+0xc4>)
 8011024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011026:	f003 0304 	and.w	r3, r3, #4
 801102a:	617b      	str	r3, [r7, #20]
 801102c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 801102e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011034:	2302      	movs	r3, #2
 8011036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011038:	2303      	movs	r3, #3
 801103a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801103c:	2300      	movs	r3, #0
 801103e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8011040:	2300      	movs	r3, #0
 8011042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8011044:	f107 031c 	add.w	r3, r7, #28
 8011048:	4619      	mov	r1, r3
 801104a:	480b      	ldr	r0, [pc, #44]	@ (8011078 <HAL_RCC_MCOConfig+0xcc>)
 801104c:	f7ff facc 	bl	80105e8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8011050:	4b07      	ldr	r3, [pc, #28]	@ (8011070 <HAL_RCC_MCOConfig+0xc4>)
 8011052:	689b      	ldr	r3, [r3, #8]
 8011054:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	00d9      	lsls	r1, r3, #3
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	430b      	orrs	r3, r1
 8011060:	4903      	ldr	r1, [pc, #12]	@ (8011070 <HAL_RCC_MCOConfig+0xc4>)
 8011062:	4313      	orrs	r3, r2
 8011064:	608b      	str	r3, [r1, #8]
}
 8011066:	bf00      	nop
 8011068:	3730      	adds	r7, #48	@ 0x30
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop
 8011070:	40023800 	.word	0x40023800
 8011074:	40020000 	.word	0x40020000
 8011078:	40020800 	.word	0x40020800

0801107c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801107c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011080:	b094      	sub	sp, #80	@ 0x50
 8011082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8011084:	2300      	movs	r3, #0
 8011086:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8011088:	2300      	movs	r3, #0
 801108a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 801108c:	2300      	movs	r3, #0
 801108e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8011090:	2300      	movs	r3, #0
 8011092:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011094:	4b79      	ldr	r3, [pc, #484]	@ (801127c <HAL_RCC_GetSysClockFreq+0x200>)
 8011096:	689b      	ldr	r3, [r3, #8]
 8011098:	f003 030c 	and.w	r3, r3, #12
 801109c:	2b08      	cmp	r3, #8
 801109e:	d00d      	beq.n	80110bc <HAL_RCC_GetSysClockFreq+0x40>
 80110a0:	2b08      	cmp	r3, #8
 80110a2:	f200 80e1 	bhi.w	8011268 <HAL_RCC_GetSysClockFreq+0x1ec>
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d002      	beq.n	80110b0 <HAL_RCC_GetSysClockFreq+0x34>
 80110aa:	2b04      	cmp	r3, #4
 80110ac:	d003      	beq.n	80110b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80110ae:	e0db      	b.n	8011268 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80110b0:	4b73      	ldr	r3, [pc, #460]	@ (8011280 <HAL_RCC_GetSysClockFreq+0x204>)
 80110b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80110b4:	e0db      	b.n	801126e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80110b6:	4b73      	ldr	r3, [pc, #460]	@ (8011284 <HAL_RCC_GetSysClockFreq+0x208>)
 80110b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80110ba:	e0d8      	b.n	801126e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80110bc:	4b6f      	ldr	r3, [pc, #444]	@ (801127c <HAL_RCC_GetSysClockFreq+0x200>)
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80110c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80110c6:	4b6d      	ldr	r3, [pc, #436]	@ (801127c <HAL_RCC_GetSysClockFreq+0x200>)
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d063      	beq.n	801119a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80110d2:	4b6a      	ldr	r3, [pc, #424]	@ (801127c <HAL_RCC_GetSysClockFreq+0x200>)
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	099b      	lsrs	r3, r3, #6
 80110d8:	2200      	movs	r2, #0
 80110da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80110dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80110de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80110e6:	2300      	movs	r3, #0
 80110e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80110ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80110ee:	4622      	mov	r2, r4
 80110f0:	462b      	mov	r3, r5
 80110f2:	f04f 0000 	mov.w	r0, #0
 80110f6:	f04f 0100 	mov.w	r1, #0
 80110fa:	0159      	lsls	r1, r3, #5
 80110fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011100:	0150      	lsls	r0, r2, #5
 8011102:	4602      	mov	r2, r0
 8011104:	460b      	mov	r3, r1
 8011106:	4621      	mov	r1, r4
 8011108:	1a51      	subs	r1, r2, r1
 801110a:	6139      	str	r1, [r7, #16]
 801110c:	4629      	mov	r1, r5
 801110e:	eb63 0301 	sbc.w	r3, r3, r1
 8011112:	617b      	str	r3, [r7, #20]
 8011114:	f04f 0200 	mov.w	r2, #0
 8011118:	f04f 0300 	mov.w	r3, #0
 801111c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011120:	4659      	mov	r1, fp
 8011122:	018b      	lsls	r3, r1, #6
 8011124:	4651      	mov	r1, sl
 8011126:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801112a:	4651      	mov	r1, sl
 801112c:	018a      	lsls	r2, r1, #6
 801112e:	4651      	mov	r1, sl
 8011130:	ebb2 0801 	subs.w	r8, r2, r1
 8011134:	4659      	mov	r1, fp
 8011136:	eb63 0901 	sbc.w	r9, r3, r1
 801113a:	f04f 0200 	mov.w	r2, #0
 801113e:	f04f 0300 	mov.w	r3, #0
 8011142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801114a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801114e:	4690      	mov	r8, r2
 8011150:	4699      	mov	r9, r3
 8011152:	4623      	mov	r3, r4
 8011154:	eb18 0303 	adds.w	r3, r8, r3
 8011158:	60bb      	str	r3, [r7, #8]
 801115a:	462b      	mov	r3, r5
 801115c:	eb49 0303 	adc.w	r3, r9, r3
 8011160:	60fb      	str	r3, [r7, #12]
 8011162:	f04f 0200 	mov.w	r2, #0
 8011166:	f04f 0300 	mov.w	r3, #0
 801116a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801116e:	4629      	mov	r1, r5
 8011170:	024b      	lsls	r3, r1, #9
 8011172:	4621      	mov	r1, r4
 8011174:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8011178:	4621      	mov	r1, r4
 801117a:	024a      	lsls	r2, r1, #9
 801117c:	4610      	mov	r0, r2
 801117e:	4619      	mov	r1, r3
 8011180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011182:	2200      	movs	r2, #0
 8011184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011188:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801118c:	f7fc fc04 	bl	800d998 <__aeabi_uldivmod>
 8011190:	4602      	mov	r2, r0
 8011192:	460b      	mov	r3, r1
 8011194:	4613      	mov	r3, r2
 8011196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011198:	e058      	b.n	801124c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801119a:	4b38      	ldr	r3, [pc, #224]	@ (801127c <HAL_RCC_GetSysClockFreq+0x200>)
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	099b      	lsrs	r3, r3, #6
 80111a0:	2200      	movs	r2, #0
 80111a2:	4618      	mov	r0, r3
 80111a4:	4611      	mov	r1, r2
 80111a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80111aa:	623b      	str	r3, [r7, #32]
 80111ac:	2300      	movs	r3, #0
 80111ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80111b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80111b4:	4642      	mov	r2, r8
 80111b6:	464b      	mov	r3, r9
 80111b8:	f04f 0000 	mov.w	r0, #0
 80111bc:	f04f 0100 	mov.w	r1, #0
 80111c0:	0159      	lsls	r1, r3, #5
 80111c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80111c6:	0150      	lsls	r0, r2, #5
 80111c8:	4602      	mov	r2, r0
 80111ca:	460b      	mov	r3, r1
 80111cc:	4641      	mov	r1, r8
 80111ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80111d2:	4649      	mov	r1, r9
 80111d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80111d8:	f04f 0200 	mov.w	r2, #0
 80111dc:	f04f 0300 	mov.w	r3, #0
 80111e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80111e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80111e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80111ec:	ebb2 040a 	subs.w	r4, r2, sl
 80111f0:	eb63 050b 	sbc.w	r5, r3, fp
 80111f4:	f04f 0200 	mov.w	r2, #0
 80111f8:	f04f 0300 	mov.w	r3, #0
 80111fc:	00eb      	lsls	r3, r5, #3
 80111fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011202:	00e2      	lsls	r2, r4, #3
 8011204:	4614      	mov	r4, r2
 8011206:	461d      	mov	r5, r3
 8011208:	4643      	mov	r3, r8
 801120a:	18e3      	adds	r3, r4, r3
 801120c:	603b      	str	r3, [r7, #0]
 801120e:	464b      	mov	r3, r9
 8011210:	eb45 0303 	adc.w	r3, r5, r3
 8011214:	607b      	str	r3, [r7, #4]
 8011216:	f04f 0200 	mov.w	r2, #0
 801121a:	f04f 0300 	mov.w	r3, #0
 801121e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011222:	4629      	mov	r1, r5
 8011224:	028b      	lsls	r3, r1, #10
 8011226:	4621      	mov	r1, r4
 8011228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801122c:	4621      	mov	r1, r4
 801122e:	028a      	lsls	r2, r1, #10
 8011230:	4610      	mov	r0, r2
 8011232:	4619      	mov	r1, r3
 8011234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011236:	2200      	movs	r2, #0
 8011238:	61bb      	str	r3, [r7, #24]
 801123a:	61fa      	str	r2, [r7, #28]
 801123c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011240:	f7fc fbaa 	bl	800d998 <__aeabi_uldivmod>
 8011244:	4602      	mov	r2, r0
 8011246:	460b      	mov	r3, r1
 8011248:	4613      	mov	r3, r2
 801124a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 801124c:	4b0b      	ldr	r3, [pc, #44]	@ (801127c <HAL_RCC_GetSysClockFreq+0x200>)
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	0c1b      	lsrs	r3, r3, #16
 8011252:	f003 0303 	and.w	r3, r3, #3
 8011256:	3301      	adds	r3, #1
 8011258:	005b      	lsls	r3, r3, #1
 801125a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 801125c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801125e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011260:	fbb2 f3f3 	udiv	r3, r2, r3
 8011264:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8011266:	e002      	b.n	801126e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011268:	4b05      	ldr	r3, [pc, #20]	@ (8011280 <HAL_RCC_GetSysClockFreq+0x204>)
 801126a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801126c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801126e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8011270:	4618      	mov	r0, r3
 8011272:	3750      	adds	r7, #80	@ 0x50
 8011274:	46bd      	mov	sp, r7
 8011276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801127a:	bf00      	nop
 801127c:	40023800 	.word	0x40023800
 8011280:	00f42400 	.word	0x00f42400
 8011284:	007a1200 	.word	0x007a1200

08011288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011288:	b480      	push	{r7}
 801128a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801128c:	4b03      	ldr	r3, [pc, #12]	@ (801129c <HAL_RCC_GetHCLKFreq+0x14>)
 801128e:	681b      	ldr	r3, [r3, #0]
}
 8011290:	4618      	mov	r0, r3
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr
 801129a:	bf00      	nop
 801129c:	20000900 	.word	0x20000900

080112a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80112a4:	f7ff fff0 	bl	8011288 <HAL_RCC_GetHCLKFreq>
 80112a8:	4602      	mov	r2, r0
 80112aa:	4b05      	ldr	r3, [pc, #20]	@ (80112c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80112ac:	689b      	ldr	r3, [r3, #8]
 80112ae:	0a9b      	lsrs	r3, r3, #10
 80112b0:	f003 0307 	and.w	r3, r3, #7
 80112b4:	4903      	ldr	r1, [pc, #12]	@ (80112c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80112b6:	5ccb      	ldrb	r3, [r1, r3]
 80112b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80112bc:	4618      	mov	r0, r3
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	40023800 	.word	0x40023800
 80112c4:	0801a214 	.word	0x0801a214

080112c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80112cc:	f7ff ffdc 	bl	8011288 <HAL_RCC_GetHCLKFreq>
 80112d0:	4602      	mov	r2, r0
 80112d2:	4b05      	ldr	r3, [pc, #20]	@ (80112e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80112d4:	689b      	ldr	r3, [r3, #8]
 80112d6:	0b5b      	lsrs	r3, r3, #13
 80112d8:	f003 0307 	and.w	r3, r3, #7
 80112dc:	4903      	ldr	r1, [pc, #12]	@ (80112ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80112de:	5ccb      	ldrb	r3, [r1, r3]
 80112e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	40023800 	.word	0x40023800
 80112ec:	0801a214 	.word	0x0801a214

080112f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d101      	bne.n	8011302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80112fe:	2301      	movs	r3, #1
 8011300:	e042      	b.n	8011388 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011308:	b2db      	uxtb	r3, r3
 801130a:	2b00      	cmp	r3, #0
 801130c:	d106      	bne.n	801131c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2200      	movs	r2, #0
 8011312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f7fe fa4e 	bl	800f7b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2224      	movs	r2, #36	@ 0x24
 8011320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	68da      	ldr	r2, [r3, #12]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f000 fd69 	bl	8011e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	691a      	ldr	r2, [r3, #16]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	695a      	ldr	r2, [r3, #20]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	68da      	ldr	r2, [r3, #12]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2200      	movs	r2, #0
 801136e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2220      	movs	r2, #32
 8011374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2220      	movs	r2, #32
 801137c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2200      	movs	r2, #0
 8011384:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8011386:	2300      	movs	r3, #0
}
 8011388:	4618      	mov	r0, r3
 801138a:	3708      	adds	r7, #8
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b08a      	sub	sp, #40	@ 0x28
 8011394:	af02      	add	r7, sp, #8
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	60b9      	str	r1, [r7, #8]
 801139a:	603b      	str	r3, [r7, #0]
 801139c:	4613      	mov	r3, r2
 801139e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80113a0:	2300      	movs	r3, #0
 80113a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	2b20      	cmp	r3, #32
 80113ae:	d175      	bne.n	801149c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d002      	beq.n	80113bc <HAL_UART_Transmit+0x2c>
 80113b6:	88fb      	ldrh	r3, [r7, #6]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d101      	bne.n	80113c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80113bc:	2301      	movs	r3, #1
 80113be:	e06e      	b.n	801149e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2200      	movs	r2, #0
 80113c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	2221      	movs	r2, #33	@ 0x21
 80113ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80113ce:	f7fe fc71 	bl	800fcb4 <HAL_GetTick>
 80113d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	88fa      	ldrh	r2, [r7, #6]
 80113d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	88fa      	ldrh	r2, [r7, #6]
 80113de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80113e8:	d108      	bne.n	80113fc <HAL_UART_Transmit+0x6c>
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	691b      	ldr	r3, [r3, #16]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d104      	bne.n	80113fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80113f2:	2300      	movs	r3, #0
 80113f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	61bb      	str	r3, [r7, #24]
 80113fa:	e003      	b.n	8011404 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011400:	2300      	movs	r3, #0
 8011402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011404:	e02e      	b.n	8011464 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	9300      	str	r3, [sp, #0]
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	2200      	movs	r2, #0
 801140e:	2180      	movs	r1, #128	@ 0x80
 8011410:	68f8      	ldr	r0, [r7, #12]
 8011412:	f000 fb05 	bl	8011a20 <UART_WaitOnFlagUntilTimeout>
 8011416:	4603      	mov	r3, r0
 8011418:	2b00      	cmp	r3, #0
 801141a:	d005      	beq.n	8011428 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	2220      	movs	r2, #32
 8011420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8011424:	2303      	movs	r3, #3
 8011426:	e03a      	b.n	801149e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8011428:	69fb      	ldr	r3, [r7, #28]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d10b      	bne.n	8011446 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	881b      	ldrh	r3, [r3, #0]
 8011432:	461a      	mov	r2, r3
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801143c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801143e:	69bb      	ldr	r3, [r7, #24]
 8011440:	3302      	adds	r3, #2
 8011442:	61bb      	str	r3, [r7, #24]
 8011444:	e007      	b.n	8011456 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8011446:	69fb      	ldr	r3, [r7, #28]
 8011448:	781a      	ldrb	r2, [r3, #0]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	3301      	adds	r3, #1
 8011454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801145a:	b29b      	uxth	r3, r3
 801145c:	3b01      	subs	r3, #1
 801145e:	b29a      	uxth	r2, r3
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011468:	b29b      	uxth	r3, r3
 801146a:	2b00      	cmp	r3, #0
 801146c:	d1cb      	bne.n	8011406 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	9300      	str	r3, [sp, #0]
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	2200      	movs	r2, #0
 8011476:	2140      	movs	r1, #64	@ 0x40
 8011478:	68f8      	ldr	r0, [r7, #12]
 801147a:	f000 fad1 	bl	8011a20 <UART_WaitOnFlagUntilTimeout>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	d005      	beq.n	8011490 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2220      	movs	r2, #32
 8011488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 801148c:	2303      	movs	r3, #3
 801148e:	e006      	b.n	801149e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	2220      	movs	r2, #32
 8011494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8011498:	2300      	movs	r3, #0
 801149a:	e000      	b.n	801149e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 801149c:	2302      	movs	r3, #2
  }
}
 801149e:	4618      	mov	r0, r3
 80114a0:	3720      	adds	r7, #32
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}
	...

080114a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b0ba      	sub	sp, #232	@ 0xe8
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	695b      	ldr	r3, [r3, #20]
 80114ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80114ce:	2300      	movs	r3, #0
 80114d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80114d4:	2300      	movs	r3, #0
 80114d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80114da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114de:	f003 030f 	and.w	r3, r3, #15
 80114e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80114e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d10f      	bne.n	801150e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80114ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114f2:	f003 0320 	and.w	r3, r3, #32
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d009      	beq.n	801150e <HAL_UART_IRQHandler+0x66>
 80114fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80114fe:	f003 0320 	and.w	r3, r3, #32
 8011502:	2b00      	cmp	r3, #0
 8011504:	d003      	beq.n	801150e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f000 fbc2 	bl	8011c90 <UART_Receive_IT>
      return;
 801150c:	e25b      	b.n	80119c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801150e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011512:	2b00      	cmp	r3, #0
 8011514:	f000 80de 	beq.w	80116d4 <HAL_UART_IRQHandler+0x22c>
 8011518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801151c:	f003 0301 	and.w	r3, r3, #1
 8011520:	2b00      	cmp	r3, #0
 8011522:	d106      	bne.n	8011532 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8011524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011528:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 801152c:	2b00      	cmp	r3, #0
 801152e:	f000 80d1 	beq.w	80116d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8011532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011536:	f003 0301 	and.w	r3, r3, #1
 801153a:	2b00      	cmp	r3, #0
 801153c:	d00b      	beq.n	8011556 <HAL_UART_IRQHandler+0xae>
 801153e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011546:	2b00      	cmp	r3, #0
 8011548:	d005      	beq.n	8011556 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801154e:	f043 0201 	orr.w	r2, r3, #1
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801155a:	f003 0304 	and.w	r3, r3, #4
 801155e:	2b00      	cmp	r3, #0
 8011560:	d00b      	beq.n	801157a <HAL_UART_IRQHandler+0xd2>
 8011562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011566:	f003 0301 	and.w	r3, r3, #1
 801156a:	2b00      	cmp	r3, #0
 801156c:	d005      	beq.n	801157a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011572:	f043 0202 	orr.w	r2, r3, #2
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801157a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801157e:	f003 0302 	and.w	r3, r3, #2
 8011582:	2b00      	cmp	r3, #0
 8011584:	d00b      	beq.n	801159e <HAL_UART_IRQHandler+0xf6>
 8011586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801158a:	f003 0301 	and.w	r3, r3, #1
 801158e:	2b00      	cmp	r3, #0
 8011590:	d005      	beq.n	801159e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011596:	f043 0204 	orr.w	r2, r3, #4
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801159e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80115a2:	f003 0308 	and.w	r3, r3, #8
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d011      	beq.n	80115ce <HAL_UART_IRQHandler+0x126>
 80115aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80115ae:	f003 0320 	and.w	r3, r3, #32
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d105      	bne.n	80115c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80115b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80115ba:	f003 0301 	and.w	r3, r3, #1
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d005      	beq.n	80115ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115c6:	f043 0208 	orr.w	r2, r3, #8
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	f000 81f2 	beq.w	80119bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80115d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80115dc:	f003 0320 	and.w	r3, r3, #32
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d008      	beq.n	80115f6 <HAL_UART_IRQHandler+0x14e>
 80115e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80115e8:	f003 0320 	and.w	r3, r3, #32
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d002      	beq.n	80115f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 fb4d 	bl	8011c90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	695b      	ldr	r3, [r3, #20]
 80115fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011600:	2b40      	cmp	r3, #64	@ 0x40
 8011602:	bf0c      	ite	eq
 8011604:	2301      	moveq	r3, #1
 8011606:	2300      	movne	r3, #0
 8011608:	b2db      	uxtb	r3, r3
 801160a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011612:	f003 0308 	and.w	r3, r3, #8
 8011616:	2b00      	cmp	r3, #0
 8011618:	d103      	bne.n	8011622 <HAL_UART_IRQHandler+0x17a>
 801161a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801161e:	2b00      	cmp	r3, #0
 8011620:	d04f      	beq.n	80116c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f000 fa55 	bl	8011ad2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	695b      	ldr	r3, [r3, #20]
 801162e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011632:	2b40      	cmp	r3, #64	@ 0x40
 8011634:	d141      	bne.n	80116ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	3314      	adds	r3, #20
 801163c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011640:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011644:	e853 3f00 	ldrex	r3, [r3]
 8011648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801164c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	3314      	adds	r3, #20
 801165e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8011662:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8011666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801166a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801166e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011672:	e841 2300 	strex	r3, r2, [r1]
 8011676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801167a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801167e:	2b00      	cmp	r3, #0
 8011680:	d1d9      	bne.n	8011636 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011686:	2b00      	cmp	r3, #0
 8011688:	d013      	beq.n	80116b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801168e:	4a7e      	ldr	r2, [pc, #504]	@ (8011888 <HAL_UART_IRQHandler+0x3e0>)
 8011690:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011696:	4618      	mov	r0, r3
 8011698:	f7fe fd48 	bl	801012c <HAL_DMA_Abort_IT>
 801169c:	4603      	mov	r3, r0
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d016      	beq.n	80116d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116a8:	687a      	ldr	r2, [r7, #4]
 80116aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80116ac:	4610      	mov	r0, r2
 80116ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116b0:	e00e      	b.n	80116d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80116b2:	6878      	ldr	r0, [r7, #4]
 80116b4:	f000 f99e 	bl	80119f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116b8:	e00a      	b.n	80116d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 f99a 	bl	80119f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116c0:	e006      	b.n	80116d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f000 f996 	bl	80119f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2200      	movs	r2, #0
 80116cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80116ce:	e175      	b.n	80119bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116d0:	bf00      	nop
    return;
 80116d2:	e173      	b.n	80119bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116d8:	2b01      	cmp	r3, #1
 80116da:	f040 814f 	bne.w	801197c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80116de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116e2:	f003 0310 	and.w	r3, r3, #16
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f000 8148 	beq.w	801197c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80116ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80116f0:	f003 0310 	and.w	r3, r3, #16
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	f000 8141 	beq.w	801197c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80116fa:	2300      	movs	r3, #0
 80116fc:	60bb      	str	r3, [r7, #8]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	60bb      	str	r3, [r7, #8]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	60bb      	str	r3, [r7, #8]
 801170e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	695b      	ldr	r3, [r3, #20]
 8011716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801171a:	2b40      	cmp	r3, #64	@ 0x40
 801171c:	f040 80b6 	bne.w	801188c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801172c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011730:	2b00      	cmp	r3, #0
 8011732:	f000 8145 	beq.w	80119c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801173a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801173e:	429a      	cmp	r2, r3
 8011740:	f080 813e 	bcs.w	80119c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801174a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011750:	69db      	ldr	r3, [r3, #28]
 8011752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011756:	f000 8088 	beq.w	801186a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	330c      	adds	r3, #12
 8011760:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011764:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011768:	e853 3f00 	ldrex	r3, [r3]
 801176c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8011770:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	330c      	adds	r3, #12
 8011782:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8011786:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801178a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801178e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8011792:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011796:	e841 2300 	strex	r3, r2, [r1]
 801179a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801179e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d1d9      	bne.n	801175a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	3314      	adds	r3, #20
 80117ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117b0:	e853 3f00 	ldrex	r3, [r3]
 80117b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80117b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80117b8:	f023 0301 	bic.w	r3, r3, #1
 80117bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	3314      	adds	r3, #20
 80117c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80117ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80117ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80117d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80117d6:	e841 2300 	strex	r3, r2, [r1]
 80117da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80117dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d1e1      	bne.n	80117a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	3314      	adds	r3, #20
 80117e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80117ec:	e853 3f00 	ldrex	r3, [r3]
 80117f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80117f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80117f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	3314      	adds	r3, #20
 8011802:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011806:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011808:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801180a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801180c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801180e:	e841 2300 	strex	r3, r2, [r1]
 8011812:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011816:	2b00      	cmp	r3, #0
 8011818:	d1e3      	bne.n	80117e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2220      	movs	r2, #32
 801181e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2200      	movs	r2, #0
 8011826:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	330c      	adds	r3, #12
 801182e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011832:	e853 3f00 	ldrex	r3, [r3]
 8011836:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801183a:	f023 0310 	bic.w	r3, r3, #16
 801183e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	330c      	adds	r3, #12
 8011848:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801184c:	65ba      	str	r2, [r7, #88]	@ 0x58
 801184e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011850:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011852:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011854:	e841 2300 	strex	r3, r2, [r1]
 8011858:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801185a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801185c:	2b00      	cmp	r3, #0
 801185e:	d1e3      	bne.n	8011828 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011864:	4618      	mov	r0, r3
 8011866:	f7fe fbf1 	bl	801004c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2202      	movs	r2, #2
 801186e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011878:	b29b      	uxth	r3, r3
 801187a:	1ad3      	subs	r3, r2, r3
 801187c:	b29b      	uxth	r3, r3
 801187e:	4619      	mov	r1, r3
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f000 f8c1 	bl	8011a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011886:	e09b      	b.n	80119c0 <HAL_UART_IRQHandler+0x518>
 8011888:	08011b99 	.word	0x08011b99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011894:	b29b      	uxth	r3, r3
 8011896:	1ad3      	subs	r3, r2, r3
 8011898:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	f000 808e 	beq.w	80119c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80118a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	f000 8089 	beq.w	80119c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	330c      	adds	r3, #12
 80118b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118bc:	e853 3f00 	ldrex	r3, [r3]
 80118c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80118c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80118c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	330c      	adds	r3, #12
 80118d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80118d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80118d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80118dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80118de:	e841 2300 	strex	r3, r2, [r1]
 80118e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80118e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d1e3      	bne.n	80118b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	3314      	adds	r3, #20
 80118f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f4:	e853 3f00 	ldrex	r3, [r3]
 80118f8:	623b      	str	r3, [r7, #32]
   return(result);
 80118fa:	6a3b      	ldr	r3, [r7, #32]
 80118fc:	f023 0301 	bic.w	r3, r3, #1
 8011900:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	3314      	adds	r3, #20
 801190a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801190e:	633a      	str	r2, [r7, #48]	@ 0x30
 8011910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011916:	e841 2300 	strex	r3, r2, [r1]
 801191a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801191c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801191e:	2b00      	cmp	r3, #0
 8011920:	d1e3      	bne.n	80118ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2220      	movs	r2, #32
 8011926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2200      	movs	r2, #0
 801192e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	330c      	adds	r3, #12
 8011936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	e853 3f00 	ldrex	r3, [r3]
 801193e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	f023 0310 	bic.w	r3, r3, #16
 8011946:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	330c      	adds	r3, #12
 8011950:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8011954:	61fa      	str	r2, [r7, #28]
 8011956:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011958:	69b9      	ldr	r1, [r7, #24]
 801195a:	69fa      	ldr	r2, [r7, #28]
 801195c:	e841 2300 	strex	r3, r2, [r1]
 8011960:	617b      	str	r3, [r7, #20]
   return(result);
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d1e3      	bne.n	8011930 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2202      	movs	r2, #2
 801196c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801196e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011972:	4619      	mov	r1, r3
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f000 f847 	bl	8011a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801197a:	e023      	b.n	80119c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801197c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011984:	2b00      	cmp	r3, #0
 8011986:	d009      	beq.n	801199c <HAL_UART_IRQHandler+0x4f4>
 8011988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801198c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011990:	2b00      	cmp	r3, #0
 8011992:	d003      	beq.n	801199c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f000 f913 	bl	8011bc0 <UART_Transmit_IT>
    return;
 801199a:	e014      	b.n	80119c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801199c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80119a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d00e      	beq.n	80119c6 <HAL_UART_IRQHandler+0x51e>
 80119a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80119ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d008      	beq.n	80119c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 f953 	bl	8011c60 <UART_EndTransmit_IT>
    return;
 80119ba:	e004      	b.n	80119c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80119bc:	bf00      	nop
 80119be:	e002      	b.n	80119c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80119c0:	bf00      	nop
 80119c2:	e000      	b.n	80119c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80119c4:	bf00      	nop
  }
}
 80119c6:	37e8      	adds	r7, #232	@ 0xe8
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80119cc:	b480      	push	{r7}
 80119ce:	b083      	sub	sp, #12
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80119d4:	bf00      	nop
 80119d6:	370c      	adds	r7, #12
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr

080119e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b083      	sub	sp, #12
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80119e8:	bf00      	nop
 80119ea:	370c      	adds	r7, #12
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr

080119f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80119f4:	b480      	push	{r7}
 80119f6:	b083      	sub	sp, #12
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80119fc:	bf00      	nop
 80119fe:	370c      	adds	r7, #12
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b083      	sub	sp, #12
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	460b      	mov	r3, r1
 8011a12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011a14:	bf00      	nop
 8011a16:	370c      	adds	r7, #12
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b086      	sub	sp, #24
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	603b      	str	r3, [r7, #0]
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a30:	e03b      	b.n	8011aaa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a32:	6a3b      	ldr	r3, [r7, #32]
 8011a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a38:	d037      	beq.n	8011aaa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a3a:	f7fe f93b 	bl	800fcb4 <HAL_GetTick>
 8011a3e:	4602      	mov	r2, r0
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	6a3a      	ldr	r2, [r7, #32]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d302      	bcc.n	8011a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8011a4a:	6a3b      	ldr	r3, [r7, #32]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d101      	bne.n	8011a54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011a50:	2303      	movs	r3, #3
 8011a52:	e03a      	b.n	8011aca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	68db      	ldr	r3, [r3, #12]
 8011a5a:	f003 0304 	and.w	r3, r3, #4
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d023      	beq.n	8011aaa <UART_WaitOnFlagUntilTimeout+0x8a>
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	2b80      	cmp	r3, #128	@ 0x80
 8011a66:	d020      	beq.n	8011aaa <UART_WaitOnFlagUntilTimeout+0x8a>
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	2b40      	cmp	r3, #64	@ 0x40
 8011a6c:	d01d      	beq.n	8011aaa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f003 0308 	and.w	r3, r3, #8
 8011a78:	2b08      	cmp	r3, #8
 8011a7a:	d116      	bne.n	8011aaa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	617b      	str	r3, [r7, #20]
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	617b      	str	r3, [r7, #20]
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	617b      	str	r3, [r7, #20]
 8011a90:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011a92:	68f8      	ldr	r0, [r7, #12]
 8011a94:	f000 f81d 	bl	8011ad2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	2208      	movs	r2, #8
 8011a9c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e00f      	b.n	8011aca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	681a      	ldr	r2, [r3, #0]
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	4013      	ands	r3, r2
 8011ab4:	68ba      	ldr	r2, [r7, #8]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	bf0c      	ite	eq
 8011aba:	2301      	moveq	r3, #1
 8011abc:	2300      	movne	r3, #0
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	79fb      	ldrb	r3, [r7, #7]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d0b4      	beq.n	8011a32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011ac8:	2300      	movs	r3, #0
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	3718      	adds	r7, #24
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}

08011ad2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011ad2:	b480      	push	{r7}
 8011ad4:	b095      	sub	sp, #84	@ 0x54
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	330c      	adds	r3, #12
 8011ae0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ae4:	e853 3f00 	ldrex	r3, [r3]
 8011ae8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	330c      	adds	r3, #12
 8011af8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011afa:	643a      	str	r2, [r7, #64]	@ 0x40
 8011afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011afe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011b00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011b02:	e841 2300 	strex	r3, r2, [r1]
 8011b06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d1e5      	bne.n	8011ada <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	3314      	adds	r3, #20
 8011b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b16:	6a3b      	ldr	r3, [r7, #32]
 8011b18:	e853 3f00 	ldrex	r3, [r3]
 8011b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	f023 0301 	bic.w	r3, r3, #1
 8011b24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	3314      	adds	r3, #20
 8011b2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011b30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b36:	e841 2300 	strex	r3, r2, [r1]
 8011b3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d1e5      	bne.n	8011b0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b46:	2b01      	cmp	r3, #1
 8011b48:	d119      	bne.n	8011b7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	330c      	adds	r3, #12
 8011b50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	e853 3f00 	ldrex	r3, [r3]
 8011b58:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	f023 0310 	bic.w	r3, r3, #16
 8011b60:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	330c      	adds	r3, #12
 8011b68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b6a:	61ba      	str	r2, [r7, #24]
 8011b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b6e:	6979      	ldr	r1, [r7, #20]
 8011b70:	69ba      	ldr	r2, [r7, #24]
 8011b72:	e841 2300 	strex	r3, r2, [r1]
 8011b76:	613b      	str	r3, [r7, #16]
   return(result);
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d1e5      	bne.n	8011b4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2220      	movs	r2, #32
 8011b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011b8c:	bf00      	nop
 8011b8e:	3754      	adds	r7, #84	@ 0x54
 8011b90:	46bd      	mov	sp, r7
 8011b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b96:	4770      	bx	lr

08011b98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b084      	sub	sp, #16
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ba4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	2200      	movs	r2, #0
 8011baa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011bb2:	68f8      	ldr	r0, [r7, #12]
 8011bb4:	f7ff ff1e 	bl	80119f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011bb8:	bf00      	nop
 8011bba:	3710      	adds	r7, #16
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}

08011bc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b085      	sub	sp, #20
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011bce:	b2db      	uxtb	r3, r3
 8011bd0:	2b21      	cmp	r3, #33	@ 0x21
 8011bd2:	d13e      	bne.n	8011c52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	689b      	ldr	r3, [r3, #8]
 8011bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011bdc:	d114      	bne.n	8011c08 <UART_Transmit_IT+0x48>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	691b      	ldr	r3, [r3, #16]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d110      	bne.n	8011c08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6a1b      	ldr	r3, [r3, #32]
 8011bea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	881b      	ldrh	r3, [r3, #0]
 8011bf0:	461a      	mov	r2, r3
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011bfa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6a1b      	ldr	r3, [r3, #32]
 8011c00:	1c9a      	adds	r2, r3, #2
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	621a      	str	r2, [r3, #32]
 8011c06:	e008      	b.n	8011c1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6a1b      	ldr	r3, [r3, #32]
 8011c0c:	1c59      	adds	r1, r3, #1
 8011c0e:	687a      	ldr	r2, [r7, #4]
 8011c10:	6211      	str	r1, [r2, #32]
 8011c12:	781a      	ldrb	r2, [r3, #0]
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011c1e:	b29b      	uxth	r3, r3
 8011c20:	3b01      	subs	r3, #1
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	4619      	mov	r1, r3
 8011c28:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d10f      	bne.n	8011c4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	68da      	ldr	r2, [r3, #12]
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011c3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	68da      	ldr	r2, [r3, #12]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011c4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	e000      	b.n	8011c54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011c52:	2302      	movs	r3, #2
  }
}
 8011c54:	4618      	mov	r0, r3
 8011c56:	3714      	adds	r7, #20
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5e:	4770      	bx	lr

08011c60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b082      	sub	sp, #8
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	68da      	ldr	r2, [r3, #12]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011c76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2220      	movs	r2, #32
 8011c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f7ff fea3 	bl	80119cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011c86:	2300      	movs	r3, #0
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3708      	adds	r7, #8
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b08c      	sub	sp, #48	@ 0x30
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	2b22      	cmp	r3, #34	@ 0x22
 8011ca2:	f040 80ae 	bne.w	8011e02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	689b      	ldr	r3, [r3, #8]
 8011caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011cae:	d117      	bne.n	8011ce0 <UART_Receive_IT+0x50>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	691b      	ldr	r3, [r3, #16]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d113      	bne.n	8011ce0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	b29b      	uxth	r3, r3
 8011cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cce:	b29a      	uxth	r2, r3
 8011cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cd8:	1c9a      	adds	r2, r3, #2
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8011cde:	e026      	b.n	8011d2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	689b      	ldr	r3, [r3, #8]
 8011cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011cf2:	d007      	beq.n	8011d04 <UART_Receive_IT+0x74>
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	689b      	ldr	r3, [r3, #8]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d10a      	bne.n	8011d12 <UART_Receive_IT+0x82>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	691b      	ldr	r3, [r3, #16]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d106      	bne.n	8011d12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	b2da      	uxtb	r2, r3
 8011d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d0e:	701a      	strb	r2, [r3, #0]
 8011d10:	e008      	b.n	8011d24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011d1e:	b2da      	uxtb	r2, r3
 8011d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d28:	1c5a      	adds	r2, r3, #1
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	3b01      	subs	r3, #1
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	687a      	ldr	r2, [r7, #4]
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d15d      	bne.n	8011dfe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	68da      	ldr	r2, [r3, #12]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f022 0220 	bic.w	r2, r2, #32
 8011d50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	68da      	ldr	r2, [r3, #12]
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011d60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	695a      	ldr	r2, [r3, #20]
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f022 0201 	bic.w	r2, r2, #1
 8011d70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2220      	movs	r2, #32
 8011d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d84:	2b01      	cmp	r3, #1
 8011d86:	d135      	bne.n	8011df4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	330c      	adds	r3, #12
 8011d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	e853 3f00 	ldrex	r3, [r3]
 8011d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	f023 0310 	bic.w	r3, r3, #16
 8011da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	330c      	adds	r3, #12
 8011dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011dae:	623a      	str	r2, [r7, #32]
 8011db0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db2:	69f9      	ldr	r1, [r7, #28]
 8011db4:	6a3a      	ldr	r2, [r7, #32]
 8011db6:	e841 2300 	strex	r3, r2, [r1]
 8011dba:	61bb      	str	r3, [r7, #24]
   return(result);
 8011dbc:	69bb      	ldr	r3, [r7, #24]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d1e5      	bne.n	8011d8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f003 0310 	and.w	r3, r3, #16
 8011dcc:	2b10      	cmp	r3, #16
 8011dce:	d10a      	bne.n	8011de6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	60fb      	str	r3, [r7, #12]
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	60fb      	str	r3, [r7, #12]
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	685b      	ldr	r3, [r3, #4]
 8011de2:	60fb      	str	r3, [r7, #12]
 8011de4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011dea:	4619      	mov	r1, r3
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7ff fe0b 	bl	8011a08 <HAL_UARTEx_RxEventCallback>
 8011df2:	e002      	b.n	8011dfa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f7ff fdf3 	bl	80119e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	e002      	b.n	8011e04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	e000      	b.n	8011e04 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8011e02:	2302      	movs	r3, #2
  }
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3730      	adds	r7, #48	@ 0x30
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011e10:	b0c0      	sub	sp, #256	@ 0x100
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	691b      	ldr	r3, [r3, #16]
 8011e20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8011e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e28:	68d9      	ldr	r1, [r3, #12]
 8011e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e2e:	681a      	ldr	r2, [r3, #0]
 8011e30:	ea40 0301 	orr.w	r3, r0, r1
 8011e34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e3a:	689a      	ldr	r2, [r3, #8]
 8011e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e40:	691b      	ldr	r3, [r3, #16]
 8011e42:	431a      	orrs	r2, r3
 8011e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e48:	695b      	ldr	r3, [r3, #20]
 8011e4a:	431a      	orrs	r2, r3
 8011e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e50:	69db      	ldr	r3, [r3, #28]
 8011e52:	4313      	orrs	r3, r2
 8011e54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	68db      	ldr	r3, [r3, #12]
 8011e60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8011e64:	f021 010c 	bic.w	r1, r1, #12
 8011e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e6c:	681a      	ldr	r2, [r3, #0]
 8011e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011e72:	430b      	orrs	r3, r1
 8011e74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	695b      	ldr	r3, [r3, #20]
 8011e7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8011e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e86:	6999      	ldr	r1, [r3, #24]
 8011e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e8c:	681a      	ldr	r2, [r3, #0]
 8011e8e:	ea40 0301 	orr.w	r3, r0, r1
 8011e92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	4b8f      	ldr	r3, [pc, #572]	@ (80120d8 <UART_SetConfig+0x2cc>)
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d005      	beq.n	8011eac <UART_SetConfig+0xa0>
 8011ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ea4:	681a      	ldr	r2, [r3, #0]
 8011ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80120dc <UART_SetConfig+0x2d0>)
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	d104      	bne.n	8011eb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011eac:	f7ff fa0c 	bl	80112c8 <HAL_RCC_GetPCLK2Freq>
 8011eb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8011eb4:	e003      	b.n	8011ebe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011eb6:	f7ff f9f3 	bl	80112a0 <HAL_RCC_GetPCLK1Freq>
 8011eba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ec2:	69db      	ldr	r3, [r3, #28]
 8011ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011ec8:	f040 810c 	bne.w	80120e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011ed6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011eda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011ede:	4622      	mov	r2, r4
 8011ee0:	462b      	mov	r3, r5
 8011ee2:	1891      	adds	r1, r2, r2
 8011ee4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8011ee6:	415b      	adcs	r3, r3
 8011ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011eea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011eee:	4621      	mov	r1, r4
 8011ef0:	eb12 0801 	adds.w	r8, r2, r1
 8011ef4:	4629      	mov	r1, r5
 8011ef6:	eb43 0901 	adc.w	r9, r3, r1
 8011efa:	f04f 0200 	mov.w	r2, #0
 8011efe:	f04f 0300 	mov.w	r3, #0
 8011f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011f0e:	4690      	mov	r8, r2
 8011f10:	4699      	mov	r9, r3
 8011f12:	4623      	mov	r3, r4
 8011f14:	eb18 0303 	adds.w	r3, r8, r3
 8011f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011f1c:	462b      	mov	r3, r5
 8011f1e:	eb49 0303 	adc.w	r3, r9, r3
 8011f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011f32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8011f36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011f3a:	460b      	mov	r3, r1
 8011f3c:	18db      	adds	r3, r3, r3
 8011f3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011f40:	4613      	mov	r3, r2
 8011f42:	eb42 0303 	adc.w	r3, r2, r3
 8011f46:	657b      	str	r3, [r7, #84]	@ 0x54
 8011f48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011f4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011f50:	f7fb fd22 	bl	800d998 <__aeabi_uldivmod>
 8011f54:	4602      	mov	r2, r0
 8011f56:	460b      	mov	r3, r1
 8011f58:	4b61      	ldr	r3, [pc, #388]	@ (80120e0 <UART_SetConfig+0x2d4>)
 8011f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8011f5e:	095b      	lsrs	r3, r3, #5
 8011f60:	011c      	lsls	r4, r3, #4
 8011f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011f66:	2200      	movs	r2, #0
 8011f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011f6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011f70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8011f74:	4642      	mov	r2, r8
 8011f76:	464b      	mov	r3, r9
 8011f78:	1891      	adds	r1, r2, r2
 8011f7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011f7c:	415b      	adcs	r3, r3
 8011f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011f80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8011f84:	4641      	mov	r1, r8
 8011f86:	eb12 0a01 	adds.w	sl, r2, r1
 8011f8a:	4649      	mov	r1, r9
 8011f8c:	eb43 0b01 	adc.w	fp, r3, r1
 8011f90:	f04f 0200 	mov.w	r2, #0
 8011f94:	f04f 0300 	mov.w	r3, #0
 8011f98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011f9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011fa4:	4692      	mov	sl, r2
 8011fa6:	469b      	mov	fp, r3
 8011fa8:	4643      	mov	r3, r8
 8011faa:	eb1a 0303 	adds.w	r3, sl, r3
 8011fae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011fb2:	464b      	mov	r3, r9
 8011fb4:	eb4b 0303 	adc.w	r3, fp, r3
 8011fb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011fc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011fcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011fd0:	460b      	mov	r3, r1
 8011fd2:	18db      	adds	r3, r3, r3
 8011fd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8011fd6:	4613      	mov	r3, r2
 8011fd8:	eb42 0303 	adc.w	r3, r2, r3
 8011fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8011fde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011fe2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8011fe6:	f7fb fcd7 	bl	800d998 <__aeabi_uldivmod>
 8011fea:	4602      	mov	r2, r0
 8011fec:	460b      	mov	r3, r1
 8011fee:	4611      	mov	r1, r2
 8011ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80120e0 <UART_SetConfig+0x2d4>)
 8011ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8011ff6:	095b      	lsrs	r3, r3, #5
 8011ff8:	2264      	movs	r2, #100	@ 0x64
 8011ffa:	fb02 f303 	mul.w	r3, r2, r3
 8011ffe:	1acb      	subs	r3, r1, r3
 8012000:	00db      	lsls	r3, r3, #3
 8012002:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8012006:	4b36      	ldr	r3, [pc, #216]	@ (80120e0 <UART_SetConfig+0x2d4>)
 8012008:	fba3 2302 	umull	r2, r3, r3, r2
 801200c:	095b      	lsrs	r3, r3, #5
 801200e:	005b      	lsls	r3, r3, #1
 8012010:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8012014:	441c      	add	r4, r3
 8012016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801201a:	2200      	movs	r2, #0
 801201c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012020:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8012024:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8012028:	4642      	mov	r2, r8
 801202a:	464b      	mov	r3, r9
 801202c:	1891      	adds	r1, r2, r2
 801202e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8012030:	415b      	adcs	r3, r3
 8012032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012034:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8012038:	4641      	mov	r1, r8
 801203a:	1851      	adds	r1, r2, r1
 801203c:	6339      	str	r1, [r7, #48]	@ 0x30
 801203e:	4649      	mov	r1, r9
 8012040:	414b      	adcs	r3, r1
 8012042:	637b      	str	r3, [r7, #52]	@ 0x34
 8012044:	f04f 0200 	mov.w	r2, #0
 8012048:	f04f 0300 	mov.w	r3, #0
 801204c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8012050:	4659      	mov	r1, fp
 8012052:	00cb      	lsls	r3, r1, #3
 8012054:	4651      	mov	r1, sl
 8012056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801205a:	4651      	mov	r1, sl
 801205c:	00ca      	lsls	r2, r1, #3
 801205e:	4610      	mov	r0, r2
 8012060:	4619      	mov	r1, r3
 8012062:	4603      	mov	r3, r0
 8012064:	4642      	mov	r2, r8
 8012066:	189b      	adds	r3, r3, r2
 8012068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801206c:	464b      	mov	r3, r9
 801206e:	460a      	mov	r2, r1
 8012070:	eb42 0303 	adc.w	r3, r2, r3
 8012074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	2200      	movs	r2, #0
 8012080:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012084:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8012088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801208c:	460b      	mov	r3, r1
 801208e:	18db      	adds	r3, r3, r3
 8012090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012092:	4613      	mov	r3, r2
 8012094:	eb42 0303 	adc.w	r3, r2, r3
 8012098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801209a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801209e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80120a2:	f7fb fc79 	bl	800d998 <__aeabi_uldivmod>
 80120a6:	4602      	mov	r2, r0
 80120a8:	460b      	mov	r3, r1
 80120aa:	4b0d      	ldr	r3, [pc, #52]	@ (80120e0 <UART_SetConfig+0x2d4>)
 80120ac:	fba3 1302 	umull	r1, r3, r3, r2
 80120b0:	095b      	lsrs	r3, r3, #5
 80120b2:	2164      	movs	r1, #100	@ 0x64
 80120b4:	fb01 f303 	mul.w	r3, r1, r3
 80120b8:	1ad3      	subs	r3, r2, r3
 80120ba:	00db      	lsls	r3, r3, #3
 80120bc:	3332      	adds	r3, #50	@ 0x32
 80120be:	4a08      	ldr	r2, [pc, #32]	@ (80120e0 <UART_SetConfig+0x2d4>)
 80120c0:	fba2 2303 	umull	r2, r3, r2, r3
 80120c4:	095b      	lsrs	r3, r3, #5
 80120c6:	f003 0207 	and.w	r2, r3, #7
 80120ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	4422      	add	r2, r4
 80120d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80120d4:	e106      	b.n	80122e4 <UART_SetConfig+0x4d8>
 80120d6:	bf00      	nop
 80120d8:	40011000 	.word	0x40011000
 80120dc:	40011400 	.word	0x40011400
 80120e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80120e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80120e8:	2200      	movs	r2, #0
 80120ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80120ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80120f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80120f6:	4642      	mov	r2, r8
 80120f8:	464b      	mov	r3, r9
 80120fa:	1891      	adds	r1, r2, r2
 80120fc:	6239      	str	r1, [r7, #32]
 80120fe:	415b      	adcs	r3, r3
 8012100:	627b      	str	r3, [r7, #36]	@ 0x24
 8012102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012106:	4641      	mov	r1, r8
 8012108:	1854      	adds	r4, r2, r1
 801210a:	4649      	mov	r1, r9
 801210c:	eb43 0501 	adc.w	r5, r3, r1
 8012110:	f04f 0200 	mov.w	r2, #0
 8012114:	f04f 0300 	mov.w	r3, #0
 8012118:	00eb      	lsls	r3, r5, #3
 801211a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801211e:	00e2      	lsls	r2, r4, #3
 8012120:	4614      	mov	r4, r2
 8012122:	461d      	mov	r5, r3
 8012124:	4643      	mov	r3, r8
 8012126:	18e3      	adds	r3, r4, r3
 8012128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801212c:	464b      	mov	r3, r9
 801212e:	eb45 0303 	adc.w	r3, r5, r3
 8012132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	2200      	movs	r2, #0
 801213e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012142:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8012146:	f04f 0200 	mov.w	r2, #0
 801214a:	f04f 0300 	mov.w	r3, #0
 801214e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8012152:	4629      	mov	r1, r5
 8012154:	008b      	lsls	r3, r1, #2
 8012156:	4621      	mov	r1, r4
 8012158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801215c:	4621      	mov	r1, r4
 801215e:	008a      	lsls	r2, r1, #2
 8012160:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8012164:	f7fb fc18 	bl	800d998 <__aeabi_uldivmod>
 8012168:	4602      	mov	r2, r0
 801216a:	460b      	mov	r3, r1
 801216c:	4b60      	ldr	r3, [pc, #384]	@ (80122f0 <UART_SetConfig+0x4e4>)
 801216e:	fba3 2302 	umull	r2, r3, r3, r2
 8012172:	095b      	lsrs	r3, r3, #5
 8012174:	011c      	lsls	r4, r3, #4
 8012176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801217a:	2200      	movs	r2, #0
 801217c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012180:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012184:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8012188:	4642      	mov	r2, r8
 801218a:	464b      	mov	r3, r9
 801218c:	1891      	adds	r1, r2, r2
 801218e:	61b9      	str	r1, [r7, #24]
 8012190:	415b      	adcs	r3, r3
 8012192:	61fb      	str	r3, [r7, #28]
 8012194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012198:	4641      	mov	r1, r8
 801219a:	1851      	adds	r1, r2, r1
 801219c:	6139      	str	r1, [r7, #16]
 801219e:	4649      	mov	r1, r9
 80121a0:	414b      	adcs	r3, r1
 80121a2:	617b      	str	r3, [r7, #20]
 80121a4:	f04f 0200 	mov.w	r2, #0
 80121a8:	f04f 0300 	mov.w	r3, #0
 80121ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80121b0:	4659      	mov	r1, fp
 80121b2:	00cb      	lsls	r3, r1, #3
 80121b4:	4651      	mov	r1, sl
 80121b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80121ba:	4651      	mov	r1, sl
 80121bc:	00ca      	lsls	r2, r1, #3
 80121be:	4610      	mov	r0, r2
 80121c0:	4619      	mov	r1, r3
 80121c2:	4603      	mov	r3, r0
 80121c4:	4642      	mov	r2, r8
 80121c6:	189b      	adds	r3, r3, r2
 80121c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80121cc:	464b      	mov	r3, r9
 80121ce:	460a      	mov	r2, r1
 80121d0:	eb42 0303 	adc.w	r3, r2, r3
 80121d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80121d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	2200      	movs	r2, #0
 80121e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80121e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80121e4:	f04f 0200 	mov.w	r2, #0
 80121e8:	f04f 0300 	mov.w	r3, #0
 80121ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80121f0:	4649      	mov	r1, r9
 80121f2:	008b      	lsls	r3, r1, #2
 80121f4:	4641      	mov	r1, r8
 80121f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80121fa:	4641      	mov	r1, r8
 80121fc:	008a      	lsls	r2, r1, #2
 80121fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8012202:	f7fb fbc9 	bl	800d998 <__aeabi_uldivmod>
 8012206:	4602      	mov	r2, r0
 8012208:	460b      	mov	r3, r1
 801220a:	4611      	mov	r1, r2
 801220c:	4b38      	ldr	r3, [pc, #224]	@ (80122f0 <UART_SetConfig+0x4e4>)
 801220e:	fba3 2301 	umull	r2, r3, r3, r1
 8012212:	095b      	lsrs	r3, r3, #5
 8012214:	2264      	movs	r2, #100	@ 0x64
 8012216:	fb02 f303 	mul.w	r3, r2, r3
 801221a:	1acb      	subs	r3, r1, r3
 801221c:	011b      	lsls	r3, r3, #4
 801221e:	3332      	adds	r3, #50	@ 0x32
 8012220:	4a33      	ldr	r2, [pc, #204]	@ (80122f0 <UART_SetConfig+0x4e4>)
 8012222:	fba2 2303 	umull	r2, r3, r2, r3
 8012226:	095b      	lsrs	r3, r3, #5
 8012228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801222c:	441c      	add	r4, r3
 801222e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012232:	2200      	movs	r2, #0
 8012234:	673b      	str	r3, [r7, #112]	@ 0x70
 8012236:	677a      	str	r2, [r7, #116]	@ 0x74
 8012238:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 801223c:	4642      	mov	r2, r8
 801223e:	464b      	mov	r3, r9
 8012240:	1891      	adds	r1, r2, r2
 8012242:	60b9      	str	r1, [r7, #8]
 8012244:	415b      	adcs	r3, r3
 8012246:	60fb      	str	r3, [r7, #12]
 8012248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801224c:	4641      	mov	r1, r8
 801224e:	1851      	adds	r1, r2, r1
 8012250:	6039      	str	r1, [r7, #0]
 8012252:	4649      	mov	r1, r9
 8012254:	414b      	adcs	r3, r1
 8012256:	607b      	str	r3, [r7, #4]
 8012258:	f04f 0200 	mov.w	r2, #0
 801225c:	f04f 0300 	mov.w	r3, #0
 8012260:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8012264:	4659      	mov	r1, fp
 8012266:	00cb      	lsls	r3, r1, #3
 8012268:	4651      	mov	r1, sl
 801226a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801226e:	4651      	mov	r1, sl
 8012270:	00ca      	lsls	r2, r1, #3
 8012272:	4610      	mov	r0, r2
 8012274:	4619      	mov	r1, r3
 8012276:	4603      	mov	r3, r0
 8012278:	4642      	mov	r2, r8
 801227a:	189b      	adds	r3, r3, r2
 801227c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801227e:	464b      	mov	r3, r9
 8012280:	460a      	mov	r2, r1
 8012282:	eb42 0303 	adc.w	r3, r2, r3
 8012286:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801228c:	685b      	ldr	r3, [r3, #4]
 801228e:	2200      	movs	r2, #0
 8012290:	663b      	str	r3, [r7, #96]	@ 0x60
 8012292:	667a      	str	r2, [r7, #100]	@ 0x64
 8012294:	f04f 0200 	mov.w	r2, #0
 8012298:	f04f 0300 	mov.w	r3, #0
 801229c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80122a0:	4649      	mov	r1, r9
 80122a2:	008b      	lsls	r3, r1, #2
 80122a4:	4641      	mov	r1, r8
 80122a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80122aa:	4641      	mov	r1, r8
 80122ac:	008a      	lsls	r2, r1, #2
 80122ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80122b2:	f7fb fb71 	bl	800d998 <__aeabi_uldivmod>
 80122b6:	4602      	mov	r2, r0
 80122b8:	460b      	mov	r3, r1
 80122ba:	4b0d      	ldr	r3, [pc, #52]	@ (80122f0 <UART_SetConfig+0x4e4>)
 80122bc:	fba3 1302 	umull	r1, r3, r3, r2
 80122c0:	095b      	lsrs	r3, r3, #5
 80122c2:	2164      	movs	r1, #100	@ 0x64
 80122c4:	fb01 f303 	mul.w	r3, r1, r3
 80122c8:	1ad3      	subs	r3, r2, r3
 80122ca:	011b      	lsls	r3, r3, #4
 80122cc:	3332      	adds	r3, #50	@ 0x32
 80122ce:	4a08      	ldr	r2, [pc, #32]	@ (80122f0 <UART_SetConfig+0x4e4>)
 80122d0:	fba2 2303 	umull	r2, r3, r2, r3
 80122d4:	095b      	lsrs	r3, r3, #5
 80122d6:	f003 020f 	and.w	r2, r3, #15
 80122da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	4422      	add	r2, r4
 80122e2:	609a      	str	r2, [r3, #8]
}
 80122e4:	bf00      	nop
 80122e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80122ea:	46bd      	mov	sp, r7
 80122ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80122f0:	51eb851f 	.word	0x51eb851f

080122f4 <malloc>:
 80122f4:	4b02      	ldr	r3, [pc, #8]	@ (8012300 <malloc+0xc>)
 80122f6:	4601      	mov	r1, r0
 80122f8:	6818      	ldr	r0, [r3, #0]
 80122fa:	f000 b82d 	b.w	8012358 <_malloc_r>
 80122fe:	bf00      	nop
 8012300:	20000a84 	.word	0x20000a84

08012304 <free>:
 8012304:	4b02      	ldr	r3, [pc, #8]	@ (8012310 <free+0xc>)
 8012306:	4601      	mov	r1, r0
 8012308:	6818      	ldr	r0, [r3, #0]
 801230a:	f003 b9f9 	b.w	8015700 <_free_r>
 801230e:	bf00      	nop
 8012310:	20000a84 	.word	0x20000a84

08012314 <sbrk_aligned>:
 8012314:	b570      	push	{r4, r5, r6, lr}
 8012316:	4e0f      	ldr	r6, [pc, #60]	@ (8012354 <sbrk_aligned+0x40>)
 8012318:	460c      	mov	r4, r1
 801231a:	6831      	ldr	r1, [r6, #0]
 801231c:	4605      	mov	r5, r0
 801231e:	b911      	cbnz	r1, 8012326 <sbrk_aligned+0x12>
 8012320:	f002 fb34 	bl	801498c <_sbrk_r>
 8012324:	6030      	str	r0, [r6, #0]
 8012326:	4621      	mov	r1, r4
 8012328:	4628      	mov	r0, r5
 801232a:	f002 fb2f 	bl	801498c <_sbrk_r>
 801232e:	1c43      	adds	r3, r0, #1
 8012330:	d103      	bne.n	801233a <sbrk_aligned+0x26>
 8012332:	f04f 34ff 	mov.w	r4, #4294967295
 8012336:	4620      	mov	r0, r4
 8012338:	bd70      	pop	{r4, r5, r6, pc}
 801233a:	1cc4      	adds	r4, r0, #3
 801233c:	f024 0403 	bic.w	r4, r4, #3
 8012340:	42a0      	cmp	r0, r4
 8012342:	d0f8      	beq.n	8012336 <sbrk_aligned+0x22>
 8012344:	1a21      	subs	r1, r4, r0
 8012346:	4628      	mov	r0, r5
 8012348:	f002 fb20 	bl	801498c <_sbrk_r>
 801234c:	3001      	adds	r0, #1
 801234e:	d1f2      	bne.n	8012336 <sbrk_aligned+0x22>
 8012350:	e7ef      	b.n	8012332 <sbrk_aligned+0x1e>
 8012352:	bf00      	nop
 8012354:	20000f68 	.word	0x20000f68

08012358 <_malloc_r>:
 8012358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801235c:	1ccd      	adds	r5, r1, #3
 801235e:	f025 0503 	bic.w	r5, r5, #3
 8012362:	3508      	adds	r5, #8
 8012364:	2d0c      	cmp	r5, #12
 8012366:	bf38      	it	cc
 8012368:	250c      	movcc	r5, #12
 801236a:	2d00      	cmp	r5, #0
 801236c:	4606      	mov	r6, r0
 801236e:	db01      	blt.n	8012374 <_malloc_r+0x1c>
 8012370:	42a9      	cmp	r1, r5
 8012372:	d904      	bls.n	801237e <_malloc_r+0x26>
 8012374:	230c      	movs	r3, #12
 8012376:	6033      	str	r3, [r6, #0]
 8012378:	2000      	movs	r0, #0
 801237a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801237e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012454 <_malloc_r+0xfc>
 8012382:	f000 f869 	bl	8012458 <__malloc_lock>
 8012386:	f8d8 3000 	ldr.w	r3, [r8]
 801238a:	461c      	mov	r4, r3
 801238c:	bb44      	cbnz	r4, 80123e0 <_malloc_r+0x88>
 801238e:	4629      	mov	r1, r5
 8012390:	4630      	mov	r0, r6
 8012392:	f7ff ffbf 	bl	8012314 <sbrk_aligned>
 8012396:	1c43      	adds	r3, r0, #1
 8012398:	4604      	mov	r4, r0
 801239a:	d158      	bne.n	801244e <_malloc_r+0xf6>
 801239c:	f8d8 4000 	ldr.w	r4, [r8]
 80123a0:	4627      	mov	r7, r4
 80123a2:	2f00      	cmp	r7, #0
 80123a4:	d143      	bne.n	801242e <_malloc_r+0xd6>
 80123a6:	2c00      	cmp	r4, #0
 80123a8:	d04b      	beq.n	8012442 <_malloc_r+0xea>
 80123aa:	6823      	ldr	r3, [r4, #0]
 80123ac:	4639      	mov	r1, r7
 80123ae:	4630      	mov	r0, r6
 80123b0:	eb04 0903 	add.w	r9, r4, r3
 80123b4:	f002 faea 	bl	801498c <_sbrk_r>
 80123b8:	4581      	cmp	r9, r0
 80123ba:	d142      	bne.n	8012442 <_malloc_r+0xea>
 80123bc:	6821      	ldr	r1, [r4, #0]
 80123be:	1a6d      	subs	r5, r5, r1
 80123c0:	4629      	mov	r1, r5
 80123c2:	4630      	mov	r0, r6
 80123c4:	f7ff ffa6 	bl	8012314 <sbrk_aligned>
 80123c8:	3001      	adds	r0, #1
 80123ca:	d03a      	beq.n	8012442 <_malloc_r+0xea>
 80123cc:	6823      	ldr	r3, [r4, #0]
 80123ce:	442b      	add	r3, r5
 80123d0:	6023      	str	r3, [r4, #0]
 80123d2:	f8d8 3000 	ldr.w	r3, [r8]
 80123d6:	685a      	ldr	r2, [r3, #4]
 80123d8:	bb62      	cbnz	r2, 8012434 <_malloc_r+0xdc>
 80123da:	f8c8 7000 	str.w	r7, [r8]
 80123de:	e00f      	b.n	8012400 <_malloc_r+0xa8>
 80123e0:	6822      	ldr	r2, [r4, #0]
 80123e2:	1b52      	subs	r2, r2, r5
 80123e4:	d420      	bmi.n	8012428 <_malloc_r+0xd0>
 80123e6:	2a0b      	cmp	r2, #11
 80123e8:	d917      	bls.n	801241a <_malloc_r+0xc2>
 80123ea:	1961      	adds	r1, r4, r5
 80123ec:	42a3      	cmp	r3, r4
 80123ee:	6025      	str	r5, [r4, #0]
 80123f0:	bf18      	it	ne
 80123f2:	6059      	strne	r1, [r3, #4]
 80123f4:	6863      	ldr	r3, [r4, #4]
 80123f6:	bf08      	it	eq
 80123f8:	f8c8 1000 	streq.w	r1, [r8]
 80123fc:	5162      	str	r2, [r4, r5]
 80123fe:	604b      	str	r3, [r1, #4]
 8012400:	4630      	mov	r0, r6
 8012402:	f000 f82f 	bl	8012464 <__malloc_unlock>
 8012406:	f104 000b 	add.w	r0, r4, #11
 801240a:	1d23      	adds	r3, r4, #4
 801240c:	f020 0007 	bic.w	r0, r0, #7
 8012410:	1ac2      	subs	r2, r0, r3
 8012412:	bf1c      	itt	ne
 8012414:	1a1b      	subne	r3, r3, r0
 8012416:	50a3      	strne	r3, [r4, r2]
 8012418:	e7af      	b.n	801237a <_malloc_r+0x22>
 801241a:	6862      	ldr	r2, [r4, #4]
 801241c:	42a3      	cmp	r3, r4
 801241e:	bf0c      	ite	eq
 8012420:	f8c8 2000 	streq.w	r2, [r8]
 8012424:	605a      	strne	r2, [r3, #4]
 8012426:	e7eb      	b.n	8012400 <_malloc_r+0xa8>
 8012428:	4623      	mov	r3, r4
 801242a:	6864      	ldr	r4, [r4, #4]
 801242c:	e7ae      	b.n	801238c <_malloc_r+0x34>
 801242e:	463c      	mov	r4, r7
 8012430:	687f      	ldr	r7, [r7, #4]
 8012432:	e7b6      	b.n	80123a2 <_malloc_r+0x4a>
 8012434:	461a      	mov	r2, r3
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	42a3      	cmp	r3, r4
 801243a:	d1fb      	bne.n	8012434 <_malloc_r+0xdc>
 801243c:	2300      	movs	r3, #0
 801243e:	6053      	str	r3, [r2, #4]
 8012440:	e7de      	b.n	8012400 <_malloc_r+0xa8>
 8012442:	230c      	movs	r3, #12
 8012444:	6033      	str	r3, [r6, #0]
 8012446:	4630      	mov	r0, r6
 8012448:	f000 f80c 	bl	8012464 <__malloc_unlock>
 801244c:	e794      	b.n	8012378 <_malloc_r+0x20>
 801244e:	6005      	str	r5, [r0, #0]
 8012450:	e7d6      	b.n	8012400 <_malloc_r+0xa8>
 8012452:	bf00      	nop
 8012454:	20000f6c 	.word	0x20000f6c

08012458 <__malloc_lock>:
 8012458:	4801      	ldr	r0, [pc, #4]	@ (8012460 <__malloc_lock+0x8>)
 801245a:	f002 bae5 	b.w	8014a28 <__retarget_lock_acquire_recursive>
 801245e:	bf00      	nop
 8012460:	200010b0 	.word	0x200010b0

08012464 <__malloc_unlock>:
 8012464:	4801      	ldr	r0, [pc, #4]	@ (801246c <__malloc_unlock+0x8>)
 8012466:	f002 bae0 	b.w	8014a2a <__retarget_lock_release_recursive>
 801246a:	bf00      	nop
 801246c:	200010b0 	.word	0x200010b0

08012470 <realloc>:
 8012470:	4b02      	ldr	r3, [pc, #8]	@ (801247c <realloc+0xc>)
 8012472:	460a      	mov	r2, r1
 8012474:	4601      	mov	r1, r0
 8012476:	6818      	ldr	r0, [r3, #0]
 8012478:	f000 b802 	b.w	8012480 <_realloc_r>
 801247c:	20000a84 	.word	0x20000a84

08012480 <_realloc_r>:
 8012480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012484:	4680      	mov	r8, r0
 8012486:	4615      	mov	r5, r2
 8012488:	460c      	mov	r4, r1
 801248a:	b921      	cbnz	r1, 8012496 <_realloc_r+0x16>
 801248c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012490:	4611      	mov	r1, r2
 8012492:	f7ff bf61 	b.w	8012358 <_malloc_r>
 8012496:	b92a      	cbnz	r2, 80124a4 <_realloc_r+0x24>
 8012498:	f003 f932 	bl	8015700 <_free_r>
 801249c:	2400      	movs	r4, #0
 801249e:	4620      	mov	r0, r4
 80124a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124a4:	f004 f974 	bl	8016790 <_malloc_usable_size_r>
 80124a8:	4285      	cmp	r5, r0
 80124aa:	4606      	mov	r6, r0
 80124ac:	d802      	bhi.n	80124b4 <_realloc_r+0x34>
 80124ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80124b2:	d8f4      	bhi.n	801249e <_realloc_r+0x1e>
 80124b4:	4629      	mov	r1, r5
 80124b6:	4640      	mov	r0, r8
 80124b8:	f7ff ff4e 	bl	8012358 <_malloc_r>
 80124bc:	4607      	mov	r7, r0
 80124be:	2800      	cmp	r0, #0
 80124c0:	d0ec      	beq.n	801249c <_realloc_r+0x1c>
 80124c2:	42b5      	cmp	r5, r6
 80124c4:	462a      	mov	r2, r5
 80124c6:	4621      	mov	r1, r4
 80124c8:	bf28      	it	cs
 80124ca:	4632      	movcs	r2, r6
 80124cc:	f002 faae 	bl	8014a2c <memcpy>
 80124d0:	4621      	mov	r1, r4
 80124d2:	4640      	mov	r0, r8
 80124d4:	f003 f914 	bl	8015700 <_free_r>
 80124d8:	463c      	mov	r4, r7
 80124da:	e7e0      	b.n	801249e <_realloc_r+0x1e>

080124dc <sulp>:
 80124dc:	b570      	push	{r4, r5, r6, lr}
 80124de:	4604      	mov	r4, r0
 80124e0:	460d      	mov	r5, r1
 80124e2:	ec45 4b10 	vmov	d0, r4, r5
 80124e6:	4616      	mov	r6, r2
 80124e8:	f004 f814 	bl	8016514 <__ulp>
 80124ec:	ec51 0b10 	vmov	r0, r1, d0
 80124f0:	b17e      	cbz	r6, 8012512 <sulp+0x36>
 80124f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80124f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	dd09      	ble.n	8012512 <sulp+0x36>
 80124fe:	051b      	lsls	r3, r3, #20
 8012500:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012504:	2400      	movs	r4, #0
 8012506:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801250a:	4622      	mov	r2, r4
 801250c:	462b      	mov	r3, r5
 801250e:	f7fa fefb 	bl	800d308 <__aeabi_dmul>
 8012512:	ec41 0b10 	vmov	d0, r0, r1
 8012516:	bd70      	pop	{r4, r5, r6, pc}

08012518 <_strtod_l>:
 8012518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801251c:	b09f      	sub	sp, #124	@ 0x7c
 801251e:	460c      	mov	r4, r1
 8012520:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012522:	2200      	movs	r2, #0
 8012524:	921a      	str	r2, [sp, #104]	@ 0x68
 8012526:	9005      	str	r0, [sp, #20]
 8012528:	f04f 0a00 	mov.w	sl, #0
 801252c:	f04f 0b00 	mov.w	fp, #0
 8012530:	460a      	mov	r2, r1
 8012532:	9219      	str	r2, [sp, #100]	@ 0x64
 8012534:	7811      	ldrb	r1, [r2, #0]
 8012536:	292b      	cmp	r1, #43	@ 0x2b
 8012538:	d04a      	beq.n	80125d0 <_strtod_l+0xb8>
 801253a:	d838      	bhi.n	80125ae <_strtod_l+0x96>
 801253c:	290d      	cmp	r1, #13
 801253e:	d832      	bhi.n	80125a6 <_strtod_l+0x8e>
 8012540:	2908      	cmp	r1, #8
 8012542:	d832      	bhi.n	80125aa <_strtod_l+0x92>
 8012544:	2900      	cmp	r1, #0
 8012546:	d03b      	beq.n	80125c0 <_strtod_l+0xa8>
 8012548:	2200      	movs	r2, #0
 801254a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801254c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801254e:	782a      	ldrb	r2, [r5, #0]
 8012550:	2a30      	cmp	r2, #48	@ 0x30
 8012552:	f040 80b3 	bne.w	80126bc <_strtod_l+0x1a4>
 8012556:	786a      	ldrb	r2, [r5, #1]
 8012558:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801255c:	2a58      	cmp	r2, #88	@ 0x58
 801255e:	d16e      	bne.n	801263e <_strtod_l+0x126>
 8012560:	9302      	str	r3, [sp, #8]
 8012562:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012564:	9301      	str	r3, [sp, #4]
 8012566:	ab1a      	add	r3, sp, #104	@ 0x68
 8012568:	9300      	str	r3, [sp, #0]
 801256a:	4a8e      	ldr	r2, [pc, #568]	@ (80127a4 <_strtod_l+0x28c>)
 801256c:	9805      	ldr	r0, [sp, #20]
 801256e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012570:	a919      	add	r1, sp, #100	@ 0x64
 8012572:	f003 f977 	bl	8015864 <__gethex>
 8012576:	f010 060f 	ands.w	r6, r0, #15
 801257a:	4604      	mov	r4, r0
 801257c:	d005      	beq.n	801258a <_strtod_l+0x72>
 801257e:	2e06      	cmp	r6, #6
 8012580:	d128      	bne.n	80125d4 <_strtod_l+0xbc>
 8012582:	3501      	adds	r5, #1
 8012584:	2300      	movs	r3, #0
 8012586:	9519      	str	r5, [sp, #100]	@ 0x64
 8012588:	930b      	str	r3, [sp, #44]	@ 0x2c
 801258a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801258c:	2b00      	cmp	r3, #0
 801258e:	f040 858e 	bne.w	80130ae <_strtod_l+0xb96>
 8012592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012594:	b1cb      	cbz	r3, 80125ca <_strtod_l+0xb2>
 8012596:	4652      	mov	r2, sl
 8012598:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801259c:	ec43 2b10 	vmov	d0, r2, r3
 80125a0:	b01f      	add	sp, #124	@ 0x7c
 80125a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125a6:	2920      	cmp	r1, #32
 80125a8:	d1ce      	bne.n	8012548 <_strtod_l+0x30>
 80125aa:	3201      	adds	r2, #1
 80125ac:	e7c1      	b.n	8012532 <_strtod_l+0x1a>
 80125ae:	292d      	cmp	r1, #45	@ 0x2d
 80125b0:	d1ca      	bne.n	8012548 <_strtod_l+0x30>
 80125b2:	2101      	movs	r1, #1
 80125b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80125b6:	1c51      	adds	r1, r2, #1
 80125b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80125ba:	7852      	ldrb	r2, [r2, #1]
 80125bc:	2a00      	cmp	r2, #0
 80125be:	d1c5      	bne.n	801254c <_strtod_l+0x34>
 80125c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80125c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	f040 8570 	bne.w	80130aa <_strtod_l+0xb92>
 80125ca:	4652      	mov	r2, sl
 80125cc:	465b      	mov	r3, fp
 80125ce:	e7e5      	b.n	801259c <_strtod_l+0x84>
 80125d0:	2100      	movs	r1, #0
 80125d2:	e7ef      	b.n	80125b4 <_strtod_l+0x9c>
 80125d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80125d6:	b13a      	cbz	r2, 80125e8 <_strtod_l+0xd0>
 80125d8:	2135      	movs	r1, #53	@ 0x35
 80125da:	a81c      	add	r0, sp, #112	@ 0x70
 80125dc:	f004 f894 	bl	8016708 <__copybits>
 80125e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80125e2:	9805      	ldr	r0, [sp, #20]
 80125e4:	f003 fc62 	bl	8015eac <_Bfree>
 80125e8:	3e01      	subs	r6, #1
 80125ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80125ec:	2e04      	cmp	r6, #4
 80125ee:	d806      	bhi.n	80125fe <_strtod_l+0xe6>
 80125f0:	e8df f006 	tbb	[pc, r6]
 80125f4:	201d0314 	.word	0x201d0314
 80125f8:	14          	.byte	0x14
 80125f9:	00          	.byte	0x00
 80125fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80125fe:	05e1      	lsls	r1, r4, #23
 8012600:	bf48      	it	mi
 8012602:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012606:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801260a:	0d1b      	lsrs	r3, r3, #20
 801260c:	051b      	lsls	r3, r3, #20
 801260e:	2b00      	cmp	r3, #0
 8012610:	d1bb      	bne.n	801258a <_strtod_l+0x72>
 8012612:	f002 f9dd 	bl	80149d0 <__errno>
 8012616:	2322      	movs	r3, #34	@ 0x22
 8012618:	6003      	str	r3, [r0, #0]
 801261a:	e7b6      	b.n	801258a <_strtod_l+0x72>
 801261c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012620:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012624:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012628:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801262c:	e7e7      	b.n	80125fe <_strtod_l+0xe6>
 801262e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80127ac <_strtod_l+0x294>
 8012632:	e7e4      	b.n	80125fe <_strtod_l+0xe6>
 8012634:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012638:	f04f 3aff 	mov.w	sl, #4294967295
 801263c:	e7df      	b.n	80125fe <_strtod_l+0xe6>
 801263e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012640:	1c5a      	adds	r2, r3, #1
 8012642:	9219      	str	r2, [sp, #100]	@ 0x64
 8012644:	785b      	ldrb	r3, [r3, #1]
 8012646:	2b30      	cmp	r3, #48	@ 0x30
 8012648:	d0f9      	beq.n	801263e <_strtod_l+0x126>
 801264a:	2b00      	cmp	r3, #0
 801264c:	d09d      	beq.n	801258a <_strtod_l+0x72>
 801264e:	2301      	movs	r3, #1
 8012650:	9309      	str	r3, [sp, #36]	@ 0x24
 8012652:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012654:	930c      	str	r3, [sp, #48]	@ 0x30
 8012656:	2300      	movs	r3, #0
 8012658:	9308      	str	r3, [sp, #32]
 801265a:	930a      	str	r3, [sp, #40]	@ 0x28
 801265c:	461f      	mov	r7, r3
 801265e:	220a      	movs	r2, #10
 8012660:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012662:	7805      	ldrb	r5, [r0, #0]
 8012664:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012668:	b2d9      	uxtb	r1, r3
 801266a:	2909      	cmp	r1, #9
 801266c:	d928      	bls.n	80126c0 <_strtod_l+0x1a8>
 801266e:	494e      	ldr	r1, [pc, #312]	@ (80127a8 <_strtod_l+0x290>)
 8012670:	2201      	movs	r2, #1
 8012672:	f002 f92f 	bl	80148d4 <strncmp>
 8012676:	2800      	cmp	r0, #0
 8012678:	d032      	beq.n	80126e0 <_strtod_l+0x1c8>
 801267a:	2000      	movs	r0, #0
 801267c:	462a      	mov	r2, r5
 801267e:	4681      	mov	r9, r0
 8012680:	463d      	mov	r5, r7
 8012682:	4603      	mov	r3, r0
 8012684:	2a65      	cmp	r2, #101	@ 0x65
 8012686:	d001      	beq.n	801268c <_strtod_l+0x174>
 8012688:	2a45      	cmp	r2, #69	@ 0x45
 801268a:	d114      	bne.n	80126b6 <_strtod_l+0x19e>
 801268c:	b91d      	cbnz	r5, 8012696 <_strtod_l+0x17e>
 801268e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012690:	4302      	orrs	r2, r0
 8012692:	d095      	beq.n	80125c0 <_strtod_l+0xa8>
 8012694:	2500      	movs	r5, #0
 8012696:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012698:	1c62      	adds	r2, r4, #1
 801269a:	9219      	str	r2, [sp, #100]	@ 0x64
 801269c:	7862      	ldrb	r2, [r4, #1]
 801269e:	2a2b      	cmp	r2, #43	@ 0x2b
 80126a0:	d077      	beq.n	8012792 <_strtod_l+0x27a>
 80126a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80126a4:	d07b      	beq.n	801279e <_strtod_l+0x286>
 80126a6:	f04f 0c00 	mov.w	ip, #0
 80126aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80126ae:	2909      	cmp	r1, #9
 80126b0:	f240 8082 	bls.w	80127b8 <_strtod_l+0x2a0>
 80126b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80126b6:	f04f 0800 	mov.w	r8, #0
 80126ba:	e0a2      	b.n	8012802 <_strtod_l+0x2ea>
 80126bc:	2300      	movs	r3, #0
 80126be:	e7c7      	b.n	8012650 <_strtod_l+0x138>
 80126c0:	2f08      	cmp	r7, #8
 80126c2:	bfd5      	itete	le
 80126c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80126c6:	9908      	ldrgt	r1, [sp, #32]
 80126c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80126cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80126d0:	f100 0001 	add.w	r0, r0, #1
 80126d4:	bfd4      	ite	le
 80126d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80126d8:	9308      	strgt	r3, [sp, #32]
 80126da:	3701      	adds	r7, #1
 80126dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80126de:	e7bf      	b.n	8012660 <_strtod_l+0x148>
 80126e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80126e2:	1c5a      	adds	r2, r3, #1
 80126e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80126e6:	785a      	ldrb	r2, [r3, #1]
 80126e8:	b37f      	cbz	r7, 801274a <_strtod_l+0x232>
 80126ea:	4681      	mov	r9, r0
 80126ec:	463d      	mov	r5, r7
 80126ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80126f2:	2b09      	cmp	r3, #9
 80126f4:	d912      	bls.n	801271c <_strtod_l+0x204>
 80126f6:	2301      	movs	r3, #1
 80126f8:	e7c4      	b.n	8012684 <_strtod_l+0x16c>
 80126fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80126fc:	1c5a      	adds	r2, r3, #1
 80126fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8012700:	785a      	ldrb	r2, [r3, #1]
 8012702:	3001      	adds	r0, #1
 8012704:	2a30      	cmp	r2, #48	@ 0x30
 8012706:	d0f8      	beq.n	80126fa <_strtod_l+0x1e2>
 8012708:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801270c:	2b08      	cmp	r3, #8
 801270e:	f200 84d3 	bhi.w	80130b8 <_strtod_l+0xba0>
 8012712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012714:	930c      	str	r3, [sp, #48]	@ 0x30
 8012716:	4681      	mov	r9, r0
 8012718:	2000      	movs	r0, #0
 801271a:	4605      	mov	r5, r0
 801271c:	3a30      	subs	r2, #48	@ 0x30
 801271e:	f100 0301 	add.w	r3, r0, #1
 8012722:	d02a      	beq.n	801277a <_strtod_l+0x262>
 8012724:	4499      	add	r9, r3
 8012726:	eb00 0c05 	add.w	ip, r0, r5
 801272a:	462b      	mov	r3, r5
 801272c:	210a      	movs	r1, #10
 801272e:	4563      	cmp	r3, ip
 8012730:	d10d      	bne.n	801274e <_strtod_l+0x236>
 8012732:	1c69      	adds	r1, r5, #1
 8012734:	4401      	add	r1, r0
 8012736:	4428      	add	r0, r5
 8012738:	2808      	cmp	r0, #8
 801273a:	dc16      	bgt.n	801276a <_strtod_l+0x252>
 801273c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801273e:	230a      	movs	r3, #10
 8012740:	fb03 2300 	mla	r3, r3, r0, r2
 8012744:	930a      	str	r3, [sp, #40]	@ 0x28
 8012746:	2300      	movs	r3, #0
 8012748:	e018      	b.n	801277c <_strtod_l+0x264>
 801274a:	4638      	mov	r0, r7
 801274c:	e7da      	b.n	8012704 <_strtod_l+0x1ec>
 801274e:	2b08      	cmp	r3, #8
 8012750:	f103 0301 	add.w	r3, r3, #1
 8012754:	dc03      	bgt.n	801275e <_strtod_l+0x246>
 8012756:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012758:	434e      	muls	r6, r1
 801275a:	960a      	str	r6, [sp, #40]	@ 0x28
 801275c:	e7e7      	b.n	801272e <_strtod_l+0x216>
 801275e:	2b10      	cmp	r3, #16
 8012760:	bfde      	ittt	le
 8012762:	9e08      	ldrle	r6, [sp, #32]
 8012764:	434e      	mulle	r6, r1
 8012766:	9608      	strle	r6, [sp, #32]
 8012768:	e7e1      	b.n	801272e <_strtod_l+0x216>
 801276a:	280f      	cmp	r0, #15
 801276c:	dceb      	bgt.n	8012746 <_strtod_l+0x22e>
 801276e:	9808      	ldr	r0, [sp, #32]
 8012770:	230a      	movs	r3, #10
 8012772:	fb03 2300 	mla	r3, r3, r0, r2
 8012776:	9308      	str	r3, [sp, #32]
 8012778:	e7e5      	b.n	8012746 <_strtod_l+0x22e>
 801277a:	4629      	mov	r1, r5
 801277c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801277e:	1c50      	adds	r0, r2, #1
 8012780:	9019      	str	r0, [sp, #100]	@ 0x64
 8012782:	7852      	ldrb	r2, [r2, #1]
 8012784:	4618      	mov	r0, r3
 8012786:	460d      	mov	r5, r1
 8012788:	e7b1      	b.n	80126ee <_strtod_l+0x1d6>
 801278a:	f04f 0900 	mov.w	r9, #0
 801278e:	2301      	movs	r3, #1
 8012790:	e77d      	b.n	801268e <_strtod_l+0x176>
 8012792:	f04f 0c00 	mov.w	ip, #0
 8012796:	1ca2      	adds	r2, r4, #2
 8012798:	9219      	str	r2, [sp, #100]	@ 0x64
 801279a:	78a2      	ldrb	r2, [r4, #2]
 801279c:	e785      	b.n	80126aa <_strtod_l+0x192>
 801279e:	f04f 0c01 	mov.w	ip, #1
 80127a2:	e7f8      	b.n	8012796 <_strtod_l+0x27e>
 80127a4:	0801a23c 	.word	0x0801a23c
 80127a8:	0801a224 	.word	0x0801a224
 80127ac:	7ff00000 	.word	0x7ff00000
 80127b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80127b2:	1c51      	adds	r1, r2, #1
 80127b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80127b6:	7852      	ldrb	r2, [r2, #1]
 80127b8:	2a30      	cmp	r2, #48	@ 0x30
 80127ba:	d0f9      	beq.n	80127b0 <_strtod_l+0x298>
 80127bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80127c0:	2908      	cmp	r1, #8
 80127c2:	f63f af78 	bhi.w	80126b6 <_strtod_l+0x19e>
 80127c6:	3a30      	subs	r2, #48	@ 0x30
 80127c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80127ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80127cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80127ce:	f04f 080a 	mov.w	r8, #10
 80127d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80127d4:	1c56      	adds	r6, r2, #1
 80127d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80127d8:	7852      	ldrb	r2, [r2, #1]
 80127da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80127de:	f1be 0f09 	cmp.w	lr, #9
 80127e2:	d939      	bls.n	8012858 <_strtod_l+0x340>
 80127e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80127e6:	1a76      	subs	r6, r6, r1
 80127e8:	2e08      	cmp	r6, #8
 80127ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80127ee:	dc03      	bgt.n	80127f8 <_strtod_l+0x2e0>
 80127f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80127f2:	4588      	cmp	r8, r1
 80127f4:	bfa8      	it	ge
 80127f6:	4688      	movge	r8, r1
 80127f8:	f1bc 0f00 	cmp.w	ip, #0
 80127fc:	d001      	beq.n	8012802 <_strtod_l+0x2ea>
 80127fe:	f1c8 0800 	rsb	r8, r8, #0
 8012802:	2d00      	cmp	r5, #0
 8012804:	d14e      	bne.n	80128a4 <_strtod_l+0x38c>
 8012806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012808:	4308      	orrs	r0, r1
 801280a:	f47f aebe 	bne.w	801258a <_strtod_l+0x72>
 801280e:	2b00      	cmp	r3, #0
 8012810:	f47f aed6 	bne.w	80125c0 <_strtod_l+0xa8>
 8012814:	2a69      	cmp	r2, #105	@ 0x69
 8012816:	d028      	beq.n	801286a <_strtod_l+0x352>
 8012818:	dc25      	bgt.n	8012866 <_strtod_l+0x34e>
 801281a:	2a49      	cmp	r2, #73	@ 0x49
 801281c:	d025      	beq.n	801286a <_strtod_l+0x352>
 801281e:	2a4e      	cmp	r2, #78	@ 0x4e
 8012820:	f47f aece 	bne.w	80125c0 <_strtod_l+0xa8>
 8012824:	499b      	ldr	r1, [pc, #620]	@ (8012a94 <_strtod_l+0x57c>)
 8012826:	a819      	add	r0, sp, #100	@ 0x64
 8012828:	f003 fa3e 	bl	8015ca8 <__match>
 801282c:	2800      	cmp	r0, #0
 801282e:	f43f aec7 	beq.w	80125c0 <_strtod_l+0xa8>
 8012832:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	2b28      	cmp	r3, #40	@ 0x28
 8012838:	d12e      	bne.n	8012898 <_strtod_l+0x380>
 801283a:	4997      	ldr	r1, [pc, #604]	@ (8012a98 <_strtod_l+0x580>)
 801283c:	aa1c      	add	r2, sp, #112	@ 0x70
 801283e:	a819      	add	r0, sp, #100	@ 0x64
 8012840:	f003 fa46 	bl	8015cd0 <__hexnan>
 8012844:	2805      	cmp	r0, #5
 8012846:	d127      	bne.n	8012898 <_strtod_l+0x380>
 8012848:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801284a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801284e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012852:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012856:	e698      	b.n	801258a <_strtod_l+0x72>
 8012858:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801285a:	fb08 2101 	mla	r1, r8, r1, r2
 801285e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8012862:	920e      	str	r2, [sp, #56]	@ 0x38
 8012864:	e7b5      	b.n	80127d2 <_strtod_l+0x2ba>
 8012866:	2a6e      	cmp	r2, #110	@ 0x6e
 8012868:	e7da      	b.n	8012820 <_strtod_l+0x308>
 801286a:	498c      	ldr	r1, [pc, #560]	@ (8012a9c <_strtod_l+0x584>)
 801286c:	a819      	add	r0, sp, #100	@ 0x64
 801286e:	f003 fa1b 	bl	8015ca8 <__match>
 8012872:	2800      	cmp	r0, #0
 8012874:	f43f aea4 	beq.w	80125c0 <_strtod_l+0xa8>
 8012878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801287a:	4989      	ldr	r1, [pc, #548]	@ (8012aa0 <_strtod_l+0x588>)
 801287c:	3b01      	subs	r3, #1
 801287e:	a819      	add	r0, sp, #100	@ 0x64
 8012880:	9319      	str	r3, [sp, #100]	@ 0x64
 8012882:	f003 fa11 	bl	8015ca8 <__match>
 8012886:	b910      	cbnz	r0, 801288e <_strtod_l+0x376>
 8012888:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801288a:	3301      	adds	r3, #1
 801288c:	9319      	str	r3, [sp, #100]	@ 0x64
 801288e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8012ab0 <_strtod_l+0x598>
 8012892:	f04f 0a00 	mov.w	sl, #0
 8012896:	e678      	b.n	801258a <_strtod_l+0x72>
 8012898:	4882      	ldr	r0, [pc, #520]	@ (8012aa4 <_strtod_l+0x58c>)
 801289a:	f002 f8d5 	bl	8014a48 <nan>
 801289e:	ec5b ab10 	vmov	sl, fp, d0
 80128a2:	e672      	b.n	801258a <_strtod_l+0x72>
 80128a4:	eba8 0309 	sub.w	r3, r8, r9
 80128a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80128aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80128ac:	2f00      	cmp	r7, #0
 80128ae:	bf08      	it	eq
 80128b0:	462f      	moveq	r7, r5
 80128b2:	2d10      	cmp	r5, #16
 80128b4:	462c      	mov	r4, r5
 80128b6:	bfa8      	it	ge
 80128b8:	2410      	movge	r4, #16
 80128ba:	f7fa fcab 	bl	800d214 <__aeabi_ui2d>
 80128be:	2d09      	cmp	r5, #9
 80128c0:	4682      	mov	sl, r0
 80128c2:	468b      	mov	fp, r1
 80128c4:	dc13      	bgt.n	80128ee <_strtod_l+0x3d6>
 80128c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	f43f ae5e 	beq.w	801258a <_strtod_l+0x72>
 80128ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128d0:	dd78      	ble.n	80129c4 <_strtod_l+0x4ac>
 80128d2:	2b16      	cmp	r3, #22
 80128d4:	dc5f      	bgt.n	8012996 <_strtod_l+0x47e>
 80128d6:	4974      	ldr	r1, [pc, #464]	@ (8012aa8 <_strtod_l+0x590>)
 80128d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80128dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128e0:	4652      	mov	r2, sl
 80128e2:	465b      	mov	r3, fp
 80128e4:	f7fa fd10 	bl	800d308 <__aeabi_dmul>
 80128e8:	4682      	mov	sl, r0
 80128ea:	468b      	mov	fp, r1
 80128ec:	e64d      	b.n	801258a <_strtod_l+0x72>
 80128ee:	4b6e      	ldr	r3, [pc, #440]	@ (8012aa8 <_strtod_l+0x590>)
 80128f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80128f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80128f8:	f7fa fd06 	bl	800d308 <__aeabi_dmul>
 80128fc:	4682      	mov	sl, r0
 80128fe:	9808      	ldr	r0, [sp, #32]
 8012900:	468b      	mov	fp, r1
 8012902:	f7fa fc87 	bl	800d214 <__aeabi_ui2d>
 8012906:	4602      	mov	r2, r0
 8012908:	460b      	mov	r3, r1
 801290a:	4650      	mov	r0, sl
 801290c:	4659      	mov	r1, fp
 801290e:	f7fa fb45 	bl	800cf9c <__adddf3>
 8012912:	2d0f      	cmp	r5, #15
 8012914:	4682      	mov	sl, r0
 8012916:	468b      	mov	fp, r1
 8012918:	ddd5      	ble.n	80128c6 <_strtod_l+0x3ae>
 801291a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801291c:	1b2c      	subs	r4, r5, r4
 801291e:	441c      	add	r4, r3
 8012920:	2c00      	cmp	r4, #0
 8012922:	f340 8096 	ble.w	8012a52 <_strtod_l+0x53a>
 8012926:	f014 030f 	ands.w	r3, r4, #15
 801292a:	d00a      	beq.n	8012942 <_strtod_l+0x42a>
 801292c:	495e      	ldr	r1, [pc, #376]	@ (8012aa8 <_strtod_l+0x590>)
 801292e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012932:	4652      	mov	r2, sl
 8012934:	465b      	mov	r3, fp
 8012936:	e9d1 0100 	ldrd	r0, r1, [r1]
 801293a:	f7fa fce5 	bl	800d308 <__aeabi_dmul>
 801293e:	4682      	mov	sl, r0
 8012940:	468b      	mov	fp, r1
 8012942:	f034 040f 	bics.w	r4, r4, #15
 8012946:	d073      	beq.n	8012a30 <_strtod_l+0x518>
 8012948:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801294c:	dd48      	ble.n	80129e0 <_strtod_l+0x4c8>
 801294e:	2400      	movs	r4, #0
 8012950:	46a0      	mov	r8, r4
 8012952:	940a      	str	r4, [sp, #40]	@ 0x28
 8012954:	46a1      	mov	r9, r4
 8012956:	9a05      	ldr	r2, [sp, #20]
 8012958:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8012ab0 <_strtod_l+0x598>
 801295c:	2322      	movs	r3, #34	@ 0x22
 801295e:	6013      	str	r3, [r2, #0]
 8012960:	f04f 0a00 	mov.w	sl, #0
 8012964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012966:	2b00      	cmp	r3, #0
 8012968:	f43f ae0f 	beq.w	801258a <_strtod_l+0x72>
 801296c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801296e:	9805      	ldr	r0, [sp, #20]
 8012970:	f003 fa9c 	bl	8015eac <_Bfree>
 8012974:	9805      	ldr	r0, [sp, #20]
 8012976:	4649      	mov	r1, r9
 8012978:	f003 fa98 	bl	8015eac <_Bfree>
 801297c:	9805      	ldr	r0, [sp, #20]
 801297e:	4641      	mov	r1, r8
 8012980:	f003 fa94 	bl	8015eac <_Bfree>
 8012984:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012986:	9805      	ldr	r0, [sp, #20]
 8012988:	f003 fa90 	bl	8015eac <_Bfree>
 801298c:	9805      	ldr	r0, [sp, #20]
 801298e:	4621      	mov	r1, r4
 8012990:	f003 fa8c 	bl	8015eac <_Bfree>
 8012994:	e5f9      	b.n	801258a <_strtod_l+0x72>
 8012996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012998:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801299c:	4293      	cmp	r3, r2
 801299e:	dbbc      	blt.n	801291a <_strtod_l+0x402>
 80129a0:	4c41      	ldr	r4, [pc, #260]	@ (8012aa8 <_strtod_l+0x590>)
 80129a2:	f1c5 050f 	rsb	r5, r5, #15
 80129a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80129aa:	4652      	mov	r2, sl
 80129ac:	465b      	mov	r3, fp
 80129ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129b2:	f7fa fca9 	bl	800d308 <__aeabi_dmul>
 80129b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129b8:	1b5d      	subs	r5, r3, r5
 80129ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80129be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80129c2:	e78f      	b.n	80128e4 <_strtod_l+0x3cc>
 80129c4:	3316      	adds	r3, #22
 80129c6:	dba8      	blt.n	801291a <_strtod_l+0x402>
 80129c8:	4b37      	ldr	r3, [pc, #220]	@ (8012aa8 <_strtod_l+0x590>)
 80129ca:	eba9 0808 	sub.w	r8, r9, r8
 80129ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80129d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80129d6:	4650      	mov	r0, sl
 80129d8:	4659      	mov	r1, fp
 80129da:	f7fa fdbf 	bl	800d55c <__aeabi_ddiv>
 80129de:	e783      	b.n	80128e8 <_strtod_l+0x3d0>
 80129e0:	4b32      	ldr	r3, [pc, #200]	@ (8012aac <_strtod_l+0x594>)
 80129e2:	9308      	str	r3, [sp, #32]
 80129e4:	2300      	movs	r3, #0
 80129e6:	1124      	asrs	r4, r4, #4
 80129e8:	4650      	mov	r0, sl
 80129ea:	4659      	mov	r1, fp
 80129ec:	461e      	mov	r6, r3
 80129ee:	2c01      	cmp	r4, #1
 80129f0:	dc21      	bgt.n	8012a36 <_strtod_l+0x51e>
 80129f2:	b10b      	cbz	r3, 80129f8 <_strtod_l+0x4e0>
 80129f4:	4682      	mov	sl, r0
 80129f6:	468b      	mov	fp, r1
 80129f8:	492c      	ldr	r1, [pc, #176]	@ (8012aac <_strtod_l+0x594>)
 80129fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80129fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012a02:	4652      	mov	r2, sl
 8012a04:	465b      	mov	r3, fp
 8012a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a0a:	f7fa fc7d 	bl	800d308 <__aeabi_dmul>
 8012a0e:	4b28      	ldr	r3, [pc, #160]	@ (8012ab0 <_strtod_l+0x598>)
 8012a10:	460a      	mov	r2, r1
 8012a12:	400b      	ands	r3, r1
 8012a14:	4927      	ldr	r1, [pc, #156]	@ (8012ab4 <_strtod_l+0x59c>)
 8012a16:	428b      	cmp	r3, r1
 8012a18:	4682      	mov	sl, r0
 8012a1a:	d898      	bhi.n	801294e <_strtod_l+0x436>
 8012a1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012a20:	428b      	cmp	r3, r1
 8012a22:	bf86      	itte	hi
 8012a24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8012ab8 <_strtod_l+0x5a0>
 8012a28:	f04f 3aff 	movhi.w	sl, #4294967295
 8012a2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012a30:	2300      	movs	r3, #0
 8012a32:	9308      	str	r3, [sp, #32]
 8012a34:	e07a      	b.n	8012b2c <_strtod_l+0x614>
 8012a36:	07e2      	lsls	r2, r4, #31
 8012a38:	d505      	bpl.n	8012a46 <_strtod_l+0x52e>
 8012a3a:	9b08      	ldr	r3, [sp, #32]
 8012a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a40:	f7fa fc62 	bl	800d308 <__aeabi_dmul>
 8012a44:	2301      	movs	r3, #1
 8012a46:	9a08      	ldr	r2, [sp, #32]
 8012a48:	3208      	adds	r2, #8
 8012a4a:	3601      	adds	r6, #1
 8012a4c:	1064      	asrs	r4, r4, #1
 8012a4e:	9208      	str	r2, [sp, #32]
 8012a50:	e7cd      	b.n	80129ee <_strtod_l+0x4d6>
 8012a52:	d0ed      	beq.n	8012a30 <_strtod_l+0x518>
 8012a54:	4264      	negs	r4, r4
 8012a56:	f014 020f 	ands.w	r2, r4, #15
 8012a5a:	d00a      	beq.n	8012a72 <_strtod_l+0x55a>
 8012a5c:	4b12      	ldr	r3, [pc, #72]	@ (8012aa8 <_strtod_l+0x590>)
 8012a5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a62:	4650      	mov	r0, sl
 8012a64:	4659      	mov	r1, fp
 8012a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6a:	f7fa fd77 	bl	800d55c <__aeabi_ddiv>
 8012a6e:	4682      	mov	sl, r0
 8012a70:	468b      	mov	fp, r1
 8012a72:	1124      	asrs	r4, r4, #4
 8012a74:	d0dc      	beq.n	8012a30 <_strtod_l+0x518>
 8012a76:	2c1f      	cmp	r4, #31
 8012a78:	dd20      	ble.n	8012abc <_strtod_l+0x5a4>
 8012a7a:	2400      	movs	r4, #0
 8012a7c:	46a0      	mov	r8, r4
 8012a7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8012a80:	46a1      	mov	r9, r4
 8012a82:	9a05      	ldr	r2, [sp, #20]
 8012a84:	2322      	movs	r3, #34	@ 0x22
 8012a86:	f04f 0a00 	mov.w	sl, #0
 8012a8a:	f04f 0b00 	mov.w	fp, #0
 8012a8e:	6013      	str	r3, [r2, #0]
 8012a90:	e768      	b.n	8012964 <_strtod_l+0x44c>
 8012a92:	bf00      	nop
 8012a94:	0801a386 	.word	0x0801a386
 8012a98:	0801a228 	.word	0x0801a228
 8012a9c:	0801a37e 	.word	0x0801a37e
 8012aa0:	0801a3bd 	.word	0x0801a3bd
 8012aa4:	0801a64c 	.word	0x0801a64c
 8012aa8:	0801a538 	.word	0x0801a538
 8012aac:	0801a510 	.word	0x0801a510
 8012ab0:	7ff00000 	.word	0x7ff00000
 8012ab4:	7ca00000 	.word	0x7ca00000
 8012ab8:	7fefffff 	.word	0x7fefffff
 8012abc:	f014 0310 	ands.w	r3, r4, #16
 8012ac0:	bf18      	it	ne
 8012ac2:	236a      	movne	r3, #106	@ 0x6a
 8012ac4:	4ea9      	ldr	r6, [pc, #676]	@ (8012d6c <_strtod_l+0x854>)
 8012ac6:	9308      	str	r3, [sp, #32]
 8012ac8:	4650      	mov	r0, sl
 8012aca:	4659      	mov	r1, fp
 8012acc:	2300      	movs	r3, #0
 8012ace:	07e2      	lsls	r2, r4, #31
 8012ad0:	d504      	bpl.n	8012adc <_strtod_l+0x5c4>
 8012ad2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012ad6:	f7fa fc17 	bl	800d308 <__aeabi_dmul>
 8012ada:	2301      	movs	r3, #1
 8012adc:	1064      	asrs	r4, r4, #1
 8012ade:	f106 0608 	add.w	r6, r6, #8
 8012ae2:	d1f4      	bne.n	8012ace <_strtod_l+0x5b6>
 8012ae4:	b10b      	cbz	r3, 8012aea <_strtod_l+0x5d2>
 8012ae6:	4682      	mov	sl, r0
 8012ae8:	468b      	mov	fp, r1
 8012aea:	9b08      	ldr	r3, [sp, #32]
 8012aec:	b1b3      	cbz	r3, 8012b1c <_strtod_l+0x604>
 8012aee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012af2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	4659      	mov	r1, fp
 8012afa:	dd0f      	ble.n	8012b1c <_strtod_l+0x604>
 8012afc:	2b1f      	cmp	r3, #31
 8012afe:	dd55      	ble.n	8012bac <_strtod_l+0x694>
 8012b00:	2b34      	cmp	r3, #52	@ 0x34
 8012b02:	bfde      	ittt	le
 8012b04:	f04f 33ff 	movle.w	r3, #4294967295
 8012b08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8012b0c:	4093      	lslle	r3, r2
 8012b0e:	f04f 0a00 	mov.w	sl, #0
 8012b12:	bfcc      	ite	gt
 8012b14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012b18:	ea03 0b01 	andle.w	fp, r3, r1
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	2300      	movs	r3, #0
 8012b20:	4650      	mov	r0, sl
 8012b22:	4659      	mov	r1, fp
 8012b24:	f7fa fe58 	bl	800d7d8 <__aeabi_dcmpeq>
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	d1a6      	bne.n	8012a7a <_strtod_l+0x562>
 8012b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b2e:	9300      	str	r3, [sp, #0]
 8012b30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012b32:	9805      	ldr	r0, [sp, #20]
 8012b34:	462b      	mov	r3, r5
 8012b36:	463a      	mov	r2, r7
 8012b38:	f003 fa20 	bl	8015f7c <__s2b>
 8012b3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8012b3e:	2800      	cmp	r0, #0
 8012b40:	f43f af05 	beq.w	801294e <_strtod_l+0x436>
 8012b44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b46:	2a00      	cmp	r2, #0
 8012b48:	eba9 0308 	sub.w	r3, r9, r8
 8012b4c:	bfa8      	it	ge
 8012b4e:	2300      	movge	r3, #0
 8012b50:	9312      	str	r3, [sp, #72]	@ 0x48
 8012b52:	2400      	movs	r4, #0
 8012b54:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012b58:	9316      	str	r3, [sp, #88]	@ 0x58
 8012b5a:	46a0      	mov	r8, r4
 8012b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b5e:	9805      	ldr	r0, [sp, #20]
 8012b60:	6859      	ldr	r1, [r3, #4]
 8012b62:	f003 f963 	bl	8015e2c <_Balloc>
 8012b66:	4681      	mov	r9, r0
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	f43f aef4 	beq.w	8012956 <_strtod_l+0x43e>
 8012b6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b70:	691a      	ldr	r2, [r3, #16]
 8012b72:	3202      	adds	r2, #2
 8012b74:	f103 010c 	add.w	r1, r3, #12
 8012b78:	0092      	lsls	r2, r2, #2
 8012b7a:	300c      	adds	r0, #12
 8012b7c:	f001 ff56 	bl	8014a2c <memcpy>
 8012b80:	ec4b ab10 	vmov	d0, sl, fp
 8012b84:	9805      	ldr	r0, [sp, #20]
 8012b86:	aa1c      	add	r2, sp, #112	@ 0x70
 8012b88:	a91b      	add	r1, sp, #108	@ 0x6c
 8012b8a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8012b8e:	f003 fd31 	bl	80165f4 <__d2b>
 8012b92:	901a      	str	r0, [sp, #104]	@ 0x68
 8012b94:	2800      	cmp	r0, #0
 8012b96:	f43f aede 	beq.w	8012956 <_strtod_l+0x43e>
 8012b9a:	9805      	ldr	r0, [sp, #20]
 8012b9c:	2101      	movs	r1, #1
 8012b9e:	f003 fa83 	bl	80160a8 <__i2b>
 8012ba2:	4680      	mov	r8, r0
 8012ba4:	b948      	cbnz	r0, 8012bba <_strtod_l+0x6a2>
 8012ba6:	f04f 0800 	mov.w	r8, #0
 8012baa:	e6d4      	b.n	8012956 <_strtod_l+0x43e>
 8012bac:	f04f 32ff 	mov.w	r2, #4294967295
 8012bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8012bb4:	ea03 0a0a 	and.w	sl, r3, sl
 8012bb8:	e7b0      	b.n	8012b1c <_strtod_l+0x604>
 8012bba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012bbc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012bbe:	2d00      	cmp	r5, #0
 8012bc0:	bfab      	itete	ge
 8012bc2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012bc4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012bc6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012bc8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8012bca:	bfac      	ite	ge
 8012bcc:	18ef      	addge	r7, r5, r3
 8012bce:	1b5e      	sublt	r6, r3, r5
 8012bd0:	9b08      	ldr	r3, [sp, #32]
 8012bd2:	1aed      	subs	r5, r5, r3
 8012bd4:	4415      	add	r5, r2
 8012bd6:	4b66      	ldr	r3, [pc, #408]	@ (8012d70 <_strtod_l+0x858>)
 8012bd8:	3d01      	subs	r5, #1
 8012bda:	429d      	cmp	r5, r3
 8012bdc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012be0:	da50      	bge.n	8012c84 <_strtod_l+0x76c>
 8012be2:	1b5b      	subs	r3, r3, r5
 8012be4:	2b1f      	cmp	r3, #31
 8012be6:	eba2 0203 	sub.w	r2, r2, r3
 8012bea:	f04f 0101 	mov.w	r1, #1
 8012bee:	dc3d      	bgt.n	8012c6c <_strtod_l+0x754>
 8012bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8012bf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	9310      	str	r3, [sp, #64]	@ 0x40
 8012bfa:	18bd      	adds	r5, r7, r2
 8012bfc:	9b08      	ldr	r3, [sp, #32]
 8012bfe:	42af      	cmp	r7, r5
 8012c00:	4416      	add	r6, r2
 8012c02:	441e      	add	r6, r3
 8012c04:	463b      	mov	r3, r7
 8012c06:	bfa8      	it	ge
 8012c08:	462b      	movge	r3, r5
 8012c0a:	42b3      	cmp	r3, r6
 8012c0c:	bfa8      	it	ge
 8012c0e:	4633      	movge	r3, r6
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	bfc2      	ittt	gt
 8012c14:	1aed      	subgt	r5, r5, r3
 8012c16:	1af6      	subgt	r6, r6, r3
 8012c18:	1aff      	subgt	r7, r7, r3
 8012c1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	dd16      	ble.n	8012c4e <_strtod_l+0x736>
 8012c20:	4641      	mov	r1, r8
 8012c22:	9805      	ldr	r0, [sp, #20]
 8012c24:	461a      	mov	r2, r3
 8012c26:	f003 faff 	bl	8016228 <__pow5mult>
 8012c2a:	4680      	mov	r8, r0
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	d0ba      	beq.n	8012ba6 <_strtod_l+0x68e>
 8012c30:	4601      	mov	r1, r0
 8012c32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012c34:	9805      	ldr	r0, [sp, #20]
 8012c36:	f003 fa4d 	bl	80160d4 <__multiply>
 8012c3a:	900e      	str	r0, [sp, #56]	@ 0x38
 8012c3c:	2800      	cmp	r0, #0
 8012c3e:	f43f ae8a 	beq.w	8012956 <_strtod_l+0x43e>
 8012c42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012c44:	9805      	ldr	r0, [sp, #20]
 8012c46:	f003 f931 	bl	8015eac <_Bfree>
 8012c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c4e:	2d00      	cmp	r5, #0
 8012c50:	dc1d      	bgt.n	8012c8e <_strtod_l+0x776>
 8012c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	dd23      	ble.n	8012ca0 <_strtod_l+0x788>
 8012c58:	4649      	mov	r1, r9
 8012c5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8012c5c:	9805      	ldr	r0, [sp, #20]
 8012c5e:	f003 fae3 	bl	8016228 <__pow5mult>
 8012c62:	4681      	mov	r9, r0
 8012c64:	b9e0      	cbnz	r0, 8012ca0 <_strtod_l+0x788>
 8012c66:	f04f 0900 	mov.w	r9, #0
 8012c6a:	e674      	b.n	8012956 <_strtod_l+0x43e>
 8012c6c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012c70:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012c74:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012c78:	35e2      	adds	r5, #226	@ 0xe2
 8012c7a:	fa01 f305 	lsl.w	r3, r1, r5
 8012c7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012c80:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012c82:	e7ba      	b.n	8012bfa <_strtod_l+0x6e2>
 8012c84:	2300      	movs	r3, #0
 8012c86:	9310      	str	r3, [sp, #64]	@ 0x40
 8012c88:	2301      	movs	r3, #1
 8012c8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012c8c:	e7b5      	b.n	8012bfa <_strtod_l+0x6e2>
 8012c8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012c90:	9805      	ldr	r0, [sp, #20]
 8012c92:	462a      	mov	r2, r5
 8012c94:	f003 fb22 	bl	80162dc <__lshift>
 8012c98:	901a      	str	r0, [sp, #104]	@ 0x68
 8012c9a:	2800      	cmp	r0, #0
 8012c9c:	d1d9      	bne.n	8012c52 <_strtod_l+0x73a>
 8012c9e:	e65a      	b.n	8012956 <_strtod_l+0x43e>
 8012ca0:	2e00      	cmp	r6, #0
 8012ca2:	dd07      	ble.n	8012cb4 <_strtod_l+0x79c>
 8012ca4:	4649      	mov	r1, r9
 8012ca6:	9805      	ldr	r0, [sp, #20]
 8012ca8:	4632      	mov	r2, r6
 8012caa:	f003 fb17 	bl	80162dc <__lshift>
 8012cae:	4681      	mov	r9, r0
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	d0d8      	beq.n	8012c66 <_strtod_l+0x74e>
 8012cb4:	2f00      	cmp	r7, #0
 8012cb6:	dd08      	ble.n	8012cca <_strtod_l+0x7b2>
 8012cb8:	4641      	mov	r1, r8
 8012cba:	9805      	ldr	r0, [sp, #20]
 8012cbc:	463a      	mov	r2, r7
 8012cbe:	f003 fb0d 	bl	80162dc <__lshift>
 8012cc2:	4680      	mov	r8, r0
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	f43f ae46 	beq.w	8012956 <_strtod_l+0x43e>
 8012cca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012ccc:	9805      	ldr	r0, [sp, #20]
 8012cce:	464a      	mov	r2, r9
 8012cd0:	f003 fb8c 	bl	80163ec <__mdiff>
 8012cd4:	4604      	mov	r4, r0
 8012cd6:	2800      	cmp	r0, #0
 8012cd8:	f43f ae3d 	beq.w	8012956 <_strtod_l+0x43e>
 8012cdc:	68c3      	ldr	r3, [r0, #12]
 8012cde:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	60c3      	str	r3, [r0, #12]
 8012ce4:	4641      	mov	r1, r8
 8012ce6:	f003 fb65 	bl	80163b4 <__mcmp>
 8012cea:	2800      	cmp	r0, #0
 8012cec:	da46      	bge.n	8012d7c <_strtod_l+0x864>
 8012cee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cf0:	ea53 030a 	orrs.w	r3, r3, sl
 8012cf4:	d16c      	bne.n	8012dd0 <_strtod_l+0x8b8>
 8012cf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d168      	bne.n	8012dd0 <_strtod_l+0x8b8>
 8012cfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012d02:	0d1b      	lsrs	r3, r3, #20
 8012d04:	051b      	lsls	r3, r3, #20
 8012d06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012d0a:	d961      	bls.n	8012dd0 <_strtod_l+0x8b8>
 8012d0c:	6963      	ldr	r3, [r4, #20]
 8012d0e:	b913      	cbnz	r3, 8012d16 <_strtod_l+0x7fe>
 8012d10:	6923      	ldr	r3, [r4, #16]
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	dd5c      	ble.n	8012dd0 <_strtod_l+0x8b8>
 8012d16:	4621      	mov	r1, r4
 8012d18:	2201      	movs	r2, #1
 8012d1a:	9805      	ldr	r0, [sp, #20]
 8012d1c:	f003 fade 	bl	80162dc <__lshift>
 8012d20:	4641      	mov	r1, r8
 8012d22:	4604      	mov	r4, r0
 8012d24:	f003 fb46 	bl	80163b4 <__mcmp>
 8012d28:	2800      	cmp	r0, #0
 8012d2a:	dd51      	ble.n	8012dd0 <_strtod_l+0x8b8>
 8012d2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012d30:	9a08      	ldr	r2, [sp, #32]
 8012d32:	0d1b      	lsrs	r3, r3, #20
 8012d34:	051b      	lsls	r3, r3, #20
 8012d36:	2a00      	cmp	r2, #0
 8012d38:	d06b      	beq.n	8012e12 <_strtod_l+0x8fa>
 8012d3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012d3e:	d868      	bhi.n	8012e12 <_strtod_l+0x8fa>
 8012d40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012d44:	f67f ae9d 	bls.w	8012a82 <_strtod_l+0x56a>
 8012d48:	4b0a      	ldr	r3, [pc, #40]	@ (8012d74 <_strtod_l+0x85c>)
 8012d4a:	4650      	mov	r0, sl
 8012d4c:	4659      	mov	r1, fp
 8012d4e:	2200      	movs	r2, #0
 8012d50:	f7fa fada 	bl	800d308 <__aeabi_dmul>
 8012d54:	4b08      	ldr	r3, [pc, #32]	@ (8012d78 <_strtod_l+0x860>)
 8012d56:	400b      	ands	r3, r1
 8012d58:	4682      	mov	sl, r0
 8012d5a:	468b      	mov	fp, r1
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	f47f ae05 	bne.w	801296c <_strtod_l+0x454>
 8012d62:	9a05      	ldr	r2, [sp, #20]
 8012d64:	2322      	movs	r3, #34	@ 0x22
 8012d66:	6013      	str	r3, [r2, #0]
 8012d68:	e600      	b.n	801296c <_strtod_l+0x454>
 8012d6a:	bf00      	nop
 8012d6c:	0801a250 	.word	0x0801a250
 8012d70:	fffffc02 	.word	0xfffffc02
 8012d74:	39500000 	.word	0x39500000
 8012d78:	7ff00000 	.word	0x7ff00000
 8012d7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012d80:	d165      	bne.n	8012e4e <_strtod_l+0x936>
 8012d82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012d84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012d88:	b35a      	cbz	r2, 8012de2 <_strtod_l+0x8ca>
 8012d8a:	4a9f      	ldr	r2, [pc, #636]	@ (8013008 <_strtod_l+0xaf0>)
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	d12b      	bne.n	8012de8 <_strtod_l+0x8d0>
 8012d90:	9b08      	ldr	r3, [sp, #32]
 8012d92:	4651      	mov	r1, sl
 8012d94:	b303      	cbz	r3, 8012dd8 <_strtod_l+0x8c0>
 8012d96:	4b9d      	ldr	r3, [pc, #628]	@ (801300c <_strtod_l+0xaf4>)
 8012d98:	465a      	mov	r2, fp
 8012d9a:	4013      	ands	r3, r2
 8012d9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012da0:	f04f 32ff 	mov.w	r2, #4294967295
 8012da4:	d81b      	bhi.n	8012dde <_strtod_l+0x8c6>
 8012da6:	0d1b      	lsrs	r3, r3, #20
 8012da8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012dac:	fa02 f303 	lsl.w	r3, r2, r3
 8012db0:	4299      	cmp	r1, r3
 8012db2:	d119      	bne.n	8012de8 <_strtod_l+0x8d0>
 8012db4:	4b96      	ldr	r3, [pc, #600]	@ (8013010 <_strtod_l+0xaf8>)
 8012db6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012db8:	429a      	cmp	r2, r3
 8012dba:	d102      	bne.n	8012dc2 <_strtod_l+0x8aa>
 8012dbc:	3101      	adds	r1, #1
 8012dbe:	f43f adca 	beq.w	8012956 <_strtod_l+0x43e>
 8012dc2:	4b92      	ldr	r3, [pc, #584]	@ (801300c <_strtod_l+0xaf4>)
 8012dc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012dc6:	401a      	ands	r2, r3
 8012dc8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012dcc:	f04f 0a00 	mov.w	sl, #0
 8012dd0:	9b08      	ldr	r3, [sp, #32]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d1b8      	bne.n	8012d48 <_strtod_l+0x830>
 8012dd6:	e5c9      	b.n	801296c <_strtod_l+0x454>
 8012dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8012ddc:	e7e8      	b.n	8012db0 <_strtod_l+0x898>
 8012dde:	4613      	mov	r3, r2
 8012de0:	e7e6      	b.n	8012db0 <_strtod_l+0x898>
 8012de2:	ea53 030a 	orrs.w	r3, r3, sl
 8012de6:	d0a1      	beq.n	8012d2c <_strtod_l+0x814>
 8012de8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012dea:	b1db      	cbz	r3, 8012e24 <_strtod_l+0x90c>
 8012dec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012dee:	4213      	tst	r3, r2
 8012df0:	d0ee      	beq.n	8012dd0 <_strtod_l+0x8b8>
 8012df2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012df4:	9a08      	ldr	r2, [sp, #32]
 8012df6:	4650      	mov	r0, sl
 8012df8:	4659      	mov	r1, fp
 8012dfa:	b1bb      	cbz	r3, 8012e2c <_strtod_l+0x914>
 8012dfc:	f7ff fb6e 	bl	80124dc <sulp>
 8012e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012e04:	ec53 2b10 	vmov	r2, r3, d0
 8012e08:	f7fa f8c8 	bl	800cf9c <__adddf3>
 8012e0c:	4682      	mov	sl, r0
 8012e0e:	468b      	mov	fp, r1
 8012e10:	e7de      	b.n	8012dd0 <_strtod_l+0x8b8>
 8012e12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012e16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012e1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012e1e:	f04f 3aff 	mov.w	sl, #4294967295
 8012e22:	e7d5      	b.n	8012dd0 <_strtod_l+0x8b8>
 8012e24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012e26:	ea13 0f0a 	tst.w	r3, sl
 8012e2a:	e7e1      	b.n	8012df0 <_strtod_l+0x8d8>
 8012e2c:	f7ff fb56 	bl	80124dc <sulp>
 8012e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012e34:	ec53 2b10 	vmov	r2, r3, d0
 8012e38:	f7fa f8ae 	bl	800cf98 <__aeabi_dsub>
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	2300      	movs	r3, #0
 8012e40:	4682      	mov	sl, r0
 8012e42:	468b      	mov	fp, r1
 8012e44:	f7fa fcc8 	bl	800d7d8 <__aeabi_dcmpeq>
 8012e48:	2800      	cmp	r0, #0
 8012e4a:	d0c1      	beq.n	8012dd0 <_strtod_l+0x8b8>
 8012e4c:	e619      	b.n	8012a82 <_strtod_l+0x56a>
 8012e4e:	4641      	mov	r1, r8
 8012e50:	4620      	mov	r0, r4
 8012e52:	f003 fc27 	bl	80166a4 <__ratio>
 8012e56:	ec57 6b10 	vmov	r6, r7, d0
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012e60:	4630      	mov	r0, r6
 8012e62:	4639      	mov	r1, r7
 8012e64:	f7fa fccc 	bl	800d800 <__aeabi_dcmple>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	d06f      	beq.n	8012f4c <_strtod_l+0xa34>
 8012e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d17a      	bne.n	8012f68 <_strtod_l+0xa50>
 8012e72:	f1ba 0f00 	cmp.w	sl, #0
 8012e76:	d158      	bne.n	8012f2a <_strtod_l+0xa12>
 8012e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d15a      	bne.n	8012f38 <_strtod_l+0xa20>
 8012e82:	4b64      	ldr	r3, [pc, #400]	@ (8013014 <_strtod_l+0xafc>)
 8012e84:	2200      	movs	r2, #0
 8012e86:	4630      	mov	r0, r6
 8012e88:	4639      	mov	r1, r7
 8012e8a:	f7fa fcaf 	bl	800d7ec <__aeabi_dcmplt>
 8012e8e:	2800      	cmp	r0, #0
 8012e90:	d159      	bne.n	8012f46 <_strtod_l+0xa2e>
 8012e92:	4630      	mov	r0, r6
 8012e94:	4639      	mov	r1, r7
 8012e96:	4b60      	ldr	r3, [pc, #384]	@ (8013018 <_strtod_l+0xb00>)
 8012e98:	2200      	movs	r2, #0
 8012e9a:	f7fa fa35 	bl	800d308 <__aeabi_dmul>
 8012e9e:	4606      	mov	r6, r0
 8012ea0:	460f      	mov	r7, r1
 8012ea2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012ea6:	9606      	str	r6, [sp, #24]
 8012ea8:	9307      	str	r3, [sp, #28]
 8012eaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012eae:	4d57      	ldr	r5, [pc, #348]	@ (801300c <_strtod_l+0xaf4>)
 8012eb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012eb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012eb6:	401d      	ands	r5, r3
 8012eb8:	4b58      	ldr	r3, [pc, #352]	@ (801301c <_strtod_l+0xb04>)
 8012eba:	429d      	cmp	r5, r3
 8012ebc:	f040 80b2 	bne.w	8013024 <_strtod_l+0xb0c>
 8012ec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ec2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012ec6:	ec4b ab10 	vmov	d0, sl, fp
 8012eca:	f003 fb23 	bl	8016514 <__ulp>
 8012ece:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012ed2:	ec51 0b10 	vmov	r0, r1, d0
 8012ed6:	f7fa fa17 	bl	800d308 <__aeabi_dmul>
 8012eda:	4652      	mov	r2, sl
 8012edc:	465b      	mov	r3, fp
 8012ede:	f7fa f85d 	bl	800cf9c <__adddf3>
 8012ee2:	460b      	mov	r3, r1
 8012ee4:	4949      	ldr	r1, [pc, #292]	@ (801300c <_strtod_l+0xaf4>)
 8012ee6:	4a4e      	ldr	r2, [pc, #312]	@ (8013020 <_strtod_l+0xb08>)
 8012ee8:	4019      	ands	r1, r3
 8012eea:	4291      	cmp	r1, r2
 8012eec:	4682      	mov	sl, r0
 8012eee:	d942      	bls.n	8012f76 <_strtod_l+0xa5e>
 8012ef0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012ef2:	4b47      	ldr	r3, [pc, #284]	@ (8013010 <_strtod_l+0xaf8>)
 8012ef4:	429a      	cmp	r2, r3
 8012ef6:	d103      	bne.n	8012f00 <_strtod_l+0x9e8>
 8012ef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012efa:	3301      	adds	r3, #1
 8012efc:	f43f ad2b 	beq.w	8012956 <_strtod_l+0x43e>
 8012f00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013010 <_strtod_l+0xaf8>
 8012f04:	f04f 3aff 	mov.w	sl, #4294967295
 8012f08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012f0a:	9805      	ldr	r0, [sp, #20]
 8012f0c:	f002 ffce 	bl	8015eac <_Bfree>
 8012f10:	9805      	ldr	r0, [sp, #20]
 8012f12:	4649      	mov	r1, r9
 8012f14:	f002 ffca 	bl	8015eac <_Bfree>
 8012f18:	9805      	ldr	r0, [sp, #20]
 8012f1a:	4641      	mov	r1, r8
 8012f1c:	f002 ffc6 	bl	8015eac <_Bfree>
 8012f20:	9805      	ldr	r0, [sp, #20]
 8012f22:	4621      	mov	r1, r4
 8012f24:	f002 ffc2 	bl	8015eac <_Bfree>
 8012f28:	e618      	b.n	8012b5c <_strtod_l+0x644>
 8012f2a:	f1ba 0f01 	cmp.w	sl, #1
 8012f2e:	d103      	bne.n	8012f38 <_strtod_l+0xa20>
 8012f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	f43f ada5 	beq.w	8012a82 <_strtod_l+0x56a>
 8012f38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012fe8 <_strtod_l+0xad0>
 8012f3c:	4f35      	ldr	r7, [pc, #212]	@ (8013014 <_strtod_l+0xafc>)
 8012f3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012f42:	2600      	movs	r6, #0
 8012f44:	e7b1      	b.n	8012eaa <_strtod_l+0x992>
 8012f46:	4f34      	ldr	r7, [pc, #208]	@ (8013018 <_strtod_l+0xb00>)
 8012f48:	2600      	movs	r6, #0
 8012f4a:	e7aa      	b.n	8012ea2 <_strtod_l+0x98a>
 8012f4c:	4b32      	ldr	r3, [pc, #200]	@ (8013018 <_strtod_l+0xb00>)
 8012f4e:	4630      	mov	r0, r6
 8012f50:	4639      	mov	r1, r7
 8012f52:	2200      	movs	r2, #0
 8012f54:	f7fa f9d8 	bl	800d308 <__aeabi_dmul>
 8012f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f5a:	4606      	mov	r6, r0
 8012f5c:	460f      	mov	r7, r1
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d09f      	beq.n	8012ea2 <_strtod_l+0x98a>
 8012f62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012f66:	e7a0      	b.n	8012eaa <_strtod_l+0x992>
 8012f68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012ff0 <_strtod_l+0xad8>
 8012f6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012f70:	ec57 6b17 	vmov	r6, r7, d7
 8012f74:	e799      	b.n	8012eaa <_strtod_l+0x992>
 8012f76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012f7a:	9b08      	ldr	r3, [sp, #32]
 8012f7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d1c1      	bne.n	8012f08 <_strtod_l+0x9f0>
 8012f84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012f88:	0d1b      	lsrs	r3, r3, #20
 8012f8a:	051b      	lsls	r3, r3, #20
 8012f8c:	429d      	cmp	r5, r3
 8012f8e:	d1bb      	bne.n	8012f08 <_strtod_l+0x9f0>
 8012f90:	4630      	mov	r0, r6
 8012f92:	4639      	mov	r1, r7
 8012f94:	f7fa fd2c 	bl	800d9f0 <__aeabi_d2lz>
 8012f98:	f7fa f988 	bl	800d2ac <__aeabi_l2d>
 8012f9c:	4602      	mov	r2, r0
 8012f9e:	460b      	mov	r3, r1
 8012fa0:	4630      	mov	r0, r6
 8012fa2:	4639      	mov	r1, r7
 8012fa4:	f7f9 fff8 	bl	800cf98 <__aeabi_dsub>
 8012fa8:	460b      	mov	r3, r1
 8012faa:	4602      	mov	r2, r0
 8012fac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012fb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fb6:	ea46 060a 	orr.w	r6, r6, sl
 8012fba:	431e      	orrs	r6, r3
 8012fbc:	d06f      	beq.n	801309e <_strtod_l+0xb86>
 8012fbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8012ff8 <_strtod_l+0xae0>)
 8012fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc4:	f7fa fc12 	bl	800d7ec <__aeabi_dcmplt>
 8012fc8:	2800      	cmp	r0, #0
 8012fca:	f47f accf 	bne.w	801296c <_strtod_l+0x454>
 8012fce:	a30c      	add	r3, pc, #48	@ (adr r3, 8013000 <_strtod_l+0xae8>)
 8012fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012fd8:	f7fa fc26 	bl	800d828 <__aeabi_dcmpgt>
 8012fdc:	2800      	cmp	r0, #0
 8012fde:	d093      	beq.n	8012f08 <_strtod_l+0x9f0>
 8012fe0:	e4c4      	b.n	801296c <_strtod_l+0x454>
 8012fe2:	bf00      	nop
 8012fe4:	f3af 8000 	nop.w
 8012fe8:	00000000 	.word	0x00000000
 8012fec:	bff00000 	.word	0xbff00000
 8012ff0:	00000000 	.word	0x00000000
 8012ff4:	3ff00000 	.word	0x3ff00000
 8012ff8:	94a03595 	.word	0x94a03595
 8012ffc:	3fdfffff 	.word	0x3fdfffff
 8013000:	35afe535 	.word	0x35afe535
 8013004:	3fe00000 	.word	0x3fe00000
 8013008:	000fffff 	.word	0x000fffff
 801300c:	7ff00000 	.word	0x7ff00000
 8013010:	7fefffff 	.word	0x7fefffff
 8013014:	3ff00000 	.word	0x3ff00000
 8013018:	3fe00000 	.word	0x3fe00000
 801301c:	7fe00000 	.word	0x7fe00000
 8013020:	7c9fffff 	.word	0x7c9fffff
 8013024:	9b08      	ldr	r3, [sp, #32]
 8013026:	b323      	cbz	r3, 8013072 <_strtod_l+0xb5a>
 8013028:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801302c:	d821      	bhi.n	8013072 <_strtod_l+0xb5a>
 801302e:	a328      	add	r3, pc, #160	@ (adr r3, 80130d0 <_strtod_l+0xbb8>)
 8013030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013034:	4630      	mov	r0, r6
 8013036:	4639      	mov	r1, r7
 8013038:	f7fa fbe2 	bl	800d800 <__aeabi_dcmple>
 801303c:	b1a0      	cbz	r0, 8013068 <_strtod_l+0xb50>
 801303e:	4639      	mov	r1, r7
 8013040:	4630      	mov	r0, r6
 8013042:	f7fa fc39 	bl	800d8b8 <__aeabi_d2uiz>
 8013046:	2801      	cmp	r0, #1
 8013048:	bf38      	it	cc
 801304a:	2001      	movcc	r0, #1
 801304c:	f7fa f8e2 	bl	800d214 <__aeabi_ui2d>
 8013050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013052:	4606      	mov	r6, r0
 8013054:	460f      	mov	r7, r1
 8013056:	b9fb      	cbnz	r3, 8013098 <_strtod_l+0xb80>
 8013058:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801305c:	9014      	str	r0, [sp, #80]	@ 0x50
 801305e:	9315      	str	r3, [sp, #84]	@ 0x54
 8013060:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013064:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013068:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801306a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801306e:	1b5b      	subs	r3, r3, r5
 8013070:	9311      	str	r3, [sp, #68]	@ 0x44
 8013072:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013076:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801307a:	f003 fa4b 	bl	8016514 <__ulp>
 801307e:	4650      	mov	r0, sl
 8013080:	ec53 2b10 	vmov	r2, r3, d0
 8013084:	4659      	mov	r1, fp
 8013086:	f7fa f93f 	bl	800d308 <__aeabi_dmul>
 801308a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801308e:	f7f9 ff85 	bl	800cf9c <__adddf3>
 8013092:	4682      	mov	sl, r0
 8013094:	468b      	mov	fp, r1
 8013096:	e770      	b.n	8012f7a <_strtod_l+0xa62>
 8013098:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801309c:	e7e0      	b.n	8013060 <_strtod_l+0xb48>
 801309e:	a30e      	add	r3, pc, #56	@ (adr r3, 80130d8 <_strtod_l+0xbc0>)
 80130a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a4:	f7fa fba2 	bl	800d7ec <__aeabi_dcmplt>
 80130a8:	e798      	b.n	8012fdc <_strtod_l+0xac4>
 80130aa:	2300      	movs	r3, #0
 80130ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80130ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80130b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80130b2:	6013      	str	r3, [r2, #0]
 80130b4:	f7ff ba6d 	b.w	8012592 <_strtod_l+0x7a>
 80130b8:	2a65      	cmp	r2, #101	@ 0x65
 80130ba:	f43f ab66 	beq.w	801278a <_strtod_l+0x272>
 80130be:	2a45      	cmp	r2, #69	@ 0x45
 80130c0:	f43f ab63 	beq.w	801278a <_strtod_l+0x272>
 80130c4:	2301      	movs	r3, #1
 80130c6:	f7ff bb9e 	b.w	8012806 <_strtod_l+0x2ee>
 80130ca:	bf00      	nop
 80130cc:	f3af 8000 	nop.w
 80130d0:	ffc00000 	.word	0xffc00000
 80130d4:	41dfffff 	.word	0x41dfffff
 80130d8:	94a03595 	.word	0x94a03595
 80130dc:	3fcfffff 	.word	0x3fcfffff

080130e0 <_strtod_r>:
 80130e0:	4b01      	ldr	r3, [pc, #4]	@ (80130e8 <_strtod_r+0x8>)
 80130e2:	f7ff ba19 	b.w	8012518 <_strtod_l>
 80130e6:	bf00      	nop
 80130e8:	20000918 	.word	0x20000918

080130ec <strtod>:
 80130ec:	460a      	mov	r2, r1
 80130ee:	4601      	mov	r1, r0
 80130f0:	4802      	ldr	r0, [pc, #8]	@ (80130fc <strtod+0x10>)
 80130f2:	4b03      	ldr	r3, [pc, #12]	@ (8013100 <strtod+0x14>)
 80130f4:	6800      	ldr	r0, [r0, #0]
 80130f6:	f7ff ba0f 	b.w	8012518 <_strtod_l>
 80130fa:	bf00      	nop
 80130fc:	20000a84 	.word	0x20000a84
 8013100:	20000918 	.word	0x20000918

08013104 <__cvt>:
 8013104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013108:	ec57 6b10 	vmov	r6, r7, d0
 801310c:	2f00      	cmp	r7, #0
 801310e:	460c      	mov	r4, r1
 8013110:	4619      	mov	r1, r3
 8013112:	463b      	mov	r3, r7
 8013114:	bfbb      	ittet	lt
 8013116:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801311a:	461f      	movlt	r7, r3
 801311c:	2300      	movge	r3, #0
 801311e:	232d      	movlt	r3, #45	@ 0x2d
 8013120:	700b      	strb	r3, [r1, #0]
 8013122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013124:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013128:	4691      	mov	r9, r2
 801312a:	f023 0820 	bic.w	r8, r3, #32
 801312e:	bfbc      	itt	lt
 8013130:	4632      	movlt	r2, r6
 8013132:	4616      	movlt	r6, r2
 8013134:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013138:	d005      	beq.n	8013146 <__cvt+0x42>
 801313a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801313e:	d100      	bne.n	8013142 <__cvt+0x3e>
 8013140:	3401      	adds	r4, #1
 8013142:	2102      	movs	r1, #2
 8013144:	e000      	b.n	8013148 <__cvt+0x44>
 8013146:	2103      	movs	r1, #3
 8013148:	ab03      	add	r3, sp, #12
 801314a:	9301      	str	r3, [sp, #4]
 801314c:	ab02      	add	r3, sp, #8
 801314e:	9300      	str	r3, [sp, #0]
 8013150:	ec47 6b10 	vmov	d0, r6, r7
 8013154:	4653      	mov	r3, sl
 8013156:	4622      	mov	r2, r4
 8013158:	f001 fd0e 	bl	8014b78 <_dtoa_r>
 801315c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013160:	4605      	mov	r5, r0
 8013162:	d119      	bne.n	8013198 <__cvt+0x94>
 8013164:	f019 0f01 	tst.w	r9, #1
 8013168:	d00e      	beq.n	8013188 <__cvt+0x84>
 801316a:	eb00 0904 	add.w	r9, r0, r4
 801316e:	2200      	movs	r2, #0
 8013170:	2300      	movs	r3, #0
 8013172:	4630      	mov	r0, r6
 8013174:	4639      	mov	r1, r7
 8013176:	f7fa fb2f 	bl	800d7d8 <__aeabi_dcmpeq>
 801317a:	b108      	cbz	r0, 8013180 <__cvt+0x7c>
 801317c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013180:	2230      	movs	r2, #48	@ 0x30
 8013182:	9b03      	ldr	r3, [sp, #12]
 8013184:	454b      	cmp	r3, r9
 8013186:	d31e      	bcc.n	80131c6 <__cvt+0xc2>
 8013188:	9b03      	ldr	r3, [sp, #12]
 801318a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801318c:	1b5b      	subs	r3, r3, r5
 801318e:	4628      	mov	r0, r5
 8013190:	6013      	str	r3, [r2, #0]
 8013192:	b004      	add	sp, #16
 8013194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013198:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801319c:	eb00 0904 	add.w	r9, r0, r4
 80131a0:	d1e5      	bne.n	801316e <__cvt+0x6a>
 80131a2:	7803      	ldrb	r3, [r0, #0]
 80131a4:	2b30      	cmp	r3, #48	@ 0x30
 80131a6:	d10a      	bne.n	80131be <__cvt+0xba>
 80131a8:	2200      	movs	r2, #0
 80131aa:	2300      	movs	r3, #0
 80131ac:	4630      	mov	r0, r6
 80131ae:	4639      	mov	r1, r7
 80131b0:	f7fa fb12 	bl	800d7d8 <__aeabi_dcmpeq>
 80131b4:	b918      	cbnz	r0, 80131be <__cvt+0xba>
 80131b6:	f1c4 0401 	rsb	r4, r4, #1
 80131ba:	f8ca 4000 	str.w	r4, [sl]
 80131be:	f8da 3000 	ldr.w	r3, [sl]
 80131c2:	4499      	add	r9, r3
 80131c4:	e7d3      	b.n	801316e <__cvt+0x6a>
 80131c6:	1c59      	adds	r1, r3, #1
 80131c8:	9103      	str	r1, [sp, #12]
 80131ca:	701a      	strb	r2, [r3, #0]
 80131cc:	e7d9      	b.n	8013182 <__cvt+0x7e>

080131ce <__exponent>:
 80131ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80131d0:	2900      	cmp	r1, #0
 80131d2:	bfba      	itte	lt
 80131d4:	4249      	neglt	r1, r1
 80131d6:	232d      	movlt	r3, #45	@ 0x2d
 80131d8:	232b      	movge	r3, #43	@ 0x2b
 80131da:	2909      	cmp	r1, #9
 80131dc:	7002      	strb	r2, [r0, #0]
 80131de:	7043      	strb	r3, [r0, #1]
 80131e0:	dd29      	ble.n	8013236 <__exponent+0x68>
 80131e2:	f10d 0307 	add.w	r3, sp, #7
 80131e6:	461d      	mov	r5, r3
 80131e8:	270a      	movs	r7, #10
 80131ea:	461a      	mov	r2, r3
 80131ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80131f0:	fb07 1416 	mls	r4, r7, r6, r1
 80131f4:	3430      	adds	r4, #48	@ 0x30
 80131f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80131fa:	460c      	mov	r4, r1
 80131fc:	2c63      	cmp	r4, #99	@ 0x63
 80131fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8013202:	4631      	mov	r1, r6
 8013204:	dcf1      	bgt.n	80131ea <__exponent+0x1c>
 8013206:	3130      	adds	r1, #48	@ 0x30
 8013208:	1e94      	subs	r4, r2, #2
 801320a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801320e:	1c41      	adds	r1, r0, #1
 8013210:	4623      	mov	r3, r4
 8013212:	42ab      	cmp	r3, r5
 8013214:	d30a      	bcc.n	801322c <__exponent+0x5e>
 8013216:	f10d 0309 	add.w	r3, sp, #9
 801321a:	1a9b      	subs	r3, r3, r2
 801321c:	42ac      	cmp	r4, r5
 801321e:	bf88      	it	hi
 8013220:	2300      	movhi	r3, #0
 8013222:	3302      	adds	r3, #2
 8013224:	4403      	add	r3, r0
 8013226:	1a18      	subs	r0, r3, r0
 8013228:	b003      	add	sp, #12
 801322a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801322c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013230:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013234:	e7ed      	b.n	8013212 <__exponent+0x44>
 8013236:	2330      	movs	r3, #48	@ 0x30
 8013238:	3130      	adds	r1, #48	@ 0x30
 801323a:	7083      	strb	r3, [r0, #2]
 801323c:	70c1      	strb	r1, [r0, #3]
 801323e:	1d03      	adds	r3, r0, #4
 8013240:	e7f1      	b.n	8013226 <__exponent+0x58>
	...

08013244 <_printf_float>:
 8013244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013248:	b08d      	sub	sp, #52	@ 0x34
 801324a:	460c      	mov	r4, r1
 801324c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013250:	4616      	mov	r6, r2
 8013252:	461f      	mov	r7, r3
 8013254:	4605      	mov	r5, r0
 8013256:	f001 fb4f 	bl	80148f8 <_localeconv_r>
 801325a:	6803      	ldr	r3, [r0, #0]
 801325c:	9304      	str	r3, [sp, #16]
 801325e:	4618      	mov	r0, r3
 8013260:	f7f9 fe8e 	bl	800cf80 <strlen>
 8013264:	2300      	movs	r3, #0
 8013266:	930a      	str	r3, [sp, #40]	@ 0x28
 8013268:	f8d8 3000 	ldr.w	r3, [r8]
 801326c:	9005      	str	r0, [sp, #20]
 801326e:	3307      	adds	r3, #7
 8013270:	f023 0307 	bic.w	r3, r3, #7
 8013274:	f103 0208 	add.w	r2, r3, #8
 8013278:	f894 a018 	ldrb.w	sl, [r4, #24]
 801327c:	f8d4 b000 	ldr.w	fp, [r4]
 8013280:	f8c8 2000 	str.w	r2, [r8]
 8013284:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013288:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801328c:	9307      	str	r3, [sp, #28]
 801328e:	f8cd 8018 	str.w	r8, [sp, #24]
 8013292:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801329a:	4b9c      	ldr	r3, [pc, #624]	@ (801350c <_printf_float+0x2c8>)
 801329c:	f04f 32ff 	mov.w	r2, #4294967295
 80132a0:	f7fa facc 	bl	800d83c <__aeabi_dcmpun>
 80132a4:	bb70      	cbnz	r0, 8013304 <_printf_float+0xc0>
 80132a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80132aa:	4b98      	ldr	r3, [pc, #608]	@ (801350c <_printf_float+0x2c8>)
 80132ac:	f04f 32ff 	mov.w	r2, #4294967295
 80132b0:	f7fa faa6 	bl	800d800 <__aeabi_dcmple>
 80132b4:	bb30      	cbnz	r0, 8013304 <_printf_float+0xc0>
 80132b6:	2200      	movs	r2, #0
 80132b8:	2300      	movs	r3, #0
 80132ba:	4640      	mov	r0, r8
 80132bc:	4649      	mov	r1, r9
 80132be:	f7fa fa95 	bl	800d7ec <__aeabi_dcmplt>
 80132c2:	b110      	cbz	r0, 80132ca <_printf_float+0x86>
 80132c4:	232d      	movs	r3, #45	@ 0x2d
 80132c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80132ca:	4a91      	ldr	r2, [pc, #580]	@ (8013510 <_printf_float+0x2cc>)
 80132cc:	4b91      	ldr	r3, [pc, #580]	@ (8013514 <_printf_float+0x2d0>)
 80132ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80132d2:	bf94      	ite	ls
 80132d4:	4690      	movls	r8, r2
 80132d6:	4698      	movhi	r8, r3
 80132d8:	2303      	movs	r3, #3
 80132da:	6123      	str	r3, [r4, #16]
 80132dc:	f02b 0304 	bic.w	r3, fp, #4
 80132e0:	6023      	str	r3, [r4, #0]
 80132e2:	f04f 0900 	mov.w	r9, #0
 80132e6:	9700      	str	r7, [sp, #0]
 80132e8:	4633      	mov	r3, r6
 80132ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80132ec:	4621      	mov	r1, r4
 80132ee:	4628      	mov	r0, r5
 80132f0:	f000 f9d2 	bl	8013698 <_printf_common>
 80132f4:	3001      	adds	r0, #1
 80132f6:	f040 808d 	bne.w	8013414 <_printf_float+0x1d0>
 80132fa:	f04f 30ff 	mov.w	r0, #4294967295
 80132fe:	b00d      	add	sp, #52	@ 0x34
 8013300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013304:	4642      	mov	r2, r8
 8013306:	464b      	mov	r3, r9
 8013308:	4640      	mov	r0, r8
 801330a:	4649      	mov	r1, r9
 801330c:	f7fa fa96 	bl	800d83c <__aeabi_dcmpun>
 8013310:	b140      	cbz	r0, 8013324 <_printf_float+0xe0>
 8013312:	464b      	mov	r3, r9
 8013314:	2b00      	cmp	r3, #0
 8013316:	bfbc      	itt	lt
 8013318:	232d      	movlt	r3, #45	@ 0x2d
 801331a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801331e:	4a7e      	ldr	r2, [pc, #504]	@ (8013518 <_printf_float+0x2d4>)
 8013320:	4b7e      	ldr	r3, [pc, #504]	@ (801351c <_printf_float+0x2d8>)
 8013322:	e7d4      	b.n	80132ce <_printf_float+0x8a>
 8013324:	6863      	ldr	r3, [r4, #4]
 8013326:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801332a:	9206      	str	r2, [sp, #24]
 801332c:	1c5a      	adds	r2, r3, #1
 801332e:	d13b      	bne.n	80133a8 <_printf_float+0x164>
 8013330:	2306      	movs	r3, #6
 8013332:	6063      	str	r3, [r4, #4]
 8013334:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013338:	2300      	movs	r3, #0
 801333a:	6022      	str	r2, [r4, #0]
 801333c:	9303      	str	r3, [sp, #12]
 801333e:	ab0a      	add	r3, sp, #40	@ 0x28
 8013340:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013344:	ab09      	add	r3, sp, #36	@ 0x24
 8013346:	9300      	str	r3, [sp, #0]
 8013348:	6861      	ldr	r1, [r4, #4]
 801334a:	ec49 8b10 	vmov	d0, r8, r9
 801334e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013352:	4628      	mov	r0, r5
 8013354:	f7ff fed6 	bl	8013104 <__cvt>
 8013358:	9b06      	ldr	r3, [sp, #24]
 801335a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801335c:	2b47      	cmp	r3, #71	@ 0x47
 801335e:	4680      	mov	r8, r0
 8013360:	d129      	bne.n	80133b6 <_printf_float+0x172>
 8013362:	1cc8      	adds	r0, r1, #3
 8013364:	db02      	blt.n	801336c <_printf_float+0x128>
 8013366:	6863      	ldr	r3, [r4, #4]
 8013368:	4299      	cmp	r1, r3
 801336a:	dd41      	ble.n	80133f0 <_printf_float+0x1ac>
 801336c:	f1aa 0a02 	sub.w	sl, sl, #2
 8013370:	fa5f fa8a 	uxtb.w	sl, sl
 8013374:	3901      	subs	r1, #1
 8013376:	4652      	mov	r2, sl
 8013378:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801337c:	9109      	str	r1, [sp, #36]	@ 0x24
 801337e:	f7ff ff26 	bl	80131ce <__exponent>
 8013382:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013384:	1813      	adds	r3, r2, r0
 8013386:	2a01      	cmp	r2, #1
 8013388:	4681      	mov	r9, r0
 801338a:	6123      	str	r3, [r4, #16]
 801338c:	dc02      	bgt.n	8013394 <_printf_float+0x150>
 801338e:	6822      	ldr	r2, [r4, #0]
 8013390:	07d2      	lsls	r2, r2, #31
 8013392:	d501      	bpl.n	8013398 <_printf_float+0x154>
 8013394:	3301      	adds	r3, #1
 8013396:	6123      	str	r3, [r4, #16]
 8013398:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801339c:	2b00      	cmp	r3, #0
 801339e:	d0a2      	beq.n	80132e6 <_printf_float+0xa2>
 80133a0:	232d      	movs	r3, #45	@ 0x2d
 80133a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80133a6:	e79e      	b.n	80132e6 <_printf_float+0xa2>
 80133a8:	9a06      	ldr	r2, [sp, #24]
 80133aa:	2a47      	cmp	r2, #71	@ 0x47
 80133ac:	d1c2      	bne.n	8013334 <_printf_float+0xf0>
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d1c0      	bne.n	8013334 <_printf_float+0xf0>
 80133b2:	2301      	movs	r3, #1
 80133b4:	e7bd      	b.n	8013332 <_printf_float+0xee>
 80133b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80133ba:	d9db      	bls.n	8013374 <_printf_float+0x130>
 80133bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80133c0:	d118      	bne.n	80133f4 <_printf_float+0x1b0>
 80133c2:	2900      	cmp	r1, #0
 80133c4:	6863      	ldr	r3, [r4, #4]
 80133c6:	dd0b      	ble.n	80133e0 <_printf_float+0x19c>
 80133c8:	6121      	str	r1, [r4, #16]
 80133ca:	b913      	cbnz	r3, 80133d2 <_printf_float+0x18e>
 80133cc:	6822      	ldr	r2, [r4, #0]
 80133ce:	07d0      	lsls	r0, r2, #31
 80133d0:	d502      	bpl.n	80133d8 <_printf_float+0x194>
 80133d2:	3301      	adds	r3, #1
 80133d4:	440b      	add	r3, r1
 80133d6:	6123      	str	r3, [r4, #16]
 80133d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80133da:	f04f 0900 	mov.w	r9, #0
 80133de:	e7db      	b.n	8013398 <_printf_float+0x154>
 80133e0:	b913      	cbnz	r3, 80133e8 <_printf_float+0x1a4>
 80133e2:	6822      	ldr	r2, [r4, #0]
 80133e4:	07d2      	lsls	r2, r2, #31
 80133e6:	d501      	bpl.n	80133ec <_printf_float+0x1a8>
 80133e8:	3302      	adds	r3, #2
 80133ea:	e7f4      	b.n	80133d6 <_printf_float+0x192>
 80133ec:	2301      	movs	r3, #1
 80133ee:	e7f2      	b.n	80133d6 <_printf_float+0x192>
 80133f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80133f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80133f6:	4299      	cmp	r1, r3
 80133f8:	db05      	blt.n	8013406 <_printf_float+0x1c2>
 80133fa:	6823      	ldr	r3, [r4, #0]
 80133fc:	6121      	str	r1, [r4, #16]
 80133fe:	07d8      	lsls	r0, r3, #31
 8013400:	d5ea      	bpl.n	80133d8 <_printf_float+0x194>
 8013402:	1c4b      	adds	r3, r1, #1
 8013404:	e7e7      	b.n	80133d6 <_printf_float+0x192>
 8013406:	2900      	cmp	r1, #0
 8013408:	bfd4      	ite	le
 801340a:	f1c1 0202 	rsble	r2, r1, #2
 801340e:	2201      	movgt	r2, #1
 8013410:	4413      	add	r3, r2
 8013412:	e7e0      	b.n	80133d6 <_printf_float+0x192>
 8013414:	6823      	ldr	r3, [r4, #0]
 8013416:	055a      	lsls	r2, r3, #21
 8013418:	d407      	bmi.n	801342a <_printf_float+0x1e6>
 801341a:	6923      	ldr	r3, [r4, #16]
 801341c:	4642      	mov	r2, r8
 801341e:	4631      	mov	r1, r6
 8013420:	4628      	mov	r0, r5
 8013422:	47b8      	blx	r7
 8013424:	3001      	adds	r0, #1
 8013426:	d12b      	bne.n	8013480 <_printf_float+0x23c>
 8013428:	e767      	b.n	80132fa <_printf_float+0xb6>
 801342a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801342e:	f240 80dd 	bls.w	80135ec <_printf_float+0x3a8>
 8013432:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013436:	2200      	movs	r2, #0
 8013438:	2300      	movs	r3, #0
 801343a:	f7fa f9cd 	bl	800d7d8 <__aeabi_dcmpeq>
 801343e:	2800      	cmp	r0, #0
 8013440:	d033      	beq.n	80134aa <_printf_float+0x266>
 8013442:	4a37      	ldr	r2, [pc, #220]	@ (8013520 <_printf_float+0x2dc>)
 8013444:	2301      	movs	r3, #1
 8013446:	4631      	mov	r1, r6
 8013448:	4628      	mov	r0, r5
 801344a:	47b8      	blx	r7
 801344c:	3001      	adds	r0, #1
 801344e:	f43f af54 	beq.w	80132fa <_printf_float+0xb6>
 8013452:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013456:	4543      	cmp	r3, r8
 8013458:	db02      	blt.n	8013460 <_printf_float+0x21c>
 801345a:	6823      	ldr	r3, [r4, #0]
 801345c:	07d8      	lsls	r0, r3, #31
 801345e:	d50f      	bpl.n	8013480 <_printf_float+0x23c>
 8013460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013464:	4631      	mov	r1, r6
 8013466:	4628      	mov	r0, r5
 8013468:	47b8      	blx	r7
 801346a:	3001      	adds	r0, #1
 801346c:	f43f af45 	beq.w	80132fa <_printf_float+0xb6>
 8013470:	f04f 0900 	mov.w	r9, #0
 8013474:	f108 38ff 	add.w	r8, r8, #4294967295
 8013478:	f104 0a1a 	add.w	sl, r4, #26
 801347c:	45c8      	cmp	r8, r9
 801347e:	dc09      	bgt.n	8013494 <_printf_float+0x250>
 8013480:	6823      	ldr	r3, [r4, #0]
 8013482:	079b      	lsls	r3, r3, #30
 8013484:	f100 8103 	bmi.w	801368e <_printf_float+0x44a>
 8013488:	68e0      	ldr	r0, [r4, #12]
 801348a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801348c:	4298      	cmp	r0, r3
 801348e:	bfb8      	it	lt
 8013490:	4618      	movlt	r0, r3
 8013492:	e734      	b.n	80132fe <_printf_float+0xba>
 8013494:	2301      	movs	r3, #1
 8013496:	4652      	mov	r2, sl
 8013498:	4631      	mov	r1, r6
 801349a:	4628      	mov	r0, r5
 801349c:	47b8      	blx	r7
 801349e:	3001      	adds	r0, #1
 80134a0:	f43f af2b 	beq.w	80132fa <_printf_float+0xb6>
 80134a4:	f109 0901 	add.w	r9, r9, #1
 80134a8:	e7e8      	b.n	801347c <_printf_float+0x238>
 80134aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	dc39      	bgt.n	8013524 <_printf_float+0x2e0>
 80134b0:	4a1b      	ldr	r2, [pc, #108]	@ (8013520 <_printf_float+0x2dc>)
 80134b2:	2301      	movs	r3, #1
 80134b4:	4631      	mov	r1, r6
 80134b6:	4628      	mov	r0, r5
 80134b8:	47b8      	blx	r7
 80134ba:	3001      	adds	r0, #1
 80134bc:	f43f af1d 	beq.w	80132fa <_printf_float+0xb6>
 80134c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80134c4:	ea59 0303 	orrs.w	r3, r9, r3
 80134c8:	d102      	bne.n	80134d0 <_printf_float+0x28c>
 80134ca:	6823      	ldr	r3, [r4, #0]
 80134cc:	07d9      	lsls	r1, r3, #31
 80134ce:	d5d7      	bpl.n	8013480 <_printf_float+0x23c>
 80134d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80134d4:	4631      	mov	r1, r6
 80134d6:	4628      	mov	r0, r5
 80134d8:	47b8      	blx	r7
 80134da:	3001      	adds	r0, #1
 80134dc:	f43f af0d 	beq.w	80132fa <_printf_float+0xb6>
 80134e0:	f04f 0a00 	mov.w	sl, #0
 80134e4:	f104 0b1a 	add.w	fp, r4, #26
 80134e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134ea:	425b      	negs	r3, r3
 80134ec:	4553      	cmp	r3, sl
 80134ee:	dc01      	bgt.n	80134f4 <_printf_float+0x2b0>
 80134f0:	464b      	mov	r3, r9
 80134f2:	e793      	b.n	801341c <_printf_float+0x1d8>
 80134f4:	2301      	movs	r3, #1
 80134f6:	465a      	mov	r2, fp
 80134f8:	4631      	mov	r1, r6
 80134fa:	4628      	mov	r0, r5
 80134fc:	47b8      	blx	r7
 80134fe:	3001      	adds	r0, #1
 8013500:	f43f aefb 	beq.w	80132fa <_printf_float+0xb6>
 8013504:	f10a 0a01 	add.w	sl, sl, #1
 8013508:	e7ee      	b.n	80134e8 <_printf_float+0x2a4>
 801350a:	bf00      	nop
 801350c:	7fefffff 	.word	0x7fefffff
 8013510:	0801a379 	.word	0x0801a379
 8013514:	0801a37d 	.word	0x0801a37d
 8013518:	0801a381 	.word	0x0801a381
 801351c:	0801a385 	.word	0x0801a385
 8013520:	0801a389 	.word	0x0801a389
 8013524:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013526:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801352a:	4553      	cmp	r3, sl
 801352c:	bfa8      	it	ge
 801352e:	4653      	movge	r3, sl
 8013530:	2b00      	cmp	r3, #0
 8013532:	4699      	mov	r9, r3
 8013534:	dc36      	bgt.n	80135a4 <_printf_float+0x360>
 8013536:	f04f 0b00 	mov.w	fp, #0
 801353a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801353e:	f104 021a 	add.w	r2, r4, #26
 8013542:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013544:	9306      	str	r3, [sp, #24]
 8013546:	eba3 0309 	sub.w	r3, r3, r9
 801354a:	455b      	cmp	r3, fp
 801354c:	dc31      	bgt.n	80135b2 <_printf_float+0x36e>
 801354e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013550:	459a      	cmp	sl, r3
 8013552:	dc3a      	bgt.n	80135ca <_printf_float+0x386>
 8013554:	6823      	ldr	r3, [r4, #0]
 8013556:	07da      	lsls	r2, r3, #31
 8013558:	d437      	bmi.n	80135ca <_printf_float+0x386>
 801355a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801355c:	ebaa 0903 	sub.w	r9, sl, r3
 8013560:	9b06      	ldr	r3, [sp, #24]
 8013562:	ebaa 0303 	sub.w	r3, sl, r3
 8013566:	4599      	cmp	r9, r3
 8013568:	bfa8      	it	ge
 801356a:	4699      	movge	r9, r3
 801356c:	f1b9 0f00 	cmp.w	r9, #0
 8013570:	dc33      	bgt.n	80135da <_printf_float+0x396>
 8013572:	f04f 0800 	mov.w	r8, #0
 8013576:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801357a:	f104 0b1a 	add.w	fp, r4, #26
 801357e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013580:	ebaa 0303 	sub.w	r3, sl, r3
 8013584:	eba3 0309 	sub.w	r3, r3, r9
 8013588:	4543      	cmp	r3, r8
 801358a:	f77f af79 	ble.w	8013480 <_printf_float+0x23c>
 801358e:	2301      	movs	r3, #1
 8013590:	465a      	mov	r2, fp
 8013592:	4631      	mov	r1, r6
 8013594:	4628      	mov	r0, r5
 8013596:	47b8      	blx	r7
 8013598:	3001      	adds	r0, #1
 801359a:	f43f aeae 	beq.w	80132fa <_printf_float+0xb6>
 801359e:	f108 0801 	add.w	r8, r8, #1
 80135a2:	e7ec      	b.n	801357e <_printf_float+0x33a>
 80135a4:	4642      	mov	r2, r8
 80135a6:	4631      	mov	r1, r6
 80135a8:	4628      	mov	r0, r5
 80135aa:	47b8      	blx	r7
 80135ac:	3001      	adds	r0, #1
 80135ae:	d1c2      	bne.n	8013536 <_printf_float+0x2f2>
 80135b0:	e6a3      	b.n	80132fa <_printf_float+0xb6>
 80135b2:	2301      	movs	r3, #1
 80135b4:	4631      	mov	r1, r6
 80135b6:	4628      	mov	r0, r5
 80135b8:	9206      	str	r2, [sp, #24]
 80135ba:	47b8      	blx	r7
 80135bc:	3001      	adds	r0, #1
 80135be:	f43f ae9c 	beq.w	80132fa <_printf_float+0xb6>
 80135c2:	9a06      	ldr	r2, [sp, #24]
 80135c4:	f10b 0b01 	add.w	fp, fp, #1
 80135c8:	e7bb      	b.n	8013542 <_printf_float+0x2fe>
 80135ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80135ce:	4631      	mov	r1, r6
 80135d0:	4628      	mov	r0, r5
 80135d2:	47b8      	blx	r7
 80135d4:	3001      	adds	r0, #1
 80135d6:	d1c0      	bne.n	801355a <_printf_float+0x316>
 80135d8:	e68f      	b.n	80132fa <_printf_float+0xb6>
 80135da:	9a06      	ldr	r2, [sp, #24]
 80135dc:	464b      	mov	r3, r9
 80135de:	4442      	add	r2, r8
 80135e0:	4631      	mov	r1, r6
 80135e2:	4628      	mov	r0, r5
 80135e4:	47b8      	blx	r7
 80135e6:	3001      	adds	r0, #1
 80135e8:	d1c3      	bne.n	8013572 <_printf_float+0x32e>
 80135ea:	e686      	b.n	80132fa <_printf_float+0xb6>
 80135ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80135f0:	f1ba 0f01 	cmp.w	sl, #1
 80135f4:	dc01      	bgt.n	80135fa <_printf_float+0x3b6>
 80135f6:	07db      	lsls	r3, r3, #31
 80135f8:	d536      	bpl.n	8013668 <_printf_float+0x424>
 80135fa:	2301      	movs	r3, #1
 80135fc:	4642      	mov	r2, r8
 80135fe:	4631      	mov	r1, r6
 8013600:	4628      	mov	r0, r5
 8013602:	47b8      	blx	r7
 8013604:	3001      	adds	r0, #1
 8013606:	f43f ae78 	beq.w	80132fa <_printf_float+0xb6>
 801360a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801360e:	4631      	mov	r1, r6
 8013610:	4628      	mov	r0, r5
 8013612:	47b8      	blx	r7
 8013614:	3001      	adds	r0, #1
 8013616:	f43f ae70 	beq.w	80132fa <_printf_float+0xb6>
 801361a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801361e:	2200      	movs	r2, #0
 8013620:	2300      	movs	r3, #0
 8013622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013626:	f7fa f8d7 	bl	800d7d8 <__aeabi_dcmpeq>
 801362a:	b9c0      	cbnz	r0, 801365e <_printf_float+0x41a>
 801362c:	4653      	mov	r3, sl
 801362e:	f108 0201 	add.w	r2, r8, #1
 8013632:	4631      	mov	r1, r6
 8013634:	4628      	mov	r0, r5
 8013636:	47b8      	blx	r7
 8013638:	3001      	adds	r0, #1
 801363a:	d10c      	bne.n	8013656 <_printf_float+0x412>
 801363c:	e65d      	b.n	80132fa <_printf_float+0xb6>
 801363e:	2301      	movs	r3, #1
 8013640:	465a      	mov	r2, fp
 8013642:	4631      	mov	r1, r6
 8013644:	4628      	mov	r0, r5
 8013646:	47b8      	blx	r7
 8013648:	3001      	adds	r0, #1
 801364a:	f43f ae56 	beq.w	80132fa <_printf_float+0xb6>
 801364e:	f108 0801 	add.w	r8, r8, #1
 8013652:	45d0      	cmp	r8, sl
 8013654:	dbf3      	blt.n	801363e <_printf_float+0x3fa>
 8013656:	464b      	mov	r3, r9
 8013658:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801365c:	e6df      	b.n	801341e <_printf_float+0x1da>
 801365e:	f04f 0800 	mov.w	r8, #0
 8013662:	f104 0b1a 	add.w	fp, r4, #26
 8013666:	e7f4      	b.n	8013652 <_printf_float+0x40e>
 8013668:	2301      	movs	r3, #1
 801366a:	4642      	mov	r2, r8
 801366c:	e7e1      	b.n	8013632 <_printf_float+0x3ee>
 801366e:	2301      	movs	r3, #1
 8013670:	464a      	mov	r2, r9
 8013672:	4631      	mov	r1, r6
 8013674:	4628      	mov	r0, r5
 8013676:	47b8      	blx	r7
 8013678:	3001      	adds	r0, #1
 801367a:	f43f ae3e 	beq.w	80132fa <_printf_float+0xb6>
 801367e:	f108 0801 	add.w	r8, r8, #1
 8013682:	68e3      	ldr	r3, [r4, #12]
 8013684:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013686:	1a5b      	subs	r3, r3, r1
 8013688:	4543      	cmp	r3, r8
 801368a:	dcf0      	bgt.n	801366e <_printf_float+0x42a>
 801368c:	e6fc      	b.n	8013488 <_printf_float+0x244>
 801368e:	f04f 0800 	mov.w	r8, #0
 8013692:	f104 0919 	add.w	r9, r4, #25
 8013696:	e7f4      	b.n	8013682 <_printf_float+0x43e>

08013698 <_printf_common>:
 8013698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801369c:	4616      	mov	r6, r2
 801369e:	4698      	mov	r8, r3
 80136a0:	688a      	ldr	r2, [r1, #8]
 80136a2:	690b      	ldr	r3, [r1, #16]
 80136a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80136a8:	4293      	cmp	r3, r2
 80136aa:	bfb8      	it	lt
 80136ac:	4613      	movlt	r3, r2
 80136ae:	6033      	str	r3, [r6, #0]
 80136b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80136b4:	4607      	mov	r7, r0
 80136b6:	460c      	mov	r4, r1
 80136b8:	b10a      	cbz	r2, 80136be <_printf_common+0x26>
 80136ba:	3301      	adds	r3, #1
 80136bc:	6033      	str	r3, [r6, #0]
 80136be:	6823      	ldr	r3, [r4, #0]
 80136c0:	0699      	lsls	r1, r3, #26
 80136c2:	bf42      	ittt	mi
 80136c4:	6833      	ldrmi	r3, [r6, #0]
 80136c6:	3302      	addmi	r3, #2
 80136c8:	6033      	strmi	r3, [r6, #0]
 80136ca:	6825      	ldr	r5, [r4, #0]
 80136cc:	f015 0506 	ands.w	r5, r5, #6
 80136d0:	d106      	bne.n	80136e0 <_printf_common+0x48>
 80136d2:	f104 0a19 	add.w	sl, r4, #25
 80136d6:	68e3      	ldr	r3, [r4, #12]
 80136d8:	6832      	ldr	r2, [r6, #0]
 80136da:	1a9b      	subs	r3, r3, r2
 80136dc:	42ab      	cmp	r3, r5
 80136de:	dc26      	bgt.n	801372e <_printf_common+0x96>
 80136e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80136e4:	6822      	ldr	r2, [r4, #0]
 80136e6:	3b00      	subs	r3, #0
 80136e8:	bf18      	it	ne
 80136ea:	2301      	movne	r3, #1
 80136ec:	0692      	lsls	r2, r2, #26
 80136ee:	d42b      	bmi.n	8013748 <_printf_common+0xb0>
 80136f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80136f4:	4641      	mov	r1, r8
 80136f6:	4638      	mov	r0, r7
 80136f8:	47c8      	blx	r9
 80136fa:	3001      	adds	r0, #1
 80136fc:	d01e      	beq.n	801373c <_printf_common+0xa4>
 80136fe:	6823      	ldr	r3, [r4, #0]
 8013700:	6922      	ldr	r2, [r4, #16]
 8013702:	f003 0306 	and.w	r3, r3, #6
 8013706:	2b04      	cmp	r3, #4
 8013708:	bf02      	ittt	eq
 801370a:	68e5      	ldreq	r5, [r4, #12]
 801370c:	6833      	ldreq	r3, [r6, #0]
 801370e:	1aed      	subeq	r5, r5, r3
 8013710:	68a3      	ldr	r3, [r4, #8]
 8013712:	bf0c      	ite	eq
 8013714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013718:	2500      	movne	r5, #0
 801371a:	4293      	cmp	r3, r2
 801371c:	bfc4      	itt	gt
 801371e:	1a9b      	subgt	r3, r3, r2
 8013720:	18ed      	addgt	r5, r5, r3
 8013722:	2600      	movs	r6, #0
 8013724:	341a      	adds	r4, #26
 8013726:	42b5      	cmp	r5, r6
 8013728:	d11a      	bne.n	8013760 <_printf_common+0xc8>
 801372a:	2000      	movs	r0, #0
 801372c:	e008      	b.n	8013740 <_printf_common+0xa8>
 801372e:	2301      	movs	r3, #1
 8013730:	4652      	mov	r2, sl
 8013732:	4641      	mov	r1, r8
 8013734:	4638      	mov	r0, r7
 8013736:	47c8      	blx	r9
 8013738:	3001      	adds	r0, #1
 801373a:	d103      	bne.n	8013744 <_printf_common+0xac>
 801373c:	f04f 30ff 	mov.w	r0, #4294967295
 8013740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013744:	3501      	adds	r5, #1
 8013746:	e7c6      	b.n	80136d6 <_printf_common+0x3e>
 8013748:	18e1      	adds	r1, r4, r3
 801374a:	1c5a      	adds	r2, r3, #1
 801374c:	2030      	movs	r0, #48	@ 0x30
 801374e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013752:	4422      	add	r2, r4
 8013754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801375c:	3302      	adds	r3, #2
 801375e:	e7c7      	b.n	80136f0 <_printf_common+0x58>
 8013760:	2301      	movs	r3, #1
 8013762:	4622      	mov	r2, r4
 8013764:	4641      	mov	r1, r8
 8013766:	4638      	mov	r0, r7
 8013768:	47c8      	blx	r9
 801376a:	3001      	adds	r0, #1
 801376c:	d0e6      	beq.n	801373c <_printf_common+0xa4>
 801376e:	3601      	adds	r6, #1
 8013770:	e7d9      	b.n	8013726 <_printf_common+0x8e>
	...

08013774 <_printf_i>:
 8013774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013778:	7e0f      	ldrb	r7, [r1, #24]
 801377a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801377c:	2f78      	cmp	r7, #120	@ 0x78
 801377e:	4691      	mov	r9, r2
 8013780:	4680      	mov	r8, r0
 8013782:	460c      	mov	r4, r1
 8013784:	469a      	mov	sl, r3
 8013786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801378a:	d807      	bhi.n	801379c <_printf_i+0x28>
 801378c:	2f62      	cmp	r7, #98	@ 0x62
 801378e:	d80a      	bhi.n	80137a6 <_printf_i+0x32>
 8013790:	2f00      	cmp	r7, #0
 8013792:	f000 80d2 	beq.w	801393a <_printf_i+0x1c6>
 8013796:	2f58      	cmp	r7, #88	@ 0x58
 8013798:	f000 80b9 	beq.w	801390e <_printf_i+0x19a>
 801379c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80137a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80137a4:	e03a      	b.n	801381c <_printf_i+0xa8>
 80137a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80137aa:	2b15      	cmp	r3, #21
 80137ac:	d8f6      	bhi.n	801379c <_printf_i+0x28>
 80137ae:	a101      	add	r1, pc, #4	@ (adr r1, 80137b4 <_printf_i+0x40>)
 80137b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80137b4:	0801380d 	.word	0x0801380d
 80137b8:	08013821 	.word	0x08013821
 80137bc:	0801379d 	.word	0x0801379d
 80137c0:	0801379d 	.word	0x0801379d
 80137c4:	0801379d 	.word	0x0801379d
 80137c8:	0801379d 	.word	0x0801379d
 80137cc:	08013821 	.word	0x08013821
 80137d0:	0801379d 	.word	0x0801379d
 80137d4:	0801379d 	.word	0x0801379d
 80137d8:	0801379d 	.word	0x0801379d
 80137dc:	0801379d 	.word	0x0801379d
 80137e0:	08013921 	.word	0x08013921
 80137e4:	0801384b 	.word	0x0801384b
 80137e8:	080138db 	.word	0x080138db
 80137ec:	0801379d 	.word	0x0801379d
 80137f0:	0801379d 	.word	0x0801379d
 80137f4:	08013943 	.word	0x08013943
 80137f8:	0801379d 	.word	0x0801379d
 80137fc:	0801384b 	.word	0x0801384b
 8013800:	0801379d 	.word	0x0801379d
 8013804:	0801379d 	.word	0x0801379d
 8013808:	080138e3 	.word	0x080138e3
 801380c:	6833      	ldr	r3, [r6, #0]
 801380e:	1d1a      	adds	r2, r3, #4
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	6032      	str	r2, [r6, #0]
 8013814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801381c:	2301      	movs	r3, #1
 801381e:	e09d      	b.n	801395c <_printf_i+0x1e8>
 8013820:	6833      	ldr	r3, [r6, #0]
 8013822:	6820      	ldr	r0, [r4, #0]
 8013824:	1d19      	adds	r1, r3, #4
 8013826:	6031      	str	r1, [r6, #0]
 8013828:	0606      	lsls	r6, r0, #24
 801382a:	d501      	bpl.n	8013830 <_printf_i+0xbc>
 801382c:	681d      	ldr	r5, [r3, #0]
 801382e:	e003      	b.n	8013838 <_printf_i+0xc4>
 8013830:	0645      	lsls	r5, r0, #25
 8013832:	d5fb      	bpl.n	801382c <_printf_i+0xb8>
 8013834:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013838:	2d00      	cmp	r5, #0
 801383a:	da03      	bge.n	8013844 <_printf_i+0xd0>
 801383c:	232d      	movs	r3, #45	@ 0x2d
 801383e:	426d      	negs	r5, r5
 8013840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013844:	4859      	ldr	r0, [pc, #356]	@ (80139ac <_printf_i+0x238>)
 8013846:	230a      	movs	r3, #10
 8013848:	e011      	b.n	801386e <_printf_i+0xfa>
 801384a:	6821      	ldr	r1, [r4, #0]
 801384c:	6833      	ldr	r3, [r6, #0]
 801384e:	0608      	lsls	r0, r1, #24
 8013850:	f853 5b04 	ldr.w	r5, [r3], #4
 8013854:	d402      	bmi.n	801385c <_printf_i+0xe8>
 8013856:	0649      	lsls	r1, r1, #25
 8013858:	bf48      	it	mi
 801385a:	b2ad      	uxthmi	r5, r5
 801385c:	2f6f      	cmp	r7, #111	@ 0x6f
 801385e:	4853      	ldr	r0, [pc, #332]	@ (80139ac <_printf_i+0x238>)
 8013860:	6033      	str	r3, [r6, #0]
 8013862:	bf14      	ite	ne
 8013864:	230a      	movne	r3, #10
 8013866:	2308      	moveq	r3, #8
 8013868:	2100      	movs	r1, #0
 801386a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801386e:	6866      	ldr	r6, [r4, #4]
 8013870:	60a6      	str	r6, [r4, #8]
 8013872:	2e00      	cmp	r6, #0
 8013874:	bfa2      	ittt	ge
 8013876:	6821      	ldrge	r1, [r4, #0]
 8013878:	f021 0104 	bicge.w	r1, r1, #4
 801387c:	6021      	strge	r1, [r4, #0]
 801387e:	b90d      	cbnz	r5, 8013884 <_printf_i+0x110>
 8013880:	2e00      	cmp	r6, #0
 8013882:	d04b      	beq.n	801391c <_printf_i+0x1a8>
 8013884:	4616      	mov	r6, r2
 8013886:	fbb5 f1f3 	udiv	r1, r5, r3
 801388a:	fb03 5711 	mls	r7, r3, r1, r5
 801388e:	5dc7      	ldrb	r7, [r0, r7]
 8013890:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013894:	462f      	mov	r7, r5
 8013896:	42bb      	cmp	r3, r7
 8013898:	460d      	mov	r5, r1
 801389a:	d9f4      	bls.n	8013886 <_printf_i+0x112>
 801389c:	2b08      	cmp	r3, #8
 801389e:	d10b      	bne.n	80138b8 <_printf_i+0x144>
 80138a0:	6823      	ldr	r3, [r4, #0]
 80138a2:	07df      	lsls	r7, r3, #31
 80138a4:	d508      	bpl.n	80138b8 <_printf_i+0x144>
 80138a6:	6923      	ldr	r3, [r4, #16]
 80138a8:	6861      	ldr	r1, [r4, #4]
 80138aa:	4299      	cmp	r1, r3
 80138ac:	bfde      	ittt	le
 80138ae:	2330      	movle	r3, #48	@ 0x30
 80138b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80138b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80138b8:	1b92      	subs	r2, r2, r6
 80138ba:	6122      	str	r2, [r4, #16]
 80138bc:	f8cd a000 	str.w	sl, [sp]
 80138c0:	464b      	mov	r3, r9
 80138c2:	aa03      	add	r2, sp, #12
 80138c4:	4621      	mov	r1, r4
 80138c6:	4640      	mov	r0, r8
 80138c8:	f7ff fee6 	bl	8013698 <_printf_common>
 80138cc:	3001      	adds	r0, #1
 80138ce:	d14a      	bne.n	8013966 <_printf_i+0x1f2>
 80138d0:	f04f 30ff 	mov.w	r0, #4294967295
 80138d4:	b004      	add	sp, #16
 80138d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138da:	6823      	ldr	r3, [r4, #0]
 80138dc:	f043 0320 	orr.w	r3, r3, #32
 80138e0:	6023      	str	r3, [r4, #0]
 80138e2:	4833      	ldr	r0, [pc, #204]	@ (80139b0 <_printf_i+0x23c>)
 80138e4:	2778      	movs	r7, #120	@ 0x78
 80138e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80138ea:	6823      	ldr	r3, [r4, #0]
 80138ec:	6831      	ldr	r1, [r6, #0]
 80138ee:	061f      	lsls	r7, r3, #24
 80138f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80138f4:	d402      	bmi.n	80138fc <_printf_i+0x188>
 80138f6:	065f      	lsls	r7, r3, #25
 80138f8:	bf48      	it	mi
 80138fa:	b2ad      	uxthmi	r5, r5
 80138fc:	6031      	str	r1, [r6, #0]
 80138fe:	07d9      	lsls	r1, r3, #31
 8013900:	bf44      	itt	mi
 8013902:	f043 0320 	orrmi.w	r3, r3, #32
 8013906:	6023      	strmi	r3, [r4, #0]
 8013908:	b11d      	cbz	r5, 8013912 <_printf_i+0x19e>
 801390a:	2310      	movs	r3, #16
 801390c:	e7ac      	b.n	8013868 <_printf_i+0xf4>
 801390e:	4827      	ldr	r0, [pc, #156]	@ (80139ac <_printf_i+0x238>)
 8013910:	e7e9      	b.n	80138e6 <_printf_i+0x172>
 8013912:	6823      	ldr	r3, [r4, #0]
 8013914:	f023 0320 	bic.w	r3, r3, #32
 8013918:	6023      	str	r3, [r4, #0]
 801391a:	e7f6      	b.n	801390a <_printf_i+0x196>
 801391c:	4616      	mov	r6, r2
 801391e:	e7bd      	b.n	801389c <_printf_i+0x128>
 8013920:	6833      	ldr	r3, [r6, #0]
 8013922:	6825      	ldr	r5, [r4, #0]
 8013924:	6961      	ldr	r1, [r4, #20]
 8013926:	1d18      	adds	r0, r3, #4
 8013928:	6030      	str	r0, [r6, #0]
 801392a:	062e      	lsls	r6, r5, #24
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	d501      	bpl.n	8013934 <_printf_i+0x1c0>
 8013930:	6019      	str	r1, [r3, #0]
 8013932:	e002      	b.n	801393a <_printf_i+0x1c6>
 8013934:	0668      	lsls	r0, r5, #25
 8013936:	d5fb      	bpl.n	8013930 <_printf_i+0x1bc>
 8013938:	8019      	strh	r1, [r3, #0]
 801393a:	2300      	movs	r3, #0
 801393c:	6123      	str	r3, [r4, #16]
 801393e:	4616      	mov	r6, r2
 8013940:	e7bc      	b.n	80138bc <_printf_i+0x148>
 8013942:	6833      	ldr	r3, [r6, #0]
 8013944:	1d1a      	adds	r2, r3, #4
 8013946:	6032      	str	r2, [r6, #0]
 8013948:	681e      	ldr	r6, [r3, #0]
 801394a:	6862      	ldr	r2, [r4, #4]
 801394c:	2100      	movs	r1, #0
 801394e:	4630      	mov	r0, r6
 8013950:	f7f9 fac6 	bl	800cee0 <memchr>
 8013954:	b108      	cbz	r0, 801395a <_printf_i+0x1e6>
 8013956:	1b80      	subs	r0, r0, r6
 8013958:	6060      	str	r0, [r4, #4]
 801395a:	6863      	ldr	r3, [r4, #4]
 801395c:	6123      	str	r3, [r4, #16]
 801395e:	2300      	movs	r3, #0
 8013960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013964:	e7aa      	b.n	80138bc <_printf_i+0x148>
 8013966:	6923      	ldr	r3, [r4, #16]
 8013968:	4632      	mov	r2, r6
 801396a:	4649      	mov	r1, r9
 801396c:	4640      	mov	r0, r8
 801396e:	47d0      	blx	sl
 8013970:	3001      	adds	r0, #1
 8013972:	d0ad      	beq.n	80138d0 <_printf_i+0x15c>
 8013974:	6823      	ldr	r3, [r4, #0]
 8013976:	079b      	lsls	r3, r3, #30
 8013978:	d413      	bmi.n	80139a2 <_printf_i+0x22e>
 801397a:	68e0      	ldr	r0, [r4, #12]
 801397c:	9b03      	ldr	r3, [sp, #12]
 801397e:	4298      	cmp	r0, r3
 8013980:	bfb8      	it	lt
 8013982:	4618      	movlt	r0, r3
 8013984:	e7a6      	b.n	80138d4 <_printf_i+0x160>
 8013986:	2301      	movs	r3, #1
 8013988:	4632      	mov	r2, r6
 801398a:	4649      	mov	r1, r9
 801398c:	4640      	mov	r0, r8
 801398e:	47d0      	blx	sl
 8013990:	3001      	adds	r0, #1
 8013992:	d09d      	beq.n	80138d0 <_printf_i+0x15c>
 8013994:	3501      	adds	r5, #1
 8013996:	68e3      	ldr	r3, [r4, #12]
 8013998:	9903      	ldr	r1, [sp, #12]
 801399a:	1a5b      	subs	r3, r3, r1
 801399c:	42ab      	cmp	r3, r5
 801399e:	dcf2      	bgt.n	8013986 <_printf_i+0x212>
 80139a0:	e7eb      	b.n	801397a <_printf_i+0x206>
 80139a2:	2500      	movs	r5, #0
 80139a4:	f104 0619 	add.w	r6, r4, #25
 80139a8:	e7f5      	b.n	8013996 <_printf_i+0x222>
 80139aa:	bf00      	nop
 80139ac:	0801a38b 	.word	0x0801a38b
 80139b0:	0801a39c 	.word	0x0801a39c

080139b4 <_scanf_float>:
 80139b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139b8:	b087      	sub	sp, #28
 80139ba:	4617      	mov	r7, r2
 80139bc:	9303      	str	r3, [sp, #12]
 80139be:	688b      	ldr	r3, [r1, #8]
 80139c0:	1e5a      	subs	r2, r3, #1
 80139c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80139c6:	bf81      	itttt	hi
 80139c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80139cc:	eb03 0b05 	addhi.w	fp, r3, r5
 80139d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80139d4:	608b      	strhi	r3, [r1, #8]
 80139d6:	680b      	ldr	r3, [r1, #0]
 80139d8:	460a      	mov	r2, r1
 80139da:	f04f 0500 	mov.w	r5, #0
 80139de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80139e2:	f842 3b1c 	str.w	r3, [r2], #28
 80139e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80139ea:	4680      	mov	r8, r0
 80139ec:	460c      	mov	r4, r1
 80139ee:	bf98      	it	ls
 80139f0:	f04f 0b00 	movls.w	fp, #0
 80139f4:	9201      	str	r2, [sp, #4]
 80139f6:	4616      	mov	r6, r2
 80139f8:	46aa      	mov	sl, r5
 80139fa:	46a9      	mov	r9, r5
 80139fc:	9502      	str	r5, [sp, #8]
 80139fe:	68a2      	ldr	r2, [r4, #8]
 8013a00:	b152      	cbz	r2, 8013a18 <_scanf_float+0x64>
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	781b      	ldrb	r3, [r3, #0]
 8013a06:	2b4e      	cmp	r3, #78	@ 0x4e
 8013a08:	d864      	bhi.n	8013ad4 <_scanf_float+0x120>
 8013a0a:	2b40      	cmp	r3, #64	@ 0x40
 8013a0c:	d83c      	bhi.n	8013a88 <_scanf_float+0xd4>
 8013a0e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8013a12:	b2c8      	uxtb	r0, r1
 8013a14:	280e      	cmp	r0, #14
 8013a16:	d93a      	bls.n	8013a8e <_scanf_float+0xda>
 8013a18:	f1b9 0f00 	cmp.w	r9, #0
 8013a1c:	d003      	beq.n	8013a26 <_scanf_float+0x72>
 8013a1e:	6823      	ldr	r3, [r4, #0]
 8013a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013a24:	6023      	str	r3, [r4, #0]
 8013a26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013a2a:	f1ba 0f01 	cmp.w	sl, #1
 8013a2e:	f200 8117 	bhi.w	8013c60 <_scanf_float+0x2ac>
 8013a32:	9b01      	ldr	r3, [sp, #4]
 8013a34:	429e      	cmp	r6, r3
 8013a36:	f200 8108 	bhi.w	8013c4a <_scanf_float+0x296>
 8013a3a:	2001      	movs	r0, #1
 8013a3c:	b007      	add	sp, #28
 8013a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a42:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8013a46:	2a0d      	cmp	r2, #13
 8013a48:	d8e6      	bhi.n	8013a18 <_scanf_float+0x64>
 8013a4a:	a101      	add	r1, pc, #4	@ (adr r1, 8013a50 <_scanf_float+0x9c>)
 8013a4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013a50:	08013b97 	.word	0x08013b97
 8013a54:	08013a19 	.word	0x08013a19
 8013a58:	08013a19 	.word	0x08013a19
 8013a5c:	08013a19 	.word	0x08013a19
 8013a60:	08013bf7 	.word	0x08013bf7
 8013a64:	08013bcf 	.word	0x08013bcf
 8013a68:	08013a19 	.word	0x08013a19
 8013a6c:	08013a19 	.word	0x08013a19
 8013a70:	08013ba5 	.word	0x08013ba5
 8013a74:	08013a19 	.word	0x08013a19
 8013a78:	08013a19 	.word	0x08013a19
 8013a7c:	08013a19 	.word	0x08013a19
 8013a80:	08013a19 	.word	0x08013a19
 8013a84:	08013b5d 	.word	0x08013b5d
 8013a88:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8013a8c:	e7db      	b.n	8013a46 <_scanf_float+0x92>
 8013a8e:	290e      	cmp	r1, #14
 8013a90:	d8c2      	bhi.n	8013a18 <_scanf_float+0x64>
 8013a92:	a001      	add	r0, pc, #4	@ (adr r0, 8013a98 <_scanf_float+0xe4>)
 8013a94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013a98:	08013b4d 	.word	0x08013b4d
 8013a9c:	08013a19 	.word	0x08013a19
 8013aa0:	08013b4d 	.word	0x08013b4d
 8013aa4:	08013be3 	.word	0x08013be3
 8013aa8:	08013a19 	.word	0x08013a19
 8013aac:	08013af5 	.word	0x08013af5
 8013ab0:	08013b33 	.word	0x08013b33
 8013ab4:	08013b33 	.word	0x08013b33
 8013ab8:	08013b33 	.word	0x08013b33
 8013abc:	08013b33 	.word	0x08013b33
 8013ac0:	08013b33 	.word	0x08013b33
 8013ac4:	08013b33 	.word	0x08013b33
 8013ac8:	08013b33 	.word	0x08013b33
 8013acc:	08013b33 	.word	0x08013b33
 8013ad0:	08013b33 	.word	0x08013b33
 8013ad4:	2b6e      	cmp	r3, #110	@ 0x6e
 8013ad6:	d809      	bhi.n	8013aec <_scanf_float+0x138>
 8013ad8:	2b60      	cmp	r3, #96	@ 0x60
 8013ada:	d8b2      	bhi.n	8013a42 <_scanf_float+0x8e>
 8013adc:	2b54      	cmp	r3, #84	@ 0x54
 8013ade:	d07b      	beq.n	8013bd8 <_scanf_float+0x224>
 8013ae0:	2b59      	cmp	r3, #89	@ 0x59
 8013ae2:	d199      	bne.n	8013a18 <_scanf_float+0x64>
 8013ae4:	2d07      	cmp	r5, #7
 8013ae6:	d197      	bne.n	8013a18 <_scanf_float+0x64>
 8013ae8:	2508      	movs	r5, #8
 8013aea:	e02c      	b.n	8013b46 <_scanf_float+0x192>
 8013aec:	2b74      	cmp	r3, #116	@ 0x74
 8013aee:	d073      	beq.n	8013bd8 <_scanf_float+0x224>
 8013af0:	2b79      	cmp	r3, #121	@ 0x79
 8013af2:	e7f6      	b.n	8013ae2 <_scanf_float+0x12e>
 8013af4:	6821      	ldr	r1, [r4, #0]
 8013af6:	05c8      	lsls	r0, r1, #23
 8013af8:	d51b      	bpl.n	8013b32 <_scanf_float+0x17e>
 8013afa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8013afe:	6021      	str	r1, [r4, #0]
 8013b00:	f109 0901 	add.w	r9, r9, #1
 8013b04:	f1bb 0f00 	cmp.w	fp, #0
 8013b08:	d003      	beq.n	8013b12 <_scanf_float+0x15e>
 8013b0a:	3201      	adds	r2, #1
 8013b0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013b10:	60a2      	str	r2, [r4, #8]
 8013b12:	68a3      	ldr	r3, [r4, #8]
 8013b14:	3b01      	subs	r3, #1
 8013b16:	60a3      	str	r3, [r4, #8]
 8013b18:	6923      	ldr	r3, [r4, #16]
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	6123      	str	r3, [r4, #16]
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	3b01      	subs	r3, #1
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	607b      	str	r3, [r7, #4]
 8013b26:	f340 8087 	ble.w	8013c38 <_scanf_float+0x284>
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	3301      	adds	r3, #1
 8013b2e:	603b      	str	r3, [r7, #0]
 8013b30:	e765      	b.n	80139fe <_scanf_float+0x4a>
 8013b32:	eb1a 0105 	adds.w	r1, sl, r5
 8013b36:	f47f af6f 	bne.w	8013a18 <_scanf_float+0x64>
 8013b3a:	6822      	ldr	r2, [r4, #0]
 8013b3c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013b40:	6022      	str	r2, [r4, #0]
 8013b42:	460d      	mov	r5, r1
 8013b44:	468a      	mov	sl, r1
 8013b46:	f806 3b01 	strb.w	r3, [r6], #1
 8013b4a:	e7e2      	b.n	8013b12 <_scanf_float+0x15e>
 8013b4c:	6822      	ldr	r2, [r4, #0]
 8013b4e:	0610      	lsls	r0, r2, #24
 8013b50:	f57f af62 	bpl.w	8013a18 <_scanf_float+0x64>
 8013b54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013b58:	6022      	str	r2, [r4, #0]
 8013b5a:	e7f4      	b.n	8013b46 <_scanf_float+0x192>
 8013b5c:	f1ba 0f00 	cmp.w	sl, #0
 8013b60:	d10e      	bne.n	8013b80 <_scanf_float+0x1cc>
 8013b62:	f1b9 0f00 	cmp.w	r9, #0
 8013b66:	d10e      	bne.n	8013b86 <_scanf_float+0x1d2>
 8013b68:	6822      	ldr	r2, [r4, #0]
 8013b6a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013b6e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013b72:	d108      	bne.n	8013b86 <_scanf_float+0x1d2>
 8013b74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013b78:	6022      	str	r2, [r4, #0]
 8013b7a:	f04f 0a01 	mov.w	sl, #1
 8013b7e:	e7e2      	b.n	8013b46 <_scanf_float+0x192>
 8013b80:	f1ba 0f02 	cmp.w	sl, #2
 8013b84:	d055      	beq.n	8013c32 <_scanf_float+0x27e>
 8013b86:	2d01      	cmp	r5, #1
 8013b88:	d002      	beq.n	8013b90 <_scanf_float+0x1dc>
 8013b8a:	2d04      	cmp	r5, #4
 8013b8c:	f47f af44 	bne.w	8013a18 <_scanf_float+0x64>
 8013b90:	3501      	adds	r5, #1
 8013b92:	b2ed      	uxtb	r5, r5
 8013b94:	e7d7      	b.n	8013b46 <_scanf_float+0x192>
 8013b96:	f1ba 0f01 	cmp.w	sl, #1
 8013b9a:	f47f af3d 	bne.w	8013a18 <_scanf_float+0x64>
 8013b9e:	f04f 0a02 	mov.w	sl, #2
 8013ba2:	e7d0      	b.n	8013b46 <_scanf_float+0x192>
 8013ba4:	b97d      	cbnz	r5, 8013bc6 <_scanf_float+0x212>
 8013ba6:	f1b9 0f00 	cmp.w	r9, #0
 8013baa:	f47f af38 	bne.w	8013a1e <_scanf_float+0x6a>
 8013bae:	6822      	ldr	r2, [r4, #0]
 8013bb0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013bb4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013bb8:	f040 8108 	bne.w	8013dcc <_scanf_float+0x418>
 8013bbc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013bc0:	6022      	str	r2, [r4, #0]
 8013bc2:	2501      	movs	r5, #1
 8013bc4:	e7bf      	b.n	8013b46 <_scanf_float+0x192>
 8013bc6:	2d03      	cmp	r5, #3
 8013bc8:	d0e2      	beq.n	8013b90 <_scanf_float+0x1dc>
 8013bca:	2d05      	cmp	r5, #5
 8013bcc:	e7de      	b.n	8013b8c <_scanf_float+0x1d8>
 8013bce:	2d02      	cmp	r5, #2
 8013bd0:	f47f af22 	bne.w	8013a18 <_scanf_float+0x64>
 8013bd4:	2503      	movs	r5, #3
 8013bd6:	e7b6      	b.n	8013b46 <_scanf_float+0x192>
 8013bd8:	2d06      	cmp	r5, #6
 8013bda:	f47f af1d 	bne.w	8013a18 <_scanf_float+0x64>
 8013bde:	2507      	movs	r5, #7
 8013be0:	e7b1      	b.n	8013b46 <_scanf_float+0x192>
 8013be2:	6822      	ldr	r2, [r4, #0]
 8013be4:	0591      	lsls	r1, r2, #22
 8013be6:	f57f af17 	bpl.w	8013a18 <_scanf_float+0x64>
 8013bea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8013bee:	6022      	str	r2, [r4, #0]
 8013bf0:	f8cd 9008 	str.w	r9, [sp, #8]
 8013bf4:	e7a7      	b.n	8013b46 <_scanf_float+0x192>
 8013bf6:	6822      	ldr	r2, [r4, #0]
 8013bf8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8013bfc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013c00:	d006      	beq.n	8013c10 <_scanf_float+0x25c>
 8013c02:	0550      	lsls	r0, r2, #21
 8013c04:	f57f af08 	bpl.w	8013a18 <_scanf_float+0x64>
 8013c08:	f1b9 0f00 	cmp.w	r9, #0
 8013c0c:	f000 80de 	beq.w	8013dcc <_scanf_float+0x418>
 8013c10:	0591      	lsls	r1, r2, #22
 8013c12:	bf58      	it	pl
 8013c14:	9902      	ldrpl	r1, [sp, #8]
 8013c16:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013c1a:	bf58      	it	pl
 8013c1c:	eba9 0101 	subpl.w	r1, r9, r1
 8013c20:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8013c24:	bf58      	it	pl
 8013c26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013c2a:	6022      	str	r2, [r4, #0]
 8013c2c:	f04f 0900 	mov.w	r9, #0
 8013c30:	e789      	b.n	8013b46 <_scanf_float+0x192>
 8013c32:	f04f 0a03 	mov.w	sl, #3
 8013c36:	e786      	b.n	8013b46 <_scanf_float+0x192>
 8013c38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013c3c:	4639      	mov	r1, r7
 8013c3e:	4640      	mov	r0, r8
 8013c40:	4798      	blx	r3
 8013c42:	2800      	cmp	r0, #0
 8013c44:	f43f aedb 	beq.w	80139fe <_scanf_float+0x4a>
 8013c48:	e6e6      	b.n	8013a18 <_scanf_float+0x64>
 8013c4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013c4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013c52:	463a      	mov	r2, r7
 8013c54:	4640      	mov	r0, r8
 8013c56:	4798      	blx	r3
 8013c58:	6923      	ldr	r3, [r4, #16]
 8013c5a:	3b01      	subs	r3, #1
 8013c5c:	6123      	str	r3, [r4, #16]
 8013c5e:	e6e8      	b.n	8013a32 <_scanf_float+0x7e>
 8013c60:	1e6b      	subs	r3, r5, #1
 8013c62:	2b06      	cmp	r3, #6
 8013c64:	d824      	bhi.n	8013cb0 <_scanf_float+0x2fc>
 8013c66:	2d02      	cmp	r5, #2
 8013c68:	d836      	bhi.n	8013cd8 <_scanf_float+0x324>
 8013c6a:	9b01      	ldr	r3, [sp, #4]
 8013c6c:	429e      	cmp	r6, r3
 8013c6e:	f67f aee4 	bls.w	8013a3a <_scanf_float+0x86>
 8013c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013c76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013c7a:	463a      	mov	r2, r7
 8013c7c:	4640      	mov	r0, r8
 8013c7e:	4798      	blx	r3
 8013c80:	6923      	ldr	r3, [r4, #16]
 8013c82:	3b01      	subs	r3, #1
 8013c84:	6123      	str	r3, [r4, #16]
 8013c86:	e7f0      	b.n	8013c6a <_scanf_float+0x2b6>
 8013c88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013c8c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8013c90:	463a      	mov	r2, r7
 8013c92:	4640      	mov	r0, r8
 8013c94:	4798      	blx	r3
 8013c96:	6923      	ldr	r3, [r4, #16]
 8013c98:	3b01      	subs	r3, #1
 8013c9a:	6123      	str	r3, [r4, #16]
 8013c9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013ca0:	fa5f fa8a 	uxtb.w	sl, sl
 8013ca4:	f1ba 0f02 	cmp.w	sl, #2
 8013ca8:	d1ee      	bne.n	8013c88 <_scanf_float+0x2d4>
 8013caa:	3d03      	subs	r5, #3
 8013cac:	b2ed      	uxtb	r5, r5
 8013cae:	1b76      	subs	r6, r6, r5
 8013cb0:	6823      	ldr	r3, [r4, #0]
 8013cb2:	05da      	lsls	r2, r3, #23
 8013cb4:	d530      	bpl.n	8013d18 <_scanf_float+0x364>
 8013cb6:	055b      	lsls	r3, r3, #21
 8013cb8:	d511      	bpl.n	8013cde <_scanf_float+0x32a>
 8013cba:	9b01      	ldr	r3, [sp, #4]
 8013cbc:	429e      	cmp	r6, r3
 8013cbe:	f67f aebc 	bls.w	8013a3a <_scanf_float+0x86>
 8013cc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013cc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013cca:	463a      	mov	r2, r7
 8013ccc:	4640      	mov	r0, r8
 8013cce:	4798      	blx	r3
 8013cd0:	6923      	ldr	r3, [r4, #16]
 8013cd2:	3b01      	subs	r3, #1
 8013cd4:	6123      	str	r3, [r4, #16]
 8013cd6:	e7f0      	b.n	8013cba <_scanf_float+0x306>
 8013cd8:	46aa      	mov	sl, r5
 8013cda:	46b3      	mov	fp, r6
 8013cdc:	e7de      	b.n	8013c9c <_scanf_float+0x2e8>
 8013cde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013ce2:	6923      	ldr	r3, [r4, #16]
 8013ce4:	2965      	cmp	r1, #101	@ 0x65
 8013ce6:	f103 33ff 	add.w	r3, r3, #4294967295
 8013cea:	f106 35ff 	add.w	r5, r6, #4294967295
 8013cee:	6123      	str	r3, [r4, #16]
 8013cf0:	d00c      	beq.n	8013d0c <_scanf_float+0x358>
 8013cf2:	2945      	cmp	r1, #69	@ 0x45
 8013cf4:	d00a      	beq.n	8013d0c <_scanf_float+0x358>
 8013cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013cfa:	463a      	mov	r2, r7
 8013cfc:	4640      	mov	r0, r8
 8013cfe:	4798      	blx	r3
 8013d00:	6923      	ldr	r3, [r4, #16]
 8013d02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013d06:	3b01      	subs	r3, #1
 8013d08:	1eb5      	subs	r5, r6, #2
 8013d0a:	6123      	str	r3, [r4, #16]
 8013d0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013d10:	463a      	mov	r2, r7
 8013d12:	4640      	mov	r0, r8
 8013d14:	4798      	blx	r3
 8013d16:	462e      	mov	r6, r5
 8013d18:	6822      	ldr	r2, [r4, #0]
 8013d1a:	f012 0210 	ands.w	r2, r2, #16
 8013d1e:	d001      	beq.n	8013d24 <_scanf_float+0x370>
 8013d20:	2000      	movs	r0, #0
 8013d22:	e68b      	b.n	8013a3c <_scanf_float+0x88>
 8013d24:	7032      	strb	r2, [r6, #0]
 8013d26:	6823      	ldr	r3, [r4, #0]
 8013d28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013d30:	d11c      	bne.n	8013d6c <_scanf_float+0x3b8>
 8013d32:	9b02      	ldr	r3, [sp, #8]
 8013d34:	454b      	cmp	r3, r9
 8013d36:	eba3 0209 	sub.w	r2, r3, r9
 8013d3a:	d123      	bne.n	8013d84 <_scanf_float+0x3d0>
 8013d3c:	9901      	ldr	r1, [sp, #4]
 8013d3e:	2200      	movs	r2, #0
 8013d40:	4640      	mov	r0, r8
 8013d42:	f7ff f9cd 	bl	80130e0 <_strtod_r>
 8013d46:	9b03      	ldr	r3, [sp, #12]
 8013d48:	6821      	ldr	r1, [r4, #0]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	f011 0f02 	tst.w	r1, #2
 8013d50:	ec57 6b10 	vmov	r6, r7, d0
 8013d54:	f103 0204 	add.w	r2, r3, #4
 8013d58:	d01f      	beq.n	8013d9a <_scanf_float+0x3e6>
 8013d5a:	9903      	ldr	r1, [sp, #12]
 8013d5c:	600a      	str	r2, [r1, #0]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	e9c3 6700 	strd	r6, r7, [r3]
 8013d64:	68e3      	ldr	r3, [r4, #12]
 8013d66:	3301      	adds	r3, #1
 8013d68:	60e3      	str	r3, [r4, #12]
 8013d6a:	e7d9      	b.n	8013d20 <_scanf_float+0x36c>
 8013d6c:	9b04      	ldr	r3, [sp, #16]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d0e4      	beq.n	8013d3c <_scanf_float+0x388>
 8013d72:	9905      	ldr	r1, [sp, #20]
 8013d74:	230a      	movs	r3, #10
 8013d76:	3101      	adds	r1, #1
 8013d78:	4640      	mov	r0, r8
 8013d7a:	f002 fd8b 	bl	8016894 <_strtol_r>
 8013d7e:	9b04      	ldr	r3, [sp, #16]
 8013d80:	9e05      	ldr	r6, [sp, #20]
 8013d82:	1ac2      	subs	r2, r0, r3
 8013d84:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8013d88:	429e      	cmp	r6, r3
 8013d8a:	bf28      	it	cs
 8013d8c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8013d90:	4910      	ldr	r1, [pc, #64]	@ (8013dd4 <_scanf_float+0x420>)
 8013d92:	4630      	mov	r0, r6
 8013d94:	f000 fb9c 	bl	80144d0 <siprintf>
 8013d98:	e7d0      	b.n	8013d3c <_scanf_float+0x388>
 8013d9a:	f011 0f04 	tst.w	r1, #4
 8013d9e:	9903      	ldr	r1, [sp, #12]
 8013da0:	600a      	str	r2, [r1, #0]
 8013da2:	d1dc      	bne.n	8013d5e <_scanf_float+0x3aa>
 8013da4:	681d      	ldr	r5, [r3, #0]
 8013da6:	4632      	mov	r2, r6
 8013da8:	463b      	mov	r3, r7
 8013daa:	4630      	mov	r0, r6
 8013dac:	4639      	mov	r1, r7
 8013dae:	f7f9 fd45 	bl	800d83c <__aeabi_dcmpun>
 8013db2:	b128      	cbz	r0, 8013dc0 <_scanf_float+0x40c>
 8013db4:	4808      	ldr	r0, [pc, #32]	@ (8013dd8 <_scanf_float+0x424>)
 8013db6:	f000 fe4f 	bl	8014a58 <nanf>
 8013dba:	ed85 0a00 	vstr	s0, [r5]
 8013dbe:	e7d1      	b.n	8013d64 <_scanf_float+0x3b0>
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	4639      	mov	r1, r7
 8013dc4:	f7f9 fd98 	bl	800d8f8 <__aeabi_d2f>
 8013dc8:	6028      	str	r0, [r5, #0]
 8013dca:	e7cb      	b.n	8013d64 <_scanf_float+0x3b0>
 8013dcc:	f04f 0900 	mov.w	r9, #0
 8013dd0:	e629      	b.n	8013a26 <_scanf_float+0x72>
 8013dd2:	bf00      	nop
 8013dd4:	0801a3ad 	.word	0x0801a3ad
 8013dd8:	0801a64c 	.word	0x0801a64c

08013ddc <_fclose_r>:
 8013ddc:	b570      	push	{r4, r5, r6, lr}
 8013dde:	4605      	mov	r5, r0
 8013de0:	460c      	mov	r4, r1
 8013de2:	b1b1      	cbz	r1, 8013e12 <_fclose_r+0x36>
 8013de4:	b118      	cbz	r0, 8013dee <_fclose_r+0x12>
 8013de6:	6a03      	ldr	r3, [r0, #32]
 8013de8:	b90b      	cbnz	r3, 8013dee <_fclose_r+0x12>
 8013dea:	f000 f9df 	bl	80141ac <__sinit>
 8013dee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013df0:	07de      	lsls	r6, r3, #31
 8013df2:	d405      	bmi.n	8013e00 <_fclose_r+0x24>
 8013df4:	89a3      	ldrh	r3, [r4, #12]
 8013df6:	0598      	lsls	r0, r3, #22
 8013df8:	d402      	bmi.n	8013e00 <_fclose_r+0x24>
 8013dfa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013dfc:	f000 fe14 	bl	8014a28 <__retarget_lock_acquire_recursive>
 8013e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e04:	b943      	cbnz	r3, 8013e18 <_fclose_r+0x3c>
 8013e06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e08:	07d9      	lsls	r1, r3, #31
 8013e0a:	d402      	bmi.n	8013e12 <_fclose_r+0x36>
 8013e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e0e:	f000 fe0c 	bl	8014a2a <__retarget_lock_release_recursive>
 8013e12:	2600      	movs	r6, #0
 8013e14:	4630      	mov	r0, r6
 8013e16:	bd70      	pop	{r4, r5, r6, pc}
 8013e18:	4621      	mov	r1, r4
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	f000 f83c 	bl	8013e98 <__sflush_r>
 8013e20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013e22:	4606      	mov	r6, r0
 8013e24:	b133      	cbz	r3, 8013e34 <_fclose_r+0x58>
 8013e26:	6a21      	ldr	r1, [r4, #32]
 8013e28:	4628      	mov	r0, r5
 8013e2a:	4798      	blx	r3
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	bfb8      	it	lt
 8013e30:	f04f 36ff 	movlt.w	r6, #4294967295
 8013e34:	89a3      	ldrh	r3, [r4, #12]
 8013e36:	061a      	lsls	r2, r3, #24
 8013e38:	d503      	bpl.n	8013e42 <_fclose_r+0x66>
 8013e3a:	6921      	ldr	r1, [r4, #16]
 8013e3c:	4628      	mov	r0, r5
 8013e3e:	f001 fc5f 	bl	8015700 <_free_r>
 8013e42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013e44:	b141      	cbz	r1, 8013e58 <_fclose_r+0x7c>
 8013e46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013e4a:	4299      	cmp	r1, r3
 8013e4c:	d002      	beq.n	8013e54 <_fclose_r+0x78>
 8013e4e:	4628      	mov	r0, r5
 8013e50:	f001 fc56 	bl	8015700 <_free_r>
 8013e54:	2300      	movs	r3, #0
 8013e56:	6363      	str	r3, [r4, #52]	@ 0x34
 8013e58:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013e5a:	b121      	cbz	r1, 8013e66 <_fclose_r+0x8a>
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	f001 fc4f 	bl	8015700 <_free_r>
 8013e62:	2300      	movs	r3, #0
 8013e64:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013e66:	f000 f943 	bl	80140f0 <__sfp_lock_acquire>
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	81a3      	strh	r3, [r4, #12]
 8013e6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e70:	07db      	lsls	r3, r3, #31
 8013e72:	d402      	bmi.n	8013e7a <_fclose_r+0x9e>
 8013e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e76:	f000 fdd8 	bl	8014a2a <__retarget_lock_release_recursive>
 8013e7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e7c:	f000 fdd3 	bl	8014a26 <__retarget_lock_close_recursive>
 8013e80:	f000 f93c 	bl	80140fc <__sfp_lock_release>
 8013e84:	e7c6      	b.n	8013e14 <_fclose_r+0x38>
	...

08013e88 <fclose>:
 8013e88:	4b02      	ldr	r3, [pc, #8]	@ (8013e94 <fclose+0xc>)
 8013e8a:	4601      	mov	r1, r0
 8013e8c:	6818      	ldr	r0, [r3, #0]
 8013e8e:	f7ff bfa5 	b.w	8013ddc <_fclose_r>
 8013e92:	bf00      	nop
 8013e94:	20000a84 	.word	0x20000a84

08013e98 <__sflush_r>:
 8013e98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea0:	0716      	lsls	r6, r2, #28
 8013ea2:	4605      	mov	r5, r0
 8013ea4:	460c      	mov	r4, r1
 8013ea6:	d454      	bmi.n	8013f52 <__sflush_r+0xba>
 8013ea8:	684b      	ldr	r3, [r1, #4]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	dc02      	bgt.n	8013eb4 <__sflush_r+0x1c>
 8013eae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	dd48      	ble.n	8013f46 <__sflush_r+0xae>
 8013eb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013eb6:	2e00      	cmp	r6, #0
 8013eb8:	d045      	beq.n	8013f46 <__sflush_r+0xae>
 8013eba:	2300      	movs	r3, #0
 8013ebc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013ec0:	682f      	ldr	r7, [r5, #0]
 8013ec2:	6a21      	ldr	r1, [r4, #32]
 8013ec4:	602b      	str	r3, [r5, #0]
 8013ec6:	d030      	beq.n	8013f2a <__sflush_r+0x92>
 8013ec8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013eca:	89a3      	ldrh	r3, [r4, #12]
 8013ecc:	0759      	lsls	r1, r3, #29
 8013ece:	d505      	bpl.n	8013edc <__sflush_r+0x44>
 8013ed0:	6863      	ldr	r3, [r4, #4]
 8013ed2:	1ad2      	subs	r2, r2, r3
 8013ed4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013ed6:	b10b      	cbz	r3, 8013edc <__sflush_r+0x44>
 8013ed8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013eda:	1ad2      	subs	r2, r2, r3
 8013edc:	2300      	movs	r3, #0
 8013ede:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013ee0:	6a21      	ldr	r1, [r4, #32]
 8013ee2:	4628      	mov	r0, r5
 8013ee4:	47b0      	blx	r6
 8013ee6:	1c43      	adds	r3, r0, #1
 8013ee8:	89a3      	ldrh	r3, [r4, #12]
 8013eea:	d106      	bne.n	8013efa <__sflush_r+0x62>
 8013eec:	6829      	ldr	r1, [r5, #0]
 8013eee:	291d      	cmp	r1, #29
 8013ef0:	d82b      	bhi.n	8013f4a <__sflush_r+0xb2>
 8013ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8013f9c <__sflush_r+0x104>)
 8013ef4:	410a      	asrs	r2, r1
 8013ef6:	07d6      	lsls	r6, r2, #31
 8013ef8:	d427      	bmi.n	8013f4a <__sflush_r+0xb2>
 8013efa:	2200      	movs	r2, #0
 8013efc:	6062      	str	r2, [r4, #4]
 8013efe:	04d9      	lsls	r1, r3, #19
 8013f00:	6922      	ldr	r2, [r4, #16]
 8013f02:	6022      	str	r2, [r4, #0]
 8013f04:	d504      	bpl.n	8013f10 <__sflush_r+0x78>
 8013f06:	1c42      	adds	r2, r0, #1
 8013f08:	d101      	bne.n	8013f0e <__sflush_r+0x76>
 8013f0a:	682b      	ldr	r3, [r5, #0]
 8013f0c:	b903      	cbnz	r3, 8013f10 <__sflush_r+0x78>
 8013f0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013f10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013f12:	602f      	str	r7, [r5, #0]
 8013f14:	b1b9      	cbz	r1, 8013f46 <__sflush_r+0xae>
 8013f16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013f1a:	4299      	cmp	r1, r3
 8013f1c:	d002      	beq.n	8013f24 <__sflush_r+0x8c>
 8013f1e:	4628      	mov	r0, r5
 8013f20:	f001 fbee 	bl	8015700 <_free_r>
 8013f24:	2300      	movs	r3, #0
 8013f26:	6363      	str	r3, [r4, #52]	@ 0x34
 8013f28:	e00d      	b.n	8013f46 <__sflush_r+0xae>
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	4628      	mov	r0, r5
 8013f2e:	47b0      	blx	r6
 8013f30:	4602      	mov	r2, r0
 8013f32:	1c50      	adds	r0, r2, #1
 8013f34:	d1c9      	bne.n	8013eca <__sflush_r+0x32>
 8013f36:	682b      	ldr	r3, [r5, #0]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d0c6      	beq.n	8013eca <__sflush_r+0x32>
 8013f3c:	2b1d      	cmp	r3, #29
 8013f3e:	d001      	beq.n	8013f44 <__sflush_r+0xac>
 8013f40:	2b16      	cmp	r3, #22
 8013f42:	d11e      	bne.n	8013f82 <__sflush_r+0xea>
 8013f44:	602f      	str	r7, [r5, #0]
 8013f46:	2000      	movs	r0, #0
 8013f48:	e022      	b.n	8013f90 <__sflush_r+0xf8>
 8013f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f4e:	b21b      	sxth	r3, r3
 8013f50:	e01b      	b.n	8013f8a <__sflush_r+0xf2>
 8013f52:	690f      	ldr	r7, [r1, #16]
 8013f54:	2f00      	cmp	r7, #0
 8013f56:	d0f6      	beq.n	8013f46 <__sflush_r+0xae>
 8013f58:	0793      	lsls	r3, r2, #30
 8013f5a:	680e      	ldr	r6, [r1, #0]
 8013f5c:	bf08      	it	eq
 8013f5e:	694b      	ldreq	r3, [r1, #20]
 8013f60:	600f      	str	r7, [r1, #0]
 8013f62:	bf18      	it	ne
 8013f64:	2300      	movne	r3, #0
 8013f66:	eba6 0807 	sub.w	r8, r6, r7
 8013f6a:	608b      	str	r3, [r1, #8]
 8013f6c:	f1b8 0f00 	cmp.w	r8, #0
 8013f70:	dde9      	ble.n	8013f46 <__sflush_r+0xae>
 8013f72:	6a21      	ldr	r1, [r4, #32]
 8013f74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013f76:	4643      	mov	r3, r8
 8013f78:	463a      	mov	r2, r7
 8013f7a:	4628      	mov	r0, r5
 8013f7c:	47b0      	blx	r6
 8013f7e:	2800      	cmp	r0, #0
 8013f80:	dc08      	bgt.n	8013f94 <__sflush_r+0xfc>
 8013f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f8a:	81a3      	strh	r3, [r4, #12]
 8013f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f94:	4407      	add	r7, r0
 8013f96:	eba8 0800 	sub.w	r8, r8, r0
 8013f9a:	e7e7      	b.n	8013f6c <__sflush_r+0xd4>
 8013f9c:	dfbffffe 	.word	0xdfbffffe

08013fa0 <_fflush_r>:
 8013fa0:	b538      	push	{r3, r4, r5, lr}
 8013fa2:	690b      	ldr	r3, [r1, #16]
 8013fa4:	4605      	mov	r5, r0
 8013fa6:	460c      	mov	r4, r1
 8013fa8:	b913      	cbnz	r3, 8013fb0 <_fflush_r+0x10>
 8013faa:	2500      	movs	r5, #0
 8013fac:	4628      	mov	r0, r5
 8013fae:	bd38      	pop	{r3, r4, r5, pc}
 8013fb0:	b118      	cbz	r0, 8013fba <_fflush_r+0x1a>
 8013fb2:	6a03      	ldr	r3, [r0, #32]
 8013fb4:	b90b      	cbnz	r3, 8013fba <_fflush_r+0x1a>
 8013fb6:	f000 f8f9 	bl	80141ac <__sinit>
 8013fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d0f3      	beq.n	8013faa <_fflush_r+0xa>
 8013fc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013fc4:	07d0      	lsls	r0, r2, #31
 8013fc6:	d404      	bmi.n	8013fd2 <_fflush_r+0x32>
 8013fc8:	0599      	lsls	r1, r3, #22
 8013fca:	d402      	bmi.n	8013fd2 <_fflush_r+0x32>
 8013fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013fce:	f000 fd2b 	bl	8014a28 <__retarget_lock_acquire_recursive>
 8013fd2:	4628      	mov	r0, r5
 8013fd4:	4621      	mov	r1, r4
 8013fd6:	f7ff ff5f 	bl	8013e98 <__sflush_r>
 8013fda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013fdc:	07da      	lsls	r2, r3, #31
 8013fde:	4605      	mov	r5, r0
 8013fe0:	d4e4      	bmi.n	8013fac <_fflush_r+0xc>
 8013fe2:	89a3      	ldrh	r3, [r4, #12]
 8013fe4:	059b      	lsls	r3, r3, #22
 8013fe6:	d4e1      	bmi.n	8013fac <_fflush_r+0xc>
 8013fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013fea:	f000 fd1e 	bl	8014a2a <__retarget_lock_release_recursive>
 8013fee:	e7dd      	b.n	8013fac <_fflush_r+0xc>

08013ff0 <std>:
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	b510      	push	{r4, lr}
 8013ff4:	4604      	mov	r4, r0
 8013ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8013ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013ffe:	6083      	str	r3, [r0, #8]
 8014000:	8181      	strh	r1, [r0, #12]
 8014002:	6643      	str	r3, [r0, #100]	@ 0x64
 8014004:	81c2      	strh	r2, [r0, #14]
 8014006:	6183      	str	r3, [r0, #24]
 8014008:	4619      	mov	r1, r3
 801400a:	2208      	movs	r2, #8
 801400c:	305c      	adds	r0, #92	@ 0x5c
 801400e:	f000 fc59 	bl	80148c4 <memset>
 8014012:	4b0d      	ldr	r3, [pc, #52]	@ (8014048 <std+0x58>)
 8014014:	6263      	str	r3, [r4, #36]	@ 0x24
 8014016:	4b0d      	ldr	r3, [pc, #52]	@ (801404c <std+0x5c>)
 8014018:	62a3      	str	r3, [r4, #40]	@ 0x28
 801401a:	4b0d      	ldr	r3, [pc, #52]	@ (8014050 <std+0x60>)
 801401c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801401e:	4b0d      	ldr	r3, [pc, #52]	@ (8014054 <std+0x64>)
 8014020:	6323      	str	r3, [r4, #48]	@ 0x30
 8014022:	4b0d      	ldr	r3, [pc, #52]	@ (8014058 <std+0x68>)
 8014024:	6224      	str	r4, [r4, #32]
 8014026:	429c      	cmp	r4, r3
 8014028:	d006      	beq.n	8014038 <std+0x48>
 801402a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801402e:	4294      	cmp	r4, r2
 8014030:	d002      	beq.n	8014038 <std+0x48>
 8014032:	33d0      	adds	r3, #208	@ 0xd0
 8014034:	429c      	cmp	r4, r3
 8014036:	d105      	bne.n	8014044 <std+0x54>
 8014038:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801403c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014040:	f000 bcf0 	b.w	8014a24 <__retarget_lock_init_recursive>
 8014044:	bd10      	pop	{r4, pc}
 8014046:	bf00      	nop
 8014048:	08014511 	.word	0x08014511
 801404c:	08014533 	.word	0x08014533
 8014050:	0801456b 	.word	0x0801456b
 8014054:	0801458f 	.word	0x0801458f
 8014058:	20000f70 	.word	0x20000f70

0801405c <stdio_exit_handler>:
 801405c:	4a02      	ldr	r2, [pc, #8]	@ (8014068 <stdio_exit_handler+0xc>)
 801405e:	4903      	ldr	r1, [pc, #12]	@ (801406c <stdio_exit_handler+0x10>)
 8014060:	4803      	ldr	r0, [pc, #12]	@ (8014070 <stdio_exit_handler+0x14>)
 8014062:	f000 b995 	b.w	8014390 <_fwalk_sglue>
 8014066:	bf00      	nop
 8014068:	2000090c 	.word	0x2000090c
 801406c:	08013fa1 	.word	0x08013fa1
 8014070:	20000a88 	.word	0x20000a88

08014074 <cleanup_stdio>:
 8014074:	6841      	ldr	r1, [r0, #4]
 8014076:	4b0c      	ldr	r3, [pc, #48]	@ (80140a8 <cleanup_stdio+0x34>)
 8014078:	4299      	cmp	r1, r3
 801407a:	b510      	push	{r4, lr}
 801407c:	4604      	mov	r4, r0
 801407e:	d001      	beq.n	8014084 <cleanup_stdio+0x10>
 8014080:	f7ff ff8e 	bl	8013fa0 <_fflush_r>
 8014084:	68a1      	ldr	r1, [r4, #8]
 8014086:	4b09      	ldr	r3, [pc, #36]	@ (80140ac <cleanup_stdio+0x38>)
 8014088:	4299      	cmp	r1, r3
 801408a:	d002      	beq.n	8014092 <cleanup_stdio+0x1e>
 801408c:	4620      	mov	r0, r4
 801408e:	f7ff ff87 	bl	8013fa0 <_fflush_r>
 8014092:	68e1      	ldr	r1, [r4, #12]
 8014094:	4b06      	ldr	r3, [pc, #24]	@ (80140b0 <cleanup_stdio+0x3c>)
 8014096:	4299      	cmp	r1, r3
 8014098:	d004      	beq.n	80140a4 <cleanup_stdio+0x30>
 801409a:	4620      	mov	r0, r4
 801409c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140a0:	f7ff bf7e 	b.w	8013fa0 <_fflush_r>
 80140a4:	bd10      	pop	{r4, pc}
 80140a6:	bf00      	nop
 80140a8:	20000f70 	.word	0x20000f70
 80140ac:	20000fd8 	.word	0x20000fd8
 80140b0:	20001040 	.word	0x20001040

080140b4 <global_stdio_init.part.0>:
 80140b4:	b510      	push	{r4, lr}
 80140b6:	4b0b      	ldr	r3, [pc, #44]	@ (80140e4 <global_stdio_init.part.0+0x30>)
 80140b8:	4c0b      	ldr	r4, [pc, #44]	@ (80140e8 <global_stdio_init.part.0+0x34>)
 80140ba:	4a0c      	ldr	r2, [pc, #48]	@ (80140ec <global_stdio_init.part.0+0x38>)
 80140bc:	601a      	str	r2, [r3, #0]
 80140be:	4620      	mov	r0, r4
 80140c0:	2200      	movs	r2, #0
 80140c2:	2104      	movs	r1, #4
 80140c4:	f7ff ff94 	bl	8013ff0 <std>
 80140c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80140cc:	2201      	movs	r2, #1
 80140ce:	2109      	movs	r1, #9
 80140d0:	f7ff ff8e 	bl	8013ff0 <std>
 80140d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80140d8:	2202      	movs	r2, #2
 80140da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140de:	2112      	movs	r1, #18
 80140e0:	f7ff bf86 	b.w	8013ff0 <std>
 80140e4:	200010a8 	.word	0x200010a8
 80140e8:	20000f70 	.word	0x20000f70
 80140ec:	0801405d 	.word	0x0801405d

080140f0 <__sfp_lock_acquire>:
 80140f0:	4801      	ldr	r0, [pc, #4]	@ (80140f8 <__sfp_lock_acquire+0x8>)
 80140f2:	f000 bc99 	b.w	8014a28 <__retarget_lock_acquire_recursive>
 80140f6:	bf00      	nop
 80140f8:	200010b1 	.word	0x200010b1

080140fc <__sfp_lock_release>:
 80140fc:	4801      	ldr	r0, [pc, #4]	@ (8014104 <__sfp_lock_release+0x8>)
 80140fe:	f000 bc94 	b.w	8014a2a <__retarget_lock_release_recursive>
 8014102:	bf00      	nop
 8014104:	200010b1 	.word	0x200010b1

08014108 <__sfp>:
 8014108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801410a:	4607      	mov	r7, r0
 801410c:	f7ff fff0 	bl	80140f0 <__sfp_lock_acquire>
 8014110:	4b23      	ldr	r3, [pc, #140]	@ (80141a0 <__sfp+0x98>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	b90b      	cbnz	r3, 801411a <__sfp+0x12>
 8014116:	f7ff ffcd 	bl	80140b4 <global_stdio_init.part.0>
 801411a:	4e22      	ldr	r6, [pc, #136]	@ (80141a4 <__sfp+0x9c>)
 801411c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014120:	3b01      	subs	r3, #1
 8014122:	d50f      	bpl.n	8014144 <__sfp+0x3c>
 8014124:	6835      	ldr	r5, [r6, #0]
 8014126:	2d00      	cmp	r5, #0
 8014128:	d137      	bne.n	801419a <__sfp+0x92>
 801412a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 801412e:	4638      	mov	r0, r7
 8014130:	f7fe f912 	bl	8012358 <_malloc_r>
 8014134:	4604      	mov	r4, r0
 8014136:	bb28      	cbnz	r0, 8014184 <__sfp+0x7c>
 8014138:	6030      	str	r0, [r6, #0]
 801413a:	f7ff ffdf 	bl	80140fc <__sfp_lock_release>
 801413e:	230c      	movs	r3, #12
 8014140:	603b      	str	r3, [r7, #0]
 8014142:	e01b      	b.n	801417c <__sfp+0x74>
 8014144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014148:	b9d5      	cbnz	r5, 8014180 <__sfp+0x78>
 801414a:	4b17      	ldr	r3, [pc, #92]	@ (80141a8 <__sfp+0xa0>)
 801414c:	60e3      	str	r3, [r4, #12]
 801414e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014152:	6665      	str	r5, [r4, #100]	@ 0x64
 8014154:	f000 fc66 	bl	8014a24 <__retarget_lock_init_recursive>
 8014158:	f7ff ffd0 	bl	80140fc <__sfp_lock_release>
 801415c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014160:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014164:	6025      	str	r5, [r4, #0]
 8014166:	61a5      	str	r5, [r4, #24]
 8014168:	2208      	movs	r2, #8
 801416a:	4629      	mov	r1, r5
 801416c:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8014170:	f000 fba8 	bl	80148c4 <memset>
 8014174:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8014178:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 801417c:	4620      	mov	r0, r4
 801417e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014180:	3468      	adds	r4, #104	@ 0x68
 8014182:	e7cd      	b.n	8014120 <__sfp+0x18>
 8014184:	2304      	movs	r3, #4
 8014186:	6005      	str	r5, [r0, #0]
 8014188:	6043      	str	r3, [r0, #4]
 801418a:	300c      	adds	r0, #12
 801418c:	60a0      	str	r0, [r4, #8]
 801418e:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8014192:	4629      	mov	r1, r5
 8014194:	f000 fb96 	bl	80148c4 <memset>
 8014198:	6034      	str	r4, [r6, #0]
 801419a:	6836      	ldr	r6, [r6, #0]
 801419c:	e7be      	b.n	801411c <__sfp+0x14>
 801419e:	bf00      	nop
 80141a0:	200010a8 	.word	0x200010a8
 80141a4:	2000090c 	.word	0x2000090c
 80141a8:	ffff0001 	.word	0xffff0001

080141ac <__sinit>:
 80141ac:	b510      	push	{r4, lr}
 80141ae:	4604      	mov	r4, r0
 80141b0:	f7ff ff9e 	bl	80140f0 <__sfp_lock_acquire>
 80141b4:	6a23      	ldr	r3, [r4, #32]
 80141b6:	b11b      	cbz	r3, 80141c0 <__sinit+0x14>
 80141b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141bc:	f7ff bf9e 	b.w	80140fc <__sfp_lock_release>
 80141c0:	4b04      	ldr	r3, [pc, #16]	@ (80141d4 <__sinit+0x28>)
 80141c2:	6223      	str	r3, [r4, #32]
 80141c4:	4b04      	ldr	r3, [pc, #16]	@ (80141d8 <__sinit+0x2c>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d1f5      	bne.n	80141b8 <__sinit+0xc>
 80141cc:	f7ff ff72 	bl	80140b4 <global_stdio_init.part.0>
 80141d0:	e7f2      	b.n	80141b8 <__sinit+0xc>
 80141d2:	bf00      	nop
 80141d4:	08014075 	.word	0x08014075
 80141d8:	200010a8 	.word	0x200010a8

080141dc <_fopen_r>:
 80141dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141de:	460f      	mov	r7, r1
 80141e0:	4611      	mov	r1, r2
 80141e2:	aa01      	add	r2, sp, #4
 80141e4:	4606      	mov	r6, r0
 80141e6:	f002 fcbb 	bl	8016b60 <__sflags>
 80141ea:	4605      	mov	r5, r0
 80141ec:	b1b0      	cbz	r0, 801421c <_fopen_r+0x40>
 80141ee:	4630      	mov	r0, r6
 80141f0:	f7ff ff8a 	bl	8014108 <__sfp>
 80141f4:	4604      	mov	r4, r0
 80141f6:	b188      	cbz	r0, 801421c <_fopen_r+0x40>
 80141f8:	4639      	mov	r1, r7
 80141fa:	9a01      	ldr	r2, [sp, #4]
 80141fc:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 8014200:	4630      	mov	r0, r6
 8014202:	f000 fb9f 	bl	8014944 <_open_r>
 8014206:	1e07      	subs	r7, r0, #0
 8014208:	da0c      	bge.n	8014224 <_fopen_r+0x48>
 801420a:	f7ff ff71 	bl	80140f0 <__sfp_lock_acquire>
 801420e:	2300      	movs	r3, #0
 8014210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014212:	81a3      	strh	r3, [r4, #12]
 8014214:	f000 fc07 	bl	8014a26 <__retarget_lock_close_recursive>
 8014218:	f7ff ff70 	bl	80140fc <__sfp_lock_release>
 801421c:	2400      	movs	r4, #0
 801421e:	4620      	mov	r0, r4
 8014220:	b003      	add	sp, #12
 8014222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014224:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014226:	07db      	lsls	r3, r3, #31
 8014228:	d405      	bmi.n	8014236 <_fopen_r+0x5a>
 801422a:	89a3      	ldrh	r3, [r4, #12]
 801422c:	0598      	lsls	r0, r3, #22
 801422e:	d402      	bmi.n	8014236 <_fopen_r+0x5a>
 8014230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014232:	f000 fbf9 	bl	8014a28 <__retarget_lock_acquire_recursive>
 8014236:	4b0f      	ldr	r3, [pc, #60]	@ (8014274 <_fopen_r+0x98>)
 8014238:	6263      	str	r3, [r4, #36]	@ 0x24
 801423a:	4b0f      	ldr	r3, [pc, #60]	@ (8014278 <_fopen_r+0x9c>)
 801423c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801423e:	b22d      	sxth	r5, r5
 8014240:	4b0e      	ldr	r3, [pc, #56]	@ (801427c <_fopen_r+0xa0>)
 8014242:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014244:	05e9      	lsls	r1, r5, #23
 8014246:	4b0e      	ldr	r3, [pc, #56]	@ (8014280 <_fopen_r+0xa4>)
 8014248:	81e7      	strh	r7, [r4, #14]
 801424a:	81a5      	strh	r5, [r4, #12]
 801424c:	6224      	str	r4, [r4, #32]
 801424e:	6323      	str	r3, [r4, #48]	@ 0x30
 8014250:	d505      	bpl.n	801425e <_fopen_r+0x82>
 8014252:	2302      	movs	r3, #2
 8014254:	2200      	movs	r2, #0
 8014256:	4621      	mov	r1, r4
 8014258:	4630      	mov	r0, r6
 801425a:	f000 f885 	bl	8014368 <_fseek_r>
 801425e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014260:	07da      	lsls	r2, r3, #31
 8014262:	d4dc      	bmi.n	801421e <_fopen_r+0x42>
 8014264:	89a3      	ldrh	r3, [r4, #12]
 8014266:	059b      	lsls	r3, r3, #22
 8014268:	d4d9      	bmi.n	801421e <_fopen_r+0x42>
 801426a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801426c:	f000 fbdd 	bl	8014a2a <__retarget_lock_release_recursive>
 8014270:	e7d5      	b.n	801421e <_fopen_r+0x42>
 8014272:	bf00      	nop
 8014274:	08014511 	.word	0x08014511
 8014278:	08014533 	.word	0x08014533
 801427c:	0801456b 	.word	0x0801456b
 8014280:	0801458f 	.word	0x0801458f

08014284 <fopen>:
 8014284:	4b02      	ldr	r3, [pc, #8]	@ (8014290 <fopen+0xc>)
 8014286:	460a      	mov	r2, r1
 8014288:	4601      	mov	r1, r0
 801428a:	6818      	ldr	r0, [r3, #0]
 801428c:	f7ff bfa6 	b.w	80141dc <_fopen_r>
 8014290:	20000a84 	.word	0x20000a84

08014294 <_fread_r>:
 8014294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014298:	461f      	mov	r7, r3
 801429a:	4613      	mov	r3, r2
 801429c:	437b      	muls	r3, r7
 801429e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80142a0:	4683      	mov	fp, r0
 80142a2:	4688      	mov	r8, r1
 80142a4:	4691      	mov	r9, r2
 80142a6:	469a      	mov	sl, r3
 80142a8:	d046      	beq.n	8014338 <_fread_r+0xa4>
 80142aa:	b118      	cbz	r0, 80142b4 <_fread_r+0x20>
 80142ac:	6a03      	ldr	r3, [r0, #32]
 80142ae:	b90b      	cbnz	r3, 80142b4 <_fread_r+0x20>
 80142b0:	f7ff ff7c 	bl	80141ac <__sinit>
 80142b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80142b6:	07de      	lsls	r6, r3, #31
 80142b8:	d405      	bmi.n	80142c6 <_fread_r+0x32>
 80142ba:	89a3      	ldrh	r3, [r4, #12]
 80142bc:	059d      	lsls	r5, r3, #22
 80142be:	d402      	bmi.n	80142c6 <_fread_r+0x32>
 80142c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142c2:	f000 fbb1 	bl	8014a28 <__retarget_lock_acquire_recursive>
 80142c6:	6863      	ldr	r3, [r4, #4]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	da01      	bge.n	80142d0 <_fread_r+0x3c>
 80142cc:	2300      	movs	r3, #0
 80142ce:	6063      	str	r3, [r4, #4]
 80142d0:	4656      	mov	r6, sl
 80142d2:	e9d4 1500 	ldrd	r1, r5, [r4]
 80142d6:	42b5      	cmp	r5, r6
 80142d8:	d311      	bcc.n	80142fe <_fread_r+0x6a>
 80142da:	4632      	mov	r2, r6
 80142dc:	4640      	mov	r0, r8
 80142de:	f000 fba5 	bl	8014a2c <memcpy>
 80142e2:	6862      	ldr	r2, [r4, #4]
 80142e4:	6821      	ldr	r1, [r4, #0]
 80142e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80142e8:	1b92      	subs	r2, r2, r6
 80142ea:	6062      	str	r2, [r4, #4]
 80142ec:	4431      	add	r1, r6
 80142ee:	07da      	lsls	r2, r3, #31
 80142f0:	6021      	str	r1, [r4, #0]
 80142f2:	d402      	bmi.n	80142fa <_fread_r+0x66>
 80142f4:	89a3      	ldrh	r3, [r4, #12]
 80142f6:	059b      	lsls	r3, r3, #22
 80142f8:	d524      	bpl.n	8014344 <_fread_r+0xb0>
 80142fa:	46ba      	mov	sl, r7
 80142fc:	e01c      	b.n	8014338 <_fread_r+0xa4>
 80142fe:	462a      	mov	r2, r5
 8014300:	4640      	mov	r0, r8
 8014302:	f000 fb93 	bl	8014a2c <memcpy>
 8014306:	6823      	ldr	r3, [r4, #0]
 8014308:	442b      	add	r3, r5
 801430a:	6023      	str	r3, [r4, #0]
 801430c:	4621      	mov	r1, r4
 801430e:	1b73      	subs	r3, r6, r5
 8014310:	4658      	mov	r0, fp
 8014312:	9301      	str	r3, [sp, #4]
 8014314:	f000 f868 	bl	80143e8 <__srefill_r>
 8014318:	44a8      	add	r8, r5
 801431a:	9b01      	ldr	r3, [sp, #4]
 801431c:	b180      	cbz	r0, 8014340 <_fread_r+0xac>
 801431e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014320:	07d8      	lsls	r0, r3, #31
 8014322:	d405      	bmi.n	8014330 <_fread_r+0x9c>
 8014324:	89a3      	ldrh	r3, [r4, #12]
 8014326:	0599      	lsls	r1, r3, #22
 8014328:	d402      	bmi.n	8014330 <_fread_r+0x9c>
 801432a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801432c:	f000 fb7d 	bl	8014a2a <__retarget_lock_release_recursive>
 8014330:	4455      	add	r5, sl
 8014332:	1bad      	subs	r5, r5, r6
 8014334:	fbb5 faf9 	udiv	sl, r5, r9
 8014338:	4650      	mov	r0, sl
 801433a:	b003      	add	sp, #12
 801433c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014340:	461e      	mov	r6, r3
 8014342:	e7c6      	b.n	80142d2 <_fread_r+0x3e>
 8014344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014346:	f000 fb70 	bl	8014a2a <__retarget_lock_release_recursive>
 801434a:	e7d6      	b.n	80142fa <_fread_r+0x66>

0801434c <fread>:
 801434c:	b507      	push	{r0, r1, r2, lr}
 801434e:	9300      	str	r3, [sp, #0]
 8014350:	4613      	mov	r3, r2
 8014352:	460a      	mov	r2, r1
 8014354:	4601      	mov	r1, r0
 8014356:	4803      	ldr	r0, [pc, #12]	@ (8014364 <fread+0x18>)
 8014358:	6800      	ldr	r0, [r0, #0]
 801435a:	f7ff ff9b 	bl	8014294 <_fread_r>
 801435e:	b003      	add	sp, #12
 8014360:	f85d fb04 	ldr.w	pc, [sp], #4
 8014364:	20000a84 	.word	0x20000a84

08014368 <_fseek_r>:
 8014368:	f000 b9aa 	b.w	80146c0 <_fseeko_r>

0801436c <fseek>:
 801436c:	4613      	mov	r3, r2
 801436e:	460a      	mov	r2, r1
 8014370:	4601      	mov	r1, r0
 8014372:	4802      	ldr	r0, [pc, #8]	@ (801437c <fseek+0x10>)
 8014374:	6800      	ldr	r0, [r0, #0]
 8014376:	f000 b9a3 	b.w	80146c0 <_fseeko_r>
 801437a:	bf00      	nop
 801437c:	20000a84 	.word	0x20000a84

08014380 <ftell>:
 8014380:	4b02      	ldr	r3, [pc, #8]	@ (801438c <ftell+0xc>)
 8014382:	4601      	mov	r1, r0
 8014384:	6818      	ldr	r0, [r3, #0]
 8014386:	f000 ba32 	b.w	80147ee <_ftello_r>
 801438a:	bf00      	nop
 801438c:	20000a84 	.word	0x20000a84

08014390 <_fwalk_sglue>:
 8014390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014394:	4607      	mov	r7, r0
 8014396:	4688      	mov	r8, r1
 8014398:	4614      	mov	r4, r2
 801439a:	2600      	movs	r6, #0
 801439c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80143a0:	f1b9 0901 	subs.w	r9, r9, #1
 80143a4:	d505      	bpl.n	80143b2 <_fwalk_sglue+0x22>
 80143a6:	6824      	ldr	r4, [r4, #0]
 80143a8:	2c00      	cmp	r4, #0
 80143aa:	d1f7      	bne.n	801439c <_fwalk_sglue+0xc>
 80143ac:	4630      	mov	r0, r6
 80143ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143b2:	89ab      	ldrh	r3, [r5, #12]
 80143b4:	2b01      	cmp	r3, #1
 80143b6:	d907      	bls.n	80143c8 <_fwalk_sglue+0x38>
 80143b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80143bc:	3301      	adds	r3, #1
 80143be:	d003      	beq.n	80143c8 <_fwalk_sglue+0x38>
 80143c0:	4629      	mov	r1, r5
 80143c2:	4638      	mov	r0, r7
 80143c4:	47c0      	blx	r8
 80143c6:	4306      	orrs	r6, r0
 80143c8:	3568      	adds	r5, #104	@ 0x68
 80143ca:	e7e9      	b.n	80143a0 <_fwalk_sglue+0x10>

080143cc <lflush>:
 80143cc:	898b      	ldrh	r3, [r1, #12]
 80143ce:	f003 0309 	and.w	r3, r3, #9
 80143d2:	2b09      	cmp	r3, #9
 80143d4:	d103      	bne.n	80143de <lflush+0x12>
 80143d6:	4b03      	ldr	r3, [pc, #12]	@ (80143e4 <lflush+0x18>)
 80143d8:	6818      	ldr	r0, [r3, #0]
 80143da:	f7ff bde1 	b.w	8013fa0 <_fflush_r>
 80143de:	2000      	movs	r0, #0
 80143e0:	4770      	bx	lr
 80143e2:	bf00      	nop
 80143e4:	20000a84 	.word	0x20000a84

080143e8 <__srefill_r>:
 80143e8:	b570      	push	{r4, r5, r6, lr}
 80143ea:	460c      	mov	r4, r1
 80143ec:	4605      	mov	r5, r0
 80143ee:	b118      	cbz	r0, 80143f8 <__srefill_r+0x10>
 80143f0:	6a03      	ldr	r3, [r0, #32]
 80143f2:	b90b      	cbnz	r3, 80143f8 <__srefill_r+0x10>
 80143f4:	f7ff feda 	bl	80141ac <__sinit>
 80143f8:	2300      	movs	r3, #0
 80143fa:	6063      	str	r3, [r4, #4]
 80143fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014400:	069e      	lsls	r6, r3, #26
 8014402:	d408      	bmi.n	8014416 <__srefill_r+0x2e>
 8014404:	0758      	lsls	r0, r3, #29
 8014406:	d445      	bmi.n	8014494 <__srefill_r+0xac>
 8014408:	06d9      	lsls	r1, r3, #27
 801440a:	d407      	bmi.n	801441c <__srefill_r+0x34>
 801440c:	2209      	movs	r2, #9
 801440e:	602a      	str	r2, [r5, #0]
 8014410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014414:	81a3      	strh	r3, [r4, #12]
 8014416:	f04f 30ff 	mov.w	r0, #4294967295
 801441a:	bd70      	pop	{r4, r5, r6, pc}
 801441c:	071a      	lsls	r2, r3, #28
 801441e:	d50b      	bpl.n	8014438 <__srefill_r+0x50>
 8014420:	4621      	mov	r1, r4
 8014422:	4628      	mov	r0, r5
 8014424:	f7ff fdbc 	bl	8013fa0 <_fflush_r>
 8014428:	2800      	cmp	r0, #0
 801442a:	d1f4      	bne.n	8014416 <__srefill_r+0x2e>
 801442c:	89a3      	ldrh	r3, [r4, #12]
 801442e:	60a0      	str	r0, [r4, #8]
 8014430:	f023 0308 	bic.w	r3, r3, #8
 8014434:	81a3      	strh	r3, [r4, #12]
 8014436:	61a0      	str	r0, [r4, #24]
 8014438:	89a3      	ldrh	r3, [r4, #12]
 801443a:	f043 0304 	orr.w	r3, r3, #4
 801443e:	81a3      	strh	r3, [r4, #12]
 8014440:	6923      	ldr	r3, [r4, #16]
 8014442:	b91b      	cbnz	r3, 801444c <__srefill_r+0x64>
 8014444:	4621      	mov	r1, r4
 8014446:	4628      	mov	r0, r5
 8014448:	f002 fbe6 	bl	8016c18 <__smakebuf_r>
 801444c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8014450:	07b3      	lsls	r3, r6, #30
 8014452:	d00f      	beq.n	8014474 <__srefill_r+0x8c>
 8014454:	2301      	movs	r3, #1
 8014456:	4a1b      	ldr	r2, [pc, #108]	@ (80144c4 <__srefill_r+0xdc>)
 8014458:	491b      	ldr	r1, [pc, #108]	@ (80144c8 <__srefill_r+0xe0>)
 801445a:	481c      	ldr	r0, [pc, #112]	@ (80144cc <__srefill_r+0xe4>)
 801445c:	81a3      	strh	r3, [r4, #12]
 801445e:	f7ff ff97 	bl	8014390 <_fwalk_sglue>
 8014462:	81a6      	strh	r6, [r4, #12]
 8014464:	f006 0609 	and.w	r6, r6, #9
 8014468:	2e09      	cmp	r6, #9
 801446a:	d103      	bne.n	8014474 <__srefill_r+0x8c>
 801446c:	4621      	mov	r1, r4
 801446e:	4628      	mov	r0, r5
 8014470:	f7ff fd12 	bl	8013e98 <__sflush_r>
 8014474:	6922      	ldr	r2, [r4, #16]
 8014476:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8014478:	6963      	ldr	r3, [r4, #20]
 801447a:	6a21      	ldr	r1, [r4, #32]
 801447c:	6022      	str	r2, [r4, #0]
 801447e:	4628      	mov	r0, r5
 8014480:	47b0      	blx	r6
 8014482:	2800      	cmp	r0, #0
 8014484:	6060      	str	r0, [r4, #4]
 8014486:	dc17      	bgt.n	80144b8 <__srefill_r+0xd0>
 8014488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801448c:	d116      	bne.n	80144bc <__srefill_r+0xd4>
 801448e:	f043 0320 	orr.w	r3, r3, #32
 8014492:	e7bf      	b.n	8014414 <__srefill_r+0x2c>
 8014494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014496:	2900      	cmp	r1, #0
 8014498:	d0d2      	beq.n	8014440 <__srefill_r+0x58>
 801449a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801449e:	4299      	cmp	r1, r3
 80144a0:	d002      	beq.n	80144a8 <__srefill_r+0xc0>
 80144a2:	4628      	mov	r0, r5
 80144a4:	f001 f92c 	bl	8015700 <_free_r>
 80144a8:	2300      	movs	r3, #0
 80144aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80144ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80144ae:	6063      	str	r3, [r4, #4]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d0c5      	beq.n	8014440 <__srefill_r+0x58>
 80144b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80144b6:	6023      	str	r3, [r4, #0]
 80144b8:	2000      	movs	r0, #0
 80144ba:	e7ae      	b.n	801441a <__srefill_r+0x32>
 80144bc:	2200      	movs	r2, #0
 80144be:	6062      	str	r2, [r4, #4]
 80144c0:	e7a6      	b.n	8014410 <__srefill_r+0x28>
 80144c2:	bf00      	nop
 80144c4:	2000090c 	.word	0x2000090c
 80144c8:	080143cd 	.word	0x080143cd
 80144cc:	20000a88 	.word	0x20000a88

080144d0 <siprintf>:
 80144d0:	b40e      	push	{r1, r2, r3}
 80144d2:	b500      	push	{lr}
 80144d4:	b09c      	sub	sp, #112	@ 0x70
 80144d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80144d8:	9002      	str	r0, [sp, #8]
 80144da:	9006      	str	r0, [sp, #24]
 80144dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80144e0:	4809      	ldr	r0, [pc, #36]	@ (8014508 <siprintf+0x38>)
 80144e2:	9107      	str	r1, [sp, #28]
 80144e4:	9104      	str	r1, [sp, #16]
 80144e6:	4909      	ldr	r1, [pc, #36]	@ (801450c <siprintf+0x3c>)
 80144e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80144ec:	9105      	str	r1, [sp, #20]
 80144ee:	6800      	ldr	r0, [r0, #0]
 80144f0:	9301      	str	r3, [sp, #4]
 80144f2:	a902      	add	r1, sp, #8
 80144f4:	f002 fa38 	bl	8016968 <_svfiprintf_r>
 80144f8:	9b02      	ldr	r3, [sp, #8]
 80144fa:	2200      	movs	r2, #0
 80144fc:	701a      	strb	r2, [r3, #0]
 80144fe:	b01c      	add	sp, #112	@ 0x70
 8014500:	f85d eb04 	ldr.w	lr, [sp], #4
 8014504:	b003      	add	sp, #12
 8014506:	4770      	bx	lr
 8014508:	20000a84 	.word	0x20000a84
 801450c:	ffff0208 	.word	0xffff0208

08014510 <__sread>:
 8014510:	b510      	push	{r4, lr}
 8014512:	460c      	mov	r4, r1
 8014514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014518:	f000 fa26 	bl	8014968 <_read_r>
 801451c:	2800      	cmp	r0, #0
 801451e:	bfab      	itete	ge
 8014520:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014522:	89a3      	ldrhlt	r3, [r4, #12]
 8014524:	181b      	addge	r3, r3, r0
 8014526:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801452a:	bfac      	ite	ge
 801452c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801452e:	81a3      	strhlt	r3, [r4, #12]
 8014530:	bd10      	pop	{r4, pc}

08014532 <__swrite>:
 8014532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014536:	461f      	mov	r7, r3
 8014538:	898b      	ldrh	r3, [r1, #12]
 801453a:	05db      	lsls	r3, r3, #23
 801453c:	4605      	mov	r5, r0
 801453e:	460c      	mov	r4, r1
 8014540:	4616      	mov	r6, r2
 8014542:	d505      	bpl.n	8014550 <__swrite+0x1e>
 8014544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014548:	2302      	movs	r3, #2
 801454a:	2200      	movs	r2, #0
 801454c:	f000 f9e8 	bl	8014920 <_lseek_r>
 8014550:	89a3      	ldrh	r3, [r4, #12]
 8014552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014556:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801455a:	81a3      	strh	r3, [r4, #12]
 801455c:	4632      	mov	r2, r6
 801455e:	463b      	mov	r3, r7
 8014560:	4628      	mov	r0, r5
 8014562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014566:	f000 ba21 	b.w	80149ac <_write_r>

0801456a <__sseek>:
 801456a:	b510      	push	{r4, lr}
 801456c:	460c      	mov	r4, r1
 801456e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014572:	f000 f9d5 	bl	8014920 <_lseek_r>
 8014576:	1c43      	adds	r3, r0, #1
 8014578:	89a3      	ldrh	r3, [r4, #12]
 801457a:	bf15      	itete	ne
 801457c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801457e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014582:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014586:	81a3      	strheq	r3, [r4, #12]
 8014588:	bf18      	it	ne
 801458a:	81a3      	strhne	r3, [r4, #12]
 801458c:	bd10      	pop	{r4, pc}

0801458e <__sclose>:
 801458e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014592:	f000 b9b5 	b.w	8014900 <_close_r>

08014596 <__swbuf_r>:
 8014596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014598:	460e      	mov	r6, r1
 801459a:	4614      	mov	r4, r2
 801459c:	4605      	mov	r5, r0
 801459e:	b118      	cbz	r0, 80145a8 <__swbuf_r+0x12>
 80145a0:	6a03      	ldr	r3, [r0, #32]
 80145a2:	b90b      	cbnz	r3, 80145a8 <__swbuf_r+0x12>
 80145a4:	f7ff fe02 	bl	80141ac <__sinit>
 80145a8:	69a3      	ldr	r3, [r4, #24]
 80145aa:	60a3      	str	r3, [r4, #8]
 80145ac:	89a3      	ldrh	r3, [r4, #12]
 80145ae:	071a      	lsls	r2, r3, #28
 80145b0:	d501      	bpl.n	80145b6 <__swbuf_r+0x20>
 80145b2:	6923      	ldr	r3, [r4, #16]
 80145b4:	b943      	cbnz	r3, 80145c8 <__swbuf_r+0x32>
 80145b6:	4621      	mov	r1, r4
 80145b8:	4628      	mov	r0, r5
 80145ba:	f000 f82b 	bl	8014614 <__swsetup_r>
 80145be:	b118      	cbz	r0, 80145c8 <__swbuf_r+0x32>
 80145c0:	f04f 37ff 	mov.w	r7, #4294967295
 80145c4:	4638      	mov	r0, r7
 80145c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145c8:	6823      	ldr	r3, [r4, #0]
 80145ca:	6922      	ldr	r2, [r4, #16]
 80145cc:	1a98      	subs	r0, r3, r2
 80145ce:	6963      	ldr	r3, [r4, #20]
 80145d0:	b2f6      	uxtb	r6, r6
 80145d2:	4283      	cmp	r3, r0
 80145d4:	4637      	mov	r7, r6
 80145d6:	dc05      	bgt.n	80145e4 <__swbuf_r+0x4e>
 80145d8:	4621      	mov	r1, r4
 80145da:	4628      	mov	r0, r5
 80145dc:	f7ff fce0 	bl	8013fa0 <_fflush_r>
 80145e0:	2800      	cmp	r0, #0
 80145e2:	d1ed      	bne.n	80145c0 <__swbuf_r+0x2a>
 80145e4:	68a3      	ldr	r3, [r4, #8]
 80145e6:	3b01      	subs	r3, #1
 80145e8:	60a3      	str	r3, [r4, #8]
 80145ea:	6823      	ldr	r3, [r4, #0]
 80145ec:	1c5a      	adds	r2, r3, #1
 80145ee:	6022      	str	r2, [r4, #0]
 80145f0:	701e      	strb	r6, [r3, #0]
 80145f2:	6962      	ldr	r2, [r4, #20]
 80145f4:	1c43      	adds	r3, r0, #1
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d004      	beq.n	8014604 <__swbuf_r+0x6e>
 80145fa:	89a3      	ldrh	r3, [r4, #12]
 80145fc:	07db      	lsls	r3, r3, #31
 80145fe:	d5e1      	bpl.n	80145c4 <__swbuf_r+0x2e>
 8014600:	2e0a      	cmp	r6, #10
 8014602:	d1df      	bne.n	80145c4 <__swbuf_r+0x2e>
 8014604:	4621      	mov	r1, r4
 8014606:	4628      	mov	r0, r5
 8014608:	f7ff fcca 	bl	8013fa0 <_fflush_r>
 801460c:	2800      	cmp	r0, #0
 801460e:	d0d9      	beq.n	80145c4 <__swbuf_r+0x2e>
 8014610:	e7d6      	b.n	80145c0 <__swbuf_r+0x2a>
	...

08014614 <__swsetup_r>:
 8014614:	b538      	push	{r3, r4, r5, lr}
 8014616:	4b29      	ldr	r3, [pc, #164]	@ (80146bc <__swsetup_r+0xa8>)
 8014618:	4605      	mov	r5, r0
 801461a:	6818      	ldr	r0, [r3, #0]
 801461c:	460c      	mov	r4, r1
 801461e:	b118      	cbz	r0, 8014628 <__swsetup_r+0x14>
 8014620:	6a03      	ldr	r3, [r0, #32]
 8014622:	b90b      	cbnz	r3, 8014628 <__swsetup_r+0x14>
 8014624:	f7ff fdc2 	bl	80141ac <__sinit>
 8014628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801462c:	0719      	lsls	r1, r3, #28
 801462e:	d422      	bmi.n	8014676 <__swsetup_r+0x62>
 8014630:	06da      	lsls	r2, r3, #27
 8014632:	d407      	bmi.n	8014644 <__swsetup_r+0x30>
 8014634:	2209      	movs	r2, #9
 8014636:	602a      	str	r2, [r5, #0]
 8014638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801463c:	81a3      	strh	r3, [r4, #12]
 801463e:	f04f 30ff 	mov.w	r0, #4294967295
 8014642:	e033      	b.n	80146ac <__swsetup_r+0x98>
 8014644:	0758      	lsls	r0, r3, #29
 8014646:	d512      	bpl.n	801466e <__swsetup_r+0x5a>
 8014648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801464a:	b141      	cbz	r1, 801465e <__swsetup_r+0x4a>
 801464c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014650:	4299      	cmp	r1, r3
 8014652:	d002      	beq.n	801465a <__swsetup_r+0x46>
 8014654:	4628      	mov	r0, r5
 8014656:	f001 f853 	bl	8015700 <_free_r>
 801465a:	2300      	movs	r3, #0
 801465c:	6363      	str	r3, [r4, #52]	@ 0x34
 801465e:	89a3      	ldrh	r3, [r4, #12]
 8014660:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014664:	81a3      	strh	r3, [r4, #12]
 8014666:	2300      	movs	r3, #0
 8014668:	6063      	str	r3, [r4, #4]
 801466a:	6923      	ldr	r3, [r4, #16]
 801466c:	6023      	str	r3, [r4, #0]
 801466e:	89a3      	ldrh	r3, [r4, #12]
 8014670:	f043 0308 	orr.w	r3, r3, #8
 8014674:	81a3      	strh	r3, [r4, #12]
 8014676:	6923      	ldr	r3, [r4, #16]
 8014678:	b94b      	cbnz	r3, 801468e <__swsetup_r+0x7a>
 801467a:	89a3      	ldrh	r3, [r4, #12]
 801467c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014684:	d003      	beq.n	801468e <__swsetup_r+0x7a>
 8014686:	4621      	mov	r1, r4
 8014688:	4628      	mov	r0, r5
 801468a:	f002 fac5 	bl	8016c18 <__smakebuf_r>
 801468e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014692:	f013 0201 	ands.w	r2, r3, #1
 8014696:	d00a      	beq.n	80146ae <__swsetup_r+0x9a>
 8014698:	2200      	movs	r2, #0
 801469a:	60a2      	str	r2, [r4, #8]
 801469c:	6962      	ldr	r2, [r4, #20]
 801469e:	4252      	negs	r2, r2
 80146a0:	61a2      	str	r2, [r4, #24]
 80146a2:	6922      	ldr	r2, [r4, #16]
 80146a4:	b942      	cbnz	r2, 80146b8 <__swsetup_r+0xa4>
 80146a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80146aa:	d1c5      	bne.n	8014638 <__swsetup_r+0x24>
 80146ac:	bd38      	pop	{r3, r4, r5, pc}
 80146ae:	0799      	lsls	r1, r3, #30
 80146b0:	bf58      	it	pl
 80146b2:	6962      	ldrpl	r2, [r4, #20]
 80146b4:	60a2      	str	r2, [r4, #8]
 80146b6:	e7f4      	b.n	80146a2 <__swsetup_r+0x8e>
 80146b8:	2000      	movs	r0, #0
 80146ba:	e7f7      	b.n	80146ac <__swsetup_r+0x98>
 80146bc:	20000a84 	.word	0x20000a84

080146c0 <_fseeko_r>:
 80146c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146c4:	460c      	mov	r4, r1
 80146c6:	4690      	mov	r8, r2
 80146c8:	461e      	mov	r6, r3
 80146ca:	4605      	mov	r5, r0
 80146cc:	b118      	cbz	r0, 80146d6 <_fseeko_r+0x16>
 80146ce:	6a03      	ldr	r3, [r0, #32]
 80146d0:	b90b      	cbnz	r3, 80146d6 <_fseeko_r+0x16>
 80146d2:	f7ff fd6b 	bl	80141ac <__sinit>
 80146d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80146d8:	07d9      	lsls	r1, r3, #31
 80146da:	d405      	bmi.n	80146e8 <_fseeko_r+0x28>
 80146dc:	89a3      	ldrh	r3, [r4, #12]
 80146de:	059a      	lsls	r2, r3, #22
 80146e0:	d402      	bmi.n	80146e8 <_fseeko_r+0x28>
 80146e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146e4:	f000 f9a0 	bl	8014a28 <__retarget_lock_acquire_recursive>
 80146e8:	89a3      	ldrh	r3, [r4, #12]
 80146ea:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 80146ee:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80146f2:	d103      	bne.n	80146fc <_fseeko_r+0x3c>
 80146f4:	4621      	mov	r1, r4
 80146f6:	4628      	mov	r0, r5
 80146f8:	f7ff fc52 	bl	8013fa0 <_fflush_r>
 80146fc:	f8d4 902c 	ldr.w	r9, [r4, #44]	@ 0x2c
 8014700:	f1b9 0f00 	cmp.w	r9, #0
 8014704:	d102      	bne.n	801470c <_fseeko_r+0x4c>
 8014706:	231d      	movs	r3, #29
 8014708:	602b      	str	r3, [r5, #0]
 801470a:	e058      	b.n	80147be <_fseeko_r+0xfe>
 801470c:	2e01      	cmp	r6, #1
 801470e:	d03a      	beq.n	8014786 <_fseeko_r+0xc6>
 8014710:	f036 0302 	bics.w	r3, r6, #2
 8014714:	d162      	bne.n	80147dc <_fseeko_r+0x11c>
 8014716:	6923      	ldr	r3, [r4, #16]
 8014718:	b91b      	cbnz	r3, 8014722 <_fseeko_r+0x62>
 801471a:	4621      	mov	r1, r4
 801471c:	4628      	mov	r0, r5
 801471e:	f002 fa7b 	bl	8016c18 <__smakebuf_r>
 8014722:	4621      	mov	r1, r4
 8014724:	4628      	mov	r0, r5
 8014726:	f7ff fc3b 	bl	8013fa0 <_fflush_r>
 801472a:	4607      	mov	r7, r0
 801472c:	2800      	cmp	r0, #0
 801472e:	d146      	bne.n	80147be <_fseeko_r+0xfe>
 8014730:	6a21      	ldr	r1, [r4, #32]
 8014732:	4633      	mov	r3, r6
 8014734:	4642      	mov	r2, r8
 8014736:	4628      	mov	r0, r5
 8014738:	47c8      	blx	r9
 801473a:	3001      	adds	r0, #1
 801473c:	d03f      	beq.n	80147be <_fseeko_r+0xfe>
 801473e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014740:	b141      	cbz	r1, 8014754 <_fseeko_r+0x94>
 8014742:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014746:	4299      	cmp	r1, r3
 8014748:	d002      	beq.n	8014750 <_fseeko_r+0x90>
 801474a:	4628      	mov	r0, r5
 801474c:	f000 ffd8 	bl	8015700 <_free_r>
 8014750:	2300      	movs	r3, #0
 8014752:	6363      	str	r3, [r4, #52]	@ 0x34
 8014754:	6923      	ldr	r3, [r4, #16]
 8014756:	6023      	str	r3, [r4, #0]
 8014758:	89a3      	ldrh	r3, [r4, #12]
 801475a:	2100      	movs	r1, #0
 801475c:	f423 6302 	bic.w	r3, r3, #2080	@ 0x820
 8014760:	81a3      	strh	r3, [r4, #12]
 8014762:	2208      	movs	r2, #8
 8014764:	6061      	str	r1, [r4, #4]
 8014766:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 801476a:	f000 f8ab 	bl	80148c4 <memset>
 801476e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014770:	07da      	lsls	r2, r3, #31
 8014772:	d405      	bmi.n	8014780 <_fseeko_r+0xc0>
 8014774:	89a3      	ldrh	r3, [r4, #12]
 8014776:	059b      	lsls	r3, r3, #22
 8014778:	d402      	bmi.n	8014780 <_fseeko_r+0xc0>
 801477a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801477c:	f000 f955 	bl	8014a2a <__retarget_lock_release_recursive>
 8014780:	4638      	mov	r0, r7
 8014782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014786:	4621      	mov	r1, r4
 8014788:	4628      	mov	r0, r5
 801478a:	f7ff fc09 	bl	8013fa0 <_fflush_r>
 801478e:	89a2      	ldrh	r2, [r4, #12]
 8014790:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014794:	d00d      	beq.n	80147b2 <_fseeko_r+0xf2>
 8014796:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8014798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801479c:	075f      	lsls	r7, r3, #29
 801479e:	d514      	bpl.n	80147ca <_fseeko_r+0x10a>
 80147a0:	6863      	ldr	r3, [r4, #4]
 80147a2:	1ac0      	subs	r0, r0, r3
 80147a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80147a6:	b10b      	cbz	r3, 80147ac <_fseeko_r+0xec>
 80147a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80147aa:	1ac0      	subs	r0, r0, r3
 80147ac:	4480      	add	r8, r0
 80147ae:	2600      	movs	r6, #0
 80147b0:	e7b1      	b.n	8014716 <_fseeko_r+0x56>
 80147b2:	4633      	mov	r3, r6
 80147b4:	6a21      	ldr	r1, [r4, #32]
 80147b6:	4628      	mov	r0, r5
 80147b8:	47c8      	blx	r9
 80147ba:	1c43      	adds	r3, r0, #1
 80147bc:	d1ec      	bne.n	8014798 <_fseeko_r+0xd8>
 80147be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80147c0:	07d8      	lsls	r0, r3, #31
 80147c2:	d50d      	bpl.n	80147e0 <_fseeko_r+0x120>
 80147c4:	f04f 37ff 	mov.w	r7, #4294967295
 80147c8:	e7da      	b.n	8014780 <_fseeko_r+0xc0>
 80147ca:	071e      	lsls	r6, r3, #28
 80147cc:	d5ee      	bpl.n	80147ac <_fseeko_r+0xec>
 80147ce:	6823      	ldr	r3, [r4, #0]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d0eb      	beq.n	80147ac <_fseeko_r+0xec>
 80147d4:	6922      	ldr	r2, [r4, #16]
 80147d6:	1a9b      	subs	r3, r3, r2
 80147d8:	4418      	add	r0, r3
 80147da:	e7e7      	b.n	80147ac <_fseeko_r+0xec>
 80147dc:	2316      	movs	r3, #22
 80147de:	e793      	b.n	8014708 <_fseeko_r+0x48>
 80147e0:	89a3      	ldrh	r3, [r4, #12]
 80147e2:	0599      	lsls	r1, r3, #22
 80147e4:	d4ee      	bmi.n	80147c4 <_fseeko_r+0x104>
 80147e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147e8:	f000 f91f 	bl	8014a2a <__retarget_lock_release_recursive>
 80147ec:	e7ea      	b.n	80147c4 <_fseeko_r+0x104>

080147ee <_ftello_r>:
 80147ee:	b570      	push	{r4, r5, r6, lr}
 80147f0:	460c      	mov	r4, r1
 80147f2:	4605      	mov	r5, r0
 80147f4:	b118      	cbz	r0, 80147fe <_ftello_r+0x10>
 80147f6:	6a03      	ldr	r3, [r0, #32]
 80147f8:	b90b      	cbnz	r3, 80147fe <_ftello_r+0x10>
 80147fa:	f7ff fcd7 	bl	80141ac <__sinit>
 80147fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014800:	07db      	lsls	r3, r3, #31
 8014802:	d405      	bmi.n	8014810 <_ftello_r+0x22>
 8014804:	89a3      	ldrh	r3, [r4, #12]
 8014806:	059e      	lsls	r6, r3, #22
 8014808:	d402      	bmi.n	8014810 <_ftello_r+0x22>
 801480a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801480c:	f000 f90c 	bl	8014a28 <__retarget_lock_acquire_recursive>
 8014810:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014812:	b976      	cbnz	r6, 8014832 <_ftello_r+0x44>
 8014814:	231d      	movs	r3, #29
 8014816:	602b      	str	r3, [r5, #0]
 8014818:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801481a:	07da      	lsls	r2, r3, #31
 801481c:	d405      	bmi.n	801482a <_ftello_r+0x3c>
 801481e:	89a3      	ldrh	r3, [r4, #12]
 8014820:	059b      	lsls	r3, r3, #22
 8014822:	d402      	bmi.n	801482a <_ftello_r+0x3c>
 8014824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014826:	f000 f900 	bl	8014a2a <__retarget_lock_release_recursive>
 801482a:	f04f 35ff 	mov.w	r5, #4294967295
 801482e:	4628      	mov	r0, r5
 8014830:	bd70      	pop	{r4, r5, r6, pc}
 8014832:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014836:	f002 030c 	and.w	r3, r2, #12
 801483a:	2b08      	cmp	r3, #8
 801483c:	d110      	bne.n	8014860 <_ftello_r+0x72>
 801483e:	6823      	ldr	r3, [r4, #0]
 8014840:	b173      	cbz	r3, 8014860 <_ftello_r+0x72>
 8014842:	6921      	ldr	r1, [r4, #16]
 8014844:	1a5b      	subs	r3, r3, r1
 8014846:	2b00      	cmp	r3, #0
 8014848:	dd0a      	ble.n	8014860 <_ftello_r+0x72>
 801484a:	05d0      	lsls	r0, r2, #23
 801484c:	d508      	bpl.n	8014860 <_ftello_r+0x72>
 801484e:	2302      	movs	r3, #2
 8014850:	2200      	movs	r2, #0
 8014852:	6a21      	ldr	r1, [r4, #32]
 8014854:	4628      	mov	r0, r5
 8014856:	47b0      	blx	r6
 8014858:	1c41      	adds	r1, r0, #1
 801485a:	4605      	mov	r5, r0
 801485c:	d104      	bne.n	8014868 <_ftello_r+0x7a>
 801485e:	e7db      	b.n	8014818 <_ftello_r+0x2a>
 8014860:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014864:	d013      	beq.n	801488e <_ftello_r+0xa0>
 8014866:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8014868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801486c:	0756      	lsls	r6, r2, #29
 801486e:	d510      	bpl.n	8014892 <_ftello_r+0xa4>
 8014870:	6863      	ldr	r3, [r4, #4]
 8014872:	1aed      	subs	r5, r5, r3
 8014874:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014876:	b10b      	cbz	r3, 801487c <_ftello_r+0x8e>
 8014878:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801487a:	1aed      	subs	r5, r5, r3
 801487c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801487e:	07d9      	lsls	r1, r3, #31
 8014880:	d4d5      	bmi.n	801482e <_ftello_r+0x40>
 8014882:	0593      	lsls	r3, r2, #22
 8014884:	d4d3      	bmi.n	801482e <_ftello_r+0x40>
 8014886:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014888:	f000 f8cf 	bl	8014a2a <__retarget_lock_release_recursive>
 801488c:	e7cf      	b.n	801482e <_ftello_r+0x40>
 801488e:	2301      	movs	r3, #1
 8014890:	e7df      	b.n	8014852 <_ftello_r+0x64>
 8014892:	0710      	lsls	r0, r2, #28
 8014894:	d5f2      	bpl.n	801487c <_ftello_r+0x8e>
 8014896:	6823      	ldr	r3, [r4, #0]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d0ef      	beq.n	801487c <_ftello_r+0x8e>
 801489c:	6921      	ldr	r1, [r4, #16]
 801489e:	1a5b      	subs	r3, r3, r1
 80148a0:	441d      	add	r5, r3
 80148a2:	e7eb      	b.n	801487c <_ftello_r+0x8e>

080148a4 <memcmp>:
 80148a4:	b510      	push	{r4, lr}
 80148a6:	3901      	subs	r1, #1
 80148a8:	4402      	add	r2, r0
 80148aa:	4290      	cmp	r0, r2
 80148ac:	d101      	bne.n	80148b2 <memcmp+0xe>
 80148ae:	2000      	movs	r0, #0
 80148b0:	e005      	b.n	80148be <memcmp+0x1a>
 80148b2:	7803      	ldrb	r3, [r0, #0]
 80148b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80148b8:	42a3      	cmp	r3, r4
 80148ba:	d001      	beq.n	80148c0 <memcmp+0x1c>
 80148bc:	1b18      	subs	r0, r3, r4
 80148be:	bd10      	pop	{r4, pc}
 80148c0:	3001      	adds	r0, #1
 80148c2:	e7f2      	b.n	80148aa <memcmp+0x6>

080148c4 <memset>:
 80148c4:	4402      	add	r2, r0
 80148c6:	4603      	mov	r3, r0
 80148c8:	4293      	cmp	r3, r2
 80148ca:	d100      	bne.n	80148ce <memset+0xa>
 80148cc:	4770      	bx	lr
 80148ce:	f803 1b01 	strb.w	r1, [r3], #1
 80148d2:	e7f9      	b.n	80148c8 <memset+0x4>

080148d4 <strncmp>:
 80148d4:	b510      	push	{r4, lr}
 80148d6:	b16a      	cbz	r2, 80148f4 <strncmp+0x20>
 80148d8:	3901      	subs	r1, #1
 80148da:	1884      	adds	r4, r0, r2
 80148dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d103      	bne.n	80148f0 <strncmp+0x1c>
 80148e8:	42a0      	cmp	r0, r4
 80148ea:	d001      	beq.n	80148f0 <strncmp+0x1c>
 80148ec:	2a00      	cmp	r2, #0
 80148ee:	d1f5      	bne.n	80148dc <strncmp+0x8>
 80148f0:	1ad0      	subs	r0, r2, r3
 80148f2:	bd10      	pop	{r4, pc}
 80148f4:	4610      	mov	r0, r2
 80148f6:	e7fc      	b.n	80148f2 <strncmp+0x1e>

080148f8 <_localeconv_r>:
 80148f8:	4800      	ldr	r0, [pc, #0]	@ (80148fc <_localeconv_r+0x4>)
 80148fa:	4770      	bx	lr
 80148fc:	20000a08 	.word	0x20000a08

08014900 <_close_r>:
 8014900:	b538      	push	{r3, r4, r5, lr}
 8014902:	4d06      	ldr	r5, [pc, #24]	@ (801491c <_close_r+0x1c>)
 8014904:	2300      	movs	r3, #0
 8014906:	4604      	mov	r4, r0
 8014908:	4608      	mov	r0, r1
 801490a:	602b      	str	r3, [r5, #0]
 801490c:	f7fb f8b8 	bl	800fa80 <_close>
 8014910:	1c43      	adds	r3, r0, #1
 8014912:	d102      	bne.n	801491a <_close_r+0x1a>
 8014914:	682b      	ldr	r3, [r5, #0]
 8014916:	b103      	cbz	r3, 801491a <_close_r+0x1a>
 8014918:	6023      	str	r3, [r4, #0]
 801491a:	bd38      	pop	{r3, r4, r5, pc}
 801491c:	200010ac 	.word	0x200010ac

08014920 <_lseek_r>:
 8014920:	b538      	push	{r3, r4, r5, lr}
 8014922:	4d07      	ldr	r5, [pc, #28]	@ (8014940 <_lseek_r+0x20>)
 8014924:	4604      	mov	r4, r0
 8014926:	4608      	mov	r0, r1
 8014928:	4611      	mov	r1, r2
 801492a:	2200      	movs	r2, #0
 801492c:	602a      	str	r2, [r5, #0]
 801492e:	461a      	mov	r2, r3
 8014930:	f7fb f8cd 	bl	800face <_lseek>
 8014934:	1c43      	adds	r3, r0, #1
 8014936:	d102      	bne.n	801493e <_lseek_r+0x1e>
 8014938:	682b      	ldr	r3, [r5, #0]
 801493a:	b103      	cbz	r3, 801493e <_lseek_r+0x1e>
 801493c:	6023      	str	r3, [r4, #0]
 801493e:	bd38      	pop	{r3, r4, r5, pc}
 8014940:	200010ac 	.word	0x200010ac

08014944 <_open_r>:
 8014944:	b538      	push	{r3, r4, r5, lr}
 8014946:	4d07      	ldr	r5, [pc, #28]	@ (8014964 <_open_r+0x20>)
 8014948:	4604      	mov	r4, r0
 801494a:	4608      	mov	r0, r1
 801494c:	4611      	mov	r1, r2
 801494e:	2200      	movs	r2, #0
 8014950:	602a      	str	r2, [r5, #0]
 8014952:	461a      	mov	r2, r3
 8014954:	f7fb f8c8 	bl	800fae8 <_open>
 8014958:	1c43      	adds	r3, r0, #1
 801495a:	d102      	bne.n	8014962 <_open_r+0x1e>
 801495c:	682b      	ldr	r3, [r5, #0]
 801495e:	b103      	cbz	r3, 8014962 <_open_r+0x1e>
 8014960:	6023      	str	r3, [r4, #0]
 8014962:	bd38      	pop	{r3, r4, r5, pc}
 8014964:	200010ac 	.word	0x200010ac

08014968 <_read_r>:
 8014968:	b538      	push	{r3, r4, r5, lr}
 801496a:	4d07      	ldr	r5, [pc, #28]	@ (8014988 <_read_r+0x20>)
 801496c:	4604      	mov	r4, r0
 801496e:	4608      	mov	r0, r1
 8014970:	4611      	mov	r1, r2
 8014972:	2200      	movs	r2, #0
 8014974:	602a      	str	r2, [r5, #0]
 8014976:	461a      	mov	r2, r3
 8014978:	f7fb f849 	bl	800fa0e <_read>
 801497c:	1c43      	adds	r3, r0, #1
 801497e:	d102      	bne.n	8014986 <_read_r+0x1e>
 8014980:	682b      	ldr	r3, [r5, #0]
 8014982:	b103      	cbz	r3, 8014986 <_read_r+0x1e>
 8014984:	6023      	str	r3, [r4, #0]
 8014986:	bd38      	pop	{r3, r4, r5, pc}
 8014988:	200010ac 	.word	0x200010ac

0801498c <_sbrk_r>:
 801498c:	b538      	push	{r3, r4, r5, lr}
 801498e:	4d06      	ldr	r5, [pc, #24]	@ (80149a8 <_sbrk_r+0x1c>)
 8014990:	2300      	movs	r3, #0
 8014992:	4604      	mov	r4, r0
 8014994:	4608      	mov	r0, r1
 8014996:	602b      	str	r3, [r5, #0]
 8014998:	f7fb f8b4 	bl	800fb04 <_sbrk>
 801499c:	1c43      	adds	r3, r0, #1
 801499e:	d102      	bne.n	80149a6 <_sbrk_r+0x1a>
 80149a0:	682b      	ldr	r3, [r5, #0]
 80149a2:	b103      	cbz	r3, 80149a6 <_sbrk_r+0x1a>
 80149a4:	6023      	str	r3, [r4, #0]
 80149a6:	bd38      	pop	{r3, r4, r5, pc}
 80149a8:	200010ac 	.word	0x200010ac

080149ac <_write_r>:
 80149ac:	b538      	push	{r3, r4, r5, lr}
 80149ae:	4d07      	ldr	r5, [pc, #28]	@ (80149cc <_write_r+0x20>)
 80149b0:	4604      	mov	r4, r0
 80149b2:	4608      	mov	r0, r1
 80149b4:	4611      	mov	r1, r2
 80149b6:	2200      	movs	r2, #0
 80149b8:	602a      	str	r2, [r5, #0]
 80149ba:	461a      	mov	r2, r3
 80149bc:	f7fb f844 	bl	800fa48 <_write>
 80149c0:	1c43      	adds	r3, r0, #1
 80149c2:	d102      	bne.n	80149ca <_write_r+0x1e>
 80149c4:	682b      	ldr	r3, [r5, #0]
 80149c6:	b103      	cbz	r3, 80149ca <_write_r+0x1e>
 80149c8:	6023      	str	r3, [r4, #0]
 80149ca:	bd38      	pop	{r3, r4, r5, pc}
 80149cc:	200010ac 	.word	0x200010ac

080149d0 <__errno>:
 80149d0:	4b01      	ldr	r3, [pc, #4]	@ (80149d8 <__errno+0x8>)
 80149d2:	6818      	ldr	r0, [r3, #0]
 80149d4:	4770      	bx	lr
 80149d6:	bf00      	nop
 80149d8:	20000a84 	.word	0x20000a84

080149dc <__libc_init_array>:
 80149dc:	b570      	push	{r4, r5, r6, lr}
 80149de:	4d0d      	ldr	r5, [pc, #52]	@ (8014a14 <__libc_init_array+0x38>)
 80149e0:	4c0d      	ldr	r4, [pc, #52]	@ (8014a18 <__libc_init_array+0x3c>)
 80149e2:	1b64      	subs	r4, r4, r5
 80149e4:	10a4      	asrs	r4, r4, #2
 80149e6:	2600      	movs	r6, #0
 80149e8:	42a6      	cmp	r6, r4
 80149ea:	d109      	bne.n	8014a00 <__libc_init_array+0x24>
 80149ec:	4d0b      	ldr	r5, [pc, #44]	@ (8014a1c <__libc_init_array+0x40>)
 80149ee:	4c0c      	ldr	r4, [pc, #48]	@ (8014a20 <__libc_init_array+0x44>)
 80149f0:	f005 fa74 	bl	8019edc <_init>
 80149f4:	1b64      	subs	r4, r4, r5
 80149f6:	10a4      	asrs	r4, r4, #2
 80149f8:	2600      	movs	r6, #0
 80149fa:	42a6      	cmp	r6, r4
 80149fc:	d105      	bne.n	8014a0a <__libc_init_array+0x2e>
 80149fe:	bd70      	pop	{r4, r5, r6, pc}
 8014a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a04:	4798      	blx	r3
 8014a06:	3601      	adds	r6, #1
 8014a08:	e7ee      	b.n	80149e8 <__libc_init_array+0xc>
 8014a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a0e:	4798      	blx	r3
 8014a10:	3601      	adds	r6, #1
 8014a12:	e7f2      	b.n	80149fa <__libc_init_array+0x1e>
 8014a14:	0801aa80 	.word	0x0801aa80
 8014a18:	0801aa80 	.word	0x0801aa80
 8014a1c:	0801aa80 	.word	0x0801aa80
 8014a20:	0801aa84 	.word	0x0801aa84

08014a24 <__retarget_lock_init_recursive>:
 8014a24:	4770      	bx	lr

08014a26 <__retarget_lock_close_recursive>:
 8014a26:	4770      	bx	lr

08014a28 <__retarget_lock_acquire_recursive>:
 8014a28:	4770      	bx	lr

08014a2a <__retarget_lock_release_recursive>:
 8014a2a:	4770      	bx	lr

08014a2c <memcpy>:
 8014a2c:	440a      	add	r2, r1
 8014a2e:	4291      	cmp	r1, r2
 8014a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8014a34:	d100      	bne.n	8014a38 <memcpy+0xc>
 8014a36:	4770      	bx	lr
 8014a38:	b510      	push	{r4, lr}
 8014a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a42:	4291      	cmp	r1, r2
 8014a44:	d1f9      	bne.n	8014a3a <memcpy+0xe>
 8014a46:	bd10      	pop	{r4, pc}

08014a48 <nan>:
 8014a48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014a50 <nan+0x8>
 8014a4c:	4770      	bx	lr
 8014a4e:	bf00      	nop
 8014a50:	00000000 	.word	0x00000000
 8014a54:	7ff80000 	.word	0x7ff80000

08014a58 <nanf>:
 8014a58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014a60 <nanf+0x8>
 8014a5c:	4770      	bx	lr
 8014a5e:	bf00      	nop
 8014a60:	7fc00000 	.word	0x7fc00000

08014a64 <quorem>:
 8014a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a68:	6903      	ldr	r3, [r0, #16]
 8014a6a:	690c      	ldr	r4, [r1, #16]
 8014a6c:	42a3      	cmp	r3, r4
 8014a6e:	4607      	mov	r7, r0
 8014a70:	db7e      	blt.n	8014b70 <quorem+0x10c>
 8014a72:	3c01      	subs	r4, #1
 8014a74:	f101 0814 	add.w	r8, r1, #20
 8014a78:	00a3      	lsls	r3, r4, #2
 8014a7a:	f100 0514 	add.w	r5, r0, #20
 8014a7e:	9300      	str	r3, [sp, #0]
 8014a80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014a84:	9301      	str	r3, [sp, #4]
 8014a86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014a8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014a8e:	3301      	adds	r3, #1
 8014a90:	429a      	cmp	r2, r3
 8014a92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014a96:	fbb2 f6f3 	udiv	r6, r2, r3
 8014a9a:	d32e      	bcc.n	8014afa <quorem+0x96>
 8014a9c:	f04f 0a00 	mov.w	sl, #0
 8014aa0:	46c4      	mov	ip, r8
 8014aa2:	46ae      	mov	lr, r5
 8014aa4:	46d3      	mov	fp, sl
 8014aa6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014aaa:	b298      	uxth	r0, r3
 8014aac:	fb06 a000 	mla	r0, r6, r0, sl
 8014ab0:	0c02      	lsrs	r2, r0, #16
 8014ab2:	0c1b      	lsrs	r3, r3, #16
 8014ab4:	fb06 2303 	mla	r3, r6, r3, r2
 8014ab8:	f8de 2000 	ldr.w	r2, [lr]
 8014abc:	b280      	uxth	r0, r0
 8014abe:	b292      	uxth	r2, r2
 8014ac0:	1a12      	subs	r2, r2, r0
 8014ac2:	445a      	add	r2, fp
 8014ac4:	f8de 0000 	ldr.w	r0, [lr]
 8014ac8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014acc:	b29b      	uxth	r3, r3
 8014ace:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014ad2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014ad6:	b292      	uxth	r2, r2
 8014ad8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014adc:	45e1      	cmp	r9, ip
 8014ade:	f84e 2b04 	str.w	r2, [lr], #4
 8014ae2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014ae6:	d2de      	bcs.n	8014aa6 <quorem+0x42>
 8014ae8:	9b00      	ldr	r3, [sp, #0]
 8014aea:	58eb      	ldr	r3, [r5, r3]
 8014aec:	b92b      	cbnz	r3, 8014afa <quorem+0x96>
 8014aee:	9b01      	ldr	r3, [sp, #4]
 8014af0:	3b04      	subs	r3, #4
 8014af2:	429d      	cmp	r5, r3
 8014af4:	461a      	mov	r2, r3
 8014af6:	d32f      	bcc.n	8014b58 <quorem+0xf4>
 8014af8:	613c      	str	r4, [r7, #16]
 8014afa:	4638      	mov	r0, r7
 8014afc:	f001 fc5a 	bl	80163b4 <__mcmp>
 8014b00:	2800      	cmp	r0, #0
 8014b02:	db25      	blt.n	8014b50 <quorem+0xec>
 8014b04:	4629      	mov	r1, r5
 8014b06:	2000      	movs	r0, #0
 8014b08:	f858 2b04 	ldr.w	r2, [r8], #4
 8014b0c:	f8d1 c000 	ldr.w	ip, [r1]
 8014b10:	fa1f fe82 	uxth.w	lr, r2
 8014b14:	fa1f f38c 	uxth.w	r3, ip
 8014b18:	eba3 030e 	sub.w	r3, r3, lr
 8014b1c:	4403      	add	r3, r0
 8014b1e:	0c12      	lsrs	r2, r2, #16
 8014b20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014b24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014b28:	b29b      	uxth	r3, r3
 8014b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b2e:	45c1      	cmp	r9, r8
 8014b30:	f841 3b04 	str.w	r3, [r1], #4
 8014b34:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014b38:	d2e6      	bcs.n	8014b08 <quorem+0xa4>
 8014b3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014b3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014b42:	b922      	cbnz	r2, 8014b4e <quorem+0xea>
 8014b44:	3b04      	subs	r3, #4
 8014b46:	429d      	cmp	r5, r3
 8014b48:	461a      	mov	r2, r3
 8014b4a:	d30b      	bcc.n	8014b64 <quorem+0x100>
 8014b4c:	613c      	str	r4, [r7, #16]
 8014b4e:	3601      	adds	r6, #1
 8014b50:	4630      	mov	r0, r6
 8014b52:	b003      	add	sp, #12
 8014b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b58:	6812      	ldr	r2, [r2, #0]
 8014b5a:	3b04      	subs	r3, #4
 8014b5c:	2a00      	cmp	r2, #0
 8014b5e:	d1cb      	bne.n	8014af8 <quorem+0x94>
 8014b60:	3c01      	subs	r4, #1
 8014b62:	e7c6      	b.n	8014af2 <quorem+0x8e>
 8014b64:	6812      	ldr	r2, [r2, #0]
 8014b66:	3b04      	subs	r3, #4
 8014b68:	2a00      	cmp	r2, #0
 8014b6a:	d1ef      	bne.n	8014b4c <quorem+0xe8>
 8014b6c:	3c01      	subs	r4, #1
 8014b6e:	e7ea      	b.n	8014b46 <quorem+0xe2>
 8014b70:	2000      	movs	r0, #0
 8014b72:	e7ee      	b.n	8014b52 <quorem+0xee>
 8014b74:	0000      	movs	r0, r0
	...

08014b78 <_dtoa_r>:
 8014b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b7c:	69c7      	ldr	r7, [r0, #28]
 8014b7e:	b099      	sub	sp, #100	@ 0x64
 8014b80:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014b84:	ec55 4b10 	vmov	r4, r5, d0
 8014b88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014b8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8014b8c:	4683      	mov	fp, r0
 8014b8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8014b90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014b92:	b97f      	cbnz	r7, 8014bb4 <_dtoa_r+0x3c>
 8014b94:	2010      	movs	r0, #16
 8014b96:	f7fd fbad 	bl	80122f4 <malloc>
 8014b9a:	4602      	mov	r2, r0
 8014b9c:	f8cb 001c 	str.w	r0, [fp, #28]
 8014ba0:	b920      	cbnz	r0, 8014bac <_dtoa_r+0x34>
 8014ba2:	4ba7      	ldr	r3, [pc, #668]	@ (8014e40 <_dtoa_r+0x2c8>)
 8014ba4:	21ef      	movs	r1, #239	@ 0xef
 8014ba6:	48a7      	ldr	r0, [pc, #668]	@ (8014e44 <_dtoa_r+0x2cc>)
 8014ba8:	f002 f8ae 	bl	8016d08 <__assert_func>
 8014bac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014bb0:	6007      	str	r7, [r0, #0]
 8014bb2:	60c7      	str	r7, [r0, #12]
 8014bb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014bb8:	6819      	ldr	r1, [r3, #0]
 8014bba:	b159      	cbz	r1, 8014bd4 <_dtoa_r+0x5c>
 8014bbc:	685a      	ldr	r2, [r3, #4]
 8014bbe:	604a      	str	r2, [r1, #4]
 8014bc0:	2301      	movs	r3, #1
 8014bc2:	4093      	lsls	r3, r2
 8014bc4:	608b      	str	r3, [r1, #8]
 8014bc6:	4658      	mov	r0, fp
 8014bc8:	f001 f970 	bl	8015eac <_Bfree>
 8014bcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	601a      	str	r2, [r3, #0]
 8014bd4:	1e2b      	subs	r3, r5, #0
 8014bd6:	bfb9      	ittee	lt
 8014bd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014bdc:	9303      	strlt	r3, [sp, #12]
 8014bde:	2300      	movge	r3, #0
 8014be0:	6033      	strge	r3, [r6, #0]
 8014be2:	9f03      	ldr	r7, [sp, #12]
 8014be4:	4b98      	ldr	r3, [pc, #608]	@ (8014e48 <_dtoa_r+0x2d0>)
 8014be6:	bfbc      	itt	lt
 8014be8:	2201      	movlt	r2, #1
 8014bea:	6032      	strlt	r2, [r6, #0]
 8014bec:	43bb      	bics	r3, r7
 8014bee:	d112      	bne.n	8014c16 <_dtoa_r+0x9e>
 8014bf0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014bf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014bf6:	6013      	str	r3, [r2, #0]
 8014bf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014bfc:	4323      	orrs	r3, r4
 8014bfe:	f000 854d 	beq.w	801569c <_dtoa_r+0xb24>
 8014c02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014c04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8014e5c <_dtoa_r+0x2e4>
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	f000 854f 	beq.w	80156ac <_dtoa_r+0xb34>
 8014c0e:	f10a 0303 	add.w	r3, sl, #3
 8014c12:	f000 bd49 	b.w	80156a8 <_dtoa_r+0xb30>
 8014c16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	ec51 0b17 	vmov	r0, r1, d7
 8014c20:	2300      	movs	r3, #0
 8014c22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014c26:	f7f8 fdd7 	bl	800d7d8 <__aeabi_dcmpeq>
 8014c2a:	4680      	mov	r8, r0
 8014c2c:	b158      	cbz	r0, 8014c46 <_dtoa_r+0xce>
 8014c2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014c30:	2301      	movs	r3, #1
 8014c32:	6013      	str	r3, [r2, #0]
 8014c34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014c36:	b113      	cbz	r3, 8014c3e <_dtoa_r+0xc6>
 8014c38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014c3a:	4b84      	ldr	r3, [pc, #528]	@ (8014e4c <_dtoa_r+0x2d4>)
 8014c3c:	6013      	str	r3, [r2, #0]
 8014c3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014e60 <_dtoa_r+0x2e8>
 8014c42:	f000 bd33 	b.w	80156ac <_dtoa_r+0xb34>
 8014c46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014c4a:	aa16      	add	r2, sp, #88	@ 0x58
 8014c4c:	a917      	add	r1, sp, #92	@ 0x5c
 8014c4e:	4658      	mov	r0, fp
 8014c50:	f001 fcd0 	bl	80165f4 <__d2b>
 8014c54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014c58:	4681      	mov	r9, r0
 8014c5a:	2e00      	cmp	r6, #0
 8014c5c:	d077      	beq.n	8014d4e <_dtoa_r+0x1d6>
 8014c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014c6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014c70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014c74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014c78:	4619      	mov	r1, r3
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	4b74      	ldr	r3, [pc, #464]	@ (8014e50 <_dtoa_r+0x2d8>)
 8014c7e:	f7f8 f98b 	bl	800cf98 <__aeabi_dsub>
 8014c82:	a369      	add	r3, pc, #420	@ (adr r3, 8014e28 <_dtoa_r+0x2b0>)
 8014c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c88:	f7f8 fb3e 	bl	800d308 <__aeabi_dmul>
 8014c8c:	a368      	add	r3, pc, #416	@ (adr r3, 8014e30 <_dtoa_r+0x2b8>)
 8014c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c92:	f7f8 f983 	bl	800cf9c <__adddf3>
 8014c96:	4604      	mov	r4, r0
 8014c98:	4630      	mov	r0, r6
 8014c9a:	460d      	mov	r5, r1
 8014c9c:	f7f8 faca 	bl	800d234 <__aeabi_i2d>
 8014ca0:	a365      	add	r3, pc, #404	@ (adr r3, 8014e38 <_dtoa_r+0x2c0>)
 8014ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca6:	f7f8 fb2f 	bl	800d308 <__aeabi_dmul>
 8014caa:	4602      	mov	r2, r0
 8014cac:	460b      	mov	r3, r1
 8014cae:	4620      	mov	r0, r4
 8014cb0:	4629      	mov	r1, r5
 8014cb2:	f7f8 f973 	bl	800cf9c <__adddf3>
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	460d      	mov	r5, r1
 8014cba:	f7f8 fdd5 	bl	800d868 <__aeabi_d2iz>
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	4607      	mov	r7, r0
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	4629      	mov	r1, r5
 8014cc8:	f7f8 fd90 	bl	800d7ec <__aeabi_dcmplt>
 8014ccc:	b140      	cbz	r0, 8014ce0 <_dtoa_r+0x168>
 8014cce:	4638      	mov	r0, r7
 8014cd0:	f7f8 fab0 	bl	800d234 <__aeabi_i2d>
 8014cd4:	4622      	mov	r2, r4
 8014cd6:	462b      	mov	r3, r5
 8014cd8:	f7f8 fd7e 	bl	800d7d8 <__aeabi_dcmpeq>
 8014cdc:	b900      	cbnz	r0, 8014ce0 <_dtoa_r+0x168>
 8014cde:	3f01      	subs	r7, #1
 8014ce0:	2f16      	cmp	r7, #22
 8014ce2:	d851      	bhi.n	8014d88 <_dtoa_r+0x210>
 8014ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8014e54 <_dtoa_r+0x2dc>)
 8014ce6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014cf2:	f7f8 fd7b 	bl	800d7ec <__aeabi_dcmplt>
 8014cf6:	2800      	cmp	r0, #0
 8014cf8:	d048      	beq.n	8014d8c <_dtoa_r+0x214>
 8014cfa:	3f01      	subs	r7, #1
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	9312      	str	r3, [sp, #72]	@ 0x48
 8014d00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014d02:	1b9b      	subs	r3, r3, r6
 8014d04:	1e5a      	subs	r2, r3, #1
 8014d06:	bf44      	itt	mi
 8014d08:	f1c3 0801 	rsbmi	r8, r3, #1
 8014d0c:	2300      	movmi	r3, #0
 8014d0e:	9208      	str	r2, [sp, #32]
 8014d10:	bf54      	ite	pl
 8014d12:	f04f 0800 	movpl.w	r8, #0
 8014d16:	9308      	strmi	r3, [sp, #32]
 8014d18:	2f00      	cmp	r7, #0
 8014d1a:	db39      	blt.n	8014d90 <_dtoa_r+0x218>
 8014d1c:	9b08      	ldr	r3, [sp, #32]
 8014d1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014d20:	443b      	add	r3, r7
 8014d22:	9308      	str	r3, [sp, #32]
 8014d24:	2300      	movs	r3, #0
 8014d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d2a:	2b09      	cmp	r3, #9
 8014d2c:	d864      	bhi.n	8014df8 <_dtoa_r+0x280>
 8014d2e:	2b05      	cmp	r3, #5
 8014d30:	bfc4      	itt	gt
 8014d32:	3b04      	subgt	r3, #4
 8014d34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8014d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d38:	f1a3 0302 	sub.w	r3, r3, #2
 8014d3c:	bfcc      	ite	gt
 8014d3e:	2400      	movgt	r4, #0
 8014d40:	2401      	movle	r4, #1
 8014d42:	2b03      	cmp	r3, #3
 8014d44:	d863      	bhi.n	8014e0e <_dtoa_r+0x296>
 8014d46:	e8df f003 	tbb	[pc, r3]
 8014d4a:	372a      	.short	0x372a
 8014d4c:	5535      	.short	0x5535
 8014d4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8014d52:	441e      	add	r6, r3
 8014d54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014d58:	2b20      	cmp	r3, #32
 8014d5a:	bfc1      	itttt	gt
 8014d5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014d60:	409f      	lslgt	r7, r3
 8014d62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014d66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014d6a:	bfd6      	itet	le
 8014d6c:	f1c3 0320 	rsble	r3, r3, #32
 8014d70:	ea47 0003 	orrgt.w	r0, r7, r3
 8014d74:	fa04 f003 	lslle.w	r0, r4, r3
 8014d78:	f7f8 fa4c 	bl	800d214 <__aeabi_ui2d>
 8014d7c:	2201      	movs	r2, #1
 8014d7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014d82:	3e01      	subs	r6, #1
 8014d84:	9214      	str	r2, [sp, #80]	@ 0x50
 8014d86:	e777      	b.n	8014c78 <_dtoa_r+0x100>
 8014d88:	2301      	movs	r3, #1
 8014d8a:	e7b8      	b.n	8014cfe <_dtoa_r+0x186>
 8014d8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8014d8e:	e7b7      	b.n	8014d00 <_dtoa_r+0x188>
 8014d90:	427b      	negs	r3, r7
 8014d92:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d94:	2300      	movs	r3, #0
 8014d96:	eba8 0807 	sub.w	r8, r8, r7
 8014d9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014d9c:	e7c4      	b.n	8014d28 <_dtoa_r+0x1b0>
 8014d9e:	2300      	movs	r3, #0
 8014da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014da2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	dc35      	bgt.n	8014e14 <_dtoa_r+0x29c>
 8014da8:	2301      	movs	r3, #1
 8014daa:	9300      	str	r3, [sp, #0]
 8014dac:	9307      	str	r3, [sp, #28]
 8014dae:	461a      	mov	r2, r3
 8014db0:	920e      	str	r2, [sp, #56]	@ 0x38
 8014db2:	e00b      	b.n	8014dcc <_dtoa_r+0x254>
 8014db4:	2301      	movs	r3, #1
 8014db6:	e7f3      	b.n	8014da0 <_dtoa_r+0x228>
 8014db8:	2300      	movs	r3, #0
 8014dba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014dbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014dbe:	18fb      	adds	r3, r7, r3
 8014dc0:	9300      	str	r3, [sp, #0]
 8014dc2:	3301      	adds	r3, #1
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	9307      	str	r3, [sp, #28]
 8014dc8:	bfb8      	it	lt
 8014dca:	2301      	movlt	r3, #1
 8014dcc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014dd0:	2100      	movs	r1, #0
 8014dd2:	2204      	movs	r2, #4
 8014dd4:	f102 0514 	add.w	r5, r2, #20
 8014dd8:	429d      	cmp	r5, r3
 8014dda:	d91f      	bls.n	8014e1c <_dtoa_r+0x2a4>
 8014ddc:	6041      	str	r1, [r0, #4]
 8014dde:	4658      	mov	r0, fp
 8014de0:	f001 f824 	bl	8015e2c <_Balloc>
 8014de4:	4682      	mov	sl, r0
 8014de6:	2800      	cmp	r0, #0
 8014de8:	d13c      	bne.n	8014e64 <_dtoa_r+0x2ec>
 8014dea:	4b1b      	ldr	r3, [pc, #108]	@ (8014e58 <_dtoa_r+0x2e0>)
 8014dec:	4602      	mov	r2, r0
 8014dee:	f240 11af 	movw	r1, #431	@ 0x1af
 8014df2:	e6d8      	b.n	8014ba6 <_dtoa_r+0x2e>
 8014df4:	2301      	movs	r3, #1
 8014df6:	e7e0      	b.n	8014dba <_dtoa_r+0x242>
 8014df8:	2401      	movs	r4, #1
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014dfe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014e00:	f04f 33ff 	mov.w	r3, #4294967295
 8014e04:	9300      	str	r3, [sp, #0]
 8014e06:	9307      	str	r3, [sp, #28]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	2312      	movs	r3, #18
 8014e0c:	e7d0      	b.n	8014db0 <_dtoa_r+0x238>
 8014e0e:	2301      	movs	r3, #1
 8014e10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014e12:	e7f5      	b.n	8014e00 <_dtoa_r+0x288>
 8014e14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e16:	9300      	str	r3, [sp, #0]
 8014e18:	9307      	str	r3, [sp, #28]
 8014e1a:	e7d7      	b.n	8014dcc <_dtoa_r+0x254>
 8014e1c:	3101      	adds	r1, #1
 8014e1e:	0052      	lsls	r2, r2, #1
 8014e20:	e7d8      	b.n	8014dd4 <_dtoa_r+0x25c>
 8014e22:	bf00      	nop
 8014e24:	f3af 8000 	nop.w
 8014e28:	636f4361 	.word	0x636f4361
 8014e2c:	3fd287a7 	.word	0x3fd287a7
 8014e30:	8b60c8b3 	.word	0x8b60c8b3
 8014e34:	3fc68a28 	.word	0x3fc68a28
 8014e38:	509f79fb 	.word	0x509f79fb
 8014e3c:	3fd34413 	.word	0x3fd34413
 8014e40:	0801a3c7 	.word	0x0801a3c7
 8014e44:	0801a3de 	.word	0x0801a3de
 8014e48:	7ff00000 	.word	0x7ff00000
 8014e4c:	0801a38a 	.word	0x0801a38a
 8014e50:	3ff80000 	.word	0x3ff80000
 8014e54:	0801a538 	.word	0x0801a538
 8014e58:	0801a436 	.word	0x0801a436
 8014e5c:	0801a3c3 	.word	0x0801a3c3
 8014e60:	0801a389 	.word	0x0801a389
 8014e64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014e68:	6018      	str	r0, [r3, #0]
 8014e6a:	9b07      	ldr	r3, [sp, #28]
 8014e6c:	2b0e      	cmp	r3, #14
 8014e6e:	f200 80a4 	bhi.w	8014fba <_dtoa_r+0x442>
 8014e72:	2c00      	cmp	r4, #0
 8014e74:	f000 80a1 	beq.w	8014fba <_dtoa_r+0x442>
 8014e78:	2f00      	cmp	r7, #0
 8014e7a:	dd33      	ble.n	8014ee4 <_dtoa_r+0x36c>
 8014e7c:	4bad      	ldr	r3, [pc, #692]	@ (8015134 <_dtoa_r+0x5bc>)
 8014e7e:	f007 020f 	and.w	r2, r7, #15
 8014e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e86:	ed93 7b00 	vldr	d7, [r3]
 8014e8a:	05f8      	lsls	r0, r7, #23
 8014e8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014e90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014e94:	d516      	bpl.n	8014ec4 <_dtoa_r+0x34c>
 8014e96:	4ba8      	ldr	r3, [pc, #672]	@ (8015138 <_dtoa_r+0x5c0>)
 8014e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014e9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ea0:	f7f8 fb5c 	bl	800d55c <__aeabi_ddiv>
 8014ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ea8:	f004 040f 	and.w	r4, r4, #15
 8014eac:	2603      	movs	r6, #3
 8014eae:	4da2      	ldr	r5, [pc, #648]	@ (8015138 <_dtoa_r+0x5c0>)
 8014eb0:	b954      	cbnz	r4, 8014ec8 <_dtoa_r+0x350>
 8014eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014eba:	f7f8 fb4f 	bl	800d55c <__aeabi_ddiv>
 8014ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ec2:	e028      	b.n	8014f16 <_dtoa_r+0x39e>
 8014ec4:	2602      	movs	r6, #2
 8014ec6:	e7f2      	b.n	8014eae <_dtoa_r+0x336>
 8014ec8:	07e1      	lsls	r1, r4, #31
 8014eca:	d508      	bpl.n	8014ede <_dtoa_r+0x366>
 8014ecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ed0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014ed4:	f7f8 fa18 	bl	800d308 <__aeabi_dmul>
 8014ed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014edc:	3601      	adds	r6, #1
 8014ede:	1064      	asrs	r4, r4, #1
 8014ee0:	3508      	adds	r5, #8
 8014ee2:	e7e5      	b.n	8014eb0 <_dtoa_r+0x338>
 8014ee4:	f000 80d2 	beq.w	801508c <_dtoa_r+0x514>
 8014ee8:	427c      	negs	r4, r7
 8014eea:	4b92      	ldr	r3, [pc, #584]	@ (8015134 <_dtoa_r+0x5bc>)
 8014eec:	4d92      	ldr	r5, [pc, #584]	@ (8015138 <_dtoa_r+0x5c0>)
 8014eee:	f004 020f 	and.w	r2, r4, #15
 8014ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014efa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014efe:	f7f8 fa03 	bl	800d308 <__aeabi_dmul>
 8014f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f06:	1124      	asrs	r4, r4, #4
 8014f08:	2300      	movs	r3, #0
 8014f0a:	2602      	movs	r6, #2
 8014f0c:	2c00      	cmp	r4, #0
 8014f0e:	f040 80b2 	bne.w	8015076 <_dtoa_r+0x4fe>
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d1d3      	bne.n	8014ebe <_dtoa_r+0x346>
 8014f16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014f18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	f000 80b7 	beq.w	8015090 <_dtoa_r+0x518>
 8014f22:	4b86      	ldr	r3, [pc, #536]	@ (801513c <_dtoa_r+0x5c4>)
 8014f24:	2200      	movs	r2, #0
 8014f26:	4620      	mov	r0, r4
 8014f28:	4629      	mov	r1, r5
 8014f2a:	f7f8 fc5f 	bl	800d7ec <__aeabi_dcmplt>
 8014f2e:	2800      	cmp	r0, #0
 8014f30:	f000 80ae 	beq.w	8015090 <_dtoa_r+0x518>
 8014f34:	9b07      	ldr	r3, [sp, #28]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	f000 80aa 	beq.w	8015090 <_dtoa_r+0x518>
 8014f3c:	9b00      	ldr	r3, [sp, #0]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	dd37      	ble.n	8014fb2 <_dtoa_r+0x43a>
 8014f42:	1e7b      	subs	r3, r7, #1
 8014f44:	9304      	str	r3, [sp, #16]
 8014f46:	4620      	mov	r0, r4
 8014f48:	4b7d      	ldr	r3, [pc, #500]	@ (8015140 <_dtoa_r+0x5c8>)
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	4629      	mov	r1, r5
 8014f4e:	f7f8 f9db 	bl	800d308 <__aeabi_dmul>
 8014f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f56:	9c00      	ldr	r4, [sp, #0]
 8014f58:	3601      	adds	r6, #1
 8014f5a:	4630      	mov	r0, r6
 8014f5c:	f7f8 f96a 	bl	800d234 <__aeabi_i2d>
 8014f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014f64:	f7f8 f9d0 	bl	800d308 <__aeabi_dmul>
 8014f68:	4b76      	ldr	r3, [pc, #472]	@ (8015144 <_dtoa_r+0x5cc>)
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	f7f8 f816 	bl	800cf9c <__adddf3>
 8014f70:	4605      	mov	r5, r0
 8014f72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014f76:	2c00      	cmp	r4, #0
 8014f78:	f040 808d 	bne.w	8015096 <_dtoa_r+0x51e>
 8014f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f80:	4b71      	ldr	r3, [pc, #452]	@ (8015148 <_dtoa_r+0x5d0>)
 8014f82:	2200      	movs	r2, #0
 8014f84:	f7f8 f808 	bl	800cf98 <__aeabi_dsub>
 8014f88:	4602      	mov	r2, r0
 8014f8a:	460b      	mov	r3, r1
 8014f8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014f90:	462a      	mov	r2, r5
 8014f92:	4633      	mov	r3, r6
 8014f94:	f7f8 fc48 	bl	800d828 <__aeabi_dcmpgt>
 8014f98:	2800      	cmp	r0, #0
 8014f9a:	f040 828b 	bne.w	80154b4 <_dtoa_r+0x93c>
 8014f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fa2:	462a      	mov	r2, r5
 8014fa4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014fa8:	f7f8 fc20 	bl	800d7ec <__aeabi_dcmplt>
 8014fac:	2800      	cmp	r0, #0
 8014fae:	f040 8128 	bne.w	8015202 <_dtoa_r+0x68a>
 8014fb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8014fb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014fba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	f2c0 815a 	blt.w	8015276 <_dtoa_r+0x6fe>
 8014fc2:	2f0e      	cmp	r7, #14
 8014fc4:	f300 8157 	bgt.w	8015276 <_dtoa_r+0x6fe>
 8014fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8015134 <_dtoa_r+0x5bc>)
 8014fca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014fce:	ed93 7b00 	vldr	d7, [r3]
 8014fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	ed8d 7b00 	vstr	d7, [sp]
 8014fda:	da03      	bge.n	8014fe4 <_dtoa_r+0x46c>
 8014fdc:	9b07      	ldr	r3, [sp, #28]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	f340 8101 	ble.w	80151e6 <_dtoa_r+0x66e>
 8014fe4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014fe8:	4656      	mov	r6, sl
 8014fea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fee:	4620      	mov	r0, r4
 8014ff0:	4629      	mov	r1, r5
 8014ff2:	f7f8 fab3 	bl	800d55c <__aeabi_ddiv>
 8014ff6:	f7f8 fc37 	bl	800d868 <__aeabi_d2iz>
 8014ffa:	4680      	mov	r8, r0
 8014ffc:	f7f8 f91a 	bl	800d234 <__aeabi_i2d>
 8015000:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015004:	f7f8 f980 	bl	800d308 <__aeabi_dmul>
 8015008:	4602      	mov	r2, r0
 801500a:	460b      	mov	r3, r1
 801500c:	4620      	mov	r0, r4
 801500e:	4629      	mov	r1, r5
 8015010:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015014:	f7f7 ffc0 	bl	800cf98 <__aeabi_dsub>
 8015018:	f806 4b01 	strb.w	r4, [r6], #1
 801501c:	9d07      	ldr	r5, [sp, #28]
 801501e:	eba6 040a 	sub.w	r4, r6, sl
 8015022:	42a5      	cmp	r5, r4
 8015024:	4602      	mov	r2, r0
 8015026:	460b      	mov	r3, r1
 8015028:	f040 8117 	bne.w	801525a <_dtoa_r+0x6e2>
 801502c:	f7f7 ffb6 	bl	800cf9c <__adddf3>
 8015030:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015034:	4604      	mov	r4, r0
 8015036:	460d      	mov	r5, r1
 8015038:	f7f8 fbf6 	bl	800d828 <__aeabi_dcmpgt>
 801503c:	2800      	cmp	r0, #0
 801503e:	f040 80f9 	bne.w	8015234 <_dtoa_r+0x6bc>
 8015042:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015046:	4620      	mov	r0, r4
 8015048:	4629      	mov	r1, r5
 801504a:	f7f8 fbc5 	bl	800d7d8 <__aeabi_dcmpeq>
 801504e:	b118      	cbz	r0, 8015058 <_dtoa_r+0x4e0>
 8015050:	f018 0f01 	tst.w	r8, #1
 8015054:	f040 80ee 	bne.w	8015234 <_dtoa_r+0x6bc>
 8015058:	4649      	mov	r1, r9
 801505a:	4658      	mov	r0, fp
 801505c:	f000 ff26 	bl	8015eac <_Bfree>
 8015060:	2300      	movs	r3, #0
 8015062:	7033      	strb	r3, [r6, #0]
 8015064:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015066:	3701      	adds	r7, #1
 8015068:	601f      	str	r7, [r3, #0]
 801506a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801506c:	2b00      	cmp	r3, #0
 801506e:	f000 831d 	beq.w	80156ac <_dtoa_r+0xb34>
 8015072:	601e      	str	r6, [r3, #0]
 8015074:	e31a      	b.n	80156ac <_dtoa_r+0xb34>
 8015076:	07e2      	lsls	r2, r4, #31
 8015078:	d505      	bpl.n	8015086 <_dtoa_r+0x50e>
 801507a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801507e:	f7f8 f943 	bl	800d308 <__aeabi_dmul>
 8015082:	3601      	adds	r6, #1
 8015084:	2301      	movs	r3, #1
 8015086:	1064      	asrs	r4, r4, #1
 8015088:	3508      	adds	r5, #8
 801508a:	e73f      	b.n	8014f0c <_dtoa_r+0x394>
 801508c:	2602      	movs	r6, #2
 801508e:	e742      	b.n	8014f16 <_dtoa_r+0x39e>
 8015090:	9c07      	ldr	r4, [sp, #28]
 8015092:	9704      	str	r7, [sp, #16]
 8015094:	e761      	b.n	8014f5a <_dtoa_r+0x3e2>
 8015096:	4b27      	ldr	r3, [pc, #156]	@ (8015134 <_dtoa_r+0x5bc>)
 8015098:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801509a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801509e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80150a2:	4454      	add	r4, sl
 80150a4:	2900      	cmp	r1, #0
 80150a6:	d053      	beq.n	8015150 <_dtoa_r+0x5d8>
 80150a8:	4928      	ldr	r1, [pc, #160]	@ (801514c <_dtoa_r+0x5d4>)
 80150aa:	2000      	movs	r0, #0
 80150ac:	f7f8 fa56 	bl	800d55c <__aeabi_ddiv>
 80150b0:	4633      	mov	r3, r6
 80150b2:	462a      	mov	r2, r5
 80150b4:	f7f7 ff70 	bl	800cf98 <__aeabi_dsub>
 80150b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80150bc:	4656      	mov	r6, sl
 80150be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150c2:	f7f8 fbd1 	bl	800d868 <__aeabi_d2iz>
 80150c6:	4605      	mov	r5, r0
 80150c8:	f7f8 f8b4 	bl	800d234 <__aeabi_i2d>
 80150cc:	4602      	mov	r2, r0
 80150ce:	460b      	mov	r3, r1
 80150d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150d4:	f7f7 ff60 	bl	800cf98 <__aeabi_dsub>
 80150d8:	3530      	adds	r5, #48	@ 0x30
 80150da:	4602      	mov	r2, r0
 80150dc:	460b      	mov	r3, r1
 80150de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80150e2:	f806 5b01 	strb.w	r5, [r6], #1
 80150e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80150ea:	f7f8 fb7f 	bl	800d7ec <__aeabi_dcmplt>
 80150ee:	2800      	cmp	r0, #0
 80150f0:	d171      	bne.n	80151d6 <_dtoa_r+0x65e>
 80150f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80150f6:	4911      	ldr	r1, [pc, #68]	@ (801513c <_dtoa_r+0x5c4>)
 80150f8:	2000      	movs	r0, #0
 80150fa:	f7f7 ff4d 	bl	800cf98 <__aeabi_dsub>
 80150fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015102:	f7f8 fb73 	bl	800d7ec <__aeabi_dcmplt>
 8015106:	2800      	cmp	r0, #0
 8015108:	f040 8095 	bne.w	8015236 <_dtoa_r+0x6be>
 801510c:	42a6      	cmp	r6, r4
 801510e:	f43f af50 	beq.w	8014fb2 <_dtoa_r+0x43a>
 8015112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015116:	4b0a      	ldr	r3, [pc, #40]	@ (8015140 <_dtoa_r+0x5c8>)
 8015118:	2200      	movs	r2, #0
 801511a:	f7f8 f8f5 	bl	800d308 <__aeabi_dmul>
 801511e:	4b08      	ldr	r3, [pc, #32]	@ (8015140 <_dtoa_r+0x5c8>)
 8015120:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015124:	2200      	movs	r2, #0
 8015126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801512a:	f7f8 f8ed 	bl	800d308 <__aeabi_dmul>
 801512e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015132:	e7c4      	b.n	80150be <_dtoa_r+0x546>
 8015134:	0801a538 	.word	0x0801a538
 8015138:	0801a510 	.word	0x0801a510
 801513c:	3ff00000 	.word	0x3ff00000
 8015140:	40240000 	.word	0x40240000
 8015144:	401c0000 	.word	0x401c0000
 8015148:	40140000 	.word	0x40140000
 801514c:	3fe00000 	.word	0x3fe00000
 8015150:	4631      	mov	r1, r6
 8015152:	4628      	mov	r0, r5
 8015154:	f7f8 f8d8 	bl	800d308 <__aeabi_dmul>
 8015158:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801515c:	9415      	str	r4, [sp, #84]	@ 0x54
 801515e:	4656      	mov	r6, sl
 8015160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015164:	f7f8 fb80 	bl	800d868 <__aeabi_d2iz>
 8015168:	4605      	mov	r5, r0
 801516a:	f7f8 f863 	bl	800d234 <__aeabi_i2d>
 801516e:	4602      	mov	r2, r0
 8015170:	460b      	mov	r3, r1
 8015172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015176:	f7f7 ff0f 	bl	800cf98 <__aeabi_dsub>
 801517a:	3530      	adds	r5, #48	@ 0x30
 801517c:	f806 5b01 	strb.w	r5, [r6], #1
 8015180:	4602      	mov	r2, r0
 8015182:	460b      	mov	r3, r1
 8015184:	42a6      	cmp	r6, r4
 8015186:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801518a:	f04f 0200 	mov.w	r2, #0
 801518e:	d124      	bne.n	80151da <_dtoa_r+0x662>
 8015190:	4bac      	ldr	r3, [pc, #688]	@ (8015444 <_dtoa_r+0x8cc>)
 8015192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015196:	f7f7 ff01 	bl	800cf9c <__adddf3>
 801519a:	4602      	mov	r2, r0
 801519c:	460b      	mov	r3, r1
 801519e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151a2:	f7f8 fb41 	bl	800d828 <__aeabi_dcmpgt>
 80151a6:	2800      	cmp	r0, #0
 80151a8:	d145      	bne.n	8015236 <_dtoa_r+0x6be>
 80151aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80151ae:	49a5      	ldr	r1, [pc, #660]	@ (8015444 <_dtoa_r+0x8cc>)
 80151b0:	2000      	movs	r0, #0
 80151b2:	f7f7 fef1 	bl	800cf98 <__aeabi_dsub>
 80151b6:	4602      	mov	r2, r0
 80151b8:	460b      	mov	r3, r1
 80151ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151be:	f7f8 fb15 	bl	800d7ec <__aeabi_dcmplt>
 80151c2:	2800      	cmp	r0, #0
 80151c4:	f43f aef5 	beq.w	8014fb2 <_dtoa_r+0x43a>
 80151c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80151ca:	1e73      	subs	r3, r6, #1
 80151cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80151ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80151d2:	2b30      	cmp	r3, #48	@ 0x30
 80151d4:	d0f8      	beq.n	80151c8 <_dtoa_r+0x650>
 80151d6:	9f04      	ldr	r7, [sp, #16]
 80151d8:	e73e      	b.n	8015058 <_dtoa_r+0x4e0>
 80151da:	4b9b      	ldr	r3, [pc, #620]	@ (8015448 <_dtoa_r+0x8d0>)
 80151dc:	f7f8 f894 	bl	800d308 <__aeabi_dmul>
 80151e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151e4:	e7bc      	b.n	8015160 <_dtoa_r+0x5e8>
 80151e6:	d10c      	bne.n	8015202 <_dtoa_r+0x68a>
 80151e8:	4b98      	ldr	r3, [pc, #608]	@ (801544c <_dtoa_r+0x8d4>)
 80151ea:	2200      	movs	r2, #0
 80151ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151f0:	f7f8 f88a 	bl	800d308 <__aeabi_dmul>
 80151f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151f8:	f7f8 fb0c 	bl	800d814 <__aeabi_dcmpge>
 80151fc:	2800      	cmp	r0, #0
 80151fe:	f000 8157 	beq.w	80154b0 <_dtoa_r+0x938>
 8015202:	2400      	movs	r4, #0
 8015204:	4625      	mov	r5, r4
 8015206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015208:	43db      	mvns	r3, r3
 801520a:	9304      	str	r3, [sp, #16]
 801520c:	4656      	mov	r6, sl
 801520e:	2700      	movs	r7, #0
 8015210:	4621      	mov	r1, r4
 8015212:	4658      	mov	r0, fp
 8015214:	f000 fe4a 	bl	8015eac <_Bfree>
 8015218:	2d00      	cmp	r5, #0
 801521a:	d0dc      	beq.n	80151d6 <_dtoa_r+0x65e>
 801521c:	b12f      	cbz	r7, 801522a <_dtoa_r+0x6b2>
 801521e:	42af      	cmp	r7, r5
 8015220:	d003      	beq.n	801522a <_dtoa_r+0x6b2>
 8015222:	4639      	mov	r1, r7
 8015224:	4658      	mov	r0, fp
 8015226:	f000 fe41 	bl	8015eac <_Bfree>
 801522a:	4629      	mov	r1, r5
 801522c:	4658      	mov	r0, fp
 801522e:	f000 fe3d 	bl	8015eac <_Bfree>
 8015232:	e7d0      	b.n	80151d6 <_dtoa_r+0x65e>
 8015234:	9704      	str	r7, [sp, #16]
 8015236:	4633      	mov	r3, r6
 8015238:	461e      	mov	r6, r3
 801523a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801523e:	2a39      	cmp	r2, #57	@ 0x39
 8015240:	d107      	bne.n	8015252 <_dtoa_r+0x6da>
 8015242:	459a      	cmp	sl, r3
 8015244:	d1f8      	bne.n	8015238 <_dtoa_r+0x6c0>
 8015246:	9a04      	ldr	r2, [sp, #16]
 8015248:	3201      	adds	r2, #1
 801524a:	9204      	str	r2, [sp, #16]
 801524c:	2230      	movs	r2, #48	@ 0x30
 801524e:	f88a 2000 	strb.w	r2, [sl]
 8015252:	781a      	ldrb	r2, [r3, #0]
 8015254:	3201      	adds	r2, #1
 8015256:	701a      	strb	r2, [r3, #0]
 8015258:	e7bd      	b.n	80151d6 <_dtoa_r+0x65e>
 801525a:	4b7b      	ldr	r3, [pc, #492]	@ (8015448 <_dtoa_r+0x8d0>)
 801525c:	2200      	movs	r2, #0
 801525e:	f7f8 f853 	bl	800d308 <__aeabi_dmul>
 8015262:	2200      	movs	r2, #0
 8015264:	2300      	movs	r3, #0
 8015266:	4604      	mov	r4, r0
 8015268:	460d      	mov	r5, r1
 801526a:	f7f8 fab5 	bl	800d7d8 <__aeabi_dcmpeq>
 801526e:	2800      	cmp	r0, #0
 8015270:	f43f aebb 	beq.w	8014fea <_dtoa_r+0x472>
 8015274:	e6f0      	b.n	8015058 <_dtoa_r+0x4e0>
 8015276:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015278:	2a00      	cmp	r2, #0
 801527a:	f000 80db 	beq.w	8015434 <_dtoa_r+0x8bc>
 801527e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015280:	2a01      	cmp	r2, #1
 8015282:	f300 80bf 	bgt.w	8015404 <_dtoa_r+0x88c>
 8015286:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015288:	2a00      	cmp	r2, #0
 801528a:	f000 80b7 	beq.w	80153fc <_dtoa_r+0x884>
 801528e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015292:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015294:	4646      	mov	r6, r8
 8015296:	9a08      	ldr	r2, [sp, #32]
 8015298:	2101      	movs	r1, #1
 801529a:	441a      	add	r2, r3
 801529c:	4658      	mov	r0, fp
 801529e:	4498      	add	r8, r3
 80152a0:	9208      	str	r2, [sp, #32]
 80152a2:	f000 ff01 	bl	80160a8 <__i2b>
 80152a6:	4605      	mov	r5, r0
 80152a8:	b15e      	cbz	r6, 80152c2 <_dtoa_r+0x74a>
 80152aa:	9b08      	ldr	r3, [sp, #32]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	dd08      	ble.n	80152c2 <_dtoa_r+0x74a>
 80152b0:	42b3      	cmp	r3, r6
 80152b2:	9a08      	ldr	r2, [sp, #32]
 80152b4:	bfa8      	it	ge
 80152b6:	4633      	movge	r3, r6
 80152b8:	eba8 0803 	sub.w	r8, r8, r3
 80152bc:	1af6      	subs	r6, r6, r3
 80152be:	1ad3      	subs	r3, r2, r3
 80152c0:	9308      	str	r3, [sp, #32]
 80152c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80152c4:	b1f3      	cbz	r3, 8015304 <_dtoa_r+0x78c>
 80152c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	f000 80b7 	beq.w	801543c <_dtoa_r+0x8c4>
 80152ce:	b18c      	cbz	r4, 80152f4 <_dtoa_r+0x77c>
 80152d0:	4629      	mov	r1, r5
 80152d2:	4622      	mov	r2, r4
 80152d4:	4658      	mov	r0, fp
 80152d6:	f000 ffa7 	bl	8016228 <__pow5mult>
 80152da:	464a      	mov	r2, r9
 80152dc:	4601      	mov	r1, r0
 80152de:	4605      	mov	r5, r0
 80152e0:	4658      	mov	r0, fp
 80152e2:	f000 fef7 	bl	80160d4 <__multiply>
 80152e6:	4649      	mov	r1, r9
 80152e8:	9004      	str	r0, [sp, #16]
 80152ea:	4658      	mov	r0, fp
 80152ec:	f000 fdde 	bl	8015eac <_Bfree>
 80152f0:	9b04      	ldr	r3, [sp, #16]
 80152f2:	4699      	mov	r9, r3
 80152f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80152f6:	1b1a      	subs	r2, r3, r4
 80152f8:	d004      	beq.n	8015304 <_dtoa_r+0x78c>
 80152fa:	4649      	mov	r1, r9
 80152fc:	4658      	mov	r0, fp
 80152fe:	f000 ff93 	bl	8016228 <__pow5mult>
 8015302:	4681      	mov	r9, r0
 8015304:	2101      	movs	r1, #1
 8015306:	4658      	mov	r0, fp
 8015308:	f000 fece 	bl	80160a8 <__i2b>
 801530c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801530e:	4604      	mov	r4, r0
 8015310:	2b00      	cmp	r3, #0
 8015312:	f000 81cf 	beq.w	80156b4 <_dtoa_r+0xb3c>
 8015316:	461a      	mov	r2, r3
 8015318:	4601      	mov	r1, r0
 801531a:	4658      	mov	r0, fp
 801531c:	f000 ff84 	bl	8016228 <__pow5mult>
 8015320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015322:	2b01      	cmp	r3, #1
 8015324:	4604      	mov	r4, r0
 8015326:	f300 8095 	bgt.w	8015454 <_dtoa_r+0x8dc>
 801532a:	9b02      	ldr	r3, [sp, #8]
 801532c:	2b00      	cmp	r3, #0
 801532e:	f040 8087 	bne.w	8015440 <_dtoa_r+0x8c8>
 8015332:	9b03      	ldr	r3, [sp, #12]
 8015334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015338:	2b00      	cmp	r3, #0
 801533a:	f040 8089 	bne.w	8015450 <_dtoa_r+0x8d8>
 801533e:	9b03      	ldr	r3, [sp, #12]
 8015340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015344:	0d1b      	lsrs	r3, r3, #20
 8015346:	051b      	lsls	r3, r3, #20
 8015348:	b12b      	cbz	r3, 8015356 <_dtoa_r+0x7de>
 801534a:	9b08      	ldr	r3, [sp, #32]
 801534c:	3301      	adds	r3, #1
 801534e:	9308      	str	r3, [sp, #32]
 8015350:	f108 0801 	add.w	r8, r8, #1
 8015354:	2301      	movs	r3, #1
 8015356:	930a      	str	r3, [sp, #40]	@ 0x28
 8015358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801535a:	2b00      	cmp	r3, #0
 801535c:	f000 81b0 	beq.w	80156c0 <_dtoa_r+0xb48>
 8015360:	6923      	ldr	r3, [r4, #16]
 8015362:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015366:	6918      	ldr	r0, [r3, #16]
 8015368:	f000 fe52 	bl	8016010 <__hi0bits>
 801536c:	f1c0 0020 	rsb	r0, r0, #32
 8015370:	9b08      	ldr	r3, [sp, #32]
 8015372:	4418      	add	r0, r3
 8015374:	f010 001f 	ands.w	r0, r0, #31
 8015378:	d077      	beq.n	801546a <_dtoa_r+0x8f2>
 801537a:	f1c0 0320 	rsb	r3, r0, #32
 801537e:	2b04      	cmp	r3, #4
 8015380:	dd6b      	ble.n	801545a <_dtoa_r+0x8e2>
 8015382:	9b08      	ldr	r3, [sp, #32]
 8015384:	f1c0 001c 	rsb	r0, r0, #28
 8015388:	4403      	add	r3, r0
 801538a:	4480      	add	r8, r0
 801538c:	4406      	add	r6, r0
 801538e:	9308      	str	r3, [sp, #32]
 8015390:	f1b8 0f00 	cmp.w	r8, #0
 8015394:	dd05      	ble.n	80153a2 <_dtoa_r+0x82a>
 8015396:	4649      	mov	r1, r9
 8015398:	4642      	mov	r2, r8
 801539a:	4658      	mov	r0, fp
 801539c:	f000 ff9e 	bl	80162dc <__lshift>
 80153a0:	4681      	mov	r9, r0
 80153a2:	9b08      	ldr	r3, [sp, #32]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	dd05      	ble.n	80153b4 <_dtoa_r+0x83c>
 80153a8:	4621      	mov	r1, r4
 80153aa:	461a      	mov	r2, r3
 80153ac:	4658      	mov	r0, fp
 80153ae:	f000 ff95 	bl	80162dc <__lshift>
 80153b2:	4604      	mov	r4, r0
 80153b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d059      	beq.n	801546e <_dtoa_r+0x8f6>
 80153ba:	4621      	mov	r1, r4
 80153bc:	4648      	mov	r0, r9
 80153be:	f000 fff9 	bl	80163b4 <__mcmp>
 80153c2:	2800      	cmp	r0, #0
 80153c4:	da53      	bge.n	801546e <_dtoa_r+0x8f6>
 80153c6:	1e7b      	subs	r3, r7, #1
 80153c8:	9304      	str	r3, [sp, #16]
 80153ca:	4649      	mov	r1, r9
 80153cc:	2300      	movs	r3, #0
 80153ce:	220a      	movs	r2, #10
 80153d0:	4658      	mov	r0, fp
 80153d2:	f000 fd8d 	bl	8015ef0 <__multadd>
 80153d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80153d8:	4681      	mov	r9, r0
 80153da:	2b00      	cmp	r3, #0
 80153dc:	f000 8172 	beq.w	80156c4 <_dtoa_r+0xb4c>
 80153e0:	2300      	movs	r3, #0
 80153e2:	4629      	mov	r1, r5
 80153e4:	220a      	movs	r2, #10
 80153e6:	4658      	mov	r0, fp
 80153e8:	f000 fd82 	bl	8015ef0 <__multadd>
 80153ec:	9b00      	ldr	r3, [sp, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	4605      	mov	r5, r0
 80153f2:	dc67      	bgt.n	80154c4 <_dtoa_r+0x94c>
 80153f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153f6:	2b02      	cmp	r3, #2
 80153f8:	dc41      	bgt.n	801547e <_dtoa_r+0x906>
 80153fa:	e063      	b.n	80154c4 <_dtoa_r+0x94c>
 80153fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80153fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015402:	e746      	b.n	8015292 <_dtoa_r+0x71a>
 8015404:	9b07      	ldr	r3, [sp, #28]
 8015406:	1e5c      	subs	r4, r3, #1
 8015408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801540a:	42a3      	cmp	r3, r4
 801540c:	bfbf      	itttt	lt
 801540e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015410:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015412:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015414:	1ae3      	sublt	r3, r4, r3
 8015416:	bfb4      	ite	lt
 8015418:	18d2      	addlt	r2, r2, r3
 801541a:	1b1c      	subge	r4, r3, r4
 801541c:	9b07      	ldr	r3, [sp, #28]
 801541e:	bfbc      	itt	lt
 8015420:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015422:	2400      	movlt	r4, #0
 8015424:	2b00      	cmp	r3, #0
 8015426:	bfb5      	itete	lt
 8015428:	eba8 0603 	sublt.w	r6, r8, r3
 801542c:	9b07      	ldrge	r3, [sp, #28]
 801542e:	2300      	movlt	r3, #0
 8015430:	4646      	movge	r6, r8
 8015432:	e730      	b.n	8015296 <_dtoa_r+0x71e>
 8015434:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015436:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015438:	4646      	mov	r6, r8
 801543a:	e735      	b.n	80152a8 <_dtoa_r+0x730>
 801543c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801543e:	e75c      	b.n	80152fa <_dtoa_r+0x782>
 8015440:	2300      	movs	r3, #0
 8015442:	e788      	b.n	8015356 <_dtoa_r+0x7de>
 8015444:	3fe00000 	.word	0x3fe00000
 8015448:	40240000 	.word	0x40240000
 801544c:	40140000 	.word	0x40140000
 8015450:	9b02      	ldr	r3, [sp, #8]
 8015452:	e780      	b.n	8015356 <_dtoa_r+0x7de>
 8015454:	2300      	movs	r3, #0
 8015456:	930a      	str	r3, [sp, #40]	@ 0x28
 8015458:	e782      	b.n	8015360 <_dtoa_r+0x7e8>
 801545a:	d099      	beq.n	8015390 <_dtoa_r+0x818>
 801545c:	9a08      	ldr	r2, [sp, #32]
 801545e:	331c      	adds	r3, #28
 8015460:	441a      	add	r2, r3
 8015462:	4498      	add	r8, r3
 8015464:	441e      	add	r6, r3
 8015466:	9208      	str	r2, [sp, #32]
 8015468:	e792      	b.n	8015390 <_dtoa_r+0x818>
 801546a:	4603      	mov	r3, r0
 801546c:	e7f6      	b.n	801545c <_dtoa_r+0x8e4>
 801546e:	9b07      	ldr	r3, [sp, #28]
 8015470:	9704      	str	r7, [sp, #16]
 8015472:	2b00      	cmp	r3, #0
 8015474:	dc20      	bgt.n	80154b8 <_dtoa_r+0x940>
 8015476:	9300      	str	r3, [sp, #0]
 8015478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801547a:	2b02      	cmp	r3, #2
 801547c:	dd1e      	ble.n	80154bc <_dtoa_r+0x944>
 801547e:	9b00      	ldr	r3, [sp, #0]
 8015480:	2b00      	cmp	r3, #0
 8015482:	f47f aec0 	bne.w	8015206 <_dtoa_r+0x68e>
 8015486:	4621      	mov	r1, r4
 8015488:	2205      	movs	r2, #5
 801548a:	4658      	mov	r0, fp
 801548c:	f000 fd30 	bl	8015ef0 <__multadd>
 8015490:	4601      	mov	r1, r0
 8015492:	4604      	mov	r4, r0
 8015494:	4648      	mov	r0, r9
 8015496:	f000 ff8d 	bl	80163b4 <__mcmp>
 801549a:	2800      	cmp	r0, #0
 801549c:	f77f aeb3 	ble.w	8015206 <_dtoa_r+0x68e>
 80154a0:	4656      	mov	r6, sl
 80154a2:	2331      	movs	r3, #49	@ 0x31
 80154a4:	f806 3b01 	strb.w	r3, [r6], #1
 80154a8:	9b04      	ldr	r3, [sp, #16]
 80154aa:	3301      	adds	r3, #1
 80154ac:	9304      	str	r3, [sp, #16]
 80154ae:	e6ae      	b.n	801520e <_dtoa_r+0x696>
 80154b0:	9c07      	ldr	r4, [sp, #28]
 80154b2:	9704      	str	r7, [sp, #16]
 80154b4:	4625      	mov	r5, r4
 80154b6:	e7f3      	b.n	80154a0 <_dtoa_r+0x928>
 80154b8:	9b07      	ldr	r3, [sp, #28]
 80154ba:	9300      	str	r3, [sp, #0]
 80154bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154be:	2b00      	cmp	r3, #0
 80154c0:	f000 8104 	beq.w	80156cc <_dtoa_r+0xb54>
 80154c4:	2e00      	cmp	r6, #0
 80154c6:	dd05      	ble.n	80154d4 <_dtoa_r+0x95c>
 80154c8:	4629      	mov	r1, r5
 80154ca:	4632      	mov	r2, r6
 80154cc:	4658      	mov	r0, fp
 80154ce:	f000 ff05 	bl	80162dc <__lshift>
 80154d2:	4605      	mov	r5, r0
 80154d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d05a      	beq.n	8015590 <_dtoa_r+0xa18>
 80154da:	6869      	ldr	r1, [r5, #4]
 80154dc:	4658      	mov	r0, fp
 80154de:	f000 fca5 	bl	8015e2c <_Balloc>
 80154e2:	4606      	mov	r6, r0
 80154e4:	b928      	cbnz	r0, 80154f2 <_dtoa_r+0x97a>
 80154e6:	4b84      	ldr	r3, [pc, #528]	@ (80156f8 <_dtoa_r+0xb80>)
 80154e8:	4602      	mov	r2, r0
 80154ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80154ee:	f7ff bb5a 	b.w	8014ba6 <_dtoa_r+0x2e>
 80154f2:	692a      	ldr	r2, [r5, #16]
 80154f4:	3202      	adds	r2, #2
 80154f6:	0092      	lsls	r2, r2, #2
 80154f8:	f105 010c 	add.w	r1, r5, #12
 80154fc:	300c      	adds	r0, #12
 80154fe:	f7ff fa95 	bl	8014a2c <memcpy>
 8015502:	2201      	movs	r2, #1
 8015504:	4631      	mov	r1, r6
 8015506:	4658      	mov	r0, fp
 8015508:	f000 fee8 	bl	80162dc <__lshift>
 801550c:	f10a 0301 	add.w	r3, sl, #1
 8015510:	9307      	str	r3, [sp, #28]
 8015512:	9b00      	ldr	r3, [sp, #0]
 8015514:	4453      	add	r3, sl
 8015516:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015518:	9b02      	ldr	r3, [sp, #8]
 801551a:	f003 0301 	and.w	r3, r3, #1
 801551e:	462f      	mov	r7, r5
 8015520:	930a      	str	r3, [sp, #40]	@ 0x28
 8015522:	4605      	mov	r5, r0
 8015524:	9b07      	ldr	r3, [sp, #28]
 8015526:	4621      	mov	r1, r4
 8015528:	3b01      	subs	r3, #1
 801552a:	4648      	mov	r0, r9
 801552c:	9300      	str	r3, [sp, #0]
 801552e:	f7ff fa99 	bl	8014a64 <quorem>
 8015532:	4639      	mov	r1, r7
 8015534:	9002      	str	r0, [sp, #8]
 8015536:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801553a:	4648      	mov	r0, r9
 801553c:	f000 ff3a 	bl	80163b4 <__mcmp>
 8015540:	462a      	mov	r2, r5
 8015542:	9008      	str	r0, [sp, #32]
 8015544:	4621      	mov	r1, r4
 8015546:	4658      	mov	r0, fp
 8015548:	f000 ff50 	bl	80163ec <__mdiff>
 801554c:	68c2      	ldr	r2, [r0, #12]
 801554e:	4606      	mov	r6, r0
 8015550:	bb02      	cbnz	r2, 8015594 <_dtoa_r+0xa1c>
 8015552:	4601      	mov	r1, r0
 8015554:	4648      	mov	r0, r9
 8015556:	f000 ff2d 	bl	80163b4 <__mcmp>
 801555a:	4602      	mov	r2, r0
 801555c:	4631      	mov	r1, r6
 801555e:	4658      	mov	r0, fp
 8015560:	920e      	str	r2, [sp, #56]	@ 0x38
 8015562:	f000 fca3 	bl	8015eac <_Bfree>
 8015566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015568:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801556a:	9e07      	ldr	r6, [sp, #28]
 801556c:	ea43 0102 	orr.w	r1, r3, r2
 8015570:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015572:	4319      	orrs	r1, r3
 8015574:	d110      	bne.n	8015598 <_dtoa_r+0xa20>
 8015576:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801557a:	d029      	beq.n	80155d0 <_dtoa_r+0xa58>
 801557c:	9b08      	ldr	r3, [sp, #32]
 801557e:	2b00      	cmp	r3, #0
 8015580:	dd02      	ble.n	8015588 <_dtoa_r+0xa10>
 8015582:	9b02      	ldr	r3, [sp, #8]
 8015584:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015588:	9b00      	ldr	r3, [sp, #0]
 801558a:	f883 8000 	strb.w	r8, [r3]
 801558e:	e63f      	b.n	8015210 <_dtoa_r+0x698>
 8015590:	4628      	mov	r0, r5
 8015592:	e7bb      	b.n	801550c <_dtoa_r+0x994>
 8015594:	2201      	movs	r2, #1
 8015596:	e7e1      	b.n	801555c <_dtoa_r+0x9e4>
 8015598:	9b08      	ldr	r3, [sp, #32]
 801559a:	2b00      	cmp	r3, #0
 801559c:	db04      	blt.n	80155a8 <_dtoa_r+0xa30>
 801559e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80155a0:	430b      	orrs	r3, r1
 80155a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80155a4:	430b      	orrs	r3, r1
 80155a6:	d120      	bne.n	80155ea <_dtoa_r+0xa72>
 80155a8:	2a00      	cmp	r2, #0
 80155aa:	dded      	ble.n	8015588 <_dtoa_r+0xa10>
 80155ac:	4649      	mov	r1, r9
 80155ae:	2201      	movs	r2, #1
 80155b0:	4658      	mov	r0, fp
 80155b2:	f000 fe93 	bl	80162dc <__lshift>
 80155b6:	4621      	mov	r1, r4
 80155b8:	4681      	mov	r9, r0
 80155ba:	f000 fefb 	bl	80163b4 <__mcmp>
 80155be:	2800      	cmp	r0, #0
 80155c0:	dc03      	bgt.n	80155ca <_dtoa_r+0xa52>
 80155c2:	d1e1      	bne.n	8015588 <_dtoa_r+0xa10>
 80155c4:	f018 0f01 	tst.w	r8, #1
 80155c8:	d0de      	beq.n	8015588 <_dtoa_r+0xa10>
 80155ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80155ce:	d1d8      	bne.n	8015582 <_dtoa_r+0xa0a>
 80155d0:	9a00      	ldr	r2, [sp, #0]
 80155d2:	2339      	movs	r3, #57	@ 0x39
 80155d4:	7013      	strb	r3, [r2, #0]
 80155d6:	4633      	mov	r3, r6
 80155d8:	461e      	mov	r6, r3
 80155da:	3b01      	subs	r3, #1
 80155dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80155e0:	2a39      	cmp	r2, #57	@ 0x39
 80155e2:	d052      	beq.n	801568a <_dtoa_r+0xb12>
 80155e4:	3201      	adds	r2, #1
 80155e6:	701a      	strb	r2, [r3, #0]
 80155e8:	e612      	b.n	8015210 <_dtoa_r+0x698>
 80155ea:	2a00      	cmp	r2, #0
 80155ec:	dd07      	ble.n	80155fe <_dtoa_r+0xa86>
 80155ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80155f2:	d0ed      	beq.n	80155d0 <_dtoa_r+0xa58>
 80155f4:	9a00      	ldr	r2, [sp, #0]
 80155f6:	f108 0301 	add.w	r3, r8, #1
 80155fa:	7013      	strb	r3, [r2, #0]
 80155fc:	e608      	b.n	8015210 <_dtoa_r+0x698>
 80155fe:	9b07      	ldr	r3, [sp, #28]
 8015600:	9a07      	ldr	r2, [sp, #28]
 8015602:	f803 8c01 	strb.w	r8, [r3, #-1]
 8015606:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015608:	4293      	cmp	r3, r2
 801560a:	d028      	beq.n	801565e <_dtoa_r+0xae6>
 801560c:	4649      	mov	r1, r9
 801560e:	2300      	movs	r3, #0
 8015610:	220a      	movs	r2, #10
 8015612:	4658      	mov	r0, fp
 8015614:	f000 fc6c 	bl	8015ef0 <__multadd>
 8015618:	42af      	cmp	r7, r5
 801561a:	4681      	mov	r9, r0
 801561c:	f04f 0300 	mov.w	r3, #0
 8015620:	f04f 020a 	mov.w	r2, #10
 8015624:	4639      	mov	r1, r7
 8015626:	4658      	mov	r0, fp
 8015628:	d107      	bne.n	801563a <_dtoa_r+0xac2>
 801562a:	f000 fc61 	bl	8015ef0 <__multadd>
 801562e:	4607      	mov	r7, r0
 8015630:	4605      	mov	r5, r0
 8015632:	9b07      	ldr	r3, [sp, #28]
 8015634:	3301      	adds	r3, #1
 8015636:	9307      	str	r3, [sp, #28]
 8015638:	e774      	b.n	8015524 <_dtoa_r+0x9ac>
 801563a:	f000 fc59 	bl	8015ef0 <__multadd>
 801563e:	4629      	mov	r1, r5
 8015640:	4607      	mov	r7, r0
 8015642:	2300      	movs	r3, #0
 8015644:	220a      	movs	r2, #10
 8015646:	4658      	mov	r0, fp
 8015648:	f000 fc52 	bl	8015ef0 <__multadd>
 801564c:	4605      	mov	r5, r0
 801564e:	e7f0      	b.n	8015632 <_dtoa_r+0xaba>
 8015650:	9b00      	ldr	r3, [sp, #0]
 8015652:	2b00      	cmp	r3, #0
 8015654:	bfcc      	ite	gt
 8015656:	461e      	movgt	r6, r3
 8015658:	2601      	movle	r6, #1
 801565a:	4456      	add	r6, sl
 801565c:	2700      	movs	r7, #0
 801565e:	4649      	mov	r1, r9
 8015660:	2201      	movs	r2, #1
 8015662:	4658      	mov	r0, fp
 8015664:	f000 fe3a 	bl	80162dc <__lshift>
 8015668:	4621      	mov	r1, r4
 801566a:	4681      	mov	r9, r0
 801566c:	f000 fea2 	bl	80163b4 <__mcmp>
 8015670:	2800      	cmp	r0, #0
 8015672:	dcb0      	bgt.n	80155d6 <_dtoa_r+0xa5e>
 8015674:	d102      	bne.n	801567c <_dtoa_r+0xb04>
 8015676:	f018 0f01 	tst.w	r8, #1
 801567a:	d1ac      	bne.n	80155d6 <_dtoa_r+0xa5e>
 801567c:	4633      	mov	r3, r6
 801567e:	461e      	mov	r6, r3
 8015680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015684:	2a30      	cmp	r2, #48	@ 0x30
 8015686:	d0fa      	beq.n	801567e <_dtoa_r+0xb06>
 8015688:	e5c2      	b.n	8015210 <_dtoa_r+0x698>
 801568a:	459a      	cmp	sl, r3
 801568c:	d1a4      	bne.n	80155d8 <_dtoa_r+0xa60>
 801568e:	9b04      	ldr	r3, [sp, #16]
 8015690:	3301      	adds	r3, #1
 8015692:	9304      	str	r3, [sp, #16]
 8015694:	2331      	movs	r3, #49	@ 0x31
 8015696:	f88a 3000 	strb.w	r3, [sl]
 801569a:	e5b9      	b.n	8015210 <_dtoa_r+0x698>
 801569c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801569e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80156fc <_dtoa_r+0xb84>
 80156a2:	b11b      	cbz	r3, 80156ac <_dtoa_r+0xb34>
 80156a4:	f10a 0308 	add.w	r3, sl, #8
 80156a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80156aa:	6013      	str	r3, [r2, #0]
 80156ac:	4650      	mov	r0, sl
 80156ae:	b019      	add	sp, #100	@ 0x64
 80156b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156b6:	2b01      	cmp	r3, #1
 80156b8:	f77f ae37 	ble.w	801532a <_dtoa_r+0x7b2>
 80156bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156be:	930a      	str	r3, [sp, #40]	@ 0x28
 80156c0:	2001      	movs	r0, #1
 80156c2:	e655      	b.n	8015370 <_dtoa_r+0x7f8>
 80156c4:	9b00      	ldr	r3, [sp, #0]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	f77f aed6 	ble.w	8015478 <_dtoa_r+0x900>
 80156cc:	4656      	mov	r6, sl
 80156ce:	4621      	mov	r1, r4
 80156d0:	4648      	mov	r0, r9
 80156d2:	f7ff f9c7 	bl	8014a64 <quorem>
 80156d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80156da:	f806 8b01 	strb.w	r8, [r6], #1
 80156de:	9b00      	ldr	r3, [sp, #0]
 80156e0:	eba6 020a 	sub.w	r2, r6, sl
 80156e4:	4293      	cmp	r3, r2
 80156e6:	ddb3      	ble.n	8015650 <_dtoa_r+0xad8>
 80156e8:	4649      	mov	r1, r9
 80156ea:	2300      	movs	r3, #0
 80156ec:	220a      	movs	r2, #10
 80156ee:	4658      	mov	r0, fp
 80156f0:	f000 fbfe 	bl	8015ef0 <__multadd>
 80156f4:	4681      	mov	r9, r0
 80156f6:	e7ea      	b.n	80156ce <_dtoa_r+0xb56>
 80156f8:	0801a436 	.word	0x0801a436
 80156fc:	0801a3ba 	.word	0x0801a3ba

08015700 <_free_r>:
 8015700:	b538      	push	{r3, r4, r5, lr}
 8015702:	4605      	mov	r5, r0
 8015704:	2900      	cmp	r1, #0
 8015706:	d041      	beq.n	801578c <_free_r+0x8c>
 8015708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801570c:	1f0c      	subs	r4, r1, #4
 801570e:	2b00      	cmp	r3, #0
 8015710:	bfb8      	it	lt
 8015712:	18e4      	addlt	r4, r4, r3
 8015714:	f7fc fea0 	bl	8012458 <__malloc_lock>
 8015718:	4a1d      	ldr	r2, [pc, #116]	@ (8015790 <_free_r+0x90>)
 801571a:	6813      	ldr	r3, [r2, #0]
 801571c:	b933      	cbnz	r3, 801572c <_free_r+0x2c>
 801571e:	6063      	str	r3, [r4, #4]
 8015720:	6014      	str	r4, [r2, #0]
 8015722:	4628      	mov	r0, r5
 8015724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015728:	f7fc be9c 	b.w	8012464 <__malloc_unlock>
 801572c:	42a3      	cmp	r3, r4
 801572e:	d908      	bls.n	8015742 <_free_r+0x42>
 8015730:	6820      	ldr	r0, [r4, #0]
 8015732:	1821      	adds	r1, r4, r0
 8015734:	428b      	cmp	r3, r1
 8015736:	bf01      	itttt	eq
 8015738:	6819      	ldreq	r1, [r3, #0]
 801573a:	685b      	ldreq	r3, [r3, #4]
 801573c:	1809      	addeq	r1, r1, r0
 801573e:	6021      	streq	r1, [r4, #0]
 8015740:	e7ed      	b.n	801571e <_free_r+0x1e>
 8015742:	461a      	mov	r2, r3
 8015744:	685b      	ldr	r3, [r3, #4]
 8015746:	b10b      	cbz	r3, 801574c <_free_r+0x4c>
 8015748:	42a3      	cmp	r3, r4
 801574a:	d9fa      	bls.n	8015742 <_free_r+0x42>
 801574c:	6811      	ldr	r1, [r2, #0]
 801574e:	1850      	adds	r0, r2, r1
 8015750:	42a0      	cmp	r0, r4
 8015752:	d10b      	bne.n	801576c <_free_r+0x6c>
 8015754:	6820      	ldr	r0, [r4, #0]
 8015756:	4401      	add	r1, r0
 8015758:	1850      	adds	r0, r2, r1
 801575a:	4283      	cmp	r3, r0
 801575c:	6011      	str	r1, [r2, #0]
 801575e:	d1e0      	bne.n	8015722 <_free_r+0x22>
 8015760:	6818      	ldr	r0, [r3, #0]
 8015762:	685b      	ldr	r3, [r3, #4]
 8015764:	6053      	str	r3, [r2, #4]
 8015766:	4408      	add	r0, r1
 8015768:	6010      	str	r0, [r2, #0]
 801576a:	e7da      	b.n	8015722 <_free_r+0x22>
 801576c:	d902      	bls.n	8015774 <_free_r+0x74>
 801576e:	230c      	movs	r3, #12
 8015770:	602b      	str	r3, [r5, #0]
 8015772:	e7d6      	b.n	8015722 <_free_r+0x22>
 8015774:	6820      	ldr	r0, [r4, #0]
 8015776:	1821      	adds	r1, r4, r0
 8015778:	428b      	cmp	r3, r1
 801577a:	bf04      	itt	eq
 801577c:	6819      	ldreq	r1, [r3, #0]
 801577e:	685b      	ldreq	r3, [r3, #4]
 8015780:	6063      	str	r3, [r4, #4]
 8015782:	bf04      	itt	eq
 8015784:	1809      	addeq	r1, r1, r0
 8015786:	6021      	streq	r1, [r4, #0]
 8015788:	6054      	str	r4, [r2, #4]
 801578a:	e7ca      	b.n	8015722 <_free_r+0x22>
 801578c:	bd38      	pop	{r3, r4, r5, pc}
 801578e:	bf00      	nop
 8015790:	20000f6c 	.word	0x20000f6c

08015794 <rshift>:
 8015794:	6903      	ldr	r3, [r0, #16]
 8015796:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801579a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801579e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80157a2:	f100 0414 	add.w	r4, r0, #20
 80157a6:	dd45      	ble.n	8015834 <rshift+0xa0>
 80157a8:	f011 011f 	ands.w	r1, r1, #31
 80157ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80157b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80157b4:	d10c      	bne.n	80157d0 <rshift+0x3c>
 80157b6:	f100 0710 	add.w	r7, r0, #16
 80157ba:	4629      	mov	r1, r5
 80157bc:	42b1      	cmp	r1, r6
 80157be:	d334      	bcc.n	801582a <rshift+0x96>
 80157c0:	1a9b      	subs	r3, r3, r2
 80157c2:	009b      	lsls	r3, r3, #2
 80157c4:	1eea      	subs	r2, r5, #3
 80157c6:	4296      	cmp	r6, r2
 80157c8:	bf38      	it	cc
 80157ca:	2300      	movcc	r3, #0
 80157cc:	4423      	add	r3, r4
 80157ce:	e015      	b.n	80157fc <rshift+0x68>
 80157d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80157d4:	f1c1 0820 	rsb	r8, r1, #32
 80157d8:	40cf      	lsrs	r7, r1
 80157da:	f105 0e04 	add.w	lr, r5, #4
 80157de:	46a1      	mov	r9, r4
 80157e0:	4576      	cmp	r6, lr
 80157e2:	46f4      	mov	ip, lr
 80157e4:	d815      	bhi.n	8015812 <rshift+0x7e>
 80157e6:	1a9a      	subs	r2, r3, r2
 80157e8:	0092      	lsls	r2, r2, #2
 80157ea:	3a04      	subs	r2, #4
 80157ec:	3501      	adds	r5, #1
 80157ee:	42ae      	cmp	r6, r5
 80157f0:	bf38      	it	cc
 80157f2:	2200      	movcc	r2, #0
 80157f4:	18a3      	adds	r3, r4, r2
 80157f6:	50a7      	str	r7, [r4, r2]
 80157f8:	b107      	cbz	r7, 80157fc <rshift+0x68>
 80157fa:	3304      	adds	r3, #4
 80157fc:	1b1a      	subs	r2, r3, r4
 80157fe:	42a3      	cmp	r3, r4
 8015800:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015804:	bf08      	it	eq
 8015806:	2300      	moveq	r3, #0
 8015808:	6102      	str	r2, [r0, #16]
 801580a:	bf08      	it	eq
 801580c:	6143      	streq	r3, [r0, #20]
 801580e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015812:	f8dc c000 	ldr.w	ip, [ip]
 8015816:	fa0c fc08 	lsl.w	ip, ip, r8
 801581a:	ea4c 0707 	orr.w	r7, ip, r7
 801581e:	f849 7b04 	str.w	r7, [r9], #4
 8015822:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015826:	40cf      	lsrs	r7, r1
 8015828:	e7da      	b.n	80157e0 <rshift+0x4c>
 801582a:	f851 cb04 	ldr.w	ip, [r1], #4
 801582e:	f847 cf04 	str.w	ip, [r7, #4]!
 8015832:	e7c3      	b.n	80157bc <rshift+0x28>
 8015834:	4623      	mov	r3, r4
 8015836:	e7e1      	b.n	80157fc <rshift+0x68>

08015838 <__hexdig_fun>:
 8015838:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801583c:	2b09      	cmp	r3, #9
 801583e:	d802      	bhi.n	8015846 <__hexdig_fun+0xe>
 8015840:	3820      	subs	r0, #32
 8015842:	b2c0      	uxtb	r0, r0
 8015844:	4770      	bx	lr
 8015846:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801584a:	2b05      	cmp	r3, #5
 801584c:	d801      	bhi.n	8015852 <__hexdig_fun+0x1a>
 801584e:	3847      	subs	r0, #71	@ 0x47
 8015850:	e7f7      	b.n	8015842 <__hexdig_fun+0xa>
 8015852:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015856:	2b05      	cmp	r3, #5
 8015858:	d801      	bhi.n	801585e <__hexdig_fun+0x26>
 801585a:	3827      	subs	r0, #39	@ 0x27
 801585c:	e7f1      	b.n	8015842 <__hexdig_fun+0xa>
 801585e:	2000      	movs	r0, #0
 8015860:	4770      	bx	lr
	...

08015864 <__gethex>:
 8015864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015868:	b085      	sub	sp, #20
 801586a:	468a      	mov	sl, r1
 801586c:	9302      	str	r3, [sp, #8]
 801586e:	680b      	ldr	r3, [r1, #0]
 8015870:	9001      	str	r0, [sp, #4]
 8015872:	4690      	mov	r8, r2
 8015874:	1c9c      	adds	r4, r3, #2
 8015876:	46a1      	mov	r9, r4
 8015878:	f814 0b01 	ldrb.w	r0, [r4], #1
 801587c:	2830      	cmp	r0, #48	@ 0x30
 801587e:	d0fa      	beq.n	8015876 <__gethex+0x12>
 8015880:	eba9 0303 	sub.w	r3, r9, r3
 8015884:	f1a3 0b02 	sub.w	fp, r3, #2
 8015888:	f7ff ffd6 	bl	8015838 <__hexdig_fun>
 801588c:	4605      	mov	r5, r0
 801588e:	2800      	cmp	r0, #0
 8015890:	d168      	bne.n	8015964 <__gethex+0x100>
 8015892:	49a0      	ldr	r1, [pc, #640]	@ (8015b14 <__gethex+0x2b0>)
 8015894:	2201      	movs	r2, #1
 8015896:	4648      	mov	r0, r9
 8015898:	f7ff f81c 	bl	80148d4 <strncmp>
 801589c:	4607      	mov	r7, r0
 801589e:	2800      	cmp	r0, #0
 80158a0:	d167      	bne.n	8015972 <__gethex+0x10e>
 80158a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80158a6:	4626      	mov	r6, r4
 80158a8:	f7ff ffc6 	bl	8015838 <__hexdig_fun>
 80158ac:	2800      	cmp	r0, #0
 80158ae:	d062      	beq.n	8015976 <__gethex+0x112>
 80158b0:	4623      	mov	r3, r4
 80158b2:	7818      	ldrb	r0, [r3, #0]
 80158b4:	2830      	cmp	r0, #48	@ 0x30
 80158b6:	4699      	mov	r9, r3
 80158b8:	f103 0301 	add.w	r3, r3, #1
 80158bc:	d0f9      	beq.n	80158b2 <__gethex+0x4e>
 80158be:	f7ff ffbb 	bl	8015838 <__hexdig_fun>
 80158c2:	fab0 f580 	clz	r5, r0
 80158c6:	096d      	lsrs	r5, r5, #5
 80158c8:	f04f 0b01 	mov.w	fp, #1
 80158cc:	464a      	mov	r2, r9
 80158ce:	4616      	mov	r6, r2
 80158d0:	3201      	adds	r2, #1
 80158d2:	7830      	ldrb	r0, [r6, #0]
 80158d4:	f7ff ffb0 	bl	8015838 <__hexdig_fun>
 80158d8:	2800      	cmp	r0, #0
 80158da:	d1f8      	bne.n	80158ce <__gethex+0x6a>
 80158dc:	498d      	ldr	r1, [pc, #564]	@ (8015b14 <__gethex+0x2b0>)
 80158de:	2201      	movs	r2, #1
 80158e0:	4630      	mov	r0, r6
 80158e2:	f7fe fff7 	bl	80148d4 <strncmp>
 80158e6:	2800      	cmp	r0, #0
 80158e8:	d13f      	bne.n	801596a <__gethex+0x106>
 80158ea:	b944      	cbnz	r4, 80158fe <__gethex+0x9a>
 80158ec:	1c74      	adds	r4, r6, #1
 80158ee:	4622      	mov	r2, r4
 80158f0:	4616      	mov	r6, r2
 80158f2:	3201      	adds	r2, #1
 80158f4:	7830      	ldrb	r0, [r6, #0]
 80158f6:	f7ff ff9f 	bl	8015838 <__hexdig_fun>
 80158fa:	2800      	cmp	r0, #0
 80158fc:	d1f8      	bne.n	80158f0 <__gethex+0x8c>
 80158fe:	1ba4      	subs	r4, r4, r6
 8015900:	00a7      	lsls	r7, r4, #2
 8015902:	7833      	ldrb	r3, [r6, #0]
 8015904:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015908:	2b50      	cmp	r3, #80	@ 0x50
 801590a:	d13e      	bne.n	801598a <__gethex+0x126>
 801590c:	7873      	ldrb	r3, [r6, #1]
 801590e:	2b2b      	cmp	r3, #43	@ 0x2b
 8015910:	d033      	beq.n	801597a <__gethex+0x116>
 8015912:	2b2d      	cmp	r3, #45	@ 0x2d
 8015914:	d034      	beq.n	8015980 <__gethex+0x11c>
 8015916:	1c71      	adds	r1, r6, #1
 8015918:	2400      	movs	r4, #0
 801591a:	7808      	ldrb	r0, [r1, #0]
 801591c:	f7ff ff8c 	bl	8015838 <__hexdig_fun>
 8015920:	1e43      	subs	r3, r0, #1
 8015922:	b2db      	uxtb	r3, r3
 8015924:	2b18      	cmp	r3, #24
 8015926:	d830      	bhi.n	801598a <__gethex+0x126>
 8015928:	f1a0 0210 	sub.w	r2, r0, #16
 801592c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015930:	f7ff ff82 	bl	8015838 <__hexdig_fun>
 8015934:	f100 3cff 	add.w	ip, r0, #4294967295
 8015938:	fa5f fc8c 	uxtb.w	ip, ip
 801593c:	f1bc 0f18 	cmp.w	ip, #24
 8015940:	f04f 030a 	mov.w	r3, #10
 8015944:	d91e      	bls.n	8015984 <__gethex+0x120>
 8015946:	b104      	cbz	r4, 801594a <__gethex+0xe6>
 8015948:	4252      	negs	r2, r2
 801594a:	4417      	add	r7, r2
 801594c:	f8ca 1000 	str.w	r1, [sl]
 8015950:	b1ed      	cbz	r5, 801598e <__gethex+0x12a>
 8015952:	f1bb 0f00 	cmp.w	fp, #0
 8015956:	bf0c      	ite	eq
 8015958:	2506      	moveq	r5, #6
 801595a:	2500      	movne	r5, #0
 801595c:	4628      	mov	r0, r5
 801595e:	b005      	add	sp, #20
 8015960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015964:	2500      	movs	r5, #0
 8015966:	462c      	mov	r4, r5
 8015968:	e7b0      	b.n	80158cc <__gethex+0x68>
 801596a:	2c00      	cmp	r4, #0
 801596c:	d1c7      	bne.n	80158fe <__gethex+0x9a>
 801596e:	4627      	mov	r7, r4
 8015970:	e7c7      	b.n	8015902 <__gethex+0x9e>
 8015972:	464e      	mov	r6, r9
 8015974:	462f      	mov	r7, r5
 8015976:	2501      	movs	r5, #1
 8015978:	e7c3      	b.n	8015902 <__gethex+0x9e>
 801597a:	2400      	movs	r4, #0
 801597c:	1cb1      	adds	r1, r6, #2
 801597e:	e7cc      	b.n	801591a <__gethex+0xb6>
 8015980:	2401      	movs	r4, #1
 8015982:	e7fb      	b.n	801597c <__gethex+0x118>
 8015984:	fb03 0002 	mla	r0, r3, r2, r0
 8015988:	e7ce      	b.n	8015928 <__gethex+0xc4>
 801598a:	4631      	mov	r1, r6
 801598c:	e7de      	b.n	801594c <__gethex+0xe8>
 801598e:	eba6 0309 	sub.w	r3, r6, r9
 8015992:	3b01      	subs	r3, #1
 8015994:	4629      	mov	r1, r5
 8015996:	2b07      	cmp	r3, #7
 8015998:	dc0a      	bgt.n	80159b0 <__gethex+0x14c>
 801599a:	9801      	ldr	r0, [sp, #4]
 801599c:	f000 fa46 	bl	8015e2c <_Balloc>
 80159a0:	4604      	mov	r4, r0
 80159a2:	b940      	cbnz	r0, 80159b6 <__gethex+0x152>
 80159a4:	4b5c      	ldr	r3, [pc, #368]	@ (8015b18 <__gethex+0x2b4>)
 80159a6:	4602      	mov	r2, r0
 80159a8:	21e4      	movs	r1, #228	@ 0xe4
 80159aa:	485c      	ldr	r0, [pc, #368]	@ (8015b1c <__gethex+0x2b8>)
 80159ac:	f001 f9ac 	bl	8016d08 <__assert_func>
 80159b0:	3101      	adds	r1, #1
 80159b2:	105b      	asrs	r3, r3, #1
 80159b4:	e7ef      	b.n	8015996 <__gethex+0x132>
 80159b6:	f100 0a14 	add.w	sl, r0, #20
 80159ba:	2300      	movs	r3, #0
 80159bc:	4655      	mov	r5, sl
 80159be:	469b      	mov	fp, r3
 80159c0:	45b1      	cmp	r9, r6
 80159c2:	d337      	bcc.n	8015a34 <__gethex+0x1d0>
 80159c4:	f845 bb04 	str.w	fp, [r5], #4
 80159c8:	eba5 050a 	sub.w	r5, r5, sl
 80159cc:	10ad      	asrs	r5, r5, #2
 80159ce:	6125      	str	r5, [r4, #16]
 80159d0:	4658      	mov	r0, fp
 80159d2:	f000 fb1d 	bl	8016010 <__hi0bits>
 80159d6:	016d      	lsls	r5, r5, #5
 80159d8:	f8d8 6000 	ldr.w	r6, [r8]
 80159dc:	1a2d      	subs	r5, r5, r0
 80159de:	42b5      	cmp	r5, r6
 80159e0:	dd54      	ble.n	8015a8c <__gethex+0x228>
 80159e2:	1bad      	subs	r5, r5, r6
 80159e4:	4629      	mov	r1, r5
 80159e6:	4620      	mov	r0, r4
 80159e8:	f000 feb1 	bl	801674e <__any_on>
 80159ec:	4681      	mov	r9, r0
 80159ee:	b178      	cbz	r0, 8015a10 <__gethex+0x1ac>
 80159f0:	1e6b      	subs	r3, r5, #1
 80159f2:	1159      	asrs	r1, r3, #5
 80159f4:	f003 021f 	and.w	r2, r3, #31
 80159f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80159fc:	f04f 0901 	mov.w	r9, #1
 8015a00:	fa09 f202 	lsl.w	r2, r9, r2
 8015a04:	420a      	tst	r2, r1
 8015a06:	d003      	beq.n	8015a10 <__gethex+0x1ac>
 8015a08:	454b      	cmp	r3, r9
 8015a0a:	dc36      	bgt.n	8015a7a <__gethex+0x216>
 8015a0c:	f04f 0902 	mov.w	r9, #2
 8015a10:	4629      	mov	r1, r5
 8015a12:	4620      	mov	r0, r4
 8015a14:	f7ff febe 	bl	8015794 <rshift>
 8015a18:	442f      	add	r7, r5
 8015a1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a1e:	42bb      	cmp	r3, r7
 8015a20:	da42      	bge.n	8015aa8 <__gethex+0x244>
 8015a22:	9801      	ldr	r0, [sp, #4]
 8015a24:	4621      	mov	r1, r4
 8015a26:	f000 fa41 	bl	8015eac <_Bfree>
 8015a2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	6013      	str	r3, [r2, #0]
 8015a30:	25a3      	movs	r5, #163	@ 0xa3
 8015a32:	e793      	b.n	801595c <__gethex+0xf8>
 8015a34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015a38:	2a2e      	cmp	r2, #46	@ 0x2e
 8015a3a:	d012      	beq.n	8015a62 <__gethex+0x1fe>
 8015a3c:	2b20      	cmp	r3, #32
 8015a3e:	d104      	bne.n	8015a4a <__gethex+0x1e6>
 8015a40:	f845 bb04 	str.w	fp, [r5], #4
 8015a44:	f04f 0b00 	mov.w	fp, #0
 8015a48:	465b      	mov	r3, fp
 8015a4a:	7830      	ldrb	r0, [r6, #0]
 8015a4c:	9303      	str	r3, [sp, #12]
 8015a4e:	f7ff fef3 	bl	8015838 <__hexdig_fun>
 8015a52:	9b03      	ldr	r3, [sp, #12]
 8015a54:	f000 000f 	and.w	r0, r0, #15
 8015a58:	4098      	lsls	r0, r3
 8015a5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8015a5e:	3304      	adds	r3, #4
 8015a60:	e7ae      	b.n	80159c0 <__gethex+0x15c>
 8015a62:	45b1      	cmp	r9, r6
 8015a64:	d8ea      	bhi.n	8015a3c <__gethex+0x1d8>
 8015a66:	492b      	ldr	r1, [pc, #172]	@ (8015b14 <__gethex+0x2b0>)
 8015a68:	9303      	str	r3, [sp, #12]
 8015a6a:	2201      	movs	r2, #1
 8015a6c:	4630      	mov	r0, r6
 8015a6e:	f7fe ff31 	bl	80148d4 <strncmp>
 8015a72:	9b03      	ldr	r3, [sp, #12]
 8015a74:	2800      	cmp	r0, #0
 8015a76:	d1e1      	bne.n	8015a3c <__gethex+0x1d8>
 8015a78:	e7a2      	b.n	80159c0 <__gethex+0x15c>
 8015a7a:	1ea9      	subs	r1, r5, #2
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	f000 fe66 	bl	801674e <__any_on>
 8015a82:	2800      	cmp	r0, #0
 8015a84:	d0c2      	beq.n	8015a0c <__gethex+0x1a8>
 8015a86:	f04f 0903 	mov.w	r9, #3
 8015a8a:	e7c1      	b.n	8015a10 <__gethex+0x1ac>
 8015a8c:	da09      	bge.n	8015aa2 <__gethex+0x23e>
 8015a8e:	1b75      	subs	r5, r6, r5
 8015a90:	4621      	mov	r1, r4
 8015a92:	9801      	ldr	r0, [sp, #4]
 8015a94:	462a      	mov	r2, r5
 8015a96:	f000 fc21 	bl	80162dc <__lshift>
 8015a9a:	1b7f      	subs	r7, r7, r5
 8015a9c:	4604      	mov	r4, r0
 8015a9e:	f100 0a14 	add.w	sl, r0, #20
 8015aa2:	f04f 0900 	mov.w	r9, #0
 8015aa6:	e7b8      	b.n	8015a1a <__gethex+0x1b6>
 8015aa8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015aac:	42bd      	cmp	r5, r7
 8015aae:	dd6f      	ble.n	8015b90 <__gethex+0x32c>
 8015ab0:	1bed      	subs	r5, r5, r7
 8015ab2:	42ae      	cmp	r6, r5
 8015ab4:	dc34      	bgt.n	8015b20 <__gethex+0x2bc>
 8015ab6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015aba:	2b02      	cmp	r3, #2
 8015abc:	d022      	beq.n	8015b04 <__gethex+0x2a0>
 8015abe:	2b03      	cmp	r3, #3
 8015ac0:	d024      	beq.n	8015b0c <__gethex+0x2a8>
 8015ac2:	2b01      	cmp	r3, #1
 8015ac4:	d115      	bne.n	8015af2 <__gethex+0x28e>
 8015ac6:	42ae      	cmp	r6, r5
 8015ac8:	d113      	bne.n	8015af2 <__gethex+0x28e>
 8015aca:	2e01      	cmp	r6, #1
 8015acc:	d10b      	bne.n	8015ae6 <__gethex+0x282>
 8015ace:	9a02      	ldr	r2, [sp, #8]
 8015ad0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ad4:	6013      	str	r3, [r2, #0]
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	6123      	str	r3, [r4, #16]
 8015ada:	f8ca 3000 	str.w	r3, [sl]
 8015ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ae0:	2562      	movs	r5, #98	@ 0x62
 8015ae2:	601c      	str	r4, [r3, #0]
 8015ae4:	e73a      	b.n	801595c <__gethex+0xf8>
 8015ae6:	1e71      	subs	r1, r6, #1
 8015ae8:	4620      	mov	r0, r4
 8015aea:	f000 fe30 	bl	801674e <__any_on>
 8015aee:	2800      	cmp	r0, #0
 8015af0:	d1ed      	bne.n	8015ace <__gethex+0x26a>
 8015af2:	9801      	ldr	r0, [sp, #4]
 8015af4:	4621      	mov	r1, r4
 8015af6:	f000 f9d9 	bl	8015eac <_Bfree>
 8015afa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015afc:	2300      	movs	r3, #0
 8015afe:	6013      	str	r3, [r2, #0]
 8015b00:	2550      	movs	r5, #80	@ 0x50
 8015b02:	e72b      	b.n	801595c <__gethex+0xf8>
 8015b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d1f3      	bne.n	8015af2 <__gethex+0x28e>
 8015b0a:	e7e0      	b.n	8015ace <__gethex+0x26a>
 8015b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d1dd      	bne.n	8015ace <__gethex+0x26a>
 8015b12:	e7ee      	b.n	8015af2 <__gethex+0x28e>
 8015b14:	0801a224 	.word	0x0801a224
 8015b18:	0801a436 	.word	0x0801a436
 8015b1c:	0801a447 	.word	0x0801a447
 8015b20:	1e6f      	subs	r7, r5, #1
 8015b22:	f1b9 0f00 	cmp.w	r9, #0
 8015b26:	d130      	bne.n	8015b8a <__gethex+0x326>
 8015b28:	b127      	cbz	r7, 8015b34 <__gethex+0x2d0>
 8015b2a:	4639      	mov	r1, r7
 8015b2c:	4620      	mov	r0, r4
 8015b2e:	f000 fe0e 	bl	801674e <__any_on>
 8015b32:	4681      	mov	r9, r0
 8015b34:	117a      	asrs	r2, r7, #5
 8015b36:	2301      	movs	r3, #1
 8015b38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015b3c:	f007 071f 	and.w	r7, r7, #31
 8015b40:	40bb      	lsls	r3, r7
 8015b42:	4213      	tst	r3, r2
 8015b44:	4629      	mov	r1, r5
 8015b46:	4620      	mov	r0, r4
 8015b48:	bf18      	it	ne
 8015b4a:	f049 0902 	orrne.w	r9, r9, #2
 8015b4e:	f7ff fe21 	bl	8015794 <rshift>
 8015b52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015b56:	1b76      	subs	r6, r6, r5
 8015b58:	2502      	movs	r5, #2
 8015b5a:	f1b9 0f00 	cmp.w	r9, #0
 8015b5e:	d047      	beq.n	8015bf0 <__gethex+0x38c>
 8015b60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b64:	2b02      	cmp	r3, #2
 8015b66:	d015      	beq.n	8015b94 <__gethex+0x330>
 8015b68:	2b03      	cmp	r3, #3
 8015b6a:	d017      	beq.n	8015b9c <__gethex+0x338>
 8015b6c:	2b01      	cmp	r3, #1
 8015b6e:	d109      	bne.n	8015b84 <__gethex+0x320>
 8015b70:	f019 0f02 	tst.w	r9, #2
 8015b74:	d006      	beq.n	8015b84 <__gethex+0x320>
 8015b76:	f8da 3000 	ldr.w	r3, [sl]
 8015b7a:	ea49 0903 	orr.w	r9, r9, r3
 8015b7e:	f019 0f01 	tst.w	r9, #1
 8015b82:	d10e      	bne.n	8015ba2 <__gethex+0x33e>
 8015b84:	f045 0510 	orr.w	r5, r5, #16
 8015b88:	e032      	b.n	8015bf0 <__gethex+0x38c>
 8015b8a:	f04f 0901 	mov.w	r9, #1
 8015b8e:	e7d1      	b.n	8015b34 <__gethex+0x2d0>
 8015b90:	2501      	movs	r5, #1
 8015b92:	e7e2      	b.n	8015b5a <__gethex+0x2f6>
 8015b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b96:	f1c3 0301 	rsb	r3, r3, #1
 8015b9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d0f0      	beq.n	8015b84 <__gethex+0x320>
 8015ba2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015ba6:	f104 0314 	add.w	r3, r4, #20
 8015baa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015bae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015bb2:	f04f 0c00 	mov.w	ip, #0
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015bbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015bc0:	d01b      	beq.n	8015bfa <__gethex+0x396>
 8015bc2:	3201      	adds	r2, #1
 8015bc4:	6002      	str	r2, [r0, #0]
 8015bc6:	2d02      	cmp	r5, #2
 8015bc8:	f104 0314 	add.w	r3, r4, #20
 8015bcc:	d13c      	bne.n	8015c48 <__gethex+0x3e4>
 8015bce:	f8d8 2000 	ldr.w	r2, [r8]
 8015bd2:	3a01      	subs	r2, #1
 8015bd4:	42b2      	cmp	r2, r6
 8015bd6:	d109      	bne.n	8015bec <__gethex+0x388>
 8015bd8:	1171      	asrs	r1, r6, #5
 8015bda:	2201      	movs	r2, #1
 8015bdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015be0:	f006 061f 	and.w	r6, r6, #31
 8015be4:	fa02 f606 	lsl.w	r6, r2, r6
 8015be8:	421e      	tst	r6, r3
 8015bea:	d13a      	bne.n	8015c62 <__gethex+0x3fe>
 8015bec:	f045 0520 	orr.w	r5, r5, #32
 8015bf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015bf2:	601c      	str	r4, [r3, #0]
 8015bf4:	9b02      	ldr	r3, [sp, #8]
 8015bf6:	601f      	str	r7, [r3, #0]
 8015bf8:	e6b0      	b.n	801595c <__gethex+0xf8>
 8015bfa:	4299      	cmp	r1, r3
 8015bfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8015c00:	d8d9      	bhi.n	8015bb6 <__gethex+0x352>
 8015c02:	68a3      	ldr	r3, [r4, #8]
 8015c04:	459b      	cmp	fp, r3
 8015c06:	db17      	blt.n	8015c38 <__gethex+0x3d4>
 8015c08:	6861      	ldr	r1, [r4, #4]
 8015c0a:	9801      	ldr	r0, [sp, #4]
 8015c0c:	3101      	adds	r1, #1
 8015c0e:	f000 f90d 	bl	8015e2c <_Balloc>
 8015c12:	4681      	mov	r9, r0
 8015c14:	b918      	cbnz	r0, 8015c1e <__gethex+0x3ba>
 8015c16:	4b1a      	ldr	r3, [pc, #104]	@ (8015c80 <__gethex+0x41c>)
 8015c18:	4602      	mov	r2, r0
 8015c1a:	2184      	movs	r1, #132	@ 0x84
 8015c1c:	e6c5      	b.n	80159aa <__gethex+0x146>
 8015c1e:	6922      	ldr	r2, [r4, #16]
 8015c20:	3202      	adds	r2, #2
 8015c22:	f104 010c 	add.w	r1, r4, #12
 8015c26:	0092      	lsls	r2, r2, #2
 8015c28:	300c      	adds	r0, #12
 8015c2a:	f7fe feff 	bl	8014a2c <memcpy>
 8015c2e:	4621      	mov	r1, r4
 8015c30:	9801      	ldr	r0, [sp, #4]
 8015c32:	f000 f93b 	bl	8015eac <_Bfree>
 8015c36:	464c      	mov	r4, r9
 8015c38:	6923      	ldr	r3, [r4, #16]
 8015c3a:	1c5a      	adds	r2, r3, #1
 8015c3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015c40:	6122      	str	r2, [r4, #16]
 8015c42:	2201      	movs	r2, #1
 8015c44:	615a      	str	r2, [r3, #20]
 8015c46:	e7be      	b.n	8015bc6 <__gethex+0x362>
 8015c48:	6922      	ldr	r2, [r4, #16]
 8015c4a:	455a      	cmp	r2, fp
 8015c4c:	dd0b      	ble.n	8015c66 <__gethex+0x402>
 8015c4e:	2101      	movs	r1, #1
 8015c50:	4620      	mov	r0, r4
 8015c52:	f7ff fd9f 	bl	8015794 <rshift>
 8015c56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c5a:	3701      	adds	r7, #1
 8015c5c:	42bb      	cmp	r3, r7
 8015c5e:	f6ff aee0 	blt.w	8015a22 <__gethex+0x1be>
 8015c62:	2501      	movs	r5, #1
 8015c64:	e7c2      	b.n	8015bec <__gethex+0x388>
 8015c66:	f016 061f 	ands.w	r6, r6, #31
 8015c6a:	d0fa      	beq.n	8015c62 <__gethex+0x3fe>
 8015c6c:	4453      	add	r3, sl
 8015c6e:	f1c6 0620 	rsb	r6, r6, #32
 8015c72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015c76:	f000 f9cb 	bl	8016010 <__hi0bits>
 8015c7a:	42b0      	cmp	r0, r6
 8015c7c:	dbe7      	blt.n	8015c4e <__gethex+0x3ea>
 8015c7e:	e7f0      	b.n	8015c62 <__gethex+0x3fe>
 8015c80:	0801a436 	.word	0x0801a436

08015c84 <L_shift>:
 8015c84:	f1c2 0208 	rsb	r2, r2, #8
 8015c88:	0092      	lsls	r2, r2, #2
 8015c8a:	b570      	push	{r4, r5, r6, lr}
 8015c8c:	f1c2 0620 	rsb	r6, r2, #32
 8015c90:	6843      	ldr	r3, [r0, #4]
 8015c92:	6804      	ldr	r4, [r0, #0]
 8015c94:	fa03 f506 	lsl.w	r5, r3, r6
 8015c98:	432c      	orrs	r4, r5
 8015c9a:	40d3      	lsrs	r3, r2
 8015c9c:	6004      	str	r4, [r0, #0]
 8015c9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015ca2:	4288      	cmp	r0, r1
 8015ca4:	d3f4      	bcc.n	8015c90 <L_shift+0xc>
 8015ca6:	bd70      	pop	{r4, r5, r6, pc}

08015ca8 <__match>:
 8015ca8:	b530      	push	{r4, r5, lr}
 8015caa:	6803      	ldr	r3, [r0, #0]
 8015cac:	3301      	adds	r3, #1
 8015cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015cb2:	b914      	cbnz	r4, 8015cba <__match+0x12>
 8015cb4:	6003      	str	r3, [r0, #0]
 8015cb6:	2001      	movs	r0, #1
 8015cb8:	bd30      	pop	{r4, r5, pc}
 8015cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015cc2:	2d19      	cmp	r5, #25
 8015cc4:	bf98      	it	ls
 8015cc6:	3220      	addls	r2, #32
 8015cc8:	42a2      	cmp	r2, r4
 8015cca:	d0f0      	beq.n	8015cae <__match+0x6>
 8015ccc:	2000      	movs	r0, #0
 8015cce:	e7f3      	b.n	8015cb8 <__match+0x10>

08015cd0 <__hexnan>:
 8015cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cd4:	680b      	ldr	r3, [r1, #0]
 8015cd6:	6801      	ldr	r1, [r0, #0]
 8015cd8:	115e      	asrs	r6, r3, #5
 8015cda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015cde:	f013 031f 	ands.w	r3, r3, #31
 8015ce2:	b087      	sub	sp, #28
 8015ce4:	bf18      	it	ne
 8015ce6:	3604      	addne	r6, #4
 8015ce8:	2500      	movs	r5, #0
 8015cea:	1f37      	subs	r7, r6, #4
 8015cec:	4682      	mov	sl, r0
 8015cee:	4690      	mov	r8, r2
 8015cf0:	9301      	str	r3, [sp, #4]
 8015cf2:	f846 5c04 	str.w	r5, [r6, #-4]
 8015cf6:	46b9      	mov	r9, r7
 8015cf8:	463c      	mov	r4, r7
 8015cfa:	9502      	str	r5, [sp, #8]
 8015cfc:	46ab      	mov	fp, r5
 8015cfe:	784a      	ldrb	r2, [r1, #1]
 8015d00:	1c4b      	adds	r3, r1, #1
 8015d02:	9303      	str	r3, [sp, #12]
 8015d04:	b342      	cbz	r2, 8015d58 <__hexnan+0x88>
 8015d06:	4610      	mov	r0, r2
 8015d08:	9105      	str	r1, [sp, #20]
 8015d0a:	9204      	str	r2, [sp, #16]
 8015d0c:	f7ff fd94 	bl	8015838 <__hexdig_fun>
 8015d10:	2800      	cmp	r0, #0
 8015d12:	d151      	bne.n	8015db8 <__hexnan+0xe8>
 8015d14:	9a04      	ldr	r2, [sp, #16]
 8015d16:	9905      	ldr	r1, [sp, #20]
 8015d18:	2a20      	cmp	r2, #32
 8015d1a:	d818      	bhi.n	8015d4e <__hexnan+0x7e>
 8015d1c:	9b02      	ldr	r3, [sp, #8]
 8015d1e:	459b      	cmp	fp, r3
 8015d20:	dd13      	ble.n	8015d4a <__hexnan+0x7a>
 8015d22:	454c      	cmp	r4, r9
 8015d24:	d206      	bcs.n	8015d34 <__hexnan+0x64>
 8015d26:	2d07      	cmp	r5, #7
 8015d28:	dc04      	bgt.n	8015d34 <__hexnan+0x64>
 8015d2a:	462a      	mov	r2, r5
 8015d2c:	4649      	mov	r1, r9
 8015d2e:	4620      	mov	r0, r4
 8015d30:	f7ff ffa8 	bl	8015c84 <L_shift>
 8015d34:	4544      	cmp	r4, r8
 8015d36:	d952      	bls.n	8015dde <__hexnan+0x10e>
 8015d38:	2300      	movs	r3, #0
 8015d3a:	f1a4 0904 	sub.w	r9, r4, #4
 8015d3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015d42:	f8cd b008 	str.w	fp, [sp, #8]
 8015d46:	464c      	mov	r4, r9
 8015d48:	461d      	mov	r5, r3
 8015d4a:	9903      	ldr	r1, [sp, #12]
 8015d4c:	e7d7      	b.n	8015cfe <__hexnan+0x2e>
 8015d4e:	2a29      	cmp	r2, #41	@ 0x29
 8015d50:	d157      	bne.n	8015e02 <__hexnan+0x132>
 8015d52:	3102      	adds	r1, #2
 8015d54:	f8ca 1000 	str.w	r1, [sl]
 8015d58:	f1bb 0f00 	cmp.w	fp, #0
 8015d5c:	d051      	beq.n	8015e02 <__hexnan+0x132>
 8015d5e:	454c      	cmp	r4, r9
 8015d60:	d206      	bcs.n	8015d70 <__hexnan+0xa0>
 8015d62:	2d07      	cmp	r5, #7
 8015d64:	dc04      	bgt.n	8015d70 <__hexnan+0xa0>
 8015d66:	462a      	mov	r2, r5
 8015d68:	4649      	mov	r1, r9
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	f7ff ff8a 	bl	8015c84 <L_shift>
 8015d70:	4544      	cmp	r4, r8
 8015d72:	d936      	bls.n	8015de2 <__hexnan+0x112>
 8015d74:	f1a8 0204 	sub.w	r2, r8, #4
 8015d78:	4623      	mov	r3, r4
 8015d7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8015d7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015d82:	429f      	cmp	r7, r3
 8015d84:	d2f9      	bcs.n	8015d7a <__hexnan+0xaa>
 8015d86:	1b3b      	subs	r3, r7, r4
 8015d88:	f023 0303 	bic.w	r3, r3, #3
 8015d8c:	3304      	adds	r3, #4
 8015d8e:	3401      	adds	r4, #1
 8015d90:	3e03      	subs	r6, #3
 8015d92:	42b4      	cmp	r4, r6
 8015d94:	bf88      	it	hi
 8015d96:	2304      	movhi	r3, #4
 8015d98:	4443      	add	r3, r8
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	f843 2b04 	str.w	r2, [r3], #4
 8015da0:	429f      	cmp	r7, r3
 8015da2:	d2fb      	bcs.n	8015d9c <__hexnan+0xcc>
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	b91b      	cbnz	r3, 8015db0 <__hexnan+0xe0>
 8015da8:	4547      	cmp	r7, r8
 8015daa:	d128      	bne.n	8015dfe <__hexnan+0x12e>
 8015dac:	2301      	movs	r3, #1
 8015dae:	603b      	str	r3, [r7, #0]
 8015db0:	2005      	movs	r0, #5
 8015db2:	b007      	add	sp, #28
 8015db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015db8:	3501      	adds	r5, #1
 8015dba:	2d08      	cmp	r5, #8
 8015dbc:	f10b 0b01 	add.w	fp, fp, #1
 8015dc0:	dd06      	ble.n	8015dd0 <__hexnan+0x100>
 8015dc2:	4544      	cmp	r4, r8
 8015dc4:	d9c1      	bls.n	8015d4a <__hexnan+0x7a>
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8015dcc:	2501      	movs	r5, #1
 8015dce:	3c04      	subs	r4, #4
 8015dd0:	6822      	ldr	r2, [r4, #0]
 8015dd2:	f000 000f 	and.w	r0, r0, #15
 8015dd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015dda:	6020      	str	r0, [r4, #0]
 8015ddc:	e7b5      	b.n	8015d4a <__hexnan+0x7a>
 8015dde:	2508      	movs	r5, #8
 8015de0:	e7b3      	b.n	8015d4a <__hexnan+0x7a>
 8015de2:	9b01      	ldr	r3, [sp, #4]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d0dd      	beq.n	8015da4 <__hexnan+0xd4>
 8015de8:	f1c3 0320 	rsb	r3, r3, #32
 8015dec:	f04f 32ff 	mov.w	r2, #4294967295
 8015df0:	40da      	lsrs	r2, r3
 8015df2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015df6:	4013      	ands	r3, r2
 8015df8:	f846 3c04 	str.w	r3, [r6, #-4]
 8015dfc:	e7d2      	b.n	8015da4 <__hexnan+0xd4>
 8015dfe:	3f04      	subs	r7, #4
 8015e00:	e7d0      	b.n	8015da4 <__hexnan+0xd4>
 8015e02:	2004      	movs	r0, #4
 8015e04:	e7d5      	b.n	8015db2 <__hexnan+0xe2>

08015e06 <__ascii_mbtowc>:
 8015e06:	b082      	sub	sp, #8
 8015e08:	b901      	cbnz	r1, 8015e0c <__ascii_mbtowc+0x6>
 8015e0a:	a901      	add	r1, sp, #4
 8015e0c:	b142      	cbz	r2, 8015e20 <__ascii_mbtowc+0x1a>
 8015e0e:	b14b      	cbz	r3, 8015e24 <__ascii_mbtowc+0x1e>
 8015e10:	7813      	ldrb	r3, [r2, #0]
 8015e12:	600b      	str	r3, [r1, #0]
 8015e14:	7812      	ldrb	r2, [r2, #0]
 8015e16:	1e10      	subs	r0, r2, #0
 8015e18:	bf18      	it	ne
 8015e1a:	2001      	movne	r0, #1
 8015e1c:	b002      	add	sp, #8
 8015e1e:	4770      	bx	lr
 8015e20:	4610      	mov	r0, r2
 8015e22:	e7fb      	b.n	8015e1c <__ascii_mbtowc+0x16>
 8015e24:	f06f 0001 	mvn.w	r0, #1
 8015e28:	e7f8      	b.n	8015e1c <__ascii_mbtowc+0x16>
	...

08015e2c <_Balloc>:
 8015e2c:	b570      	push	{r4, r5, r6, lr}
 8015e2e:	69c6      	ldr	r6, [r0, #28]
 8015e30:	4604      	mov	r4, r0
 8015e32:	460d      	mov	r5, r1
 8015e34:	b976      	cbnz	r6, 8015e54 <_Balloc+0x28>
 8015e36:	2010      	movs	r0, #16
 8015e38:	f7fc fa5c 	bl	80122f4 <malloc>
 8015e3c:	4602      	mov	r2, r0
 8015e3e:	61e0      	str	r0, [r4, #28]
 8015e40:	b920      	cbnz	r0, 8015e4c <_Balloc+0x20>
 8015e42:	4b18      	ldr	r3, [pc, #96]	@ (8015ea4 <_Balloc+0x78>)
 8015e44:	4818      	ldr	r0, [pc, #96]	@ (8015ea8 <_Balloc+0x7c>)
 8015e46:	216b      	movs	r1, #107	@ 0x6b
 8015e48:	f000 ff5e 	bl	8016d08 <__assert_func>
 8015e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015e50:	6006      	str	r6, [r0, #0]
 8015e52:	60c6      	str	r6, [r0, #12]
 8015e54:	69e6      	ldr	r6, [r4, #28]
 8015e56:	68f3      	ldr	r3, [r6, #12]
 8015e58:	b183      	cbz	r3, 8015e7c <_Balloc+0x50>
 8015e5a:	69e3      	ldr	r3, [r4, #28]
 8015e5c:	68db      	ldr	r3, [r3, #12]
 8015e5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015e62:	b9b8      	cbnz	r0, 8015e94 <_Balloc+0x68>
 8015e64:	2101      	movs	r1, #1
 8015e66:	fa01 f605 	lsl.w	r6, r1, r5
 8015e6a:	1d72      	adds	r2, r6, #5
 8015e6c:	0092      	lsls	r2, r2, #2
 8015e6e:	4620      	mov	r0, r4
 8015e70:	f000 ff68 	bl	8016d44 <_calloc_r>
 8015e74:	b160      	cbz	r0, 8015e90 <_Balloc+0x64>
 8015e76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015e7a:	e00e      	b.n	8015e9a <_Balloc+0x6e>
 8015e7c:	2221      	movs	r2, #33	@ 0x21
 8015e7e:	2104      	movs	r1, #4
 8015e80:	4620      	mov	r0, r4
 8015e82:	f000 ff5f 	bl	8016d44 <_calloc_r>
 8015e86:	69e3      	ldr	r3, [r4, #28]
 8015e88:	60f0      	str	r0, [r6, #12]
 8015e8a:	68db      	ldr	r3, [r3, #12]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d1e4      	bne.n	8015e5a <_Balloc+0x2e>
 8015e90:	2000      	movs	r0, #0
 8015e92:	bd70      	pop	{r4, r5, r6, pc}
 8015e94:	6802      	ldr	r2, [r0, #0]
 8015e96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015ea0:	e7f7      	b.n	8015e92 <_Balloc+0x66>
 8015ea2:	bf00      	nop
 8015ea4:	0801a3c7 	.word	0x0801a3c7
 8015ea8:	0801a4a7 	.word	0x0801a4a7

08015eac <_Bfree>:
 8015eac:	b570      	push	{r4, r5, r6, lr}
 8015eae:	69c6      	ldr	r6, [r0, #28]
 8015eb0:	4605      	mov	r5, r0
 8015eb2:	460c      	mov	r4, r1
 8015eb4:	b976      	cbnz	r6, 8015ed4 <_Bfree+0x28>
 8015eb6:	2010      	movs	r0, #16
 8015eb8:	f7fc fa1c 	bl	80122f4 <malloc>
 8015ebc:	4602      	mov	r2, r0
 8015ebe:	61e8      	str	r0, [r5, #28]
 8015ec0:	b920      	cbnz	r0, 8015ecc <_Bfree+0x20>
 8015ec2:	4b09      	ldr	r3, [pc, #36]	@ (8015ee8 <_Bfree+0x3c>)
 8015ec4:	4809      	ldr	r0, [pc, #36]	@ (8015eec <_Bfree+0x40>)
 8015ec6:	218f      	movs	r1, #143	@ 0x8f
 8015ec8:	f000 ff1e 	bl	8016d08 <__assert_func>
 8015ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ed0:	6006      	str	r6, [r0, #0]
 8015ed2:	60c6      	str	r6, [r0, #12]
 8015ed4:	b13c      	cbz	r4, 8015ee6 <_Bfree+0x3a>
 8015ed6:	69eb      	ldr	r3, [r5, #28]
 8015ed8:	6862      	ldr	r2, [r4, #4]
 8015eda:	68db      	ldr	r3, [r3, #12]
 8015edc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015ee0:	6021      	str	r1, [r4, #0]
 8015ee2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015ee6:	bd70      	pop	{r4, r5, r6, pc}
 8015ee8:	0801a3c7 	.word	0x0801a3c7
 8015eec:	0801a4a7 	.word	0x0801a4a7

08015ef0 <__multadd>:
 8015ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ef4:	690d      	ldr	r5, [r1, #16]
 8015ef6:	4607      	mov	r7, r0
 8015ef8:	460c      	mov	r4, r1
 8015efa:	461e      	mov	r6, r3
 8015efc:	f101 0c14 	add.w	ip, r1, #20
 8015f00:	2000      	movs	r0, #0
 8015f02:	f8dc 3000 	ldr.w	r3, [ip]
 8015f06:	b299      	uxth	r1, r3
 8015f08:	fb02 6101 	mla	r1, r2, r1, r6
 8015f0c:	0c1e      	lsrs	r6, r3, #16
 8015f0e:	0c0b      	lsrs	r3, r1, #16
 8015f10:	fb02 3306 	mla	r3, r2, r6, r3
 8015f14:	b289      	uxth	r1, r1
 8015f16:	3001      	adds	r0, #1
 8015f18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015f1c:	4285      	cmp	r5, r0
 8015f1e:	f84c 1b04 	str.w	r1, [ip], #4
 8015f22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015f26:	dcec      	bgt.n	8015f02 <__multadd+0x12>
 8015f28:	b30e      	cbz	r6, 8015f6e <__multadd+0x7e>
 8015f2a:	68a3      	ldr	r3, [r4, #8]
 8015f2c:	42ab      	cmp	r3, r5
 8015f2e:	dc19      	bgt.n	8015f64 <__multadd+0x74>
 8015f30:	6861      	ldr	r1, [r4, #4]
 8015f32:	4638      	mov	r0, r7
 8015f34:	3101      	adds	r1, #1
 8015f36:	f7ff ff79 	bl	8015e2c <_Balloc>
 8015f3a:	4680      	mov	r8, r0
 8015f3c:	b928      	cbnz	r0, 8015f4a <__multadd+0x5a>
 8015f3e:	4602      	mov	r2, r0
 8015f40:	4b0c      	ldr	r3, [pc, #48]	@ (8015f74 <__multadd+0x84>)
 8015f42:	480d      	ldr	r0, [pc, #52]	@ (8015f78 <__multadd+0x88>)
 8015f44:	21ba      	movs	r1, #186	@ 0xba
 8015f46:	f000 fedf 	bl	8016d08 <__assert_func>
 8015f4a:	6922      	ldr	r2, [r4, #16]
 8015f4c:	3202      	adds	r2, #2
 8015f4e:	f104 010c 	add.w	r1, r4, #12
 8015f52:	0092      	lsls	r2, r2, #2
 8015f54:	300c      	adds	r0, #12
 8015f56:	f7fe fd69 	bl	8014a2c <memcpy>
 8015f5a:	4621      	mov	r1, r4
 8015f5c:	4638      	mov	r0, r7
 8015f5e:	f7ff ffa5 	bl	8015eac <_Bfree>
 8015f62:	4644      	mov	r4, r8
 8015f64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015f68:	3501      	adds	r5, #1
 8015f6a:	615e      	str	r6, [r3, #20]
 8015f6c:	6125      	str	r5, [r4, #16]
 8015f6e:	4620      	mov	r0, r4
 8015f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f74:	0801a436 	.word	0x0801a436
 8015f78:	0801a4a7 	.word	0x0801a4a7

08015f7c <__s2b>:
 8015f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f80:	460c      	mov	r4, r1
 8015f82:	4615      	mov	r5, r2
 8015f84:	461f      	mov	r7, r3
 8015f86:	2209      	movs	r2, #9
 8015f88:	3308      	adds	r3, #8
 8015f8a:	4606      	mov	r6, r0
 8015f8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015f90:	2100      	movs	r1, #0
 8015f92:	2201      	movs	r2, #1
 8015f94:	429a      	cmp	r2, r3
 8015f96:	db09      	blt.n	8015fac <__s2b+0x30>
 8015f98:	4630      	mov	r0, r6
 8015f9a:	f7ff ff47 	bl	8015e2c <_Balloc>
 8015f9e:	b940      	cbnz	r0, 8015fb2 <__s2b+0x36>
 8015fa0:	4602      	mov	r2, r0
 8015fa2:	4b19      	ldr	r3, [pc, #100]	@ (8016008 <__s2b+0x8c>)
 8015fa4:	4819      	ldr	r0, [pc, #100]	@ (801600c <__s2b+0x90>)
 8015fa6:	21d3      	movs	r1, #211	@ 0xd3
 8015fa8:	f000 feae 	bl	8016d08 <__assert_func>
 8015fac:	0052      	lsls	r2, r2, #1
 8015fae:	3101      	adds	r1, #1
 8015fb0:	e7f0      	b.n	8015f94 <__s2b+0x18>
 8015fb2:	9b08      	ldr	r3, [sp, #32]
 8015fb4:	6143      	str	r3, [r0, #20]
 8015fb6:	2d09      	cmp	r5, #9
 8015fb8:	f04f 0301 	mov.w	r3, #1
 8015fbc:	6103      	str	r3, [r0, #16]
 8015fbe:	dd16      	ble.n	8015fee <__s2b+0x72>
 8015fc0:	f104 0909 	add.w	r9, r4, #9
 8015fc4:	46c8      	mov	r8, r9
 8015fc6:	442c      	add	r4, r5
 8015fc8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015fcc:	4601      	mov	r1, r0
 8015fce:	3b30      	subs	r3, #48	@ 0x30
 8015fd0:	220a      	movs	r2, #10
 8015fd2:	4630      	mov	r0, r6
 8015fd4:	f7ff ff8c 	bl	8015ef0 <__multadd>
 8015fd8:	45a0      	cmp	r8, r4
 8015fda:	d1f5      	bne.n	8015fc8 <__s2b+0x4c>
 8015fdc:	f1a5 0408 	sub.w	r4, r5, #8
 8015fe0:	444c      	add	r4, r9
 8015fe2:	1b2d      	subs	r5, r5, r4
 8015fe4:	1963      	adds	r3, r4, r5
 8015fe6:	42bb      	cmp	r3, r7
 8015fe8:	db04      	blt.n	8015ff4 <__s2b+0x78>
 8015fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fee:	340a      	adds	r4, #10
 8015ff0:	2509      	movs	r5, #9
 8015ff2:	e7f6      	b.n	8015fe2 <__s2b+0x66>
 8015ff4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015ff8:	4601      	mov	r1, r0
 8015ffa:	3b30      	subs	r3, #48	@ 0x30
 8015ffc:	220a      	movs	r2, #10
 8015ffe:	4630      	mov	r0, r6
 8016000:	f7ff ff76 	bl	8015ef0 <__multadd>
 8016004:	e7ee      	b.n	8015fe4 <__s2b+0x68>
 8016006:	bf00      	nop
 8016008:	0801a436 	.word	0x0801a436
 801600c:	0801a4a7 	.word	0x0801a4a7

08016010 <__hi0bits>:
 8016010:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016014:	4603      	mov	r3, r0
 8016016:	bf36      	itet	cc
 8016018:	0403      	lslcc	r3, r0, #16
 801601a:	2000      	movcs	r0, #0
 801601c:	2010      	movcc	r0, #16
 801601e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016022:	bf3c      	itt	cc
 8016024:	021b      	lslcc	r3, r3, #8
 8016026:	3008      	addcc	r0, #8
 8016028:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801602c:	bf3c      	itt	cc
 801602e:	011b      	lslcc	r3, r3, #4
 8016030:	3004      	addcc	r0, #4
 8016032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016036:	bf3c      	itt	cc
 8016038:	009b      	lslcc	r3, r3, #2
 801603a:	3002      	addcc	r0, #2
 801603c:	2b00      	cmp	r3, #0
 801603e:	db05      	blt.n	801604c <__hi0bits+0x3c>
 8016040:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016044:	f100 0001 	add.w	r0, r0, #1
 8016048:	bf08      	it	eq
 801604a:	2020      	moveq	r0, #32
 801604c:	4770      	bx	lr

0801604e <__lo0bits>:
 801604e:	6803      	ldr	r3, [r0, #0]
 8016050:	4602      	mov	r2, r0
 8016052:	f013 0007 	ands.w	r0, r3, #7
 8016056:	d00b      	beq.n	8016070 <__lo0bits+0x22>
 8016058:	07d9      	lsls	r1, r3, #31
 801605a:	d421      	bmi.n	80160a0 <__lo0bits+0x52>
 801605c:	0798      	lsls	r0, r3, #30
 801605e:	bf49      	itett	mi
 8016060:	085b      	lsrmi	r3, r3, #1
 8016062:	089b      	lsrpl	r3, r3, #2
 8016064:	2001      	movmi	r0, #1
 8016066:	6013      	strmi	r3, [r2, #0]
 8016068:	bf5c      	itt	pl
 801606a:	6013      	strpl	r3, [r2, #0]
 801606c:	2002      	movpl	r0, #2
 801606e:	4770      	bx	lr
 8016070:	b299      	uxth	r1, r3
 8016072:	b909      	cbnz	r1, 8016078 <__lo0bits+0x2a>
 8016074:	0c1b      	lsrs	r3, r3, #16
 8016076:	2010      	movs	r0, #16
 8016078:	b2d9      	uxtb	r1, r3
 801607a:	b909      	cbnz	r1, 8016080 <__lo0bits+0x32>
 801607c:	3008      	adds	r0, #8
 801607e:	0a1b      	lsrs	r3, r3, #8
 8016080:	0719      	lsls	r1, r3, #28
 8016082:	bf04      	itt	eq
 8016084:	091b      	lsreq	r3, r3, #4
 8016086:	3004      	addeq	r0, #4
 8016088:	0799      	lsls	r1, r3, #30
 801608a:	bf04      	itt	eq
 801608c:	089b      	lsreq	r3, r3, #2
 801608e:	3002      	addeq	r0, #2
 8016090:	07d9      	lsls	r1, r3, #31
 8016092:	d403      	bmi.n	801609c <__lo0bits+0x4e>
 8016094:	085b      	lsrs	r3, r3, #1
 8016096:	f100 0001 	add.w	r0, r0, #1
 801609a:	d003      	beq.n	80160a4 <__lo0bits+0x56>
 801609c:	6013      	str	r3, [r2, #0]
 801609e:	4770      	bx	lr
 80160a0:	2000      	movs	r0, #0
 80160a2:	4770      	bx	lr
 80160a4:	2020      	movs	r0, #32
 80160a6:	4770      	bx	lr

080160a8 <__i2b>:
 80160a8:	b510      	push	{r4, lr}
 80160aa:	460c      	mov	r4, r1
 80160ac:	2101      	movs	r1, #1
 80160ae:	f7ff febd 	bl	8015e2c <_Balloc>
 80160b2:	4602      	mov	r2, r0
 80160b4:	b928      	cbnz	r0, 80160c2 <__i2b+0x1a>
 80160b6:	4b05      	ldr	r3, [pc, #20]	@ (80160cc <__i2b+0x24>)
 80160b8:	4805      	ldr	r0, [pc, #20]	@ (80160d0 <__i2b+0x28>)
 80160ba:	f240 1145 	movw	r1, #325	@ 0x145
 80160be:	f000 fe23 	bl	8016d08 <__assert_func>
 80160c2:	2301      	movs	r3, #1
 80160c4:	6144      	str	r4, [r0, #20]
 80160c6:	6103      	str	r3, [r0, #16]
 80160c8:	bd10      	pop	{r4, pc}
 80160ca:	bf00      	nop
 80160cc:	0801a436 	.word	0x0801a436
 80160d0:	0801a4a7 	.word	0x0801a4a7

080160d4 <__multiply>:
 80160d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160d8:	4614      	mov	r4, r2
 80160da:	690a      	ldr	r2, [r1, #16]
 80160dc:	6923      	ldr	r3, [r4, #16]
 80160de:	429a      	cmp	r2, r3
 80160e0:	bfa8      	it	ge
 80160e2:	4623      	movge	r3, r4
 80160e4:	460f      	mov	r7, r1
 80160e6:	bfa4      	itt	ge
 80160e8:	460c      	movge	r4, r1
 80160ea:	461f      	movge	r7, r3
 80160ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80160f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80160f4:	68a3      	ldr	r3, [r4, #8]
 80160f6:	6861      	ldr	r1, [r4, #4]
 80160f8:	eb0a 0609 	add.w	r6, sl, r9
 80160fc:	42b3      	cmp	r3, r6
 80160fe:	b085      	sub	sp, #20
 8016100:	bfb8      	it	lt
 8016102:	3101      	addlt	r1, #1
 8016104:	f7ff fe92 	bl	8015e2c <_Balloc>
 8016108:	b930      	cbnz	r0, 8016118 <__multiply+0x44>
 801610a:	4602      	mov	r2, r0
 801610c:	4b44      	ldr	r3, [pc, #272]	@ (8016220 <__multiply+0x14c>)
 801610e:	4845      	ldr	r0, [pc, #276]	@ (8016224 <__multiply+0x150>)
 8016110:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016114:	f000 fdf8 	bl	8016d08 <__assert_func>
 8016118:	f100 0514 	add.w	r5, r0, #20
 801611c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016120:	462b      	mov	r3, r5
 8016122:	2200      	movs	r2, #0
 8016124:	4543      	cmp	r3, r8
 8016126:	d321      	bcc.n	801616c <__multiply+0x98>
 8016128:	f107 0114 	add.w	r1, r7, #20
 801612c:	f104 0214 	add.w	r2, r4, #20
 8016130:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8016134:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8016138:	9302      	str	r3, [sp, #8]
 801613a:	1b13      	subs	r3, r2, r4
 801613c:	3b15      	subs	r3, #21
 801613e:	f023 0303 	bic.w	r3, r3, #3
 8016142:	3304      	adds	r3, #4
 8016144:	f104 0715 	add.w	r7, r4, #21
 8016148:	42ba      	cmp	r2, r7
 801614a:	bf38      	it	cc
 801614c:	2304      	movcc	r3, #4
 801614e:	9301      	str	r3, [sp, #4]
 8016150:	9b02      	ldr	r3, [sp, #8]
 8016152:	9103      	str	r1, [sp, #12]
 8016154:	428b      	cmp	r3, r1
 8016156:	d80c      	bhi.n	8016172 <__multiply+0x9e>
 8016158:	2e00      	cmp	r6, #0
 801615a:	dd03      	ble.n	8016164 <__multiply+0x90>
 801615c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016160:	2b00      	cmp	r3, #0
 8016162:	d05b      	beq.n	801621c <__multiply+0x148>
 8016164:	6106      	str	r6, [r0, #16]
 8016166:	b005      	add	sp, #20
 8016168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801616c:	f843 2b04 	str.w	r2, [r3], #4
 8016170:	e7d8      	b.n	8016124 <__multiply+0x50>
 8016172:	f8b1 a000 	ldrh.w	sl, [r1]
 8016176:	f1ba 0f00 	cmp.w	sl, #0
 801617a:	d024      	beq.n	80161c6 <__multiply+0xf2>
 801617c:	f104 0e14 	add.w	lr, r4, #20
 8016180:	46a9      	mov	r9, r5
 8016182:	f04f 0c00 	mov.w	ip, #0
 8016186:	f85e 7b04 	ldr.w	r7, [lr], #4
 801618a:	f8d9 3000 	ldr.w	r3, [r9]
 801618e:	fa1f fb87 	uxth.w	fp, r7
 8016192:	b29b      	uxth	r3, r3
 8016194:	fb0a 330b 	mla	r3, sl, fp, r3
 8016198:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801619c:	f8d9 7000 	ldr.w	r7, [r9]
 80161a0:	4463      	add	r3, ip
 80161a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80161a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80161aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80161ae:	b29b      	uxth	r3, r3
 80161b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80161b4:	4572      	cmp	r2, lr
 80161b6:	f849 3b04 	str.w	r3, [r9], #4
 80161ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80161be:	d8e2      	bhi.n	8016186 <__multiply+0xb2>
 80161c0:	9b01      	ldr	r3, [sp, #4]
 80161c2:	f845 c003 	str.w	ip, [r5, r3]
 80161c6:	9b03      	ldr	r3, [sp, #12]
 80161c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80161cc:	3104      	adds	r1, #4
 80161ce:	f1b9 0f00 	cmp.w	r9, #0
 80161d2:	d021      	beq.n	8016218 <__multiply+0x144>
 80161d4:	682b      	ldr	r3, [r5, #0]
 80161d6:	f104 0c14 	add.w	ip, r4, #20
 80161da:	46ae      	mov	lr, r5
 80161dc:	f04f 0a00 	mov.w	sl, #0
 80161e0:	f8bc b000 	ldrh.w	fp, [ip]
 80161e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80161e8:	fb09 770b 	mla	r7, r9, fp, r7
 80161ec:	4457      	add	r7, sl
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80161f4:	f84e 3b04 	str.w	r3, [lr], #4
 80161f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80161fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016200:	f8be 3000 	ldrh.w	r3, [lr]
 8016204:	fb09 330a 	mla	r3, r9, sl, r3
 8016208:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801620c:	4562      	cmp	r2, ip
 801620e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016212:	d8e5      	bhi.n	80161e0 <__multiply+0x10c>
 8016214:	9f01      	ldr	r7, [sp, #4]
 8016216:	51eb      	str	r3, [r5, r7]
 8016218:	3504      	adds	r5, #4
 801621a:	e799      	b.n	8016150 <__multiply+0x7c>
 801621c:	3e01      	subs	r6, #1
 801621e:	e79b      	b.n	8016158 <__multiply+0x84>
 8016220:	0801a436 	.word	0x0801a436
 8016224:	0801a4a7 	.word	0x0801a4a7

08016228 <__pow5mult>:
 8016228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801622c:	4615      	mov	r5, r2
 801622e:	f012 0203 	ands.w	r2, r2, #3
 8016232:	4607      	mov	r7, r0
 8016234:	460e      	mov	r6, r1
 8016236:	d007      	beq.n	8016248 <__pow5mult+0x20>
 8016238:	4c25      	ldr	r4, [pc, #148]	@ (80162d0 <__pow5mult+0xa8>)
 801623a:	3a01      	subs	r2, #1
 801623c:	2300      	movs	r3, #0
 801623e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016242:	f7ff fe55 	bl	8015ef0 <__multadd>
 8016246:	4606      	mov	r6, r0
 8016248:	10ad      	asrs	r5, r5, #2
 801624a:	d03d      	beq.n	80162c8 <__pow5mult+0xa0>
 801624c:	69fc      	ldr	r4, [r7, #28]
 801624e:	b97c      	cbnz	r4, 8016270 <__pow5mult+0x48>
 8016250:	2010      	movs	r0, #16
 8016252:	f7fc f84f 	bl	80122f4 <malloc>
 8016256:	4602      	mov	r2, r0
 8016258:	61f8      	str	r0, [r7, #28]
 801625a:	b928      	cbnz	r0, 8016268 <__pow5mult+0x40>
 801625c:	4b1d      	ldr	r3, [pc, #116]	@ (80162d4 <__pow5mult+0xac>)
 801625e:	481e      	ldr	r0, [pc, #120]	@ (80162d8 <__pow5mult+0xb0>)
 8016260:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016264:	f000 fd50 	bl	8016d08 <__assert_func>
 8016268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801626c:	6004      	str	r4, [r0, #0]
 801626e:	60c4      	str	r4, [r0, #12]
 8016270:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016278:	b94c      	cbnz	r4, 801628e <__pow5mult+0x66>
 801627a:	f240 2171 	movw	r1, #625	@ 0x271
 801627e:	4638      	mov	r0, r7
 8016280:	f7ff ff12 	bl	80160a8 <__i2b>
 8016284:	2300      	movs	r3, #0
 8016286:	f8c8 0008 	str.w	r0, [r8, #8]
 801628a:	4604      	mov	r4, r0
 801628c:	6003      	str	r3, [r0, #0]
 801628e:	f04f 0900 	mov.w	r9, #0
 8016292:	07eb      	lsls	r3, r5, #31
 8016294:	d50a      	bpl.n	80162ac <__pow5mult+0x84>
 8016296:	4631      	mov	r1, r6
 8016298:	4622      	mov	r2, r4
 801629a:	4638      	mov	r0, r7
 801629c:	f7ff ff1a 	bl	80160d4 <__multiply>
 80162a0:	4631      	mov	r1, r6
 80162a2:	4680      	mov	r8, r0
 80162a4:	4638      	mov	r0, r7
 80162a6:	f7ff fe01 	bl	8015eac <_Bfree>
 80162aa:	4646      	mov	r6, r8
 80162ac:	106d      	asrs	r5, r5, #1
 80162ae:	d00b      	beq.n	80162c8 <__pow5mult+0xa0>
 80162b0:	6820      	ldr	r0, [r4, #0]
 80162b2:	b938      	cbnz	r0, 80162c4 <__pow5mult+0x9c>
 80162b4:	4622      	mov	r2, r4
 80162b6:	4621      	mov	r1, r4
 80162b8:	4638      	mov	r0, r7
 80162ba:	f7ff ff0b 	bl	80160d4 <__multiply>
 80162be:	6020      	str	r0, [r4, #0]
 80162c0:	f8c0 9000 	str.w	r9, [r0]
 80162c4:	4604      	mov	r4, r0
 80162c6:	e7e4      	b.n	8016292 <__pow5mult+0x6a>
 80162c8:	4630      	mov	r0, r6
 80162ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162ce:	bf00      	nop
 80162d0:	0801a500 	.word	0x0801a500
 80162d4:	0801a3c7 	.word	0x0801a3c7
 80162d8:	0801a4a7 	.word	0x0801a4a7

080162dc <__lshift>:
 80162dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162e0:	460c      	mov	r4, r1
 80162e2:	6849      	ldr	r1, [r1, #4]
 80162e4:	6923      	ldr	r3, [r4, #16]
 80162e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80162ea:	68a3      	ldr	r3, [r4, #8]
 80162ec:	4607      	mov	r7, r0
 80162ee:	4691      	mov	r9, r2
 80162f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80162f4:	f108 0601 	add.w	r6, r8, #1
 80162f8:	42b3      	cmp	r3, r6
 80162fa:	db0b      	blt.n	8016314 <__lshift+0x38>
 80162fc:	4638      	mov	r0, r7
 80162fe:	f7ff fd95 	bl	8015e2c <_Balloc>
 8016302:	4605      	mov	r5, r0
 8016304:	b948      	cbnz	r0, 801631a <__lshift+0x3e>
 8016306:	4602      	mov	r2, r0
 8016308:	4b28      	ldr	r3, [pc, #160]	@ (80163ac <__lshift+0xd0>)
 801630a:	4829      	ldr	r0, [pc, #164]	@ (80163b0 <__lshift+0xd4>)
 801630c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016310:	f000 fcfa 	bl	8016d08 <__assert_func>
 8016314:	3101      	adds	r1, #1
 8016316:	005b      	lsls	r3, r3, #1
 8016318:	e7ee      	b.n	80162f8 <__lshift+0x1c>
 801631a:	2300      	movs	r3, #0
 801631c:	f100 0114 	add.w	r1, r0, #20
 8016320:	f100 0210 	add.w	r2, r0, #16
 8016324:	4618      	mov	r0, r3
 8016326:	4553      	cmp	r3, sl
 8016328:	db33      	blt.n	8016392 <__lshift+0xb6>
 801632a:	6920      	ldr	r0, [r4, #16]
 801632c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016330:	f104 0314 	add.w	r3, r4, #20
 8016334:	f019 091f 	ands.w	r9, r9, #31
 8016338:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801633c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016340:	d02b      	beq.n	801639a <__lshift+0xbe>
 8016342:	f1c9 0e20 	rsb	lr, r9, #32
 8016346:	468a      	mov	sl, r1
 8016348:	2200      	movs	r2, #0
 801634a:	6818      	ldr	r0, [r3, #0]
 801634c:	fa00 f009 	lsl.w	r0, r0, r9
 8016350:	4310      	orrs	r0, r2
 8016352:	f84a 0b04 	str.w	r0, [sl], #4
 8016356:	f853 2b04 	ldr.w	r2, [r3], #4
 801635a:	459c      	cmp	ip, r3
 801635c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016360:	d8f3      	bhi.n	801634a <__lshift+0x6e>
 8016362:	ebac 0304 	sub.w	r3, ip, r4
 8016366:	3b15      	subs	r3, #21
 8016368:	f023 0303 	bic.w	r3, r3, #3
 801636c:	3304      	adds	r3, #4
 801636e:	f104 0015 	add.w	r0, r4, #21
 8016372:	4584      	cmp	ip, r0
 8016374:	bf38      	it	cc
 8016376:	2304      	movcc	r3, #4
 8016378:	50ca      	str	r2, [r1, r3]
 801637a:	b10a      	cbz	r2, 8016380 <__lshift+0xa4>
 801637c:	f108 0602 	add.w	r6, r8, #2
 8016380:	3e01      	subs	r6, #1
 8016382:	4638      	mov	r0, r7
 8016384:	612e      	str	r6, [r5, #16]
 8016386:	4621      	mov	r1, r4
 8016388:	f7ff fd90 	bl	8015eac <_Bfree>
 801638c:	4628      	mov	r0, r5
 801638e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016392:	f842 0f04 	str.w	r0, [r2, #4]!
 8016396:	3301      	adds	r3, #1
 8016398:	e7c5      	b.n	8016326 <__lshift+0x4a>
 801639a:	3904      	subs	r1, #4
 801639c:	f853 2b04 	ldr.w	r2, [r3], #4
 80163a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80163a4:	459c      	cmp	ip, r3
 80163a6:	d8f9      	bhi.n	801639c <__lshift+0xc0>
 80163a8:	e7ea      	b.n	8016380 <__lshift+0xa4>
 80163aa:	bf00      	nop
 80163ac:	0801a436 	.word	0x0801a436
 80163b0:	0801a4a7 	.word	0x0801a4a7

080163b4 <__mcmp>:
 80163b4:	690a      	ldr	r2, [r1, #16]
 80163b6:	4603      	mov	r3, r0
 80163b8:	6900      	ldr	r0, [r0, #16]
 80163ba:	1a80      	subs	r0, r0, r2
 80163bc:	b530      	push	{r4, r5, lr}
 80163be:	d10e      	bne.n	80163de <__mcmp+0x2a>
 80163c0:	3314      	adds	r3, #20
 80163c2:	3114      	adds	r1, #20
 80163c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80163c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80163cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80163d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80163d4:	4295      	cmp	r5, r2
 80163d6:	d003      	beq.n	80163e0 <__mcmp+0x2c>
 80163d8:	d205      	bcs.n	80163e6 <__mcmp+0x32>
 80163da:	f04f 30ff 	mov.w	r0, #4294967295
 80163de:	bd30      	pop	{r4, r5, pc}
 80163e0:	42a3      	cmp	r3, r4
 80163e2:	d3f3      	bcc.n	80163cc <__mcmp+0x18>
 80163e4:	e7fb      	b.n	80163de <__mcmp+0x2a>
 80163e6:	2001      	movs	r0, #1
 80163e8:	e7f9      	b.n	80163de <__mcmp+0x2a>
	...

080163ec <__mdiff>:
 80163ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f0:	4689      	mov	r9, r1
 80163f2:	4606      	mov	r6, r0
 80163f4:	4611      	mov	r1, r2
 80163f6:	4648      	mov	r0, r9
 80163f8:	4614      	mov	r4, r2
 80163fa:	f7ff ffdb 	bl	80163b4 <__mcmp>
 80163fe:	1e05      	subs	r5, r0, #0
 8016400:	d112      	bne.n	8016428 <__mdiff+0x3c>
 8016402:	4629      	mov	r1, r5
 8016404:	4630      	mov	r0, r6
 8016406:	f7ff fd11 	bl	8015e2c <_Balloc>
 801640a:	4602      	mov	r2, r0
 801640c:	b928      	cbnz	r0, 801641a <__mdiff+0x2e>
 801640e:	4b3f      	ldr	r3, [pc, #252]	@ (801650c <__mdiff+0x120>)
 8016410:	f240 2137 	movw	r1, #567	@ 0x237
 8016414:	483e      	ldr	r0, [pc, #248]	@ (8016510 <__mdiff+0x124>)
 8016416:	f000 fc77 	bl	8016d08 <__assert_func>
 801641a:	2301      	movs	r3, #1
 801641c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016420:	4610      	mov	r0, r2
 8016422:	b003      	add	sp, #12
 8016424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016428:	bfbc      	itt	lt
 801642a:	464b      	movlt	r3, r9
 801642c:	46a1      	movlt	r9, r4
 801642e:	4630      	mov	r0, r6
 8016430:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016434:	bfba      	itte	lt
 8016436:	461c      	movlt	r4, r3
 8016438:	2501      	movlt	r5, #1
 801643a:	2500      	movge	r5, #0
 801643c:	f7ff fcf6 	bl	8015e2c <_Balloc>
 8016440:	4602      	mov	r2, r0
 8016442:	b918      	cbnz	r0, 801644c <__mdiff+0x60>
 8016444:	4b31      	ldr	r3, [pc, #196]	@ (801650c <__mdiff+0x120>)
 8016446:	f240 2145 	movw	r1, #581	@ 0x245
 801644a:	e7e3      	b.n	8016414 <__mdiff+0x28>
 801644c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016450:	6926      	ldr	r6, [r4, #16]
 8016452:	60c5      	str	r5, [r0, #12]
 8016454:	f109 0310 	add.w	r3, r9, #16
 8016458:	f109 0514 	add.w	r5, r9, #20
 801645c:	f104 0e14 	add.w	lr, r4, #20
 8016460:	f100 0b14 	add.w	fp, r0, #20
 8016464:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016468:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801646c:	9301      	str	r3, [sp, #4]
 801646e:	46d9      	mov	r9, fp
 8016470:	f04f 0c00 	mov.w	ip, #0
 8016474:	9b01      	ldr	r3, [sp, #4]
 8016476:	f85e 0b04 	ldr.w	r0, [lr], #4
 801647a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801647e:	9301      	str	r3, [sp, #4]
 8016480:	fa1f f38a 	uxth.w	r3, sl
 8016484:	4619      	mov	r1, r3
 8016486:	b283      	uxth	r3, r0
 8016488:	1acb      	subs	r3, r1, r3
 801648a:	0c00      	lsrs	r0, r0, #16
 801648c:	4463      	add	r3, ip
 801648e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016492:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016496:	b29b      	uxth	r3, r3
 8016498:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801649c:	4576      	cmp	r6, lr
 801649e:	f849 3b04 	str.w	r3, [r9], #4
 80164a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80164a6:	d8e5      	bhi.n	8016474 <__mdiff+0x88>
 80164a8:	1b33      	subs	r3, r6, r4
 80164aa:	3b15      	subs	r3, #21
 80164ac:	f023 0303 	bic.w	r3, r3, #3
 80164b0:	3415      	adds	r4, #21
 80164b2:	3304      	adds	r3, #4
 80164b4:	42a6      	cmp	r6, r4
 80164b6:	bf38      	it	cc
 80164b8:	2304      	movcc	r3, #4
 80164ba:	441d      	add	r5, r3
 80164bc:	445b      	add	r3, fp
 80164be:	461e      	mov	r6, r3
 80164c0:	462c      	mov	r4, r5
 80164c2:	4544      	cmp	r4, r8
 80164c4:	d30e      	bcc.n	80164e4 <__mdiff+0xf8>
 80164c6:	f108 0103 	add.w	r1, r8, #3
 80164ca:	1b49      	subs	r1, r1, r5
 80164cc:	f021 0103 	bic.w	r1, r1, #3
 80164d0:	3d03      	subs	r5, #3
 80164d2:	45a8      	cmp	r8, r5
 80164d4:	bf38      	it	cc
 80164d6:	2100      	movcc	r1, #0
 80164d8:	440b      	add	r3, r1
 80164da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80164de:	b191      	cbz	r1, 8016506 <__mdiff+0x11a>
 80164e0:	6117      	str	r7, [r2, #16]
 80164e2:	e79d      	b.n	8016420 <__mdiff+0x34>
 80164e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80164e8:	46e6      	mov	lr, ip
 80164ea:	0c08      	lsrs	r0, r1, #16
 80164ec:	fa1c fc81 	uxtah	ip, ip, r1
 80164f0:	4471      	add	r1, lr
 80164f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80164f6:	b289      	uxth	r1, r1
 80164f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80164fc:	f846 1b04 	str.w	r1, [r6], #4
 8016500:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016504:	e7dd      	b.n	80164c2 <__mdiff+0xd6>
 8016506:	3f01      	subs	r7, #1
 8016508:	e7e7      	b.n	80164da <__mdiff+0xee>
 801650a:	bf00      	nop
 801650c:	0801a436 	.word	0x0801a436
 8016510:	0801a4a7 	.word	0x0801a4a7

08016514 <__ulp>:
 8016514:	b082      	sub	sp, #8
 8016516:	ed8d 0b00 	vstr	d0, [sp]
 801651a:	9a01      	ldr	r2, [sp, #4]
 801651c:	4b0f      	ldr	r3, [pc, #60]	@ (801655c <__ulp+0x48>)
 801651e:	4013      	ands	r3, r2
 8016520:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016524:	2b00      	cmp	r3, #0
 8016526:	dc08      	bgt.n	801653a <__ulp+0x26>
 8016528:	425b      	negs	r3, r3
 801652a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801652e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016532:	da04      	bge.n	801653e <__ulp+0x2a>
 8016534:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016538:	4113      	asrs	r3, r2
 801653a:	2200      	movs	r2, #0
 801653c:	e008      	b.n	8016550 <__ulp+0x3c>
 801653e:	f1a2 0314 	sub.w	r3, r2, #20
 8016542:	2b1e      	cmp	r3, #30
 8016544:	bfda      	itte	le
 8016546:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801654a:	40da      	lsrle	r2, r3
 801654c:	2201      	movgt	r2, #1
 801654e:	2300      	movs	r3, #0
 8016550:	4619      	mov	r1, r3
 8016552:	4610      	mov	r0, r2
 8016554:	ec41 0b10 	vmov	d0, r0, r1
 8016558:	b002      	add	sp, #8
 801655a:	4770      	bx	lr
 801655c:	7ff00000 	.word	0x7ff00000

08016560 <__b2d>:
 8016560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016564:	6906      	ldr	r6, [r0, #16]
 8016566:	f100 0814 	add.w	r8, r0, #20
 801656a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801656e:	1f37      	subs	r7, r6, #4
 8016570:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016574:	4610      	mov	r0, r2
 8016576:	f7ff fd4b 	bl	8016010 <__hi0bits>
 801657a:	f1c0 0320 	rsb	r3, r0, #32
 801657e:	280a      	cmp	r0, #10
 8016580:	600b      	str	r3, [r1, #0]
 8016582:	491b      	ldr	r1, [pc, #108]	@ (80165f0 <__b2d+0x90>)
 8016584:	dc15      	bgt.n	80165b2 <__b2d+0x52>
 8016586:	f1c0 0c0b 	rsb	ip, r0, #11
 801658a:	fa22 f30c 	lsr.w	r3, r2, ip
 801658e:	45b8      	cmp	r8, r7
 8016590:	ea43 0501 	orr.w	r5, r3, r1
 8016594:	bf34      	ite	cc
 8016596:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801659a:	2300      	movcs	r3, #0
 801659c:	3015      	adds	r0, #21
 801659e:	fa02 f000 	lsl.w	r0, r2, r0
 80165a2:	fa23 f30c 	lsr.w	r3, r3, ip
 80165a6:	4303      	orrs	r3, r0
 80165a8:	461c      	mov	r4, r3
 80165aa:	ec45 4b10 	vmov	d0, r4, r5
 80165ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165b2:	45b8      	cmp	r8, r7
 80165b4:	bf3a      	itte	cc
 80165b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80165ba:	f1a6 0708 	subcc.w	r7, r6, #8
 80165be:	2300      	movcs	r3, #0
 80165c0:	380b      	subs	r0, #11
 80165c2:	d012      	beq.n	80165ea <__b2d+0x8a>
 80165c4:	f1c0 0120 	rsb	r1, r0, #32
 80165c8:	fa23 f401 	lsr.w	r4, r3, r1
 80165cc:	4082      	lsls	r2, r0
 80165ce:	4322      	orrs	r2, r4
 80165d0:	4547      	cmp	r7, r8
 80165d2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80165d6:	bf8c      	ite	hi
 80165d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80165dc:	2200      	movls	r2, #0
 80165de:	4083      	lsls	r3, r0
 80165e0:	40ca      	lsrs	r2, r1
 80165e2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80165e6:	4313      	orrs	r3, r2
 80165e8:	e7de      	b.n	80165a8 <__b2d+0x48>
 80165ea:	ea42 0501 	orr.w	r5, r2, r1
 80165ee:	e7db      	b.n	80165a8 <__b2d+0x48>
 80165f0:	3ff00000 	.word	0x3ff00000

080165f4 <__d2b>:
 80165f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80165f8:	460f      	mov	r7, r1
 80165fa:	2101      	movs	r1, #1
 80165fc:	ec59 8b10 	vmov	r8, r9, d0
 8016600:	4616      	mov	r6, r2
 8016602:	f7ff fc13 	bl	8015e2c <_Balloc>
 8016606:	4604      	mov	r4, r0
 8016608:	b930      	cbnz	r0, 8016618 <__d2b+0x24>
 801660a:	4602      	mov	r2, r0
 801660c:	4b23      	ldr	r3, [pc, #140]	@ (801669c <__d2b+0xa8>)
 801660e:	4824      	ldr	r0, [pc, #144]	@ (80166a0 <__d2b+0xac>)
 8016610:	f240 310f 	movw	r1, #783	@ 0x30f
 8016614:	f000 fb78 	bl	8016d08 <__assert_func>
 8016618:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801661c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016620:	b10d      	cbz	r5, 8016626 <__d2b+0x32>
 8016622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016626:	9301      	str	r3, [sp, #4]
 8016628:	f1b8 0300 	subs.w	r3, r8, #0
 801662c:	d023      	beq.n	8016676 <__d2b+0x82>
 801662e:	4668      	mov	r0, sp
 8016630:	9300      	str	r3, [sp, #0]
 8016632:	f7ff fd0c 	bl	801604e <__lo0bits>
 8016636:	e9dd 1200 	ldrd	r1, r2, [sp]
 801663a:	b1d0      	cbz	r0, 8016672 <__d2b+0x7e>
 801663c:	f1c0 0320 	rsb	r3, r0, #32
 8016640:	fa02 f303 	lsl.w	r3, r2, r3
 8016644:	430b      	orrs	r3, r1
 8016646:	40c2      	lsrs	r2, r0
 8016648:	6163      	str	r3, [r4, #20]
 801664a:	9201      	str	r2, [sp, #4]
 801664c:	9b01      	ldr	r3, [sp, #4]
 801664e:	61a3      	str	r3, [r4, #24]
 8016650:	2b00      	cmp	r3, #0
 8016652:	bf0c      	ite	eq
 8016654:	2201      	moveq	r2, #1
 8016656:	2202      	movne	r2, #2
 8016658:	6122      	str	r2, [r4, #16]
 801665a:	b1a5      	cbz	r5, 8016686 <__d2b+0x92>
 801665c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016660:	4405      	add	r5, r0
 8016662:	603d      	str	r5, [r7, #0]
 8016664:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016668:	6030      	str	r0, [r6, #0]
 801666a:	4620      	mov	r0, r4
 801666c:	b003      	add	sp, #12
 801666e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016672:	6161      	str	r1, [r4, #20]
 8016674:	e7ea      	b.n	801664c <__d2b+0x58>
 8016676:	a801      	add	r0, sp, #4
 8016678:	f7ff fce9 	bl	801604e <__lo0bits>
 801667c:	9b01      	ldr	r3, [sp, #4]
 801667e:	6163      	str	r3, [r4, #20]
 8016680:	3020      	adds	r0, #32
 8016682:	2201      	movs	r2, #1
 8016684:	e7e8      	b.n	8016658 <__d2b+0x64>
 8016686:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801668a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801668e:	6038      	str	r0, [r7, #0]
 8016690:	6918      	ldr	r0, [r3, #16]
 8016692:	f7ff fcbd 	bl	8016010 <__hi0bits>
 8016696:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801669a:	e7e5      	b.n	8016668 <__d2b+0x74>
 801669c:	0801a436 	.word	0x0801a436
 80166a0:	0801a4a7 	.word	0x0801a4a7

080166a4 <__ratio>:
 80166a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166a8:	b085      	sub	sp, #20
 80166aa:	e9cd 1000 	strd	r1, r0, [sp]
 80166ae:	a902      	add	r1, sp, #8
 80166b0:	f7ff ff56 	bl	8016560 <__b2d>
 80166b4:	9800      	ldr	r0, [sp, #0]
 80166b6:	a903      	add	r1, sp, #12
 80166b8:	ec55 4b10 	vmov	r4, r5, d0
 80166bc:	f7ff ff50 	bl	8016560 <__b2d>
 80166c0:	9b01      	ldr	r3, [sp, #4]
 80166c2:	6919      	ldr	r1, [r3, #16]
 80166c4:	9b00      	ldr	r3, [sp, #0]
 80166c6:	691b      	ldr	r3, [r3, #16]
 80166c8:	1ac9      	subs	r1, r1, r3
 80166ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80166ce:	1a9b      	subs	r3, r3, r2
 80166d0:	ec5b ab10 	vmov	sl, fp, d0
 80166d4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80166d8:	2b00      	cmp	r3, #0
 80166da:	bfce      	itee	gt
 80166dc:	462a      	movgt	r2, r5
 80166de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80166e2:	465a      	movle	r2, fp
 80166e4:	462f      	mov	r7, r5
 80166e6:	46d9      	mov	r9, fp
 80166e8:	bfcc      	ite	gt
 80166ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80166ee:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80166f2:	464b      	mov	r3, r9
 80166f4:	4652      	mov	r2, sl
 80166f6:	4620      	mov	r0, r4
 80166f8:	4639      	mov	r1, r7
 80166fa:	f7f6 ff2f 	bl	800d55c <__aeabi_ddiv>
 80166fe:	ec41 0b10 	vmov	d0, r0, r1
 8016702:	b005      	add	sp, #20
 8016704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016708 <__copybits>:
 8016708:	3901      	subs	r1, #1
 801670a:	b570      	push	{r4, r5, r6, lr}
 801670c:	1149      	asrs	r1, r1, #5
 801670e:	6914      	ldr	r4, [r2, #16]
 8016710:	3101      	adds	r1, #1
 8016712:	f102 0314 	add.w	r3, r2, #20
 8016716:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801671a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801671e:	1f05      	subs	r5, r0, #4
 8016720:	42a3      	cmp	r3, r4
 8016722:	d30c      	bcc.n	801673e <__copybits+0x36>
 8016724:	1aa3      	subs	r3, r4, r2
 8016726:	3b11      	subs	r3, #17
 8016728:	f023 0303 	bic.w	r3, r3, #3
 801672c:	3211      	adds	r2, #17
 801672e:	42a2      	cmp	r2, r4
 8016730:	bf88      	it	hi
 8016732:	2300      	movhi	r3, #0
 8016734:	4418      	add	r0, r3
 8016736:	2300      	movs	r3, #0
 8016738:	4288      	cmp	r0, r1
 801673a:	d305      	bcc.n	8016748 <__copybits+0x40>
 801673c:	bd70      	pop	{r4, r5, r6, pc}
 801673e:	f853 6b04 	ldr.w	r6, [r3], #4
 8016742:	f845 6f04 	str.w	r6, [r5, #4]!
 8016746:	e7eb      	b.n	8016720 <__copybits+0x18>
 8016748:	f840 3b04 	str.w	r3, [r0], #4
 801674c:	e7f4      	b.n	8016738 <__copybits+0x30>

0801674e <__any_on>:
 801674e:	f100 0214 	add.w	r2, r0, #20
 8016752:	6900      	ldr	r0, [r0, #16]
 8016754:	114b      	asrs	r3, r1, #5
 8016756:	4298      	cmp	r0, r3
 8016758:	b510      	push	{r4, lr}
 801675a:	db11      	blt.n	8016780 <__any_on+0x32>
 801675c:	dd0a      	ble.n	8016774 <__any_on+0x26>
 801675e:	f011 011f 	ands.w	r1, r1, #31
 8016762:	d007      	beq.n	8016774 <__any_on+0x26>
 8016764:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016768:	fa24 f001 	lsr.w	r0, r4, r1
 801676c:	fa00 f101 	lsl.w	r1, r0, r1
 8016770:	428c      	cmp	r4, r1
 8016772:	d10b      	bne.n	801678c <__any_on+0x3e>
 8016774:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016778:	4293      	cmp	r3, r2
 801677a:	d803      	bhi.n	8016784 <__any_on+0x36>
 801677c:	2000      	movs	r0, #0
 801677e:	bd10      	pop	{r4, pc}
 8016780:	4603      	mov	r3, r0
 8016782:	e7f7      	b.n	8016774 <__any_on+0x26>
 8016784:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016788:	2900      	cmp	r1, #0
 801678a:	d0f5      	beq.n	8016778 <__any_on+0x2a>
 801678c:	2001      	movs	r0, #1
 801678e:	e7f6      	b.n	801677e <__any_on+0x30>

08016790 <_malloc_usable_size_r>:
 8016790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016794:	1f18      	subs	r0, r3, #4
 8016796:	2b00      	cmp	r3, #0
 8016798:	bfbc      	itt	lt
 801679a:	580b      	ldrlt	r3, [r1, r0]
 801679c:	18c0      	addlt	r0, r0, r3
 801679e:	4770      	bx	lr

080167a0 <_strtol_l.constprop.0>:
 80167a0:	2b24      	cmp	r3, #36	@ 0x24
 80167a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167a6:	4686      	mov	lr, r0
 80167a8:	4690      	mov	r8, r2
 80167aa:	d801      	bhi.n	80167b0 <_strtol_l.constprop.0+0x10>
 80167ac:	2b01      	cmp	r3, #1
 80167ae:	d106      	bne.n	80167be <_strtol_l.constprop.0+0x1e>
 80167b0:	f7fe f90e 	bl	80149d0 <__errno>
 80167b4:	2316      	movs	r3, #22
 80167b6:	6003      	str	r3, [r0, #0]
 80167b8:	2000      	movs	r0, #0
 80167ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167be:	4834      	ldr	r0, [pc, #208]	@ (8016890 <_strtol_l.constprop.0+0xf0>)
 80167c0:	460d      	mov	r5, r1
 80167c2:	462a      	mov	r2, r5
 80167c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80167c8:	5d06      	ldrb	r6, [r0, r4]
 80167ca:	f016 0608 	ands.w	r6, r6, #8
 80167ce:	d1f8      	bne.n	80167c2 <_strtol_l.constprop.0+0x22>
 80167d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80167d2:	d12d      	bne.n	8016830 <_strtol_l.constprop.0+0x90>
 80167d4:	782c      	ldrb	r4, [r5, #0]
 80167d6:	2601      	movs	r6, #1
 80167d8:	1c95      	adds	r5, r2, #2
 80167da:	f033 0210 	bics.w	r2, r3, #16
 80167de:	d109      	bne.n	80167f4 <_strtol_l.constprop.0+0x54>
 80167e0:	2c30      	cmp	r4, #48	@ 0x30
 80167e2:	d12a      	bne.n	801683a <_strtol_l.constprop.0+0x9a>
 80167e4:	782a      	ldrb	r2, [r5, #0]
 80167e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80167ea:	2a58      	cmp	r2, #88	@ 0x58
 80167ec:	d125      	bne.n	801683a <_strtol_l.constprop.0+0x9a>
 80167ee:	786c      	ldrb	r4, [r5, #1]
 80167f0:	2310      	movs	r3, #16
 80167f2:	3502      	adds	r5, #2
 80167f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80167f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80167fc:	2200      	movs	r2, #0
 80167fe:	fbbc f9f3 	udiv	r9, ip, r3
 8016802:	4610      	mov	r0, r2
 8016804:	fb03 ca19 	mls	sl, r3, r9, ip
 8016808:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801680c:	2f09      	cmp	r7, #9
 801680e:	d81b      	bhi.n	8016848 <_strtol_l.constprop.0+0xa8>
 8016810:	463c      	mov	r4, r7
 8016812:	42a3      	cmp	r3, r4
 8016814:	dd27      	ble.n	8016866 <_strtol_l.constprop.0+0xc6>
 8016816:	1c57      	adds	r7, r2, #1
 8016818:	d007      	beq.n	801682a <_strtol_l.constprop.0+0x8a>
 801681a:	4581      	cmp	r9, r0
 801681c:	d320      	bcc.n	8016860 <_strtol_l.constprop.0+0xc0>
 801681e:	d101      	bne.n	8016824 <_strtol_l.constprop.0+0x84>
 8016820:	45a2      	cmp	sl, r4
 8016822:	db1d      	blt.n	8016860 <_strtol_l.constprop.0+0xc0>
 8016824:	fb00 4003 	mla	r0, r0, r3, r4
 8016828:	2201      	movs	r2, #1
 801682a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801682e:	e7eb      	b.n	8016808 <_strtol_l.constprop.0+0x68>
 8016830:	2c2b      	cmp	r4, #43	@ 0x2b
 8016832:	bf04      	itt	eq
 8016834:	782c      	ldrbeq	r4, [r5, #0]
 8016836:	1c95      	addeq	r5, r2, #2
 8016838:	e7cf      	b.n	80167da <_strtol_l.constprop.0+0x3a>
 801683a:	2b00      	cmp	r3, #0
 801683c:	d1da      	bne.n	80167f4 <_strtol_l.constprop.0+0x54>
 801683e:	2c30      	cmp	r4, #48	@ 0x30
 8016840:	bf0c      	ite	eq
 8016842:	2308      	moveq	r3, #8
 8016844:	230a      	movne	r3, #10
 8016846:	e7d5      	b.n	80167f4 <_strtol_l.constprop.0+0x54>
 8016848:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801684c:	2f19      	cmp	r7, #25
 801684e:	d801      	bhi.n	8016854 <_strtol_l.constprop.0+0xb4>
 8016850:	3c37      	subs	r4, #55	@ 0x37
 8016852:	e7de      	b.n	8016812 <_strtol_l.constprop.0+0x72>
 8016854:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016858:	2f19      	cmp	r7, #25
 801685a:	d804      	bhi.n	8016866 <_strtol_l.constprop.0+0xc6>
 801685c:	3c57      	subs	r4, #87	@ 0x57
 801685e:	e7d8      	b.n	8016812 <_strtol_l.constprop.0+0x72>
 8016860:	f04f 32ff 	mov.w	r2, #4294967295
 8016864:	e7e1      	b.n	801682a <_strtol_l.constprop.0+0x8a>
 8016866:	1c53      	adds	r3, r2, #1
 8016868:	d108      	bne.n	801687c <_strtol_l.constprop.0+0xdc>
 801686a:	2322      	movs	r3, #34	@ 0x22
 801686c:	f8ce 3000 	str.w	r3, [lr]
 8016870:	4660      	mov	r0, ip
 8016872:	f1b8 0f00 	cmp.w	r8, #0
 8016876:	d0a0      	beq.n	80167ba <_strtol_l.constprop.0+0x1a>
 8016878:	1e69      	subs	r1, r5, #1
 801687a:	e006      	b.n	801688a <_strtol_l.constprop.0+0xea>
 801687c:	b106      	cbz	r6, 8016880 <_strtol_l.constprop.0+0xe0>
 801687e:	4240      	negs	r0, r0
 8016880:	f1b8 0f00 	cmp.w	r8, #0
 8016884:	d099      	beq.n	80167ba <_strtol_l.constprop.0+0x1a>
 8016886:	2a00      	cmp	r2, #0
 8016888:	d1f6      	bne.n	8016878 <_strtol_l.constprop.0+0xd8>
 801688a:	f8c8 1000 	str.w	r1, [r8]
 801688e:	e794      	b.n	80167ba <_strtol_l.constprop.0+0x1a>
 8016890:	0801a279 	.word	0x0801a279

08016894 <_strtol_r>:
 8016894:	f7ff bf84 	b.w	80167a0 <_strtol_l.constprop.0>

08016898 <__ascii_wctomb>:
 8016898:	4603      	mov	r3, r0
 801689a:	4608      	mov	r0, r1
 801689c:	b141      	cbz	r1, 80168b0 <__ascii_wctomb+0x18>
 801689e:	2aff      	cmp	r2, #255	@ 0xff
 80168a0:	d904      	bls.n	80168ac <__ascii_wctomb+0x14>
 80168a2:	228a      	movs	r2, #138	@ 0x8a
 80168a4:	601a      	str	r2, [r3, #0]
 80168a6:	f04f 30ff 	mov.w	r0, #4294967295
 80168aa:	4770      	bx	lr
 80168ac:	700a      	strb	r2, [r1, #0]
 80168ae:	2001      	movs	r0, #1
 80168b0:	4770      	bx	lr

080168b2 <__ssputs_r>:
 80168b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168b6:	688e      	ldr	r6, [r1, #8]
 80168b8:	461f      	mov	r7, r3
 80168ba:	42be      	cmp	r6, r7
 80168bc:	680b      	ldr	r3, [r1, #0]
 80168be:	4682      	mov	sl, r0
 80168c0:	460c      	mov	r4, r1
 80168c2:	4690      	mov	r8, r2
 80168c4:	d82d      	bhi.n	8016922 <__ssputs_r+0x70>
 80168c6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80168ca:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80168ce:	d026      	beq.n	801691e <__ssputs_r+0x6c>
 80168d0:	6965      	ldr	r5, [r4, #20]
 80168d2:	6909      	ldr	r1, [r1, #16]
 80168d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80168d8:	eba3 0901 	sub.w	r9, r3, r1
 80168dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80168e0:	1c7b      	adds	r3, r7, #1
 80168e2:	444b      	add	r3, r9
 80168e4:	106d      	asrs	r5, r5, #1
 80168e6:	429d      	cmp	r5, r3
 80168e8:	bf38      	it	cc
 80168ea:	461d      	movcc	r5, r3
 80168ec:	0553      	lsls	r3, r2, #21
 80168ee:	d527      	bpl.n	8016940 <__ssputs_r+0x8e>
 80168f0:	4629      	mov	r1, r5
 80168f2:	f7fb fd31 	bl	8012358 <_malloc_r>
 80168f6:	4606      	mov	r6, r0
 80168f8:	b360      	cbz	r0, 8016954 <__ssputs_r+0xa2>
 80168fa:	6921      	ldr	r1, [r4, #16]
 80168fc:	464a      	mov	r2, r9
 80168fe:	f7fe f895 	bl	8014a2c <memcpy>
 8016902:	89a3      	ldrh	r3, [r4, #12]
 8016904:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801690c:	81a3      	strh	r3, [r4, #12]
 801690e:	6126      	str	r6, [r4, #16]
 8016910:	6165      	str	r5, [r4, #20]
 8016912:	444e      	add	r6, r9
 8016914:	eba5 0509 	sub.w	r5, r5, r9
 8016918:	6026      	str	r6, [r4, #0]
 801691a:	60a5      	str	r5, [r4, #8]
 801691c:	463e      	mov	r6, r7
 801691e:	42be      	cmp	r6, r7
 8016920:	d900      	bls.n	8016924 <__ssputs_r+0x72>
 8016922:	463e      	mov	r6, r7
 8016924:	6820      	ldr	r0, [r4, #0]
 8016926:	4632      	mov	r2, r6
 8016928:	4641      	mov	r1, r8
 801692a:	f000 f9b1 	bl	8016c90 <memmove>
 801692e:	68a3      	ldr	r3, [r4, #8]
 8016930:	1b9b      	subs	r3, r3, r6
 8016932:	60a3      	str	r3, [r4, #8]
 8016934:	6823      	ldr	r3, [r4, #0]
 8016936:	4433      	add	r3, r6
 8016938:	6023      	str	r3, [r4, #0]
 801693a:	2000      	movs	r0, #0
 801693c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016940:	462a      	mov	r2, r5
 8016942:	f7fb fd9d 	bl	8012480 <_realloc_r>
 8016946:	4606      	mov	r6, r0
 8016948:	2800      	cmp	r0, #0
 801694a:	d1e0      	bne.n	801690e <__ssputs_r+0x5c>
 801694c:	6921      	ldr	r1, [r4, #16]
 801694e:	4650      	mov	r0, sl
 8016950:	f7fe fed6 	bl	8015700 <_free_r>
 8016954:	230c      	movs	r3, #12
 8016956:	f8ca 3000 	str.w	r3, [sl]
 801695a:	89a3      	ldrh	r3, [r4, #12]
 801695c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016960:	81a3      	strh	r3, [r4, #12]
 8016962:	f04f 30ff 	mov.w	r0, #4294967295
 8016966:	e7e9      	b.n	801693c <__ssputs_r+0x8a>

08016968 <_svfiprintf_r>:
 8016968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801696c:	4698      	mov	r8, r3
 801696e:	898b      	ldrh	r3, [r1, #12]
 8016970:	061b      	lsls	r3, r3, #24
 8016972:	b09d      	sub	sp, #116	@ 0x74
 8016974:	4607      	mov	r7, r0
 8016976:	460d      	mov	r5, r1
 8016978:	4614      	mov	r4, r2
 801697a:	d510      	bpl.n	801699e <_svfiprintf_r+0x36>
 801697c:	690b      	ldr	r3, [r1, #16]
 801697e:	b973      	cbnz	r3, 801699e <_svfiprintf_r+0x36>
 8016980:	2140      	movs	r1, #64	@ 0x40
 8016982:	f7fb fce9 	bl	8012358 <_malloc_r>
 8016986:	6028      	str	r0, [r5, #0]
 8016988:	6128      	str	r0, [r5, #16]
 801698a:	b930      	cbnz	r0, 801699a <_svfiprintf_r+0x32>
 801698c:	230c      	movs	r3, #12
 801698e:	603b      	str	r3, [r7, #0]
 8016990:	f04f 30ff 	mov.w	r0, #4294967295
 8016994:	b01d      	add	sp, #116	@ 0x74
 8016996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801699a:	2340      	movs	r3, #64	@ 0x40
 801699c:	616b      	str	r3, [r5, #20]
 801699e:	2300      	movs	r3, #0
 80169a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80169a2:	2320      	movs	r3, #32
 80169a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80169a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80169ac:	2330      	movs	r3, #48	@ 0x30
 80169ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016b4c <_svfiprintf_r+0x1e4>
 80169b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80169b6:	f04f 0901 	mov.w	r9, #1
 80169ba:	4623      	mov	r3, r4
 80169bc:	469a      	mov	sl, r3
 80169be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169c2:	b10a      	cbz	r2, 80169c8 <_svfiprintf_r+0x60>
 80169c4:	2a25      	cmp	r2, #37	@ 0x25
 80169c6:	d1f9      	bne.n	80169bc <_svfiprintf_r+0x54>
 80169c8:	ebba 0b04 	subs.w	fp, sl, r4
 80169cc:	d00b      	beq.n	80169e6 <_svfiprintf_r+0x7e>
 80169ce:	465b      	mov	r3, fp
 80169d0:	4622      	mov	r2, r4
 80169d2:	4629      	mov	r1, r5
 80169d4:	4638      	mov	r0, r7
 80169d6:	f7ff ff6c 	bl	80168b2 <__ssputs_r>
 80169da:	3001      	adds	r0, #1
 80169dc:	f000 80a7 	beq.w	8016b2e <_svfiprintf_r+0x1c6>
 80169e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80169e2:	445a      	add	r2, fp
 80169e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80169e6:	f89a 3000 	ldrb.w	r3, [sl]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	f000 809f 	beq.w	8016b2e <_svfiprintf_r+0x1c6>
 80169f0:	2300      	movs	r3, #0
 80169f2:	f04f 32ff 	mov.w	r2, #4294967295
 80169f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169fa:	f10a 0a01 	add.w	sl, sl, #1
 80169fe:	9304      	str	r3, [sp, #16]
 8016a00:	9307      	str	r3, [sp, #28]
 8016a02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016a06:	931a      	str	r3, [sp, #104]	@ 0x68
 8016a08:	4654      	mov	r4, sl
 8016a0a:	2205      	movs	r2, #5
 8016a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a10:	484e      	ldr	r0, [pc, #312]	@ (8016b4c <_svfiprintf_r+0x1e4>)
 8016a12:	f7f6 fa65 	bl	800cee0 <memchr>
 8016a16:	9a04      	ldr	r2, [sp, #16]
 8016a18:	b9d8      	cbnz	r0, 8016a52 <_svfiprintf_r+0xea>
 8016a1a:	06d0      	lsls	r0, r2, #27
 8016a1c:	bf44      	itt	mi
 8016a1e:	2320      	movmi	r3, #32
 8016a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016a24:	0711      	lsls	r1, r2, #28
 8016a26:	bf44      	itt	mi
 8016a28:	232b      	movmi	r3, #43	@ 0x2b
 8016a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8016a32:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a34:	d015      	beq.n	8016a62 <_svfiprintf_r+0xfa>
 8016a36:	9a07      	ldr	r2, [sp, #28]
 8016a38:	4654      	mov	r4, sl
 8016a3a:	2000      	movs	r0, #0
 8016a3c:	f04f 0c0a 	mov.w	ip, #10
 8016a40:	4621      	mov	r1, r4
 8016a42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a46:	3b30      	subs	r3, #48	@ 0x30
 8016a48:	2b09      	cmp	r3, #9
 8016a4a:	d94b      	bls.n	8016ae4 <_svfiprintf_r+0x17c>
 8016a4c:	b1b0      	cbz	r0, 8016a7c <_svfiprintf_r+0x114>
 8016a4e:	9207      	str	r2, [sp, #28]
 8016a50:	e014      	b.n	8016a7c <_svfiprintf_r+0x114>
 8016a52:	eba0 0308 	sub.w	r3, r0, r8
 8016a56:	fa09 f303 	lsl.w	r3, r9, r3
 8016a5a:	4313      	orrs	r3, r2
 8016a5c:	9304      	str	r3, [sp, #16]
 8016a5e:	46a2      	mov	sl, r4
 8016a60:	e7d2      	b.n	8016a08 <_svfiprintf_r+0xa0>
 8016a62:	9b03      	ldr	r3, [sp, #12]
 8016a64:	1d19      	adds	r1, r3, #4
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	9103      	str	r1, [sp, #12]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	bfbb      	ittet	lt
 8016a6e:	425b      	neglt	r3, r3
 8016a70:	f042 0202 	orrlt.w	r2, r2, #2
 8016a74:	9307      	strge	r3, [sp, #28]
 8016a76:	9307      	strlt	r3, [sp, #28]
 8016a78:	bfb8      	it	lt
 8016a7a:	9204      	strlt	r2, [sp, #16]
 8016a7c:	7823      	ldrb	r3, [r4, #0]
 8016a7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8016a80:	d10a      	bne.n	8016a98 <_svfiprintf_r+0x130>
 8016a82:	7863      	ldrb	r3, [r4, #1]
 8016a84:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a86:	d132      	bne.n	8016aee <_svfiprintf_r+0x186>
 8016a88:	9b03      	ldr	r3, [sp, #12]
 8016a8a:	1d1a      	adds	r2, r3, #4
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	9203      	str	r2, [sp, #12]
 8016a90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016a94:	3402      	adds	r4, #2
 8016a96:	9305      	str	r3, [sp, #20]
 8016a98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016b5c <_svfiprintf_r+0x1f4>
 8016a9c:	7821      	ldrb	r1, [r4, #0]
 8016a9e:	2203      	movs	r2, #3
 8016aa0:	4650      	mov	r0, sl
 8016aa2:	f7f6 fa1d 	bl	800cee0 <memchr>
 8016aa6:	b138      	cbz	r0, 8016ab8 <_svfiprintf_r+0x150>
 8016aa8:	9b04      	ldr	r3, [sp, #16]
 8016aaa:	eba0 000a 	sub.w	r0, r0, sl
 8016aae:	2240      	movs	r2, #64	@ 0x40
 8016ab0:	4082      	lsls	r2, r0
 8016ab2:	4313      	orrs	r3, r2
 8016ab4:	3401      	adds	r4, #1
 8016ab6:	9304      	str	r3, [sp, #16]
 8016ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016abc:	4824      	ldr	r0, [pc, #144]	@ (8016b50 <_svfiprintf_r+0x1e8>)
 8016abe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016ac2:	2206      	movs	r2, #6
 8016ac4:	f7f6 fa0c 	bl	800cee0 <memchr>
 8016ac8:	2800      	cmp	r0, #0
 8016aca:	d036      	beq.n	8016b3a <_svfiprintf_r+0x1d2>
 8016acc:	4b21      	ldr	r3, [pc, #132]	@ (8016b54 <_svfiprintf_r+0x1ec>)
 8016ace:	bb1b      	cbnz	r3, 8016b18 <_svfiprintf_r+0x1b0>
 8016ad0:	9b03      	ldr	r3, [sp, #12]
 8016ad2:	3307      	adds	r3, #7
 8016ad4:	f023 0307 	bic.w	r3, r3, #7
 8016ad8:	3308      	adds	r3, #8
 8016ada:	9303      	str	r3, [sp, #12]
 8016adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ade:	4433      	add	r3, r6
 8016ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ae2:	e76a      	b.n	80169ba <_svfiprintf_r+0x52>
 8016ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8016ae8:	460c      	mov	r4, r1
 8016aea:	2001      	movs	r0, #1
 8016aec:	e7a8      	b.n	8016a40 <_svfiprintf_r+0xd8>
 8016aee:	2300      	movs	r3, #0
 8016af0:	3401      	adds	r4, #1
 8016af2:	9305      	str	r3, [sp, #20]
 8016af4:	4619      	mov	r1, r3
 8016af6:	f04f 0c0a 	mov.w	ip, #10
 8016afa:	4620      	mov	r0, r4
 8016afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b00:	3a30      	subs	r2, #48	@ 0x30
 8016b02:	2a09      	cmp	r2, #9
 8016b04:	d903      	bls.n	8016b0e <_svfiprintf_r+0x1a6>
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d0c6      	beq.n	8016a98 <_svfiprintf_r+0x130>
 8016b0a:	9105      	str	r1, [sp, #20]
 8016b0c:	e7c4      	b.n	8016a98 <_svfiprintf_r+0x130>
 8016b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b12:	4604      	mov	r4, r0
 8016b14:	2301      	movs	r3, #1
 8016b16:	e7f0      	b.n	8016afa <_svfiprintf_r+0x192>
 8016b18:	ab03      	add	r3, sp, #12
 8016b1a:	9300      	str	r3, [sp, #0]
 8016b1c:	462a      	mov	r2, r5
 8016b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8016b58 <_svfiprintf_r+0x1f0>)
 8016b20:	a904      	add	r1, sp, #16
 8016b22:	4638      	mov	r0, r7
 8016b24:	f7fc fb8e 	bl	8013244 <_printf_float>
 8016b28:	1c42      	adds	r2, r0, #1
 8016b2a:	4606      	mov	r6, r0
 8016b2c:	d1d6      	bne.n	8016adc <_svfiprintf_r+0x174>
 8016b2e:	89ab      	ldrh	r3, [r5, #12]
 8016b30:	065b      	lsls	r3, r3, #25
 8016b32:	f53f af2d 	bmi.w	8016990 <_svfiprintf_r+0x28>
 8016b36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016b38:	e72c      	b.n	8016994 <_svfiprintf_r+0x2c>
 8016b3a:	ab03      	add	r3, sp, #12
 8016b3c:	9300      	str	r3, [sp, #0]
 8016b3e:	462a      	mov	r2, r5
 8016b40:	4b05      	ldr	r3, [pc, #20]	@ (8016b58 <_svfiprintf_r+0x1f0>)
 8016b42:	a904      	add	r1, sp, #16
 8016b44:	4638      	mov	r0, r7
 8016b46:	f7fc fe15 	bl	8013774 <_printf_i>
 8016b4a:	e7ed      	b.n	8016b28 <_svfiprintf_r+0x1c0>
 8016b4c:	0801a600 	.word	0x0801a600
 8016b50:	0801a60a 	.word	0x0801a60a
 8016b54:	08013245 	.word	0x08013245
 8016b58:	080168b3 	.word	0x080168b3
 8016b5c:	0801a606 	.word	0x0801a606

08016b60 <__sflags>:
 8016b60:	780b      	ldrb	r3, [r1, #0]
 8016b62:	2b72      	cmp	r3, #114	@ 0x72
 8016b64:	b530      	push	{r4, r5, lr}
 8016b66:	d022      	beq.n	8016bae <__sflags+0x4e>
 8016b68:	2b77      	cmp	r3, #119	@ 0x77
 8016b6a:	d024      	beq.n	8016bb6 <__sflags+0x56>
 8016b6c:	2b61      	cmp	r3, #97	@ 0x61
 8016b6e:	d027      	beq.n	8016bc0 <__sflags+0x60>
 8016b70:	2316      	movs	r3, #22
 8016b72:	6003      	str	r3, [r0, #0]
 8016b74:	2000      	movs	r0, #0
 8016b76:	bd30      	pop	{r4, r5, pc}
 8016b78:	2d62      	cmp	r5, #98	@ 0x62
 8016b7a:	d012      	beq.n	8016ba2 <__sflags+0x42>
 8016b7c:	2d78      	cmp	r5, #120	@ 0x78
 8016b7e:	d013      	beq.n	8016ba8 <__sflags+0x48>
 8016b80:	2d2b      	cmp	r5, #43	@ 0x2b
 8016b82:	d107      	bne.n	8016b94 <__sflags+0x34>
 8016b84:	f020 001c 	bic.w	r0, r0, #28
 8016b88:	f023 0303 	bic.w	r3, r3, #3
 8016b8c:	f040 0010 	orr.w	r0, r0, #16
 8016b90:	f043 0302 	orr.w	r3, r3, #2
 8016b94:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8016b98:	2d00      	cmp	r5, #0
 8016b9a:	d1ed      	bne.n	8016b78 <__sflags+0x18>
 8016b9c:	4323      	orrs	r3, r4
 8016b9e:	6013      	str	r3, [r2, #0]
 8016ba0:	e7e9      	b.n	8016b76 <__sflags+0x16>
 8016ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016ba6:	e7f5      	b.n	8016b94 <__sflags+0x34>
 8016ba8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8016bac:	e7f2      	b.n	8016b94 <__sflags+0x34>
 8016bae:	2400      	movs	r4, #0
 8016bb0:	4623      	mov	r3, r4
 8016bb2:	2004      	movs	r0, #4
 8016bb4:	e7ee      	b.n	8016b94 <__sflags+0x34>
 8016bb6:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 8016bba:	2301      	movs	r3, #1
 8016bbc:	2008      	movs	r0, #8
 8016bbe:	e7e9      	b.n	8016b94 <__sflags+0x34>
 8016bc0:	f44f 7402 	mov.w	r4, #520	@ 0x208
 8016bc4:	2301      	movs	r3, #1
 8016bc6:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8016bca:	e7e3      	b.n	8016b94 <__sflags+0x34>

08016bcc <__swhatbuf_r>:
 8016bcc:	b570      	push	{r4, r5, r6, lr}
 8016bce:	460c      	mov	r4, r1
 8016bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bd4:	2900      	cmp	r1, #0
 8016bd6:	b096      	sub	sp, #88	@ 0x58
 8016bd8:	4615      	mov	r5, r2
 8016bda:	461e      	mov	r6, r3
 8016bdc:	da0d      	bge.n	8016bfa <__swhatbuf_r+0x2e>
 8016bde:	89a3      	ldrh	r3, [r4, #12]
 8016be0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016be4:	f04f 0100 	mov.w	r1, #0
 8016be8:	bf14      	ite	ne
 8016bea:	2340      	movne	r3, #64	@ 0x40
 8016bec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016bf0:	2000      	movs	r0, #0
 8016bf2:	6031      	str	r1, [r6, #0]
 8016bf4:	602b      	str	r3, [r5, #0]
 8016bf6:	b016      	add	sp, #88	@ 0x58
 8016bf8:	bd70      	pop	{r4, r5, r6, pc}
 8016bfa:	466a      	mov	r2, sp
 8016bfc:	f000 f862 	bl	8016cc4 <_fstat_r>
 8016c00:	2800      	cmp	r0, #0
 8016c02:	dbec      	blt.n	8016bde <__swhatbuf_r+0x12>
 8016c04:	9901      	ldr	r1, [sp, #4]
 8016c06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016c0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016c0e:	4259      	negs	r1, r3
 8016c10:	4159      	adcs	r1, r3
 8016c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016c16:	e7eb      	b.n	8016bf0 <__swhatbuf_r+0x24>

08016c18 <__smakebuf_r>:
 8016c18:	898b      	ldrh	r3, [r1, #12]
 8016c1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c1c:	079d      	lsls	r5, r3, #30
 8016c1e:	4606      	mov	r6, r0
 8016c20:	460c      	mov	r4, r1
 8016c22:	d507      	bpl.n	8016c34 <__smakebuf_r+0x1c>
 8016c24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016c28:	6023      	str	r3, [r4, #0]
 8016c2a:	6123      	str	r3, [r4, #16]
 8016c2c:	2301      	movs	r3, #1
 8016c2e:	6163      	str	r3, [r4, #20]
 8016c30:	b003      	add	sp, #12
 8016c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c34:	ab01      	add	r3, sp, #4
 8016c36:	466a      	mov	r2, sp
 8016c38:	f7ff ffc8 	bl	8016bcc <__swhatbuf_r>
 8016c3c:	9f00      	ldr	r7, [sp, #0]
 8016c3e:	4605      	mov	r5, r0
 8016c40:	4639      	mov	r1, r7
 8016c42:	4630      	mov	r0, r6
 8016c44:	f7fb fb88 	bl	8012358 <_malloc_r>
 8016c48:	b948      	cbnz	r0, 8016c5e <__smakebuf_r+0x46>
 8016c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c4e:	059a      	lsls	r2, r3, #22
 8016c50:	d4ee      	bmi.n	8016c30 <__smakebuf_r+0x18>
 8016c52:	f023 0303 	bic.w	r3, r3, #3
 8016c56:	f043 0302 	orr.w	r3, r3, #2
 8016c5a:	81a3      	strh	r3, [r4, #12]
 8016c5c:	e7e2      	b.n	8016c24 <__smakebuf_r+0xc>
 8016c5e:	89a3      	ldrh	r3, [r4, #12]
 8016c60:	6020      	str	r0, [r4, #0]
 8016c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016c66:	81a3      	strh	r3, [r4, #12]
 8016c68:	9b01      	ldr	r3, [sp, #4]
 8016c6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016c6e:	b15b      	cbz	r3, 8016c88 <__smakebuf_r+0x70>
 8016c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c74:	4630      	mov	r0, r6
 8016c76:	f000 f837 	bl	8016ce8 <_isatty_r>
 8016c7a:	b128      	cbz	r0, 8016c88 <__smakebuf_r+0x70>
 8016c7c:	89a3      	ldrh	r3, [r4, #12]
 8016c7e:	f023 0303 	bic.w	r3, r3, #3
 8016c82:	f043 0301 	orr.w	r3, r3, #1
 8016c86:	81a3      	strh	r3, [r4, #12]
 8016c88:	89a3      	ldrh	r3, [r4, #12]
 8016c8a:	431d      	orrs	r5, r3
 8016c8c:	81a5      	strh	r5, [r4, #12]
 8016c8e:	e7cf      	b.n	8016c30 <__smakebuf_r+0x18>

08016c90 <memmove>:
 8016c90:	4288      	cmp	r0, r1
 8016c92:	b510      	push	{r4, lr}
 8016c94:	eb01 0402 	add.w	r4, r1, r2
 8016c98:	d902      	bls.n	8016ca0 <memmove+0x10>
 8016c9a:	4284      	cmp	r4, r0
 8016c9c:	4623      	mov	r3, r4
 8016c9e:	d807      	bhi.n	8016cb0 <memmove+0x20>
 8016ca0:	1e43      	subs	r3, r0, #1
 8016ca2:	42a1      	cmp	r1, r4
 8016ca4:	d008      	beq.n	8016cb8 <memmove+0x28>
 8016ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016cae:	e7f8      	b.n	8016ca2 <memmove+0x12>
 8016cb0:	4402      	add	r2, r0
 8016cb2:	4601      	mov	r1, r0
 8016cb4:	428a      	cmp	r2, r1
 8016cb6:	d100      	bne.n	8016cba <memmove+0x2a>
 8016cb8:	bd10      	pop	{r4, pc}
 8016cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016cc2:	e7f7      	b.n	8016cb4 <memmove+0x24>

08016cc4 <_fstat_r>:
 8016cc4:	b538      	push	{r3, r4, r5, lr}
 8016cc6:	4d07      	ldr	r5, [pc, #28]	@ (8016ce4 <_fstat_r+0x20>)
 8016cc8:	2300      	movs	r3, #0
 8016cca:	4604      	mov	r4, r0
 8016ccc:	4608      	mov	r0, r1
 8016cce:	4611      	mov	r1, r2
 8016cd0:	602b      	str	r3, [r5, #0]
 8016cd2:	f7f8 fee1 	bl	800fa98 <_fstat>
 8016cd6:	1c43      	adds	r3, r0, #1
 8016cd8:	d102      	bne.n	8016ce0 <_fstat_r+0x1c>
 8016cda:	682b      	ldr	r3, [r5, #0]
 8016cdc:	b103      	cbz	r3, 8016ce0 <_fstat_r+0x1c>
 8016cde:	6023      	str	r3, [r4, #0]
 8016ce0:	bd38      	pop	{r3, r4, r5, pc}
 8016ce2:	bf00      	nop
 8016ce4:	200010ac 	.word	0x200010ac

08016ce8 <_isatty_r>:
 8016ce8:	b538      	push	{r3, r4, r5, lr}
 8016cea:	4d06      	ldr	r5, [pc, #24]	@ (8016d04 <_isatty_r+0x1c>)
 8016cec:	2300      	movs	r3, #0
 8016cee:	4604      	mov	r4, r0
 8016cf0:	4608      	mov	r0, r1
 8016cf2:	602b      	str	r3, [r5, #0]
 8016cf4:	f7f8 fee0 	bl	800fab8 <_isatty>
 8016cf8:	1c43      	adds	r3, r0, #1
 8016cfa:	d102      	bne.n	8016d02 <_isatty_r+0x1a>
 8016cfc:	682b      	ldr	r3, [r5, #0]
 8016cfe:	b103      	cbz	r3, 8016d02 <_isatty_r+0x1a>
 8016d00:	6023      	str	r3, [r4, #0]
 8016d02:	bd38      	pop	{r3, r4, r5, pc}
 8016d04:	200010ac 	.word	0x200010ac

08016d08 <__assert_func>:
 8016d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d0a:	4614      	mov	r4, r2
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	4b09      	ldr	r3, [pc, #36]	@ (8016d34 <__assert_func+0x2c>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	4605      	mov	r5, r0
 8016d14:	68d8      	ldr	r0, [r3, #12]
 8016d16:	b954      	cbnz	r4, 8016d2e <__assert_func+0x26>
 8016d18:	4b07      	ldr	r3, [pc, #28]	@ (8016d38 <__assert_func+0x30>)
 8016d1a:	461c      	mov	r4, r3
 8016d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016d20:	9100      	str	r1, [sp, #0]
 8016d22:	462b      	mov	r3, r5
 8016d24:	4905      	ldr	r1, [pc, #20]	@ (8016d3c <__assert_func+0x34>)
 8016d26:	f000 f821 	bl	8016d6c <fiprintf>
 8016d2a:	f000 f831 	bl	8016d90 <abort>
 8016d2e:	4b04      	ldr	r3, [pc, #16]	@ (8016d40 <__assert_func+0x38>)
 8016d30:	e7f4      	b.n	8016d1c <__assert_func+0x14>
 8016d32:	bf00      	nop
 8016d34:	20000a84 	.word	0x20000a84
 8016d38:	0801a64c 	.word	0x0801a64c
 8016d3c:	0801a61e 	.word	0x0801a61e
 8016d40:	0801a611 	.word	0x0801a611

08016d44 <_calloc_r>:
 8016d44:	b570      	push	{r4, r5, r6, lr}
 8016d46:	fba1 5402 	umull	r5, r4, r1, r2
 8016d4a:	b93c      	cbnz	r4, 8016d5c <_calloc_r+0x18>
 8016d4c:	4629      	mov	r1, r5
 8016d4e:	f7fb fb03 	bl	8012358 <_malloc_r>
 8016d52:	4606      	mov	r6, r0
 8016d54:	b928      	cbnz	r0, 8016d62 <_calloc_r+0x1e>
 8016d56:	2600      	movs	r6, #0
 8016d58:	4630      	mov	r0, r6
 8016d5a:	bd70      	pop	{r4, r5, r6, pc}
 8016d5c:	220c      	movs	r2, #12
 8016d5e:	6002      	str	r2, [r0, #0]
 8016d60:	e7f9      	b.n	8016d56 <_calloc_r+0x12>
 8016d62:	462a      	mov	r2, r5
 8016d64:	4621      	mov	r1, r4
 8016d66:	f7fd fdad 	bl	80148c4 <memset>
 8016d6a:	e7f5      	b.n	8016d58 <_calloc_r+0x14>

08016d6c <fiprintf>:
 8016d6c:	b40e      	push	{r1, r2, r3}
 8016d6e:	b503      	push	{r0, r1, lr}
 8016d70:	4601      	mov	r1, r0
 8016d72:	ab03      	add	r3, sp, #12
 8016d74:	4805      	ldr	r0, [pc, #20]	@ (8016d8c <fiprintf+0x20>)
 8016d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d7a:	6800      	ldr	r0, [r0, #0]
 8016d7c:	9301      	str	r3, [sp, #4]
 8016d7e:	f000 f837 	bl	8016df0 <_vfiprintf_r>
 8016d82:	b002      	add	sp, #8
 8016d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d88:	b003      	add	sp, #12
 8016d8a:	4770      	bx	lr
 8016d8c:	20000a84 	.word	0x20000a84

08016d90 <abort>:
 8016d90:	b508      	push	{r3, lr}
 8016d92:	2006      	movs	r0, #6
 8016d94:	f000 f96c 	bl	8017070 <raise>
 8016d98:	2001      	movs	r0, #1
 8016d9a:	f7f8 fe2d 	bl	800f9f8 <_exit>

08016d9e <__sfputc_r>:
 8016d9e:	6893      	ldr	r3, [r2, #8]
 8016da0:	3b01      	subs	r3, #1
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	b410      	push	{r4}
 8016da6:	6093      	str	r3, [r2, #8]
 8016da8:	da08      	bge.n	8016dbc <__sfputc_r+0x1e>
 8016daa:	6994      	ldr	r4, [r2, #24]
 8016dac:	42a3      	cmp	r3, r4
 8016dae:	db01      	blt.n	8016db4 <__sfputc_r+0x16>
 8016db0:	290a      	cmp	r1, #10
 8016db2:	d103      	bne.n	8016dbc <__sfputc_r+0x1e>
 8016db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016db8:	f7fd bbed 	b.w	8014596 <__swbuf_r>
 8016dbc:	6813      	ldr	r3, [r2, #0]
 8016dbe:	1c58      	adds	r0, r3, #1
 8016dc0:	6010      	str	r0, [r2, #0]
 8016dc2:	7019      	strb	r1, [r3, #0]
 8016dc4:	4608      	mov	r0, r1
 8016dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016dca:	4770      	bx	lr

08016dcc <__sfputs_r>:
 8016dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dce:	4606      	mov	r6, r0
 8016dd0:	460f      	mov	r7, r1
 8016dd2:	4614      	mov	r4, r2
 8016dd4:	18d5      	adds	r5, r2, r3
 8016dd6:	42ac      	cmp	r4, r5
 8016dd8:	d101      	bne.n	8016dde <__sfputs_r+0x12>
 8016dda:	2000      	movs	r0, #0
 8016ddc:	e007      	b.n	8016dee <__sfputs_r+0x22>
 8016dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016de2:	463a      	mov	r2, r7
 8016de4:	4630      	mov	r0, r6
 8016de6:	f7ff ffda 	bl	8016d9e <__sfputc_r>
 8016dea:	1c43      	adds	r3, r0, #1
 8016dec:	d1f3      	bne.n	8016dd6 <__sfputs_r+0xa>
 8016dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016df0 <_vfiprintf_r>:
 8016df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016df4:	460d      	mov	r5, r1
 8016df6:	b09d      	sub	sp, #116	@ 0x74
 8016df8:	4614      	mov	r4, r2
 8016dfa:	4698      	mov	r8, r3
 8016dfc:	4606      	mov	r6, r0
 8016dfe:	b118      	cbz	r0, 8016e08 <_vfiprintf_r+0x18>
 8016e00:	6a03      	ldr	r3, [r0, #32]
 8016e02:	b90b      	cbnz	r3, 8016e08 <_vfiprintf_r+0x18>
 8016e04:	f7fd f9d2 	bl	80141ac <__sinit>
 8016e08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016e0a:	07d9      	lsls	r1, r3, #31
 8016e0c:	d405      	bmi.n	8016e1a <_vfiprintf_r+0x2a>
 8016e0e:	89ab      	ldrh	r3, [r5, #12]
 8016e10:	059a      	lsls	r2, r3, #22
 8016e12:	d402      	bmi.n	8016e1a <_vfiprintf_r+0x2a>
 8016e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016e16:	f7fd fe07 	bl	8014a28 <__retarget_lock_acquire_recursive>
 8016e1a:	89ab      	ldrh	r3, [r5, #12]
 8016e1c:	071b      	lsls	r3, r3, #28
 8016e1e:	d501      	bpl.n	8016e24 <_vfiprintf_r+0x34>
 8016e20:	692b      	ldr	r3, [r5, #16]
 8016e22:	b99b      	cbnz	r3, 8016e4c <_vfiprintf_r+0x5c>
 8016e24:	4629      	mov	r1, r5
 8016e26:	4630      	mov	r0, r6
 8016e28:	f7fd fbf4 	bl	8014614 <__swsetup_r>
 8016e2c:	b170      	cbz	r0, 8016e4c <_vfiprintf_r+0x5c>
 8016e2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016e30:	07dc      	lsls	r4, r3, #31
 8016e32:	d504      	bpl.n	8016e3e <_vfiprintf_r+0x4e>
 8016e34:	f04f 30ff 	mov.w	r0, #4294967295
 8016e38:	b01d      	add	sp, #116	@ 0x74
 8016e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e3e:	89ab      	ldrh	r3, [r5, #12]
 8016e40:	0598      	lsls	r0, r3, #22
 8016e42:	d4f7      	bmi.n	8016e34 <_vfiprintf_r+0x44>
 8016e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016e46:	f7fd fdf0 	bl	8014a2a <__retarget_lock_release_recursive>
 8016e4a:	e7f3      	b.n	8016e34 <_vfiprintf_r+0x44>
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e50:	2320      	movs	r3, #32
 8016e52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e5a:	2330      	movs	r3, #48	@ 0x30
 8016e5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801700c <_vfiprintf_r+0x21c>
 8016e60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016e64:	f04f 0901 	mov.w	r9, #1
 8016e68:	4623      	mov	r3, r4
 8016e6a:	469a      	mov	sl, r3
 8016e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e70:	b10a      	cbz	r2, 8016e76 <_vfiprintf_r+0x86>
 8016e72:	2a25      	cmp	r2, #37	@ 0x25
 8016e74:	d1f9      	bne.n	8016e6a <_vfiprintf_r+0x7a>
 8016e76:	ebba 0b04 	subs.w	fp, sl, r4
 8016e7a:	d00b      	beq.n	8016e94 <_vfiprintf_r+0xa4>
 8016e7c:	465b      	mov	r3, fp
 8016e7e:	4622      	mov	r2, r4
 8016e80:	4629      	mov	r1, r5
 8016e82:	4630      	mov	r0, r6
 8016e84:	f7ff ffa2 	bl	8016dcc <__sfputs_r>
 8016e88:	3001      	adds	r0, #1
 8016e8a:	f000 80a7 	beq.w	8016fdc <_vfiprintf_r+0x1ec>
 8016e8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e90:	445a      	add	r2, fp
 8016e92:	9209      	str	r2, [sp, #36]	@ 0x24
 8016e94:	f89a 3000 	ldrb.w	r3, [sl]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	f000 809f 	beq.w	8016fdc <_vfiprintf_r+0x1ec>
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8016ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ea8:	f10a 0a01 	add.w	sl, sl, #1
 8016eac:	9304      	str	r3, [sp, #16]
 8016eae:	9307      	str	r3, [sp, #28]
 8016eb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016eb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8016eb6:	4654      	mov	r4, sl
 8016eb8:	2205      	movs	r2, #5
 8016eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ebe:	4853      	ldr	r0, [pc, #332]	@ (801700c <_vfiprintf_r+0x21c>)
 8016ec0:	f7f6 f80e 	bl	800cee0 <memchr>
 8016ec4:	9a04      	ldr	r2, [sp, #16]
 8016ec6:	b9d8      	cbnz	r0, 8016f00 <_vfiprintf_r+0x110>
 8016ec8:	06d1      	lsls	r1, r2, #27
 8016eca:	bf44      	itt	mi
 8016ecc:	2320      	movmi	r3, #32
 8016ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016ed2:	0713      	lsls	r3, r2, #28
 8016ed4:	bf44      	itt	mi
 8016ed6:	232b      	movmi	r3, #43	@ 0x2b
 8016ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016edc:	f89a 3000 	ldrb.w	r3, [sl]
 8016ee0:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ee2:	d015      	beq.n	8016f10 <_vfiprintf_r+0x120>
 8016ee4:	9a07      	ldr	r2, [sp, #28]
 8016ee6:	4654      	mov	r4, sl
 8016ee8:	2000      	movs	r0, #0
 8016eea:	f04f 0c0a 	mov.w	ip, #10
 8016eee:	4621      	mov	r1, r4
 8016ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ef4:	3b30      	subs	r3, #48	@ 0x30
 8016ef6:	2b09      	cmp	r3, #9
 8016ef8:	d94b      	bls.n	8016f92 <_vfiprintf_r+0x1a2>
 8016efa:	b1b0      	cbz	r0, 8016f2a <_vfiprintf_r+0x13a>
 8016efc:	9207      	str	r2, [sp, #28]
 8016efe:	e014      	b.n	8016f2a <_vfiprintf_r+0x13a>
 8016f00:	eba0 0308 	sub.w	r3, r0, r8
 8016f04:	fa09 f303 	lsl.w	r3, r9, r3
 8016f08:	4313      	orrs	r3, r2
 8016f0a:	9304      	str	r3, [sp, #16]
 8016f0c:	46a2      	mov	sl, r4
 8016f0e:	e7d2      	b.n	8016eb6 <_vfiprintf_r+0xc6>
 8016f10:	9b03      	ldr	r3, [sp, #12]
 8016f12:	1d19      	adds	r1, r3, #4
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	9103      	str	r1, [sp, #12]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	bfbb      	ittet	lt
 8016f1c:	425b      	neglt	r3, r3
 8016f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8016f22:	9307      	strge	r3, [sp, #28]
 8016f24:	9307      	strlt	r3, [sp, #28]
 8016f26:	bfb8      	it	lt
 8016f28:	9204      	strlt	r2, [sp, #16]
 8016f2a:	7823      	ldrb	r3, [r4, #0]
 8016f2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8016f2e:	d10a      	bne.n	8016f46 <_vfiprintf_r+0x156>
 8016f30:	7863      	ldrb	r3, [r4, #1]
 8016f32:	2b2a      	cmp	r3, #42	@ 0x2a
 8016f34:	d132      	bne.n	8016f9c <_vfiprintf_r+0x1ac>
 8016f36:	9b03      	ldr	r3, [sp, #12]
 8016f38:	1d1a      	adds	r2, r3, #4
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	9203      	str	r2, [sp, #12]
 8016f3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016f42:	3402      	adds	r4, #2
 8016f44:	9305      	str	r3, [sp, #20]
 8016f46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801701c <_vfiprintf_r+0x22c>
 8016f4a:	7821      	ldrb	r1, [r4, #0]
 8016f4c:	2203      	movs	r2, #3
 8016f4e:	4650      	mov	r0, sl
 8016f50:	f7f5 ffc6 	bl	800cee0 <memchr>
 8016f54:	b138      	cbz	r0, 8016f66 <_vfiprintf_r+0x176>
 8016f56:	9b04      	ldr	r3, [sp, #16]
 8016f58:	eba0 000a 	sub.w	r0, r0, sl
 8016f5c:	2240      	movs	r2, #64	@ 0x40
 8016f5e:	4082      	lsls	r2, r0
 8016f60:	4313      	orrs	r3, r2
 8016f62:	3401      	adds	r4, #1
 8016f64:	9304      	str	r3, [sp, #16]
 8016f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f6a:	4829      	ldr	r0, [pc, #164]	@ (8017010 <_vfiprintf_r+0x220>)
 8016f6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016f70:	2206      	movs	r2, #6
 8016f72:	f7f5 ffb5 	bl	800cee0 <memchr>
 8016f76:	2800      	cmp	r0, #0
 8016f78:	d03f      	beq.n	8016ffa <_vfiprintf_r+0x20a>
 8016f7a:	4b26      	ldr	r3, [pc, #152]	@ (8017014 <_vfiprintf_r+0x224>)
 8016f7c:	bb1b      	cbnz	r3, 8016fc6 <_vfiprintf_r+0x1d6>
 8016f7e:	9b03      	ldr	r3, [sp, #12]
 8016f80:	3307      	adds	r3, #7
 8016f82:	f023 0307 	bic.w	r3, r3, #7
 8016f86:	3308      	adds	r3, #8
 8016f88:	9303      	str	r3, [sp, #12]
 8016f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f8c:	443b      	add	r3, r7
 8016f8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f90:	e76a      	b.n	8016e68 <_vfiprintf_r+0x78>
 8016f92:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f96:	460c      	mov	r4, r1
 8016f98:	2001      	movs	r0, #1
 8016f9a:	e7a8      	b.n	8016eee <_vfiprintf_r+0xfe>
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	3401      	adds	r4, #1
 8016fa0:	9305      	str	r3, [sp, #20]
 8016fa2:	4619      	mov	r1, r3
 8016fa4:	f04f 0c0a 	mov.w	ip, #10
 8016fa8:	4620      	mov	r0, r4
 8016faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016fae:	3a30      	subs	r2, #48	@ 0x30
 8016fb0:	2a09      	cmp	r2, #9
 8016fb2:	d903      	bls.n	8016fbc <_vfiprintf_r+0x1cc>
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d0c6      	beq.n	8016f46 <_vfiprintf_r+0x156>
 8016fb8:	9105      	str	r1, [sp, #20]
 8016fba:	e7c4      	b.n	8016f46 <_vfiprintf_r+0x156>
 8016fbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8016fc0:	4604      	mov	r4, r0
 8016fc2:	2301      	movs	r3, #1
 8016fc4:	e7f0      	b.n	8016fa8 <_vfiprintf_r+0x1b8>
 8016fc6:	ab03      	add	r3, sp, #12
 8016fc8:	9300      	str	r3, [sp, #0]
 8016fca:	462a      	mov	r2, r5
 8016fcc:	4b12      	ldr	r3, [pc, #72]	@ (8017018 <_vfiprintf_r+0x228>)
 8016fce:	a904      	add	r1, sp, #16
 8016fd0:	4630      	mov	r0, r6
 8016fd2:	f7fc f937 	bl	8013244 <_printf_float>
 8016fd6:	4607      	mov	r7, r0
 8016fd8:	1c78      	adds	r0, r7, #1
 8016fda:	d1d6      	bne.n	8016f8a <_vfiprintf_r+0x19a>
 8016fdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016fde:	07d9      	lsls	r1, r3, #31
 8016fe0:	d405      	bmi.n	8016fee <_vfiprintf_r+0x1fe>
 8016fe2:	89ab      	ldrh	r3, [r5, #12]
 8016fe4:	059a      	lsls	r2, r3, #22
 8016fe6:	d402      	bmi.n	8016fee <_vfiprintf_r+0x1fe>
 8016fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016fea:	f7fd fd1e 	bl	8014a2a <__retarget_lock_release_recursive>
 8016fee:	89ab      	ldrh	r3, [r5, #12]
 8016ff0:	065b      	lsls	r3, r3, #25
 8016ff2:	f53f af1f 	bmi.w	8016e34 <_vfiprintf_r+0x44>
 8016ff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016ff8:	e71e      	b.n	8016e38 <_vfiprintf_r+0x48>
 8016ffa:	ab03      	add	r3, sp, #12
 8016ffc:	9300      	str	r3, [sp, #0]
 8016ffe:	462a      	mov	r2, r5
 8017000:	4b05      	ldr	r3, [pc, #20]	@ (8017018 <_vfiprintf_r+0x228>)
 8017002:	a904      	add	r1, sp, #16
 8017004:	4630      	mov	r0, r6
 8017006:	f7fc fbb5 	bl	8013774 <_printf_i>
 801700a:	e7e4      	b.n	8016fd6 <_vfiprintf_r+0x1e6>
 801700c:	0801a600 	.word	0x0801a600
 8017010:	0801a60a 	.word	0x0801a60a
 8017014:	08013245 	.word	0x08013245
 8017018:	08016dcd 	.word	0x08016dcd
 801701c:	0801a606 	.word	0x0801a606

08017020 <_raise_r>:
 8017020:	291f      	cmp	r1, #31
 8017022:	b538      	push	{r3, r4, r5, lr}
 8017024:	4605      	mov	r5, r0
 8017026:	460c      	mov	r4, r1
 8017028:	d904      	bls.n	8017034 <_raise_r+0x14>
 801702a:	2316      	movs	r3, #22
 801702c:	6003      	str	r3, [r0, #0]
 801702e:	f04f 30ff 	mov.w	r0, #4294967295
 8017032:	bd38      	pop	{r3, r4, r5, pc}
 8017034:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017036:	b112      	cbz	r2, 801703e <_raise_r+0x1e>
 8017038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801703c:	b94b      	cbnz	r3, 8017052 <_raise_r+0x32>
 801703e:	4628      	mov	r0, r5
 8017040:	f000 f830 	bl	80170a4 <_getpid_r>
 8017044:	4622      	mov	r2, r4
 8017046:	4601      	mov	r1, r0
 8017048:	4628      	mov	r0, r5
 801704a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801704e:	f000 b817 	b.w	8017080 <_kill_r>
 8017052:	2b01      	cmp	r3, #1
 8017054:	d00a      	beq.n	801706c <_raise_r+0x4c>
 8017056:	1c59      	adds	r1, r3, #1
 8017058:	d103      	bne.n	8017062 <_raise_r+0x42>
 801705a:	2316      	movs	r3, #22
 801705c:	6003      	str	r3, [r0, #0]
 801705e:	2001      	movs	r0, #1
 8017060:	e7e7      	b.n	8017032 <_raise_r+0x12>
 8017062:	2100      	movs	r1, #0
 8017064:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017068:	4620      	mov	r0, r4
 801706a:	4798      	blx	r3
 801706c:	2000      	movs	r0, #0
 801706e:	e7e0      	b.n	8017032 <_raise_r+0x12>

08017070 <raise>:
 8017070:	4b02      	ldr	r3, [pc, #8]	@ (801707c <raise+0xc>)
 8017072:	4601      	mov	r1, r0
 8017074:	6818      	ldr	r0, [r3, #0]
 8017076:	f7ff bfd3 	b.w	8017020 <_raise_r>
 801707a:	bf00      	nop
 801707c:	20000a84 	.word	0x20000a84

08017080 <_kill_r>:
 8017080:	b538      	push	{r3, r4, r5, lr}
 8017082:	4d07      	ldr	r5, [pc, #28]	@ (80170a0 <_kill_r+0x20>)
 8017084:	2300      	movs	r3, #0
 8017086:	4604      	mov	r4, r0
 8017088:	4608      	mov	r0, r1
 801708a:	4611      	mov	r1, r2
 801708c:	602b      	str	r3, [r5, #0]
 801708e:	f7f8 fca3 	bl	800f9d8 <_kill>
 8017092:	1c43      	adds	r3, r0, #1
 8017094:	d102      	bne.n	801709c <_kill_r+0x1c>
 8017096:	682b      	ldr	r3, [r5, #0]
 8017098:	b103      	cbz	r3, 801709c <_kill_r+0x1c>
 801709a:	6023      	str	r3, [r4, #0]
 801709c:	bd38      	pop	{r3, r4, r5, pc}
 801709e:	bf00      	nop
 80170a0:	200010ac 	.word	0x200010ac

080170a4 <_getpid_r>:
 80170a4:	f7f8 bc90 	b.w	800f9c8 <_getpid>

080170a8 <acosf>:
 80170a8:	b508      	push	{r3, lr}
 80170aa:	ed2d 8b02 	vpush	{d8}
 80170ae:	eeb0 8a40 	vmov.f32	s16, s0
 80170b2:	f001 fab1 	bl	8018618 <__ieee754_acosf>
 80170b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80170ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170be:	eef0 8a40 	vmov.f32	s17, s0
 80170c2:	d615      	bvs.n	80170f0 <acosf+0x48>
 80170c4:	eeb0 0a48 	vmov.f32	s0, s16
 80170c8:	f000 fd1c 	bl	8017b04 <fabsf>
 80170cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80170d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80170d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170d8:	dd0a      	ble.n	80170f0 <acosf+0x48>
 80170da:	f7fd fc79 	bl	80149d0 <__errno>
 80170de:	ecbd 8b02 	vpop	{d8}
 80170e2:	2321      	movs	r3, #33	@ 0x21
 80170e4:	6003      	str	r3, [r0, #0]
 80170e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80170ea:	4804      	ldr	r0, [pc, #16]	@ (80170fc <acosf+0x54>)
 80170ec:	f7fd bcb4 	b.w	8014a58 <nanf>
 80170f0:	eeb0 0a68 	vmov.f32	s0, s17
 80170f4:	ecbd 8b02 	vpop	{d8}
 80170f8:	bd08      	pop	{r3, pc}
 80170fa:	bf00      	nop
 80170fc:	0801a64c 	.word	0x0801a64c

08017100 <acoshf>:
 8017100:	b508      	push	{r3, lr}
 8017102:	ed2d 8b02 	vpush	{d8}
 8017106:	eeb0 8a40 	vmov.f32	s16, s0
 801710a:	f001 fb7d 	bl	8018808 <__ieee754_acoshf>
 801710e:	eeb4 8a48 	vcmp.f32	s16, s16
 8017112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017116:	d60e      	bvs.n	8017136 <acoshf+0x36>
 8017118:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801711c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017124:	d507      	bpl.n	8017136 <acoshf+0x36>
 8017126:	f7fd fc53 	bl	80149d0 <__errno>
 801712a:	eddf 7a04 	vldr	s15, [pc, #16]	@ 801713c <acoshf+0x3c>
 801712e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8017132:	2321      	movs	r3, #33	@ 0x21
 8017134:	6003      	str	r3, [r0, #0]
 8017136:	ecbd 8b02 	vpop	{d8}
 801713a:	bd08      	pop	{r3, pc}
 801713c:	00000000 	.word	0x00000000

08017140 <asinf>:
 8017140:	b508      	push	{r3, lr}
 8017142:	ed2d 8b02 	vpush	{d8}
 8017146:	eeb0 8a40 	vmov.f32	s16, s0
 801714a:	f001 fbb1 	bl	80188b0 <__ieee754_asinf>
 801714e:	eeb4 8a48 	vcmp.f32	s16, s16
 8017152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017156:	eef0 8a40 	vmov.f32	s17, s0
 801715a:	d615      	bvs.n	8017188 <asinf+0x48>
 801715c:	eeb0 0a48 	vmov.f32	s0, s16
 8017160:	f000 fcd0 	bl	8017b04 <fabsf>
 8017164:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017168:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801716c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017170:	dd0a      	ble.n	8017188 <asinf+0x48>
 8017172:	f7fd fc2d 	bl	80149d0 <__errno>
 8017176:	ecbd 8b02 	vpop	{d8}
 801717a:	2321      	movs	r3, #33	@ 0x21
 801717c:	6003      	str	r3, [r0, #0]
 801717e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017182:	4804      	ldr	r0, [pc, #16]	@ (8017194 <asinf+0x54>)
 8017184:	f7fd bc68 	b.w	8014a58 <nanf>
 8017188:	eeb0 0a68 	vmov.f32	s0, s17
 801718c:	ecbd 8b02 	vpop	{d8}
 8017190:	bd08      	pop	{r3, pc}
 8017192:	bf00      	nop
 8017194:	0801a64c 	.word	0x0801a64c

08017198 <atanhf>:
 8017198:	b510      	push	{r4, lr}
 801719a:	ed2d 8b04 	vpush	{d8-d9}
 801719e:	eeb0 8a40 	vmov.f32	s16, s0
 80171a2:	f001 fc6b 	bl	8018a7c <__ieee754_atanhf>
 80171a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80171aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171ae:	eef0 8a40 	vmov.f32	s17, s0
 80171b2:	d614      	bvs.n	80171de <atanhf+0x46>
 80171b4:	eeb0 0a48 	vmov.f32	s0, s16
 80171b8:	f000 fca4 	bl	8017b04 <fabsf>
 80171bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80171c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80171c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171c8:	db09      	blt.n	80171de <atanhf+0x46>
 80171ca:	ed9f 9a0a 	vldr	s18, [pc, #40]	@ 80171f4 <atanhf+0x5c>
 80171ce:	f04f 0421 	mov.w	r4, #33	@ 0x21
 80171d2:	dd09      	ble.n	80171e8 <atanhf+0x50>
 80171d4:	f7fd fbfc 	bl	80149d0 <__errno>
 80171d8:	eec9 8a09 	vdiv.f32	s17, s18, s18
 80171dc:	6004      	str	r4, [r0, #0]
 80171de:	eeb0 0a68 	vmov.f32	s0, s17
 80171e2:	ecbd 8b04 	vpop	{d8-d9}
 80171e6:	bd10      	pop	{r4, pc}
 80171e8:	f7fd fbf2 	bl	80149d0 <__errno>
 80171ec:	eec8 8a09 	vdiv.f32	s17, s16, s18
 80171f0:	6004      	str	r4, [r0, #0]
 80171f2:	e7f4      	b.n	80171de <atanhf+0x46>
 80171f4:	00000000 	.word	0x00000000

080171f8 <coshf>:
 80171f8:	b508      	push	{r3, lr}
 80171fa:	ed2d 8b02 	vpush	{d8}
 80171fe:	eeb0 8a40 	vmov.f32	s16, s0
 8017202:	f001 fc85 	bl	8018b10 <__ieee754_coshf>
 8017206:	eeb4 8a48 	vcmp.f32	s16, s16
 801720a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801720e:	eef0 8a40 	vmov.f32	s17, s0
 8017212:	d610      	bvs.n	8017236 <coshf+0x3e>
 8017214:	eeb0 0a48 	vmov.f32	s0, s16
 8017218:	f000 fc74 	bl	8017b04 <fabsf>
 801721c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8017240 <coshf+0x48>
 8017220:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017228:	dd05      	ble.n	8017236 <coshf+0x3e>
 801722a:	f7fd fbd1 	bl	80149d0 <__errno>
 801722e:	eddf 8a05 	vldr	s17, [pc, #20]	@ 8017244 <coshf+0x4c>
 8017232:	2322      	movs	r3, #34	@ 0x22
 8017234:	6003      	str	r3, [r0, #0]
 8017236:	eeb0 0a68 	vmov.f32	s0, s17
 801723a:	ecbd 8b02 	vpop	{d8}
 801723e:	bd08      	pop	{r3, pc}
 8017240:	42b2d4fc 	.word	0x42b2d4fc
 8017244:	7f800000 	.word	0x7f800000

08017248 <expf>:
 8017248:	b508      	push	{r3, lr}
 801724a:	ed2d 8b02 	vpush	{d8}
 801724e:	eef0 8a40 	vmov.f32	s17, s0
 8017252:	f001 fcbd 	bl	8018bd0 <__ieee754_expf>
 8017256:	eeb0 8a40 	vmov.f32	s16, s0
 801725a:	eeb0 0a68 	vmov.f32	s0, s17
 801725e:	f000 fd35 	bl	8017ccc <finitef>
 8017262:	b160      	cbz	r0, 801727e <expf+0x36>
 8017264:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80172a4 <expf+0x5c>
 8017268:	eef4 8ae7 	vcmpe.f32	s17, s15
 801726c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017270:	dd0a      	ble.n	8017288 <expf+0x40>
 8017272:	f7fd fbad 	bl	80149d0 <__errno>
 8017276:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 80172a8 <expf+0x60>
 801727a:	2322      	movs	r3, #34	@ 0x22
 801727c:	6003      	str	r3, [r0, #0]
 801727e:	eeb0 0a48 	vmov.f32	s0, s16
 8017282:	ecbd 8b02 	vpop	{d8}
 8017286:	bd08      	pop	{r3, pc}
 8017288:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80172ac <expf+0x64>
 801728c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017294:	d5f3      	bpl.n	801727e <expf+0x36>
 8017296:	f7fd fb9b 	bl	80149d0 <__errno>
 801729a:	2322      	movs	r3, #34	@ 0x22
 801729c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 80172b0 <expf+0x68>
 80172a0:	6003      	str	r3, [r0, #0]
 80172a2:	e7ec      	b.n	801727e <expf+0x36>
 80172a4:	42b17217 	.word	0x42b17217
 80172a8:	7f800000 	.word	0x7f800000
 80172ac:	c2cff1b5 	.word	0xc2cff1b5
 80172b0:	00000000 	.word	0x00000000

080172b4 <fmodf>:
 80172b4:	b508      	push	{r3, lr}
 80172b6:	ed2d 8b02 	vpush	{d8}
 80172ba:	eef0 8a40 	vmov.f32	s17, s0
 80172be:	eeb0 8a60 	vmov.f32	s16, s1
 80172c2:	f001 fd53 	bl	8018d6c <__ieee754_fmodf>
 80172c6:	eef4 8a48 	vcmp.f32	s17, s16
 80172ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ce:	d60c      	bvs.n	80172ea <fmodf+0x36>
 80172d0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80172f0 <fmodf+0x3c>
 80172d4:	eeb4 8a68 	vcmp.f32	s16, s17
 80172d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172dc:	d105      	bne.n	80172ea <fmodf+0x36>
 80172de:	f7fd fb77 	bl	80149d0 <__errno>
 80172e2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80172e6:	2321      	movs	r3, #33	@ 0x21
 80172e8:	6003      	str	r3, [r0, #0]
 80172ea:	ecbd 8b02 	vpop	{d8}
 80172ee:	bd08      	pop	{r3, pc}
 80172f0:	00000000 	.word	0x00000000

080172f4 <logf>:
 80172f4:	b508      	push	{r3, lr}
 80172f6:	ed2d 8b02 	vpush	{d8}
 80172fa:	eeb0 8a40 	vmov.f32	s16, s0
 80172fe:	f001 fdb7 	bl	8018e70 <__ieee754_logf>
 8017302:	eeb4 8a48 	vcmp.f32	s16, s16
 8017306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801730a:	d60f      	bvs.n	801732c <logf+0x38>
 801730c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017314:	dc0a      	bgt.n	801732c <logf+0x38>
 8017316:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801731a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801731e:	d108      	bne.n	8017332 <logf+0x3e>
 8017320:	f7fd fb56 	bl	80149d0 <__errno>
 8017324:	2322      	movs	r3, #34	@ 0x22
 8017326:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8017348 <logf+0x54>
 801732a:	6003      	str	r3, [r0, #0]
 801732c:	ecbd 8b02 	vpop	{d8}
 8017330:	bd08      	pop	{r3, pc}
 8017332:	f7fd fb4d 	bl	80149d0 <__errno>
 8017336:	ecbd 8b02 	vpop	{d8}
 801733a:	2321      	movs	r3, #33	@ 0x21
 801733c:	6003      	str	r3, [r0, #0]
 801733e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017342:	4802      	ldr	r0, [pc, #8]	@ (801734c <logf+0x58>)
 8017344:	f7fd bb88 	b.w	8014a58 <nanf>
 8017348:	ff800000 	.word	0xff800000
 801734c:	0801a64c 	.word	0x0801a64c

08017350 <powf>:
 8017350:	b508      	push	{r3, lr}
 8017352:	ed2d 8b04 	vpush	{d8-d9}
 8017356:	eeb0 8a60 	vmov.f32	s16, s1
 801735a:	eeb0 9a40 	vmov.f32	s18, s0
 801735e:	f001 fe79 	bl	8019054 <__ieee754_powf>
 8017362:	eeb4 8a48 	vcmp.f32	s16, s16
 8017366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801736a:	eef0 8a40 	vmov.f32	s17, s0
 801736e:	d63e      	bvs.n	80173ee <powf+0x9e>
 8017370:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017378:	d112      	bne.n	80173a0 <powf+0x50>
 801737a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801737e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017382:	d039      	beq.n	80173f8 <powf+0xa8>
 8017384:	eeb0 0a48 	vmov.f32	s0, s16
 8017388:	f000 fca0 	bl	8017ccc <finitef>
 801738c:	b378      	cbz	r0, 80173ee <powf+0x9e>
 801738e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017396:	d52a      	bpl.n	80173ee <powf+0x9e>
 8017398:	f7fd fb1a 	bl	80149d0 <__errno>
 801739c:	2322      	movs	r3, #34	@ 0x22
 801739e:	e014      	b.n	80173ca <powf+0x7a>
 80173a0:	f000 fc94 	bl	8017ccc <finitef>
 80173a4:	b998      	cbnz	r0, 80173ce <powf+0x7e>
 80173a6:	eeb0 0a49 	vmov.f32	s0, s18
 80173aa:	f000 fc8f 	bl	8017ccc <finitef>
 80173ae:	b170      	cbz	r0, 80173ce <powf+0x7e>
 80173b0:	eeb0 0a48 	vmov.f32	s0, s16
 80173b4:	f000 fc8a 	bl	8017ccc <finitef>
 80173b8:	b148      	cbz	r0, 80173ce <powf+0x7e>
 80173ba:	eef4 8a68 	vcmp.f32	s17, s17
 80173be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173c2:	d7e9      	bvc.n	8017398 <powf+0x48>
 80173c4:	f7fd fb04 	bl	80149d0 <__errno>
 80173c8:	2321      	movs	r3, #33	@ 0x21
 80173ca:	6003      	str	r3, [r0, #0]
 80173cc:	e00f      	b.n	80173ee <powf+0x9e>
 80173ce:	eef5 8a40 	vcmp.f32	s17, #0.0
 80173d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173d6:	d10a      	bne.n	80173ee <powf+0x9e>
 80173d8:	eeb0 0a49 	vmov.f32	s0, s18
 80173dc:	f000 fc76 	bl	8017ccc <finitef>
 80173e0:	b128      	cbz	r0, 80173ee <powf+0x9e>
 80173e2:	eeb0 0a48 	vmov.f32	s0, s16
 80173e6:	f000 fc71 	bl	8017ccc <finitef>
 80173ea:	2800      	cmp	r0, #0
 80173ec:	d1d4      	bne.n	8017398 <powf+0x48>
 80173ee:	eeb0 0a68 	vmov.f32	s0, s17
 80173f2:	ecbd 8b04 	vpop	{d8-d9}
 80173f6:	bd08      	pop	{r3, pc}
 80173f8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80173fc:	e7f7      	b.n	80173ee <powf+0x9e>
	...

08017400 <sinhf>:
 8017400:	b508      	push	{r3, lr}
 8017402:	ed2d 8b02 	vpush	{d8}
 8017406:	eef0 8a40 	vmov.f32	s17, s0
 801740a:	f002 fa23 	bl	8019854 <__ieee754_sinhf>
 801740e:	eeb0 8a40 	vmov.f32	s16, s0
 8017412:	f000 fc5b 	bl	8017ccc <finitef>
 8017416:	b998      	cbnz	r0, 8017440 <sinhf+0x40>
 8017418:	eeb0 0a68 	vmov.f32	s0, s17
 801741c:	f000 fc56 	bl	8017ccc <finitef>
 8017420:	b170      	cbz	r0, 8017440 <sinhf+0x40>
 8017422:	f7fd fad5 	bl	80149d0 <__errno>
 8017426:	ed9f 8a09 	vldr	s16, [pc, #36]	@ 801744c <sinhf+0x4c>
 801742a:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8017450 <sinhf+0x50>
 801742e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8017432:	2322      	movs	r3, #34	@ 0x22
 8017434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017438:	6003      	str	r3, [r0, #0]
 801743a:	bfd8      	it	le
 801743c:	eeb0 8a67 	vmovle.f32	s16, s15
 8017440:	eeb0 0a48 	vmov.f32	s0, s16
 8017444:	ecbd 8b02 	vpop	{d8}
 8017448:	bd08      	pop	{r3, pc}
 801744a:	bf00      	nop
 801744c:	7f800000 	.word	0x7f800000
 8017450:	ff800000 	.word	0xff800000

08017454 <asinhf>:
 8017454:	b510      	push	{r4, lr}
 8017456:	ee10 4a10 	vmov	r4, s0
 801745a:	f024 4300 	bic.w	r3, r4, #2147483648	@ 0x80000000
 801745e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017462:	ed2d 8b04 	vpush	{d8-d9}
 8017466:	eeb0 8a40 	vmov.f32	s16, s0
 801746a:	d306      	bcc.n	801747a <asinhf+0x26>
 801746c:	ee30 8a00 	vadd.f32	s16, s0, s0
 8017470:	eeb0 0a48 	vmov.f32	s0, s16
 8017474:	ecbd 8b04 	vpop	{d8-d9}
 8017478:	bd10      	pop	{r4, pc}
 801747a:	f1b3 5f46 	cmp.w	r3, #830472192	@ 0x31800000
 801747e:	d221      	bcs.n	80174c4 <asinhf+0x70>
 8017480:	eddf 7a26 	vldr	s15, [pc, #152]	@ 801751c <asinhf+0xc8>
 8017484:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017488:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801748c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017494:	dcec      	bgt.n	8017470 <asinhf+0x1c>
 8017496:	eeb0 0a48 	vmov.f32	s0, s16
 801749a:	f000 fb33 	bl	8017b04 <fabsf>
 801749e:	ee68 8a08 	vmul.f32	s17, s16, s16
 80174a2:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80174a6:	eeb0 8a40 	vmov.f32	s16, s0
 80174aa:	ee38 0a89 	vadd.f32	s0, s17, s18
 80174ae:	f000 fe86 	bl	80181be <__ieee754_sqrtf>
 80174b2:	ee70 7a09 	vadd.f32	s15, s0, s18
 80174b6:	ee88 0aa7 	vdiv.f32	s0, s17, s15
 80174ba:	ee30 0a08 	vadd.f32	s0, s0, s16
 80174be:	f000 fd37 	bl	8017f30 <log1pf>
 80174c2:	e028      	b.n	8017516 <asinhf+0xc2>
 80174c4:	f1b3 4f9b 	cmp.w	r3, #1300234240	@ 0x4d800000
 80174c8:	d90c      	bls.n	80174e4 <asinhf+0x90>
 80174ca:	f000 fb1b 	bl	8017b04 <fabsf>
 80174ce:	f001 fccf 	bl	8018e70 <__ieee754_logf>
 80174d2:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8017520 <asinhf+0xcc>
 80174d6:	ee30 8a27 	vadd.f32	s16, s0, s15
 80174da:	2c00      	cmp	r4, #0
 80174dc:	bfd8      	it	le
 80174de:	eeb1 8a48 	vnegle.f32	s16, s16
 80174e2:	e7c5      	b.n	8017470 <asinhf+0x1c>
 80174e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80174e8:	d9d5      	bls.n	8017496 <asinhf+0x42>
 80174ea:	f000 fb0b 	bl	8017b04 <fabsf>
 80174ee:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80174f2:	eef0 8a40 	vmov.f32	s17, s0
 80174f6:	eeb0 0a49 	vmov.f32	s0, s18
 80174fa:	eea8 0a08 	vfma.f32	s0, s16, s16
 80174fe:	f000 fe5e 	bl	80181be <__ieee754_sqrtf>
 8017502:	ee70 7a28 	vadd.f32	s15, s0, s17
 8017506:	ee89 0a27 	vdiv.f32	s0, s18, s15
 801750a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801750e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8017512:	f001 fcad 	bl	8018e70 <__ieee754_logf>
 8017516:	eeb0 8a40 	vmov.f32	s16, s0
 801751a:	e7de      	b.n	80174da <asinhf+0x86>
 801751c:	7149f2ca 	.word	0x7149f2ca
 8017520:	3f317218 	.word	0x3f317218

08017524 <atanf>:
 8017524:	b538      	push	{r3, r4, r5, lr}
 8017526:	ee10 5a10 	vmov	r5, s0
 801752a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801752e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8017532:	eef0 7a40 	vmov.f32	s15, s0
 8017536:	d310      	bcc.n	801755a <atanf+0x36>
 8017538:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801753c:	d904      	bls.n	8017548 <atanf+0x24>
 801753e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8017542:	eeb0 0a67 	vmov.f32	s0, s15
 8017546:	bd38      	pop	{r3, r4, r5, pc}
 8017548:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8017680 <atanf+0x15c>
 801754c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8017684 <atanf+0x160>
 8017550:	2d00      	cmp	r5, #0
 8017552:	bfc8      	it	gt
 8017554:	eef0 7a47 	vmovgt.f32	s15, s14
 8017558:	e7f3      	b.n	8017542 <atanf+0x1e>
 801755a:	4b4b      	ldr	r3, [pc, #300]	@ (8017688 <atanf+0x164>)
 801755c:	429c      	cmp	r4, r3
 801755e:	d810      	bhi.n	8017582 <atanf+0x5e>
 8017560:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8017564:	d20a      	bcs.n	801757c <atanf+0x58>
 8017566:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801768c <atanf+0x168>
 801756a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801756e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017572:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801757a:	dce2      	bgt.n	8017542 <atanf+0x1e>
 801757c:	f04f 33ff 	mov.w	r3, #4294967295
 8017580:	e013      	b.n	80175aa <atanf+0x86>
 8017582:	f000 fabf 	bl	8017b04 <fabsf>
 8017586:	4b42      	ldr	r3, [pc, #264]	@ (8017690 <atanf+0x16c>)
 8017588:	429c      	cmp	r4, r3
 801758a:	d84f      	bhi.n	801762c <atanf+0x108>
 801758c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8017590:	429c      	cmp	r4, r3
 8017592:	d841      	bhi.n	8017618 <atanf+0xf4>
 8017594:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8017598:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801759c:	eea0 7a27 	vfma.f32	s14, s0, s15
 80175a0:	2300      	movs	r3, #0
 80175a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80175a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80175aa:	1c5a      	adds	r2, r3, #1
 80175ac:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80175b0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8017694 <atanf+0x170>
 80175b4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8017698 <atanf+0x174>
 80175b8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801769c <atanf+0x178>
 80175bc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80175c0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80175c4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80176a0 <atanf+0x17c>
 80175c8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80175cc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80176a4 <atanf+0x180>
 80175d0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80175d4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80176a8 <atanf+0x184>
 80175d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80175dc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80176ac <atanf+0x188>
 80175e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80175e4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80176b0 <atanf+0x18c>
 80175e8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80175ec:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80176b4 <atanf+0x190>
 80175f0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80175f4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80176b8 <atanf+0x194>
 80175f8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80175fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80176bc <atanf+0x198>
 8017600:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017604:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017608:	eea5 7a86 	vfma.f32	s14, s11, s12
 801760c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017610:	d121      	bne.n	8017656 <atanf+0x132>
 8017612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017616:	e794      	b.n	8017542 <atanf+0x1e>
 8017618:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801761c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017620:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017624:	2301      	movs	r3, #1
 8017626:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801762a:	e7be      	b.n	80175aa <atanf+0x86>
 801762c:	4b24      	ldr	r3, [pc, #144]	@ (80176c0 <atanf+0x19c>)
 801762e:	429c      	cmp	r4, r3
 8017630:	d80b      	bhi.n	801764a <atanf+0x126>
 8017632:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8017636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801763a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801763e:	2302      	movs	r3, #2
 8017640:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017648:	e7af      	b.n	80175aa <atanf+0x86>
 801764a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801764e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017652:	2303      	movs	r3, #3
 8017654:	e7a9      	b.n	80175aa <atanf+0x86>
 8017656:	4a1b      	ldr	r2, [pc, #108]	@ (80176c4 <atanf+0x1a0>)
 8017658:	491b      	ldr	r1, [pc, #108]	@ (80176c8 <atanf+0x1a4>)
 801765a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801765e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017662:	edd3 6a00 	vldr	s13, [r3]
 8017666:	ee37 7a66 	vsub.f32	s14, s14, s13
 801766a:	2d00      	cmp	r5, #0
 801766c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017670:	edd2 7a00 	vldr	s15, [r2]
 8017674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017678:	bfb8      	it	lt
 801767a:	eef1 7a67 	vneglt.f32	s15, s15
 801767e:	e760      	b.n	8017542 <atanf+0x1e>
 8017680:	bfc90fdb 	.word	0xbfc90fdb
 8017684:	3fc90fdb 	.word	0x3fc90fdb
 8017688:	3edfffff 	.word	0x3edfffff
 801768c:	7149f2ca 	.word	0x7149f2ca
 8017690:	3f97ffff 	.word	0x3f97ffff
 8017694:	3c8569d7 	.word	0x3c8569d7
 8017698:	3d4bda59 	.word	0x3d4bda59
 801769c:	bd6ef16b 	.word	0xbd6ef16b
 80176a0:	3d886b35 	.word	0x3d886b35
 80176a4:	3dba2e6e 	.word	0x3dba2e6e
 80176a8:	3e124925 	.word	0x3e124925
 80176ac:	3eaaaaab 	.word	0x3eaaaaab
 80176b0:	bd15a221 	.word	0xbd15a221
 80176b4:	bd9d8795 	.word	0xbd9d8795
 80176b8:	bde38e38 	.word	0xbde38e38
 80176bc:	be4ccccd 	.word	0xbe4ccccd
 80176c0:	401bffff 	.word	0x401bffff
 80176c4:	0801a660 	.word	0x0801a660
 80176c8:	0801a650 	.word	0x0801a650

080176cc <cosf>:
 80176cc:	ee10 3a10 	vmov	r3, s0
 80176d0:	b507      	push	{r0, r1, r2, lr}
 80176d2:	4a1e      	ldr	r2, [pc, #120]	@ (801774c <cosf+0x80>)
 80176d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80176d8:	4293      	cmp	r3, r2
 80176da:	d806      	bhi.n	80176ea <cosf+0x1e>
 80176dc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8017750 <cosf+0x84>
 80176e0:	b003      	add	sp, #12
 80176e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80176e6:	f000 be17 	b.w	8018318 <__kernel_cosf>
 80176ea:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80176ee:	d304      	bcc.n	80176fa <cosf+0x2e>
 80176f0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80176f4:	b003      	add	sp, #12
 80176f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80176fa:	4668      	mov	r0, sp
 80176fc:	f001 ff7a 	bl	80195f4 <__ieee754_rem_pio2f>
 8017700:	f000 0003 	and.w	r0, r0, #3
 8017704:	2801      	cmp	r0, #1
 8017706:	d009      	beq.n	801771c <cosf+0x50>
 8017708:	2802      	cmp	r0, #2
 801770a:	d010      	beq.n	801772e <cosf+0x62>
 801770c:	b9b0      	cbnz	r0, 801773c <cosf+0x70>
 801770e:	eddd 0a01 	vldr	s1, [sp, #4]
 8017712:	ed9d 0a00 	vldr	s0, [sp]
 8017716:	f000 fdff 	bl	8018318 <__kernel_cosf>
 801771a:	e7eb      	b.n	80176f4 <cosf+0x28>
 801771c:	eddd 0a01 	vldr	s1, [sp, #4]
 8017720:	ed9d 0a00 	vldr	s0, [sp]
 8017724:	f000 fe50 	bl	80183c8 <__kernel_sinf>
 8017728:	eeb1 0a40 	vneg.f32	s0, s0
 801772c:	e7e2      	b.n	80176f4 <cosf+0x28>
 801772e:	eddd 0a01 	vldr	s1, [sp, #4]
 8017732:	ed9d 0a00 	vldr	s0, [sp]
 8017736:	f000 fdef 	bl	8018318 <__kernel_cosf>
 801773a:	e7f5      	b.n	8017728 <cosf+0x5c>
 801773c:	eddd 0a01 	vldr	s1, [sp, #4]
 8017740:	ed9d 0a00 	vldr	s0, [sp]
 8017744:	2001      	movs	r0, #1
 8017746:	f000 fe3f 	bl	80183c8 <__kernel_sinf>
 801774a:	e7d3      	b.n	80176f4 <cosf+0x28>
 801774c:	3f490fd8 	.word	0x3f490fd8
 8017750:	00000000 	.word	0x00000000

08017754 <erff>:
 8017754:	b538      	push	{r3, r4, r5, lr}
 8017756:	ee10 4a10 	vmov	r4, s0
 801775a:	f024 4500 	bic.w	r5, r4, #2147483648	@ 0x80000000
 801775e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8017762:	ed2d 8b06 	vpush	{d8-d10}
 8017766:	eef0 7a40 	vmov.f32	s15, s0
 801776a:	d312      	bcc.n	8017792 <erff+0x3e>
 801776c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8017770:	eec6 6a00 	vdiv.f32	s13, s12, s0
 8017774:	0fe4      	lsrs	r4, r4, #31
 8017776:	0064      	lsls	r4, r4, #1
 8017778:	f1c4 0401 	rsb	r4, r4, #1
 801777c:	ee07 4a10 	vmov	s14, r4
 8017780:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017784:	ee77 7a26 	vadd.f32	s15, s14, s13
 8017788:	ecbd 8b06 	vpop	{d8-d10}
 801778c:	eeb0 0a67 	vmov.f32	s0, s15
 8017790:	bd38      	pop	{r3, r4, r5, pc}
 8017792:	4ba0      	ldr	r3, [pc, #640]	@ (8017a14 <erff+0x2c0>)
 8017794:	429d      	cmp	r5, r3
 8017796:	d844      	bhi.n	8017822 <erff+0xce>
 8017798:	f1b5 5f46 	cmp.w	r5, #830472192	@ 0x31800000
 801779c:	d214      	bcs.n	80177c8 <erff+0x74>
 801779e:	f014 4ff8 	tst.w	r4, #2080374784	@ 0x7c000000
 80177a2:	d10c      	bne.n	80177be <erff+0x6a>
 80177a4:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8017a18 <erff+0x2c4>
 80177a8:	ee20 7a07 	vmul.f32	s14, s0, s14
 80177ac:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80177b0:	eea0 7a26 	vfma.f32	s14, s0, s13
 80177b4:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80177b8:	ee67 7a00 	vmul.f32	s15, s14, s0
 80177bc:	e7e4      	b.n	8017788 <erff+0x34>
 80177be:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8017a1c <erff+0x2c8>
 80177c2:	eee7 7a87 	vfma.f32	s15, s15, s14
 80177c6:	e7df      	b.n	8017788 <erff+0x34>
 80177c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80177cc:	ed9f 6a94 	vldr	s12, [pc, #592]	@ 8017a20 <erff+0x2cc>
 80177d0:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8017a24 <erff+0x2d0>
 80177d4:	eddf 5a94 	vldr	s11, [pc, #592]	@ 8017a28 <erff+0x2d4>
 80177d8:	eee7 6a06 	vfma.f32	s13, s14, s12
 80177dc:	ed9f 6a93 	vldr	s12, [pc, #588]	@ 8017a2c <erff+0x2d8>
 80177e0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80177e4:	eddf 6a92 	vldr	s13, [pc, #584]	@ 8017a30 <erff+0x2dc>
 80177e8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80177ec:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 8017a1c <erff+0x2c8>
 80177f0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80177f4:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 8017a34 <erff+0x2e0>
 80177f8:	eee7 6a25 	vfma.f32	s13, s14, s11
 80177fc:	eddf 5a8e 	vldr	s11, [pc, #568]	@ 8017a38 <erff+0x2e4>
 8017800:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017804:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8017a3c <erff+0x2e8>
 8017808:	eee5 6a87 	vfma.f32	s13, s11, s14
 801780c:	eddf 5a8c 	vldr	s11, [pc, #560]	@ 8017a40 <erff+0x2ec>
 8017810:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017814:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017818:	eee5 6a87 	vfma.f32	s13, s11, s14
 801781c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8017820:	e7cf      	b.n	80177c2 <erff+0x6e>
 8017822:	4b88      	ldr	r3, [pc, #544]	@ (8017a44 <erff+0x2f0>)
 8017824:	429d      	cmp	r5, r3
 8017826:	d844      	bhi.n	80178b2 <erff+0x15e>
 8017828:	f000 f96c 	bl	8017b04 <fabsf>
 801782c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017830:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017834:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8017a48 <erff+0x2f4>
 8017838:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8017a4c <erff+0x2f8>
 801783c:	ed9f 6a84 	vldr	s12, [pc, #528]	@ 8017a50 <erff+0x2fc>
 8017840:	eee0 6a07 	vfma.f32	s13, s0, s14
 8017844:	2c00      	cmp	r4, #0
 8017846:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8017a54 <erff+0x300>
 801784a:	eea6 7a80 	vfma.f32	s14, s13, s0
 801784e:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8017a58 <erff+0x304>
 8017852:	eee7 6a00 	vfma.f32	s13, s14, s0
 8017856:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8017a5c <erff+0x308>
 801785a:	eea6 7a80 	vfma.f32	s14, s13, s0
 801785e:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8017a60 <erff+0x30c>
 8017862:	eee7 6a00 	vfma.f32	s13, s14, s0
 8017866:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8017a64 <erff+0x310>
 801786a:	eea6 7a80 	vfma.f32	s14, s13, s0
 801786e:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8017a68 <erff+0x314>
 8017872:	eee0 6a06 	vfma.f32	s13, s0, s12
 8017876:	ed9f 6a7d 	vldr	s12, [pc, #500]	@ 8017a6c <erff+0x318>
 801787a:	eea6 6a80 	vfma.f32	s12, s13, s0
 801787e:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8017a70 <erff+0x31c>
 8017882:	eee6 6a00 	vfma.f32	s13, s12, s0
 8017886:	ed9f 6a7b 	vldr	s12, [pc, #492]	@ 8017a74 <erff+0x320>
 801788a:	eea6 6a80 	vfma.f32	s12, s13, s0
 801788e:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8017a78 <erff+0x324>
 8017892:	eee6 6a00 	vfma.f32	s13, s12, s0
 8017896:	eee6 7a80 	vfma.f32	s15, s13, s0
 801789a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801789e:	bfab      	itete	ge
 80178a0:	eddf 7a76 	vldrge	s15, [pc, #472]	@ 8017a7c <erff+0x328>
 80178a4:	eddf 7a76 	vldrlt	s15, [pc, #472]	@ 8017a80 <erff+0x32c>
 80178a8:	ee70 7a27 	vaddge.f32	s15, s0, s15
 80178ac:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 80178b0:	e76a      	b.n	8017788 <erff+0x34>
 80178b2:	4b74      	ldr	r3, [pc, #464]	@ (8017a84 <erff+0x330>)
 80178b4:	429d      	cmp	r5, r3
 80178b6:	d908      	bls.n	80178ca <erff+0x176>
 80178b8:	2c00      	cmp	r4, #0
 80178ba:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80178be:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80178c2:	bfb8      	it	lt
 80178c4:	eef0 7a40 	vmovlt.f32	s15, s0
 80178c8:	e75e      	b.n	8017788 <erff+0x34>
 80178ca:	f000 f91b 	bl	8017b04 <fabsf>
 80178ce:	4b6e      	ldr	r3, [pc, #440]	@ (8017a88 <erff+0x334>)
 80178d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80178d4:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 80178d8:	429d      	cmp	r5, r3
 80178da:	eec9 7a87 	vdiv.f32	s15, s19, s14
 80178de:	eeb0 8a40 	vmov.f32	s16, s0
 80178e2:	d864      	bhi.n	80179ae <erff+0x25a>
 80178e4:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8017a8c <erff+0x338>
 80178e8:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8017a90 <erff+0x33c>
 80178ec:	ed9f 9a69 	vldr	s18, [pc, #420]	@ 8017a94 <erff+0x340>
 80178f0:	eee7 6a87 	vfma.f32	s13, s15, s14
 80178f4:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8017a98 <erff+0x344>
 80178f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80178fc:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8017a9c <erff+0x348>
 8017900:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017904:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8017aa0 <erff+0x34c>
 8017908:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801790c:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8017aa4 <erff+0x350>
 8017910:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017914:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8017aa8 <erff+0x354>
 8017918:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801791c:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8017aac <erff+0x358>
 8017920:	eea7 9a27 	vfma.f32	s18, s14, s15
 8017924:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8017ab0 <erff+0x35c>
 8017928:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801792c:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8017ab4 <erff+0x360>
 8017930:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017934:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8017ab8 <erff+0x364>
 8017938:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801793c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8017abc <erff+0x368>
 8017940:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017944:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8017ac0 <erff+0x36c>
 8017948:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801794c:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8017ac4 <erff+0x370>
 8017950:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017954:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8017ac8 <erff+0x374>
 8017958:	ee18 3a10 	vmov	r3, s16
 801795c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017960:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8017964:	f023 030f 	bic.w	r3, r3, #15
 8017968:	ee08 3a90 	vmov	s17, r3
 801796c:	eef0 aa69 	vmov.f32	s21, s19
 8017970:	eebe 0a02 	vmov.f32	s0, #226	@ 0xbf100000 -0.5625000
 8017974:	eee7 aa27 	vfma.f32	s21, s14, s15
 8017978:	eea8 0ae8 	vfms.f32	s0, s17, s17
 801797c:	f001 f928 	bl	8018bd0 <__ieee754_expf>
 8017980:	eeb0 aa40 	vmov.f32	s20, s0
 8017984:	ee89 0a2a 	vdiv.f32	s0, s18, s21
 8017988:	ee78 7ac8 	vsub.f32	s15, s17, s16
 801798c:	ee78 8a28 	vadd.f32	s17, s16, s17
 8017990:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8017994:	f001 f91c 	bl	8018bd0 <__ieee754_expf>
 8017998:	ee2a aa00 	vmul.f32	s20, s20, s0
 801799c:	2c00      	cmp	r4, #0
 801799e:	eeca 7a08 	vdiv.f32	s15, s20, s16
 80179a2:	bfac      	ite	ge
 80179a4:	ee79 7ae7 	vsubge.f32	s15, s19, s15
 80179a8:	ee77 7ae9 	vsublt.f32	s15, s15, s19
 80179ac:	e6ec      	b.n	8017788 <erff+0x34>
 80179ae:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8017acc <erff+0x378>
 80179b2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8017ad0 <erff+0x37c>
 80179b6:	ed9f 9a47 	vldr	s18, [pc, #284]	@ 8017ad4 <erff+0x380>
 80179ba:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80179be:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8017ad8 <erff+0x384>
 80179c2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80179c6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8017adc <erff+0x388>
 80179ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80179ce:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8017ae0 <erff+0x38c>
 80179d2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80179d6:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8017ae4 <erff+0x390>
 80179da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80179de:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8017ae8 <erff+0x394>
 80179e2:	eea7 9a27 	vfma.f32	s18, s14, s15
 80179e6:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8017aec <erff+0x398>
 80179ea:	eee7 6a87 	vfma.f32	s13, s15, s14
 80179ee:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8017af0 <erff+0x39c>
 80179f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80179f6:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8017af4 <erff+0x3a0>
 80179fa:	eee7 6a27 	vfma.f32	s13, s14, s15
 80179fe:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8017af8 <erff+0x3a4>
 8017a02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017a06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8017afc <erff+0x3a8>
 8017a0a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017a0e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8017b00 <erff+0x3ac>
 8017a12:	e7a1      	b.n	8017958 <erff+0x204>
 8017a14:	3f57ffff 	.word	0x3f57ffff
 8017a18:	3f8375d4 	.word	0x3f8375d4
 8017a1c:	3e0375d4 	.word	0x3e0375d4
 8017a20:	b7c756b1 	.word	0xb7c756b1
 8017a24:	bbbd1489 	.word	0xbbbd1489
 8017a28:	b684e21a 	.word	0xb684e21a
 8017a2c:	bce9528f 	.word	0xbce9528f
 8017a30:	bea66beb 	.word	0xbea66beb
 8017a34:	390aee49 	.word	0x390aee49
 8017a38:	3ba68116 	.word	0x3ba68116
 8017a3c:	3d852a63 	.word	0x3d852a63
 8017a40:	3ecbbbce 	.word	0x3ecbbbce
 8017a44:	3f9fffff 	.word	0x3f9fffff
 8017a48:	bb0df9c0 	.word	0xbb0df9c0
 8017a4c:	3d1151b3 	.word	0x3d1151b3
 8017a50:	3c445aa3 	.word	0x3c445aa3
 8017a54:	bde31cc2 	.word	0xbde31cc2
 8017a58:	3ea2fe54 	.word	0x3ea2fe54
 8017a5c:	bebe9208 	.word	0xbebe9208
 8017a60:	3ed46805 	.word	0x3ed46805
 8017a64:	bb1acdc6 	.word	0xbb1acdc6
 8017a68:	3c5f6e13 	.word	0x3c5f6e13
 8017a6c:	3e013307 	.word	0x3e013307
 8017a70:	3d931ae7 	.word	0x3d931ae7
 8017a74:	3f0a5785 	.word	0x3f0a5785
 8017a78:	3dd9f331 	.word	0x3dd9f331
 8017a7c:	3f58560b 	.word	0x3f58560b
 8017a80:	bf58560b 	.word	0xbf58560b
 8017a84:	40bfffff 	.word	0x40bfffff
 8017a88:	4036db6d 	.word	0x4036db6d
 8017a8c:	c11d077e 	.word	0xc11d077e
 8017a90:	c2a2932b 	.word	0xc2a2932b
 8017a94:	bc21a093 	.word	0xbc21a093
 8017a98:	c3389ae7 	.word	0xc3389ae7
 8017a9c:	c322658c 	.word	0xc322658c
 8017aa0:	c2798057 	.word	0xc2798057
 8017aa4:	c128f022 	.word	0xc128f022
 8017aa8:	bf31a0b7 	.word	0xbf31a0b7
 8017aac:	bd777f97 	.word	0xbd777f97
 8017ab0:	40d23f7c 	.word	0x40d23f7c
 8017ab4:	42d9451f 	.word	0x42d9451f
 8017ab8:	43d6810b 	.word	0x43d6810b
 8017abc:	442158c9 	.word	0x442158c9
 8017ac0:	43d9486f 	.word	0x43d9486f
 8017ac4:	4309a863 	.word	0x4309a863
 8017ac8:	419d35ce 	.word	0x419d35ce
 8017acc:	c3f1c275 	.word	0xc3f1c275
 8017ad0:	c480230b 	.word	0xc480230b
 8017ad4:	bc21a092 	.word	0xbc21a092
 8017ad8:	c41f6441 	.word	0xc41f6441
 8017adc:	c320a2ea 	.word	0xc320a2ea
 8017ae0:	c18e104b 	.word	0xc18e104b
 8017ae4:	bf4c9dd4 	.word	0xbf4c9dd4
 8017ae8:	43ed43a7 	.word	0x43ed43a7
 8017aec:	c1b38712 	.word	0xc1b38712
 8017af0:	451f90ce 	.word	0x451f90ce
 8017af4:	4547fdbb 	.word	0x4547fdbb
 8017af8:	44c01759 	.word	0x44c01759
 8017afc:	43a2e571 	.word	0x43a2e571
 8017b00:	41f2b459 	.word	0x41f2b459

08017b04 <fabsf>:
 8017b04:	ee10 3a10 	vmov	r3, s0
 8017b08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017b0c:	ee00 3a10 	vmov	s0, r3
 8017b10:	4770      	bx	lr
	...

08017b14 <sinf>:
 8017b14:	ee10 3a10 	vmov	r3, s0
 8017b18:	b507      	push	{r0, r1, r2, lr}
 8017b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8017b98 <sinf+0x84>)
 8017b1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017b20:	4293      	cmp	r3, r2
 8017b22:	d807      	bhi.n	8017b34 <sinf+0x20>
 8017b24:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8017b9c <sinf+0x88>
 8017b28:	2000      	movs	r0, #0
 8017b2a:	b003      	add	sp, #12
 8017b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b30:	f000 bc4a 	b.w	80183c8 <__kernel_sinf>
 8017b34:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017b38:	d304      	bcc.n	8017b44 <sinf+0x30>
 8017b3a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017b3e:	b003      	add	sp, #12
 8017b40:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b44:	4668      	mov	r0, sp
 8017b46:	f001 fd55 	bl	80195f4 <__ieee754_rem_pio2f>
 8017b4a:	f000 0003 	and.w	r0, r0, #3
 8017b4e:	2801      	cmp	r0, #1
 8017b50:	d00a      	beq.n	8017b68 <sinf+0x54>
 8017b52:	2802      	cmp	r0, #2
 8017b54:	d00f      	beq.n	8017b76 <sinf+0x62>
 8017b56:	b9c0      	cbnz	r0, 8017b8a <sinf+0x76>
 8017b58:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b5c:	ed9d 0a00 	vldr	s0, [sp]
 8017b60:	2001      	movs	r0, #1
 8017b62:	f000 fc31 	bl	80183c8 <__kernel_sinf>
 8017b66:	e7ea      	b.n	8017b3e <sinf+0x2a>
 8017b68:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b6c:	ed9d 0a00 	vldr	s0, [sp]
 8017b70:	f000 fbd2 	bl	8018318 <__kernel_cosf>
 8017b74:	e7e3      	b.n	8017b3e <sinf+0x2a>
 8017b76:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b7a:	ed9d 0a00 	vldr	s0, [sp]
 8017b7e:	2001      	movs	r0, #1
 8017b80:	f000 fc22 	bl	80183c8 <__kernel_sinf>
 8017b84:	eeb1 0a40 	vneg.f32	s0, s0
 8017b88:	e7d9      	b.n	8017b3e <sinf+0x2a>
 8017b8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b8e:	ed9d 0a00 	vldr	s0, [sp]
 8017b92:	f000 fbc1 	bl	8018318 <__kernel_cosf>
 8017b96:	e7f5      	b.n	8017b84 <sinf+0x70>
 8017b98:	3f490fd8 	.word	0x3f490fd8
 8017b9c:	00000000 	.word	0x00000000

08017ba0 <tanf>:
 8017ba0:	ee10 3a10 	vmov	r3, s0
 8017ba4:	b507      	push	{r0, r1, r2, lr}
 8017ba6:	4a12      	ldr	r2, [pc, #72]	@ (8017bf0 <tanf+0x50>)
 8017ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017bac:	4293      	cmp	r3, r2
 8017bae:	d807      	bhi.n	8017bc0 <tanf+0x20>
 8017bb0:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8017bf4 <tanf+0x54>
 8017bb4:	2001      	movs	r0, #1
 8017bb6:	b003      	add	sp, #12
 8017bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017bbc:	f000 bc4c 	b.w	8018458 <__kernel_tanf>
 8017bc0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017bc4:	d304      	bcc.n	8017bd0 <tanf+0x30>
 8017bc6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017bca:	b003      	add	sp, #12
 8017bcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8017bd0:	4668      	mov	r0, sp
 8017bd2:	f001 fd0f 	bl	80195f4 <__ieee754_rem_pio2f>
 8017bd6:	0040      	lsls	r0, r0, #1
 8017bd8:	f000 0002 	and.w	r0, r0, #2
 8017bdc:	eddd 0a01 	vldr	s1, [sp, #4]
 8017be0:	ed9d 0a00 	vldr	s0, [sp]
 8017be4:	f1c0 0001 	rsb	r0, r0, #1
 8017be8:	f000 fc36 	bl	8018458 <__kernel_tanf>
 8017bec:	e7ed      	b.n	8017bca <tanf+0x2a>
 8017bee:	bf00      	nop
 8017bf0:	3f490fda 	.word	0x3f490fda
 8017bf4:	00000000 	.word	0x00000000

08017bf8 <tanhf>:
 8017bf8:	b538      	push	{r3, r4, r5, lr}
 8017bfa:	ee10 5a10 	vmov	r5, s0
 8017bfe:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8017c02:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017c06:	ed2d 8b02 	vpush	{d8}
 8017c0a:	eef0 7a40 	vmov.f32	s15, s0
 8017c0e:	d30f      	bcc.n	8017c30 <tanhf+0x38>
 8017c10:	4b2a      	ldr	r3, [pc, #168]	@ (8017cbc <tanhf+0xc4>)
 8017c12:	edd3 6a00 	vldr	s13, [r3]
 8017c16:	ed93 7a00 	vldr	s14, [r3]
 8017c1a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8017c1e:	2d00      	cmp	r5, #0
 8017c20:	bfac      	ite	ge
 8017c22:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8017c26:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8017c2a:	ecbd 8b02 	vpop	{d8}
 8017c2e:	bd38      	pop	{r3, r4, r5, pc}
 8017c30:	4a23      	ldr	r2, [pc, #140]	@ (8017cc0 <tanhf+0xc8>)
 8017c32:	4293      	cmp	r3, r2
 8017c34:	d839      	bhi.n	8017caa <tanhf+0xb2>
 8017c36:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 8017c3a:	d207      	bcs.n	8017c4c <tanhf+0x54>
 8017c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8017cbc <tanhf+0xc4>)
 8017c3e:	ed93 0a00 	vldr	s0, [r3]
 8017c42:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017c46:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017c4a:	e7ee      	b.n	8017c2a <tanhf+0x32>
 8017c4c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8017c50:	4c1c      	ldr	r4, [pc, #112]	@ (8017cc4 <tanhf+0xcc>)
 8017c52:	d319      	bcc.n	8017c88 <tanhf+0x90>
 8017c54:	f7ff ff56 	bl	8017b04 <fabsf>
 8017c58:	edd4 7a00 	vldr	s15, [r4]
 8017c5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017c60:	f000 f83e 	bl	8017ce0 <expm1f>
 8017c64:	4b15      	ldr	r3, [pc, #84]	@ (8017cbc <tanhf+0xc4>)
 8017c66:	edd3 7a00 	vldr	s15, [r3]
 8017c6a:	ed94 6a00 	vldr	s12, [r4]
 8017c6e:	ed94 7a00 	vldr	s14, [r4]
 8017c72:	ee37 7a00 	vadd.f32	s14, s14, s0
 8017c76:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8017c7a:	ee37 0ae6 	vsub.f32	s0, s15, s13
 8017c7e:	2d00      	cmp	r5, #0
 8017c80:	bfb8      	it	lt
 8017c82:	eeb1 0a40 	vneglt.f32	s0, s0
 8017c86:	e7d0      	b.n	8017c2a <tanhf+0x32>
 8017c88:	ed94 8a00 	vldr	s16, [r4]
 8017c8c:	f7ff ff3a 	bl	8017b04 <fabsf>
 8017c90:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8017c94:	f000 f824 	bl	8017ce0 <expm1f>
 8017c98:	edd4 7a00 	vldr	s15, [r4]
 8017c9c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8017ca0:	eeb1 7a40 	vneg.f32	s14, s0
 8017ca4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8017ca8:	e7e9      	b.n	8017c7e <tanhf+0x86>
 8017caa:	4b04      	ldr	r3, [pc, #16]	@ (8017cbc <tanhf+0xc4>)
 8017cac:	ed93 0a00 	vldr	s0, [r3]
 8017cb0:	4b05      	ldr	r3, [pc, #20]	@ (8017cc8 <tanhf+0xd0>)
 8017cb2:	edd3 7a00 	vldr	s15, [r3]
 8017cb6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017cba:	e7e0      	b.n	8017c7e <tanhf+0x86>
 8017cbc:	20000adc 	.word	0x20000adc
 8017cc0:	41afffff 	.word	0x41afffff
 8017cc4:	20000ad8 	.word	0x20000ad8
 8017cc8:	20000ad4 	.word	0x20000ad4

08017ccc <finitef>:
 8017ccc:	ee10 3a10 	vmov	r3, s0
 8017cd0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8017cd4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8017cd8:	bfac      	ite	ge
 8017cda:	2000      	movge	r0, #0
 8017cdc:	2001      	movlt	r0, #1
 8017cde:	4770      	bx	lr

08017ce0 <expm1f>:
 8017ce0:	ee10 3a10 	vmov	r3, s0
 8017ce4:	4a83      	ldr	r2, [pc, #524]	@ (8017ef4 <expm1f+0x214>)
 8017ce6:	f003 4000 	and.w	r0, r3, #2147483648	@ 0x80000000
 8017cea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017cee:	4293      	cmp	r3, r2
 8017cf0:	d91f      	bls.n	8017d32 <expm1f+0x52>
 8017cf2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017cf6:	d902      	bls.n	8017cfe <expm1f+0x1e>
 8017cf8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017cfc:	4770      	bx	lr
 8017cfe:	d106      	bne.n	8017d0e <expm1f+0x2e>
 8017d00:	2800      	cmp	r0, #0
 8017d02:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8017d06:	bf18      	it	ne
 8017d08:	eeb0 0a67 	vmovne.f32	s0, s15
 8017d0c:	4770      	bx	lr
 8017d0e:	b920      	cbnz	r0, 8017d1a <expm1f+0x3a>
 8017d10:	4a79      	ldr	r2, [pc, #484]	@ (8017ef8 <expm1f+0x218>)
 8017d12:	4293      	cmp	r3, r2
 8017d14:	d963      	bls.n	8017dde <expm1f+0xfe>
 8017d16:	f000 ba2b 	b.w	8018170 <__math_oflowf>
 8017d1a:	eddf 7a78 	vldr	s15, [pc, #480]	@ 8017efc <expm1f+0x21c>
 8017d1e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017d22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d2a:	d551      	bpl.n	8017dd0 <expm1f+0xf0>
 8017d2c:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8017d30:	4770      	bx	lr
 8017d32:	4a73      	ldr	r2, [pc, #460]	@ (8017f00 <expm1f+0x220>)
 8017d34:	4293      	cmp	r3, r2
 8017d36:	d972      	bls.n	8017e1e <expm1f+0x13e>
 8017d38:	4a72      	ldr	r2, [pc, #456]	@ (8017f04 <expm1f+0x224>)
 8017d3a:	4293      	cmp	r3, r2
 8017d3c:	d868      	bhi.n	8017e10 <expm1f+0x130>
 8017d3e:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8017f08 <expm1f+0x228>
 8017d42:	2800      	cmp	r0, #0
 8017d44:	d13d      	bne.n	8017dc2 <expm1f+0xe2>
 8017d46:	ee30 7a47 	vsub.f32	s14, s0, s14
 8017d4a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8017f0c <expm1f+0x22c>
 8017d4e:	2301      	movs	r3, #1
 8017d50:	ee37 0a66 	vsub.f32	s0, s14, s13
 8017d54:	ee77 7a40 	vsub.f32	s15, s14, s0
 8017d58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017d5c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8017d60:	ee20 4a25 	vmul.f32	s8, s0, s11
 8017d64:	ed9f 6a6a 	vldr	s12, [pc, #424]	@ 8017f10 <expm1f+0x230>
 8017d68:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8017f14 <expm1f+0x234>
 8017d6c:	ed9f 5a6a 	vldr	s10, [pc, #424]	@ 8017f18 <expm1f+0x238>
 8017d70:	ee20 7a04 	vmul.f32	s14, s0, s8
 8017d74:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
 8017d78:	eee7 6a06 	vfma.f32	s13, s14, s12
 8017d7c:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 8017f1c <expm1f+0x23c>
 8017d80:	eea6 6a87 	vfma.f32	s12, s13, s14
 8017d84:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8017f20 <expm1f+0x240>
 8017d88:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017d8c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8017d90:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017d94:	eef0 6a46 	vmov.f32	s13, s12
 8017d98:	eee5 6a07 	vfma.f32	s13, s10, s14
 8017d9c:	eee4 4a66 	vfms.f32	s9, s8, s13
 8017da0:	eeb1 4a08 	vmov.f32	s8, #24	@ 0x40c00000  6.0
 8017da4:	eea0 4a64 	vfms.f32	s8, s0, s9
 8017da8:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8017dac:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8017db0:	ee66 6a87 	vmul.f32	s13, s13, s14
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d140      	bne.n	8017e3a <expm1f+0x15a>
 8017db8:	ee90 7a26 	vfnms.f32	s14, s0, s13
 8017dbc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017dc0:	4770      	bx	lr
 8017dc2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8017dc6:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8017f24 <expm1f+0x244>
 8017dca:	f04f 33ff 	mov.w	r3, #4294967295
 8017dce:	e7bf      	b.n	8017d50 <expm1f+0x70>
 8017dd0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8017f28 <expm1f+0x248>
 8017dd4:	ee20 7a07 	vmul.f32	s14, s0, s14
 8017dd8:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 8017ddc:	e005      	b.n	8017dea <expm1f+0x10a>
 8017dde:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8017f28 <expm1f+0x248>
 8017de2:	ee20 7a07 	vmul.f32	s14, s0, s14
 8017de6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017dea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017dee:	eeb0 7a40 	vmov.f32	s14, s0
 8017df2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017df6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017dfa:	ee17 3a90 	vmov	r3, s15
 8017dfe:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8017f08 <expm1f+0x228>
 8017e02:	eea6 7ae7 	vfms.f32	s14, s13, s15
 8017e06:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8017f0c <expm1f+0x22c>
 8017e0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017e0e:	e79f      	b.n	8017d50 <expm1f+0x70>
 8017e10:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8017f28 <expm1f+0x248>
 8017e14:	ee20 7a07 	vmul.f32	s14, s0, s14
 8017e18:	2800      	cmp	r0, #0
 8017e1a:	d0e4      	beq.n	8017de6 <expm1f+0x106>
 8017e1c:	e7dc      	b.n	8017dd8 <expm1f+0xf8>
 8017e1e:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 8017e22:	d208      	bcs.n	8017e36 <expm1f+0x156>
 8017e24:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8017f2c <expm1f+0x24c>
 8017e28:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017e2c:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8017e30:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017e34:	4770      	bx	lr
 8017e36:	2300      	movs	r3, #0
 8017e38:	e790      	b.n	8017d5c <expm1f+0x7c>
 8017e3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8017e3e:	1c5a      	adds	r2, r3, #1
 8017e40:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8017e44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017e48:	d106      	bne.n	8017e58 <expm1f+0x178>
 8017e4a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017e4e:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 8017e52:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8017e56:	4770      	bx	lr
 8017e58:	2b01      	cmp	r3, #1
 8017e5a:	d118      	bne.n	8017e8e <expm1f+0x1ae>
 8017e5c:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 8017e60:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e68:	bf5b      	ittet	pl
 8017e6a:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8017e6e:	eeb0 7a00 	vmovpl.f32	s14, #0	@ 0x40000000  2.0
 8017e72:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8017e76:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8017e7a:	bf43      	ittte	mi
 8017e7c:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 8017e80:	eeb8 0a00 	vmovmi.f32	s0, #128	@ 0xc0000000 -2.0
 8017e84:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8017e88:	eeb0 0a46 	vmovpl.f32	s0, s12
 8017e8c:	4770      	bx	lr
 8017e8e:	1c5a      	adds	r2, r3, #1
 8017e90:	2a39      	cmp	r2, #57	@ 0x39
 8017e92:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8017e96:	d90b      	bls.n	8017eb0 <expm1f+0x1d0>
 8017e98:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8017e9c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8017ea0:	ee17 3a90 	vmov	r3, s15
 8017ea4:	4419      	add	r1, r3
 8017ea6:	ee07 1a90 	vmov	s15, r1
 8017eaa:	ee37 0ac6 	vsub.f32	s0, s15, s12
 8017eae:	4770      	bx	lr
 8017eb0:	2b16      	cmp	r3, #22
 8017eb2:	dc11      	bgt.n	8017ed8 <expm1f+0x1f8>
 8017eb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8017eb8:	fa42 f303 	asr.w	r3, r2, r3
 8017ebc:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 8017ec0:	ee07 3a10 	vmov	s14, r3
 8017ec4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8017ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017ecc:	ee17 3a90 	vmov	r3, s15
 8017ed0:	440b      	add	r3, r1
 8017ed2:	ee00 3a10 	vmov	s0, r3
 8017ed6:	4770      	bx	lr
 8017ed8:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8017edc:	05db      	lsls	r3, r3, #23
 8017ede:	ee07 3a10 	vmov	s14, r3
 8017ee2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017ee6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017eea:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017eee:	ee17 3a90 	vmov	r3, s15
 8017ef2:	e7ed      	b.n	8017ed0 <expm1f+0x1f0>
 8017ef4:	4195b843 	.word	0x4195b843
 8017ef8:	42b17217 	.word	0x42b17217
 8017efc:	0da24260 	.word	0x0da24260
 8017f00:	3eb17218 	.word	0x3eb17218
 8017f04:	3f851591 	.word	0x3f851591
 8017f08:	3f317180 	.word	0x3f317180
 8017f0c:	3717f7d1 	.word	0x3717f7d1
 8017f10:	b457edbb 	.word	0xb457edbb
 8017f14:	36867e54 	.word	0x36867e54
 8017f18:	bd088889 	.word	0xbd088889
 8017f1c:	b8a670cd 	.word	0xb8a670cd
 8017f20:	3ad00d01 	.word	0x3ad00d01
 8017f24:	b717f7d1 	.word	0xb717f7d1
 8017f28:	3fb8aa3b 	.word	0x3fb8aa3b
 8017f2c:	7149f2ca 	.word	0x7149f2ca

08017f30 <log1pf>:
 8017f30:	ee10 2a10 	vmov	r2, s0
 8017f34:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8017f38:	eef0 7a40 	vmov.f32	s15, s0
 8017f3c:	db04      	blt.n	8017f48 <log1pf+0x18>
 8017f3e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8017f42:	eeb0 0a67 	vmov.f32	s0, s15
 8017f46:	4770      	bx	lr
 8017f48:	4b6b      	ldr	r3, [pc, #428]	@ (80180f8 <log1pf+0x1c8>)
 8017f4a:	429a      	cmp	r2, r3
 8017f4c:	dc70      	bgt.n	8018030 <log1pf+0x100>
 8017f4e:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8017f52:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8017f56:	d30b      	bcc.n	8017f70 <log1pf+0x40>
 8017f58:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017f5c:	eeb4 0a47 	vcmp.f32	s0, s14
 8017f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f64:	d102      	bne.n	8017f6c <log1pf+0x3c>
 8017f66:	2001      	movs	r0, #1
 8017f68:	f000 b908 	b.w	801817c <__math_divzerof>
 8017f6c:	f000 b918 	b.w	80181a0 <__math_invalidf>
 8017f70:	f1b3 5f44 	cmp.w	r3, #822083584	@ 0x31000000
 8017f74:	d212      	bcs.n	8017f9c <log1pf+0x6c>
 8017f76:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80180fc <log1pf+0x1cc>
 8017f7a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8017f7e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f86:	dd02      	ble.n	8017f8e <log1pf+0x5e>
 8017f88:	f1b3 5f12 	cmp.w	r3, #612368384	@ 0x24800000
 8017f8c:	d3d9      	bcc.n	8017f42 <log1pf+0x12>
 8017f8e:	ee67 6ae7 	vnmul.f32	s13, s15, s15
 8017f92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8017f96:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017f9a:	e7d2      	b.n	8017f42 <log1pf+0x12>
 8017f9c:	4b58      	ldr	r3, [pc, #352]	@ (8018100 <log1pf+0x1d0>)
 8017f9e:	441a      	add	r2, r3
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	d84d      	bhi.n	8018040 <log1pf+0x110>
 8017fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017fa8:	ee77 6a87 	vadd.f32	s13, s15, s14
 8017fac:	ee16 2a90 	vmov	r2, s13
 8017fb0:	15d3      	asrs	r3, r2, #23
 8017fb2:	3b7f      	subs	r3, #127	@ 0x7f
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	bfd5      	itete	le
 8017fb8:	ee36 7ac7 	vsuble.f32	s14, s13, s14
 8017fbc:	ee76 7ae7 	vsubgt.f32	s15, s13, s15
 8017fc0:	ee37 7ac7 	vsuble.f32	s14, s15, s14
 8017fc4:	ee37 7a67 	vsubgt.f32	s14, s14, s15
 8017fc8:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8017fcc:	494d      	ldr	r1, [pc, #308]	@ (8018104 <log1pf+0x1d4>)
 8017fce:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8017fd2:	428a      	cmp	r2, r1
 8017fd4:	bfc9      	itett	gt
 8017fd6:	f042 517c 	orrgt.w	r1, r2, #1056964608	@ 0x3f000000
 8017fda:	f042 517e 	orrle.w	r1, r2, #1065353216	@ 0x3f800000
 8017fde:	f5c2 0200 	rsbgt	r2, r2, #8388608	@ 0x800000
 8017fe2:	3301      	addgt	r3, #1
 8017fe4:	bfc8      	it	gt
 8017fe6:	1092      	asrgt	r2, r2, #2
 8017fe8:	ee07 1a10 	vmov	s14, r1
 8017fec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017ff4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8017ff8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017ffc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8018000:	2a00      	cmp	r2, #0
 8018002:	d13f      	bne.n	8018084 <log1pf+0x154>
 8018004:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801800c:	d11b      	bne.n	8018046 <log1pf+0x116>
 801800e:	2b00      	cmp	r3, #0
 8018010:	d06f      	beq.n	80180f2 <log1pf+0x1c2>
 8018012:	ee07 3a90 	vmov	s15, r3
 8018016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801801a:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8018108 <log1pf+0x1d8>
 801801e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801810c <log1pf+0x1dc>
 8018022:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018026:	eef0 7a46 	vmov.f32	s15, s12
 801802a:	eee7 7a26 	vfma.f32	s15, s14, s13
 801802e:	e788      	b.n	8017f42 <log1pf+0x12>
 8018030:	f1b2 4fb4 	cmp.w	r2, #1509949440	@ 0x5a000000
 8018034:	dbb6      	blt.n	8017fa4 <log1pf+0x74>
 8018036:	15d3      	asrs	r3, r2, #23
 8018038:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8018110 <log1pf+0x1e0>
 801803c:	3b7f      	subs	r3, #127	@ 0x7f
 801803e:	e7c5      	b.n	8017fcc <log1pf+0x9c>
 8018040:	2201      	movs	r2, #1
 8018042:	2300      	movs	r3, #0
 8018044:	e7d6      	b.n	8017ff4 <log1pf+0xc4>
 8018046:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8018114 <log1pf+0x1e4>
 801804a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801804e:	eea7 7ae5 	vfms.f32	s14, s15, s11
 8018052:	ee67 6a26 	vmul.f32	s13, s14, s13
 8018056:	b913      	cbnz	r3, 801805e <log1pf+0x12e>
 8018058:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801805c:	e771      	b.n	8017f42 <log1pf+0x12>
 801805e:	ee07 3a10 	vmov	s14, r3
 8018062:	eddf 5a29 	vldr	s11, [pc, #164]	@ 8018108 <log1pf+0x1d8>
 8018066:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801806a:	eea7 6a25 	vfma.f32	s12, s14, s11
 801806e:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8018072:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 801810c <log1pf+0x1dc>
 8018076:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801807a:	eef0 7a66 	vmov.f32	s15, s13
 801807e:	eed7 7a06 	vfnms.f32	s15, s14, s12
 8018082:	e75e      	b.n	8017f42 <log1pf+0x12>
 8018084:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8018088:	ee37 7a87 	vadd.f32	s14, s15, s14
 801808c:	ed9f 5a22 	vldr	s10, [pc, #136]	@ 8018118 <log1pf+0x1e8>
 8018090:	eddf 4a22 	vldr	s9, [pc, #136]	@ 801811c <log1pf+0x1ec>
 8018094:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8018098:	ee25 7aa5 	vmul.f32	s14, s11, s11
 801809c:	eee7 4a05 	vfma.f32	s9, s14, s10
 80180a0:	ed9f 5a1f 	vldr	s10, [pc, #124]	@ 8018120 <log1pf+0x1f0>
 80180a4:	eea4 5a87 	vfma.f32	s10, s9, s14
 80180a8:	eddf 4a1e 	vldr	s9, [pc, #120]	@ 8018124 <log1pf+0x1f4>
 80180ac:	eee5 4a07 	vfma.f32	s9, s10, s14
 80180b0:	ed9f 5a1d 	vldr	s10, [pc, #116]	@ 8018128 <log1pf+0x1f8>
 80180b4:	eea4 5a87 	vfma.f32	s10, s9, s14
 80180b8:	eddf 4a1c 	vldr	s9, [pc, #112]	@ 801812c <log1pf+0x1fc>
 80180bc:	eee5 4a07 	vfma.f32	s9, s10, s14
 80180c0:	ed9f 5a14 	vldr	s10, [pc, #80]	@ 8018114 <log1pf+0x1e4>
 80180c4:	eea4 5a87 	vfma.f32	s10, s9, s14
 80180c8:	eef0 4a66 	vmov.f32	s9, s13
 80180cc:	eee5 4a07 	vfma.f32	s9, s10, s14
 80180d0:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80180d4:	b913      	cbnz	r3, 80180dc <log1pf+0x1ac>
 80180d6:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80180da:	e7bd      	b.n	8018058 <log1pf+0x128>
 80180dc:	ee07 3a10 	vmov	s14, r3
 80180e0:	ed9f 5a09 	vldr	s10, [pc, #36]	@ 8018108 <log1pf+0x1d8>
 80180e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80180e8:	eea7 6a05 	vfma.f32	s12, s14, s10
 80180ec:	ee36 6a25 	vadd.f32	s12, s12, s11
 80180f0:	e7bd      	b.n	801806e <log1pf+0x13e>
 80180f2:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8018110 <log1pf+0x1e0>
 80180f6:	e724      	b.n	8017f42 <log1pf+0x12>
 80180f8:	3ed413d6 	.word	0x3ed413d6
 80180fc:	4c000000 	.word	0x4c000000
 8018100:	416a09e0 	.word	0x416a09e0
 8018104:	003504f6 	.word	0x003504f6
 8018108:	3717f7d1 	.word	0x3717f7d1
 801810c:	3f317180 	.word	0x3f317180
 8018110:	00000000 	.word	0x00000000
 8018114:	3f2aaaab 	.word	0x3f2aaaab
 8018118:	3e178897 	.word	0x3e178897
 801811c:	3e1cd04f 	.word	0x3e1cd04f
 8018120:	3e3a3325 	.word	0x3e3a3325
 8018124:	3e638e29 	.word	0x3e638e29
 8018128:	3e924925 	.word	0x3e924925
 801812c:	3ecccccd 	.word	0x3ecccccd

08018130 <with_errnof>:
 8018130:	b510      	push	{r4, lr}
 8018132:	ed2d 8b02 	vpush	{d8}
 8018136:	eeb0 8a40 	vmov.f32	s16, s0
 801813a:	4604      	mov	r4, r0
 801813c:	f7fc fc48 	bl	80149d0 <__errno>
 8018140:	eeb0 0a48 	vmov.f32	s0, s16
 8018144:	ecbd 8b02 	vpop	{d8}
 8018148:	6004      	str	r4, [r0, #0]
 801814a:	bd10      	pop	{r4, pc}

0801814c <xflowf>:
 801814c:	b130      	cbz	r0, 801815c <xflowf+0x10>
 801814e:	eef1 7a40 	vneg.f32	s15, s0
 8018152:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018156:	2022      	movs	r0, #34	@ 0x22
 8018158:	f7ff bfea 	b.w	8018130 <with_errnof>
 801815c:	eef0 7a40 	vmov.f32	s15, s0
 8018160:	e7f7      	b.n	8018152 <xflowf+0x6>
	...

08018164 <__math_uflowf>:
 8018164:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801816c <__math_uflowf+0x8>
 8018168:	f7ff bff0 	b.w	801814c <xflowf>
 801816c:	10000000 	.word	0x10000000

08018170 <__math_oflowf>:
 8018170:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018178 <__math_oflowf+0x8>
 8018174:	f7ff bfea 	b.w	801814c <xflowf>
 8018178:	70000000 	.word	0x70000000

0801817c <__math_divzerof>:
 801817c:	2800      	cmp	r0, #0
 801817e:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 801819c <__math_divzerof+0x20>
 8018182:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018186:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801818a:	bf18      	it	ne
 801818c:	eef0 7a47 	vmovne.f32	s15, s14
 8018190:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8018194:	2022      	movs	r0, #34	@ 0x22
 8018196:	f7ff bfcb 	b.w	8018130 <with_errnof>
 801819a:	bf00      	nop
 801819c:	00000000 	.word	0x00000000

080181a0 <__math_invalidf>:
 80181a0:	eef0 7a40 	vmov.f32	s15, s0
 80181a4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80181a8:	eef4 7a67 	vcmp.f32	s15, s15
 80181ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181b0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80181b4:	d602      	bvs.n	80181bc <__math_invalidf+0x1c>
 80181b6:	2021      	movs	r0, #33	@ 0x21
 80181b8:	f7ff bfba 	b.w	8018130 <with_errnof>
 80181bc:	4770      	bx	lr

080181be <__ieee754_sqrtf>:
 80181be:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80181c2:	4770      	bx	lr

080181c4 <ceilf>:
 80181c4:	ee10 3a10 	vmov	r3, s0
 80181c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80181cc:	3a7f      	subs	r2, #127	@ 0x7f
 80181ce:	2a16      	cmp	r2, #22
 80181d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80181d4:	dc2a      	bgt.n	801822c <ceilf+0x68>
 80181d6:	2a00      	cmp	r2, #0
 80181d8:	da11      	bge.n	80181fe <ceilf+0x3a>
 80181da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018240 <ceilf+0x7c>
 80181de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80181e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80181e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181ea:	dd05      	ble.n	80181f8 <ceilf+0x34>
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	db23      	blt.n	8018238 <ceilf+0x74>
 80181f0:	2900      	cmp	r1, #0
 80181f2:	bf18      	it	ne
 80181f4:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 80181f8:	ee00 3a10 	vmov	s0, r3
 80181fc:	4770      	bx	lr
 80181fe:	4911      	ldr	r1, [pc, #68]	@ (8018244 <ceilf+0x80>)
 8018200:	4111      	asrs	r1, r2
 8018202:	420b      	tst	r3, r1
 8018204:	d0fa      	beq.n	80181fc <ceilf+0x38>
 8018206:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8018240 <ceilf+0x7c>
 801820a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801820e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018216:	ddef      	ble.n	80181f8 <ceilf+0x34>
 8018218:	2b00      	cmp	r3, #0
 801821a:	bfc2      	ittt	gt
 801821c:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 8018220:	fa40 f202 	asrgt.w	r2, r0, r2
 8018224:	189b      	addgt	r3, r3, r2
 8018226:	ea23 0301 	bic.w	r3, r3, r1
 801822a:	e7e5      	b.n	80181f8 <ceilf+0x34>
 801822c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8018230:	d3e4      	bcc.n	80181fc <ceilf+0x38>
 8018232:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018236:	4770      	bx	lr
 8018238:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801823c:	e7dc      	b.n	80181f8 <ceilf+0x34>
 801823e:	bf00      	nop
 8018240:	7149f2ca 	.word	0x7149f2ca
 8018244:	007fffff 	.word	0x007fffff

08018248 <floorf>:
 8018248:	ee10 3a10 	vmov	r3, s0
 801824c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018250:	3a7f      	subs	r2, #127	@ 0x7f
 8018252:	2a16      	cmp	r2, #22
 8018254:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8018258:	dc2b      	bgt.n	80182b2 <floorf+0x6a>
 801825a:	2a00      	cmp	r2, #0
 801825c:	da12      	bge.n	8018284 <floorf+0x3c>
 801825e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80182c4 <floorf+0x7c>
 8018262:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018266:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801826a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801826e:	dd06      	ble.n	801827e <floorf+0x36>
 8018270:	2b00      	cmp	r3, #0
 8018272:	da24      	bge.n	80182be <floorf+0x76>
 8018274:	2900      	cmp	r1, #0
 8018276:	4b14      	ldr	r3, [pc, #80]	@ (80182c8 <floorf+0x80>)
 8018278:	bf08      	it	eq
 801827a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801827e:	ee00 3a10 	vmov	s0, r3
 8018282:	4770      	bx	lr
 8018284:	4911      	ldr	r1, [pc, #68]	@ (80182cc <floorf+0x84>)
 8018286:	4111      	asrs	r1, r2
 8018288:	420b      	tst	r3, r1
 801828a:	d0fa      	beq.n	8018282 <floorf+0x3a>
 801828c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80182c4 <floorf+0x7c>
 8018290:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018294:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801829c:	ddef      	ble.n	801827e <floorf+0x36>
 801829e:	2b00      	cmp	r3, #0
 80182a0:	bfbe      	ittt	lt
 80182a2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80182a6:	fa40 f202 	asrlt.w	r2, r0, r2
 80182aa:	189b      	addlt	r3, r3, r2
 80182ac:	ea23 0301 	bic.w	r3, r3, r1
 80182b0:	e7e5      	b.n	801827e <floorf+0x36>
 80182b2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80182b6:	d3e4      	bcc.n	8018282 <floorf+0x3a>
 80182b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80182bc:	4770      	bx	lr
 80182be:	2300      	movs	r3, #0
 80182c0:	e7dd      	b.n	801827e <floorf+0x36>
 80182c2:	bf00      	nop
 80182c4:	7149f2ca 	.word	0x7149f2ca
 80182c8:	bf800000 	.word	0xbf800000
 80182cc:	007fffff 	.word	0x007fffff

080182d0 <roundf>:
 80182d0:	ee10 0a10 	vmov	r0, s0
 80182d4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80182d8:	3a7f      	subs	r2, #127	@ 0x7f
 80182da:	2a16      	cmp	r2, #22
 80182dc:	dc15      	bgt.n	801830a <roundf+0x3a>
 80182de:	2a00      	cmp	r2, #0
 80182e0:	da08      	bge.n	80182f4 <roundf+0x24>
 80182e2:	3201      	adds	r2, #1
 80182e4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80182e8:	d101      	bne.n	80182ee <roundf+0x1e>
 80182ea:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 80182ee:	ee00 3a10 	vmov	s0, r3
 80182f2:	4770      	bx	lr
 80182f4:	4907      	ldr	r1, [pc, #28]	@ (8018314 <roundf+0x44>)
 80182f6:	4111      	asrs	r1, r2
 80182f8:	4201      	tst	r1, r0
 80182fa:	d0fa      	beq.n	80182f2 <roundf+0x22>
 80182fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8018300:	4113      	asrs	r3, r2
 8018302:	4403      	add	r3, r0
 8018304:	ea23 0301 	bic.w	r3, r3, r1
 8018308:	e7f1      	b.n	80182ee <roundf+0x1e>
 801830a:	2a80      	cmp	r2, #128	@ 0x80
 801830c:	d1f1      	bne.n	80182f2 <roundf+0x22>
 801830e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018312:	4770      	bx	lr
 8018314:	007fffff 	.word	0x007fffff

08018318 <__kernel_cosf>:
 8018318:	ee10 3a10 	vmov	r3, s0
 801831c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018320:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8018324:	eef0 6a40 	vmov.f32	s13, s0
 8018328:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801832c:	d204      	bcs.n	8018338 <__kernel_cosf+0x20>
 801832e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8018332:	ee17 2a90 	vmov	r2, s15
 8018336:	b342      	cbz	r2, 801838a <__kernel_cosf+0x72>
 8018338:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801833c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80183a8 <__kernel_cosf+0x90>
 8018340:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80183ac <__kernel_cosf+0x94>
 8018344:	4a1a      	ldr	r2, [pc, #104]	@ (80183b0 <__kernel_cosf+0x98>)
 8018346:	eea7 6a27 	vfma.f32	s12, s14, s15
 801834a:	4293      	cmp	r3, r2
 801834c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80183b4 <__kernel_cosf+0x9c>
 8018350:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018354:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80183b8 <__kernel_cosf+0xa0>
 8018358:	eea7 6a87 	vfma.f32	s12, s15, s14
 801835c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80183bc <__kernel_cosf+0xa4>
 8018360:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018364:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80183c0 <__kernel_cosf+0xa8>
 8018368:	eea7 6a87 	vfma.f32	s12, s15, s14
 801836c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8018370:	ee26 6a07 	vmul.f32	s12, s12, s14
 8018374:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018378:	eee7 0a06 	vfma.f32	s1, s14, s12
 801837c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018380:	d804      	bhi.n	801838c <__kernel_cosf+0x74>
 8018382:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018386:	ee30 0a67 	vsub.f32	s0, s0, s15
 801838a:	4770      	bx	lr
 801838c:	4a0d      	ldr	r2, [pc, #52]	@ (80183c4 <__kernel_cosf+0xac>)
 801838e:	4293      	cmp	r3, r2
 8018390:	bf9a      	itte	ls
 8018392:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8018396:	ee07 3a10 	vmovls	s14, r3
 801839a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801839e:	ee30 0a47 	vsub.f32	s0, s0, s14
 80183a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80183a6:	e7ec      	b.n	8018382 <__kernel_cosf+0x6a>
 80183a8:	ad47d74e 	.word	0xad47d74e
 80183ac:	310f74f6 	.word	0x310f74f6
 80183b0:	3e999999 	.word	0x3e999999
 80183b4:	b493f27c 	.word	0xb493f27c
 80183b8:	37d00d01 	.word	0x37d00d01
 80183bc:	bab60b61 	.word	0xbab60b61
 80183c0:	3d2aaaab 	.word	0x3d2aaaab
 80183c4:	3f480000 	.word	0x3f480000

080183c8 <__kernel_sinf>:
 80183c8:	ee10 3a10 	vmov	r3, s0
 80183cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80183d0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80183d4:	d204      	bcs.n	80183e0 <__kernel_sinf+0x18>
 80183d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80183da:	ee17 3a90 	vmov	r3, s15
 80183de:	b35b      	cbz	r3, 8018438 <__kernel_sinf+0x70>
 80183e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80183e4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801843c <__kernel_sinf+0x74>
 80183e8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8018440 <__kernel_sinf+0x78>
 80183ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 80183f0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8018444 <__kernel_sinf+0x7c>
 80183f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80183f8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8018448 <__kernel_sinf+0x80>
 80183fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018400:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801844c <__kernel_sinf+0x84>
 8018404:	ee60 6a07 	vmul.f32	s13, s0, s14
 8018408:	eee6 7a07 	vfma.f32	s15, s12, s14
 801840c:	b930      	cbnz	r0, 801841c <__kernel_sinf+0x54>
 801840e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8018450 <__kernel_sinf+0x88>
 8018412:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018416:	eea6 0a26 	vfma.f32	s0, s12, s13
 801841a:	4770      	bx	lr
 801841c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018420:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8018424:	eee0 7a86 	vfma.f32	s15, s1, s12
 8018428:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801842c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8018454 <__kernel_sinf+0x8c>
 8018430:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8018434:	ee30 0a60 	vsub.f32	s0, s0, s1
 8018438:	4770      	bx	lr
 801843a:	bf00      	nop
 801843c:	2f2ec9d3 	.word	0x2f2ec9d3
 8018440:	b2d72f34 	.word	0xb2d72f34
 8018444:	3638ef1b 	.word	0x3638ef1b
 8018448:	b9500d01 	.word	0xb9500d01
 801844c:	3c088889 	.word	0x3c088889
 8018450:	be2aaaab 	.word	0xbe2aaaab
 8018454:	3e2aaaab 	.word	0x3e2aaaab

08018458 <__kernel_tanf>:
 8018458:	b508      	push	{r3, lr}
 801845a:	ee10 3a10 	vmov	r3, s0
 801845e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8018462:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8018466:	eef0 7a40 	vmov.f32	s15, s0
 801846a:	d217      	bcs.n	801849c <__kernel_tanf+0x44>
 801846c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8018470:	ee17 1a10 	vmov	r1, s14
 8018474:	bb41      	cbnz	r1, 80184c8 <__kernel_tanf+0x70>
 8018476:	1c43      	adds	r3, r0, #1
 8018478:	4313      	orrs	r3, r2
 801847a:	d108      	bne.n	801848e <__kernel_tanf+0x36>
 801847c:	f7ff fb42 	bl	8017b04 <fabsf>
 8018480:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018484:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018488:	eeb0 0a67 	vmov.f32	s0, s15
 801848c:	bd08      	pop	{r3, pc}
 801848e:	2801      	cmp	r0, #1
 8018490:	d0fa      	beq.n	8018488 <__kernel_tanf+0x30>
 8018492:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8018496:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801849a:	e7f5      	b.n	8018488 <__kernel_tanf+0x30>
 801849c:	494c      	ldr	r1, [pc, #304]	@ (80185d0 <__kernel_tanf+0x178>)
 801849e:	428a      	cmp	r2, r1
 80184a0:	d312      	bcc.n	80184c8 <__kernel_tanf+0x70>
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80185d4 <__kernel_tanf+0x17c>
 80184a8:	bfb8      	it	lt
 80184aa:	eef1 7a40 	vneglt.f32	s15, s0
 80184ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80184b2:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80185d8 <__kernel_tanf+0x180>
 80184b6:	bfb8      	it	lt
 80184b8:	eef1 0a60 	vneglt.f32	s1, s1
 80184bc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80184c0:	eddf 0a46 	vldr	s1, [pc, #280]	@ 80185dc <__kernel_tanf+0x184>
 80184c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80184c8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80184cc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80185e0 <__kernel_tanf+0x188>
 80184d0:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 80185e4 <__kernel_tanf+0x18c>
 80184d4:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 80185e8 <__kernel_tanf+0x190>
 80184d8:	493d      	ldr	r1, [pc, #244]	@ (80185d0 <__kernel_tanf+0x178>)
 80184da:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80184de:	428a      	cmp	r2, r1
 80184e0:	eea7 6a25 	vfma.f32	s12, s14, s11
 80184e4:	eddf 5a41 	vldr	s11, [pc, #260]	@ 80185ec <__kernel_tanf+0x194>
 80184e8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80184ec:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80185f0 <__kernel_tanf+0x198>
 80184f0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80184f4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80185f4 <__kernel_tanf+0x19c>
 80184f8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80184fc:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 80185f8 <__kernel_tanf+0x1a0>
 8018500:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018504:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80185fc <__kernel_tanf+0x1a4>
 8018508:	eee7 5a05 	vfma.f32	s11, s14, s10
 801850c:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8018600 <__kernel_tanf+0x1a8>
 8018510:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018514:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8018604 <__kernel_tanf+0x1ac>
 8018518:	eee5 5a07 	vfma.f32	s11, s10, s14
 801851c:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8018608 <__kernel_tanf+0x1b0>
 8018520:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018524:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801860c <__kernel_tanf+0x1b4>
 8018528:	eee5 5a07 	vfma.f32	s11, s10, s14
 801852c:	eeb0 7a46 	vmov.f32	s14, s12
 8018530:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8018534:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8018538:	eeb0 6a60 	vmov.f32	s12, s1
 801853c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8018540:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8018610 <__kernel_tanf+0x1b8>
 8018544:	eee6 0a26 	vfma.f32	s1, s12, s13
 8018548:	eee5 0a07 	vfma.f32	s1, s10, s14
 801854c:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8018550:	d31d      	bcc.n	801858e <__kernel_tanf+0x136>
 8018552:	ee07 0a10 	vmov	s14, r0
 8018556:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801855a:	ee26 5a06 	vmul.f32	s10, s12, s12
 801855e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8018562:	179b      	asrs	r3, r3, #30
 8018564:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8018568:	f003 0302 	and.w	r3, r3, #2
 801856c:	f1c3 0301 	rsb	r3, r3, #1
 8018570:	ee06 3a90 	vmov	s13, r3
 8018574:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8018578:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801857c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018580:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8018584:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8018588:	ee66 7a87 	vmul.f32	s15, s13, s14
 801858c:	e77c      	b.n	8018488 <__kernel_tanf+0x30>
 801858e:	2801      	cmp	r0, #1
 8018590:	d01b      	beq.n	80185ca <__kernel_tanf+0x172>
 8018592:	4b20      	ldr	r3, [pc, #128]	@ (8018614 <__kernel_tanf+0x1bc>)
 8018594:	ee16 2a10 	vmov	r2, s12
 8018598:	401a      	ands	r2, r3
 801859a:	ee05 2a90 	vmov	s11, r2
 801859e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80185a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80185a6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80185aa:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80185ae:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80185b2:	ee16 2a90 	vmov	r2, s13
 80185b6:	4013      	ands	r3, r2
 80185b8:	ee07 3a90 	vmov	s15, r3
 80185bc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80185c0:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80185c4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80185c8:	e75e      	b.n	8018488 <__kernel_tanf+0x30>
 80185ca:	eef0 7a46 	vmov.f32	s15, s12
 80185ce:	e75b      	b.n	8018488 <__kernel_tanf+0x30>
 80185d0:	3f2ca140 	.word	0x3f2ca140
 80185d4:	3f490fda 	.word	0x3f490fda
 80185d8:	33222168 	.word	0x33222168
 80185dc:	00000000 	.word	0x00000000
 80185e0:	b79bae5f 	.word	0xb79bae5f
 80185e4:	38a3f445 	.word	0x38a3f445
 80185e8:	37d95384 	.word	0x37d95384
 80185ec:	3a1a26c8 	.word	0x3a1a26c8
 80185f0:	3b6b6916 	.word	0x3b6b6916
 80185f4:	3cb327a4 	.word	0x3cb327a4
 80185f8:	3e088889 	.word	0x3e088889
 80185fc:	3895c07a 	.word	0x3895c07a
 8018600:	398137b9 	.word	0x398137b9
 8018604:	3abede48 	.word	0x3abede48
 8018608:	3c11371f 	.word	0x3c11371f
 801860c:	3d5d0dd1 	.word	0x3d5d0dd1
 8018610:	3eaaaaab 	.word	0x3eaaaaab
 8018614:	fffff000 	.word	0xfffff000

08018618 <__ieee754_acosf>:
 8018618:	b508      	push	{r3, lr}
 801861a:	ee10 3a10 	vmov	r3, s0
 801861e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8018622:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8018626:	ed2d 8b0c 	vpush	{d8-d13}
 801862a:	d10a      	bne.n	8018642 <__ieee754_acosf+0x2a>
 801862c:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 80187c4 <__ieee754_acosf+0x1ac>
 8018630:	eddf 7a65 	vldr	s15, [pc, #404]	@ 80187c8 <__ieee754_acosf+0x1b0>
 8018634:	2b00      	cmp	r3, #0
 8018636:	bfc8      	it	gt
 8018638:	eeb0 0a67 	vmovgt.f32	s0, s15
 801863c:	ecbd 8b0c 	vpop	{d8-d13}
 8018640:	bd08      	pop	{r3, pc}
 8018642:	d904      	bls.n	801864e <__ieee754_acosf+0x36>
 8018644:	ee30 8a40 	vsub.f32	s16, s0, s0
 8018648:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801864c:	e7f6      	b.n	801863c <__ieee754_acosf+0x24>
 801864e:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8018652:	d23c      	bcs.n	80186ce <__ieee754_acosf+0xb6>
 8018654:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8018658:	f240 80b1 	bls.w	80187be <__ieee754_acosf+0x1a6>
 801865c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018660:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80187cc <__ieee754_acosf+0x1b4>
 8018664:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80187d0 <__ieee754_acosf+0x1b8>
 8018668:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 80187d4 <__ieee754_acosf+0x1bc>
 801866c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018670:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80187d8 <__ieee754_acosf+0x1c0>
 8018674:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018678:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80187dc <__ieee754_acosf+0x1c4>
 801867c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018680:	eddf 6a57 	vldr	s13, [pc, #348]	@ 80187e0 <__ieee754_acosf+0x1c8>
 8018684:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018688:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80187e4 <__ieee754_acosf+0x1cc>
 801868c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018690:	eddf 6a55 	vldr	s13, [pc, #340]	@ 80187e8 <__ieee754_acosf+0x1d0>
 8018694:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8018698:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80187ec <__ieee754_acosf+0x1d4>
 801869c:	eee6 6a27 	vfma.f32	s13, s12, s15
 80186a0:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 80187f0 <__ieee754_acosf+0x1d8>
 80186a4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80186a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80186ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 80186b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80186b4:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 80187f4 <__ieee754_acosf+0x1dc>
 80186b8:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80186bc:	eee0 7a46 	vfms.f32	s15, s0, s12
 80186c0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80186c4:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 80187f8 <__ieee754_acosf+0x1e0>
 80186c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80186cc:	e7b6      	b.n	801863c <__ieee754_acosf+0x24>
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	eddf da3e 	vldr	s27, [pc, #248]	@ 80187cc <__ieee754_acosf+0x1b4>
 80186d4:	eddf ca3e 	vldr	s25, [pc, #248]	@ 80187d0 <__ieee754_acosf+0x1b8>
 80186d8:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 80187d8 <__ieee754_acosf+0x1c0>
 80186dc:	eddf ba3f 	vldr	s23, [pc, #252]	@ 80187dc <__ieee754_acosf+0x1c4>
 80186e0:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 80187e0 <__ieee754_acosf+0x1c8>
 80186e4:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 80187e4 <__ieee754_acosf+0x1cc>
 80186e8:	ed9f da3f 	vldr	s26, [pc, #252]	@ 80187e8 <__ieee754_acosf+0x1d0>
 80186ec:	eddf aa39 	vldr	s21, [pc, #228]	@ 80187d4 <__ieee754_acosf+0x1bc>
 80186f0:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 80187ec <__ieee754_acosf+0x1d4>
 80186f4:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 80187f0 <__ieee754_acosf+0x1d8>
 80186f8:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80186fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018700:	da28      	bge.n	8018754 <__ieee754_acosf+0x13c>
 8018702:	ee30 8a09 	vadd.f32	s16, s0, s18
 8018706:	ee28 0a27 	vmul.f32	s0, s16, s15
 801870a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801870e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8018712:	eeac ca80 	vfma.f32	s24, s25, s0
 8018716:	eeaa aa80 	vfma.f32	s20, s21, s0
 801871a:	eeec ba00 	vfma.f32	s23, s24, s0
 801871e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8018722:	eeab ba80 	vfma.f32	s22, s23, s0
 8018726:	eea9 9a80 	vfma.f32	s18, s19, s0
 801872a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801872e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8018732:	f7ff fd44 	bl	80181be <__ieee754_sqrtf>
 8018736:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801873a:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80187fc <__ieee754_acosf+0x1e4>
 801873e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018742:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8018746:	ee77 7a80 	vadd.f32	s15, s15, s0
 801874a:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8018800 <__ieee754_acosf+0x1e8>
 801874e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018752:	e773      	b.n	801863c <__ieee754_acosf+0x24>
 8018754:	ee39 8a40 	vsub.f32	s16, s18, s0
 8018758:	ee28 8a27 	vmul.f32	s16, s16, s15
 801875c:	eeb0 0a48 	vmov.f32	s0, s16
 8018760:	f7ff fd2d 	bl	80181be <__ieee754_sqrtf>
 8018764:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8018768:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801876c:	eeac ca88 	vfma.f32	s24, s25, s16
 8018770:	eeaa aa88 	vfma.f32	s20, s21, s16
 8018774:	eeec ba08 	vfma.f32	s23, s24, s16
 8018778:	ee10 3a10 	vmov	r3, s0
 801877c:	eeab ba88 	vfma.f32	s22, s23, s16
 8018780:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8018784:	f023 030f 	bic.w	r3, r3, #15
 8018788:	eeea 9a08 	vfma.f32	s19, s20, s16
 801878c:	ee07 3a90 	vmov	s15, r3
 8018790:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8018794:	eeb0 6a48 	vmov.f32	s12, s16
 8018798:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801879c:	eea9 9a88 	vfma.f32	s18, s19, s16
 80187a0:	ee70 6a27 	vadd.f32	s13, s0, s15
 80187a4:	ee68 8a88 	vmul.f32	s17, s17, s16
 80187a8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80187ac:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80187b0:	eea0 7a26 	vfma.f32	s14, s0, s13
 80187b4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80187b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80187bc:	e73e      	b.n	801863c <__ieee754_acosf+0x24>
 80187be:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8018804 <__ieee754_acosf+0x1ec>
 80187c2:	e73b      	b.n	801863c <__ieee754_acosf+0x24>
 80187c4:	40490fdb 	.word	0x40490fdb
 80187c8:	00000000 	.word	0x00000000
 80187cc:	3811ef08 	.word	0x3811ef08
 80187d0:	3a4f7f04 	.word	0x3a4f7f04
 80187d4:	bf303361 	.word	0xbf303361
 80187d8:	bd241146 	.word	0xbd241146
 80187dc:	3e4e0aa8 	.word	0x3e4e0aa8
 80187e0:	bea6b090 	.word	0xbea6b090
 80187e4:	3e2aaaab 	.word	0x3e2aaaab
 80187e8:	3d9dc62e 	.word	0x3d9dc62e
 80187ec:	4001572d 	.word	0x4001572d
 80187f0:	c019d139 	.word	0xc019d139
 80187f4:	33a22168 	.word	0x33a22168
 80187f8:	3fc90fda 	.word	0x3fc90fda
 80187fc:	b3a22168 	.word	0xb3a22168
 8018800:	40490fda 	.word	0x40490fda
 8018804:	3fc90fdb 	.word	0x3fc90fdb

08018808 <__ieee754_acoshf>:
 8018808:	b508      	push	{r3, lr}
 801880a:	ee10 3a10 	vmov	r3, s0
 801880e:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8018812:	ed2d 8b04 	vpush	{d8-d9}
 8018816:	eeb0 8a40 	vmov.f32	s16, s0
 801881a:	da06      	bge.n	801882a <__ieee754_acoshf+0x22>
 801881c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018820:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018824:	ecbd 8b04 	vpop	{d8-d9}
 8018828:	bd08      	pop	{r3, pc}
 801882a:	f1b3 4f9b 	cmp.w	r3, #1300234240	@ 0x4d800000
 801882e:	db0c      	blt.n	801884a <__ieee754_acoshf+0x42>
 8018830:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018834:	db02      	blt.n	801883c <__ieee754_acoshf+0x34>
 8018836:	ee30 0a00 	vadd.f32	s0, s0, s0
 801883a:	e7f3      	b.n	8018824 <__ieee754_acoshf+0x1c>
 801883c:	f000 fb18 	bl	8018e70 <__ieee754_logf>
 8018840:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80188a8 <__ieee754_acoshf+0xa0>
 8018844:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018848:	e7ec      	b.n	8018824 <__ieee754_acoshf+0x1c>
 801884a:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801884e:	d028      	beq.n	80188a2 <__ieee754_acoshf+0x9a>
 8018850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018854:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8018858:	eef0 8a00 	vmov.f32	s17, #0	@ 0x40000000  2.0
 801885c:	dd11      	ble.n	8018882 <__ieee754_acoshf+0x7a>
 801885e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8018862:	eea8 0a08 	vfma.f32	s0, s16, s16
 8018866:	f7ff fcaa 	bl	80181be <__ieee754_sqrtf>
 801886a:	ee70 7a08 	vadd.f32	s15, s0, s16
 801886e:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8018872:	ee98 0a28 	vfnms.f32	s0, s16, s17
 8018876:	ecbd 8b04 	vpop	{d8-d9}
 801887a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801887e:	f000 baf7 	b.w	8018e70 <__ieee754_logf>
 8018882:	ee30 8a49 	vsub.f32	s16, s0, s18
 8018886:	ee28 0a08 	vmul.f32	s0, s16, s16
 801888a:	eea8 0a28 	vfma.f32	s0, s16, s17
 801888e:	f7ff fc96 	bl	80181be <__ieee754_sqrtf>
 8018892:	ee30 0a08 	vadd.f32	s0, s0, s16
 8018896:	ecbd 8b04 	vpop	{d8-d9}
 801889a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801889e:	f7ff bb47 	b.w	8017f30 <log1pf>
 80188a2:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80188ac <__ieee754_acoshf+0xa4>
 80188a6:	e7bd      	b.n	8018824 <__ieee754_acoshf+0x1c>
 80188a8:	3f317218 	.word	0x3f317218
 80188ac:	00000000 	.word	0x00000000

080188b0 <__ieee754_asinf>:
 80188b0:	b538      	push	{r3, r4, r5, lr}
 80188b2:	ee10 5a10 	vmov	r5, s0
 80188b6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80188ba:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80188be:	ed2d 8b04 	vpush	{d8-d9}
 80188c2:	d10c      	bne.n	80188de <__ieee754_asinf+0x2e>
 80188c4:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8018a3c <__ieee754_asinf+0x18c>
 80188c8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8018a40 <__ieee754_asinf+0x190>
 80188cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80188d0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80188d4:	eeb0 0a67 	vmov.f32	s0, s15
 80188d8:	ecbd 8b04 	vpop	{d8-d9}
 80188dc:	bd38      	pop	{r3, r4, r5, pc}
 80188de:	d904      	bls.n	80188ea <__ieee754_asinf+0x3a>
 80188e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80188e4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80188e8:	e7f6      	b.n	80188d8 <__ieee754_asinf+0x28>
 80188ea:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80188ee:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80188f2:	d20b      	bcs.n	801890c <__ieee754_asinf+0x5c>
 80188f4:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80188f8:	d252      	bcs.n	80189a0 <__ieee754_asinf+0xf0>
 80188fa:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8018a44 <__ieee754_asinf+0x194>
 80188fe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018902:	eef4 7ae8 	vcmpe.f32	s15, s17
 8018906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801890a:	dce5      	bgt.n	80188d8 <__ieee754_asinf+0x28>
 801890c:	f7ff f8fa 	bl	8017b04 <fabsf>
 8018910:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8018914:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018918:	ee28 8a27 	vmul.f32	s16, s16, s15
 801891c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8018a48 <__ieee754_asinf+0x198>
 8018920:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8018a4c <__ieee754_asinf+0x19c>
 8018924:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8018a50 <__ieee754_asinf+0x1a0>
 8018928:	eea8 7a27 	vfma.f32	s14, s16, s15
 801892c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8018a54 <__ieee754_asinf+0x1a4>
 8018930:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018934:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8018a58 <__ieee754_asinf+0x1a8>
 8018938:	eea7 7a88 	vfma.f32	s14, s15, s16
 801893c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8018a5c <__ieee754_asinf+0x1ac>
 8018940:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018944:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8018a60 <__ieee754_asinf+0x1b0>
 8018948:	eea7 9a88 	vfma.f32	s18, s15, s16
 801894c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8018a64 <__ieee754_asinf+0x1b4>
 8018950:	eee8 7a07 	vfma.f32	s15, s16, s14
 8018954:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8018a68 <__ieee754_asinf+0x1b8>
 8018958:	eea7 7a88 	vfma.f32	s14, s15, s16
 801895c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8018a6c <__ieee754_asinf+0x1bc>
 8018960:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018964:	eeb0 0a48 	vmov.f32	s0, s16
 8018968:	eee7 8a88 	vfma.f32	s17, s15, s16
 801896c:	f7ff fc27 	bl	80181be <__ieee754_sqrtf>
 8018970:	4b3f      	ldr	r3, [pc, #252]	@ (8018a70 <__ieee754_asinf+0x1c0>)
 8018972:	ee29 9a08 	vmul.f32	s18, s18, s16
 8018976:	429c      	cmp	r4, r3
 8018978:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801897c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8018980:	d93d      	bls.n	80189fe <__ieee754_asinf+0x14e>
 8018982:	eea0 0a06 	vfma.f32	s0, s0, s12
 8018986:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8018a74 <__ieee754_asinf+0x1c4>
 801898a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801898e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8018a40 <__ieee754_asinf+0x190>
 8018992:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018996:	2d00      	cmp	r5, #0
 8018998:	bfd8      	it	le
 801899a:	eeb1 0a40 	vnegle.f32	s0, s0
 801899e:	e79b      	b.n	80188d8 <__ieee754_asinf+0x28>
 80189a0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80189a4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8018a4c <__ieee754_asinf+0x19c>
 80189a8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8018a48 <__ieee754_asinf+0x198>
 80189ac:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8018a60 <__ieee754_asinf+0x1b0>
 80189b0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80189b4:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8018a54 <__ieee754_asinf+0x1a4>
 80189b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80189bc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8018a58 <__ieee754_asinf+0x1a8>
 80189c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80189c4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8018a5c <__ieee754_asinf+0x1ac>
 80189c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80189cc:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8018a50 <__ieee754_asinf+0x1a0>
 80189d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80189d4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8018a64 <__ieee754_asinf+0x1b4>
 80189d8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80189dc:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8018a68 <__ieee754_asinf+0x1b8>
 80189e0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80189e4:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8018a6c <__ieee754_asinf+0x1bc>
 80189e8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80189ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80189f0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80189f4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80189f8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80189fc:	e76c      	b.n	80188d8 <__ieee754_asinf+0x28>
 80189fe:	ee10 3a10 	vmov	r3, s0
 8018a02:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8018a06:	f023 030f 	bic.w	r3, r3, #15
 8018a0a:	ee07 3a10 	vmov	s14, r3
 8018a0e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8018a12:	ee70 5a00 	vadd.f32	s11, s0, s0
 8018a16:	ee30 0a07 	vadd.f32	s0, s0, s14
 8018a1a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8018a3c <__ieee754_asinf+0x18c>
 8018a1e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8018a22:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8018a78 <__ieee754_asinf+0x1c8>
 8018a26:	eee5 7a66 	vfms.f32	s15, s10, s13
 8018a2a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8018a2e:	eeb0 6a40 	vmov.f32	s12, s0
 8018a32:	eea7 6a66 	vfms.f32	s12, s14, s13
 8018a36:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018a3a:	e7aa      	b.n	8018992 <__ieee754_asinf+0xe2>
 8018a3c:	b33bbd2e 	.word	0xb33bbd2e
 8018a40:	3fc90fdb 	.word	0x3fc90fdb
 8018a44:	7149f2ca 	.word	0x7149f2ca
 8018a48:	3a4f7f04 	.word	0x3a4f7f04
 8018a4c:	3811ef08 	.word	0x3811ef08
 8018a50:	3e2aaaab 	.word	0x3e2aaaab
 8018a54:	bd241146 	.word	0xbd241146
 8018a58:	3e4e0aa8 	.word	0x3e4e0aa8
 8018a5c:	bea6b090 	.word	0xbea6b090
 8018a60:	3d9dc62e 	.word	0x3d9dc62e
 8018a64:	bf303361 	.word	0xbf303361
 8018a68:	4001572d 	.word	0x4001572d
 8018a6c:	c019d139 	.word	0xc019d139
 8018a70:	3f799999 	.word	0x3f799999
 8018a74:	333bbd2e 	.word	0x333bbd2e
 8018a78:	3f490fdb 	.word	0x3f490fdb

08018a7c <__ieee754_atanhf>:
 8018a7c:	b510      	push	{r4, lr}
 8018a7e:	ee10 4a10 	vmov	r4, s0
 8018a82:	f024 4300 	bic.w	r3, r4, #2147483648	@ 0x80000000
 8018a86:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8018a8a:	d904      	bls.n	8018a96 <__ieee754_atanhf+0x1a>
 8018a8c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018a90:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018a94:	bd10      	pop	{r4, pc}
 8018a96:	d104      	bne.n	8018aa2 <__ieee754_atanhf+0x26>
 8018a98:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8018b08 <__ieee754_atanhf+0x8c>
 8018a9c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8018aa0:	e7f8      	b.n	8018a94 <__ieee754_atanhf+0x18>
 8018aa2:	f1b3 5f46 	cmp.w	r3, #830472192	@ 0x31800000
 8018aa6:	d221      	bcs.n	8018aec <__ieee754_atanhf+0x70>
 8018aa8:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8018b0c <__ieee754_atanhf+0x90>
 8018aac:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018ab0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ab8:	dcec      	bgt.n	8018a94 <__ieee754_atanhf+0x18>
 8018aba:	ee07 3a90 	vmov	s15, r3
 8018abe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8018ac2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018ac6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8018aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018ace:	ee86 0a27 	vdiv.f32	s0, s12, s15
 8018ad2:	ee30 0a26 	vadd.f32	s0, s0, s13
 8018ad6:	f7ff fa2b 	bl	8017f30 <log1pf>
 8018ada:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018ade:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018ae2:	2c00      	cmp	r4, #0
 8018ae4:	bfb8      	it	lt
 8018ae6:	eeb1 0a40 	vneglt.f32	s0, s0
 8018aea:	e7d3      	b.n	8018a94 <__ieee754_atanhf+0x18>
 8018aec:	ee07 3a90 	vmov	s15, r3
 8018af0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018af4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8018af8:	ee37 0aa7 	vadd.f32	s0, s15, s15
 8018afc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018b00:	d3dd      	bcc.n	8018abe <__ieee754_atanhf+0x42>
 8018b02:	ee80 0a07 	vdiv.f32	s0, s0, s14
 8018b06:	e7e6      	b.n	8018ad6 <__ieee754_atanhf+0x5a>
 8018b08:	00000000 	.word	0x00000000
 8018b0c:	7149f2ca 	.word	0x7149f2ca

08018b10 <__ieee754_coshf>:
 8018b10:	b510      	push	{r4, lr}
 8018b12:	ee10 3a10 	vmov	r3, s0
 8018b16:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8018b1a:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8018b1e:	ed2d 8b02 	vpush	{d8}
 8018b22:	d306      	bcc.n	8018b32 <__ieee754_coshf+0x22>
 8018b24:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018b28:	ecbd 8b02 	vpop	{d8}
 8018b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8018b30:	bd10      	pop	{r4, pc}
 8018b32:	4b23      	ldr	r3, [pc, #140]	@ (8018bc0 <__ieee754_coshf+0xb0>)
 8018b34:	429c      	cmp	r4, r3
 8018b36:	d813      	bhi.n	8018b60 <__ieee754_coshf+0x50>
 8018b38:	f7fe ffe4 	bl	8017b04 <fabsf>
 8018b3c:	f7ff f8d0 	bl	8017ce0 <expm1f>
 8018b40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018b44:	f1b4 5f10 	cmp.w	r4, #603979776	@ 0x24000000
 8018b48:	ee70 7a07 	vadd.f32	s15, s0, s14
 8018b4c:	d3ec      	bcc.n	8018b28 <__ieee754_coshf+0x18>
 8018b4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018b52:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018b56:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8018b5a:	ee76 7a87 	vadd.f32	s15, s13, s14
 8018b5e:	e7e3      	b.n	8018b28 <__ieee754_coshf+0x18>
 8018b60:	4b18      	ldr	r3, [pc, #96]	@ (8018bc4 <__ieee754_coshf+0xb4>)
 8018b62:	429c      	cmp	r4, r3
 8018b64:	d80a      	bhi.n	8018b7c <__ieee754_coshf+0x6c>
 8018b66:	f7fe ffcd 	bl	8017b04 <fabsf>
 8018b6a:	f000 f831 	bl	8018bd0 <__ieee754_expf>
 8018b6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018b72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018b76:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018b7a:	e7d5      	b.n	8018b28 <__ieee754_coshf+0x18>
 8018b7c:	4b12      	ldr	r3, [pc, #72]	@ (8018bc8 <__ieee754_coshf+0xb8>)
 8018b7e:	429c      	cmp	r4, r3
 8018b80:	d808      	bhi.n	8018b94 <__ieee754_coshf+0x84>
 8018b82:	f7fe ffbf 	bl	8017b04 <fabsf>
 8018b86:	f000 f823 	bl	8018bd0 <__ieee754_expf>
 8018b8a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018b8e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018b92:	e7c9      	b.n	8018b28 <__ieee754_coshf+0x18>
 8018b94:	4b0d      	ldr	r3, [pc, #52]	@ (8018bcc <__ieee754_coshf+0xbc>)
 8018b96:	429c      	cmp	r4, r3
 8018b98:	d80a      	bhi.n	8018bb0 <__ieee754_coshf+0xa0>
 8018b9a:	f7fe ffb3 	bl	8017b04 <fabsf>
 8018b9e:	eeb6 8a00 	vmov.f32	s16, #96	@ 0x3f000000  0.5
 8018ba2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018ba6:	f000 f813 	bl	8018bd0 <__ieee754_expf>
 8018baa:	ee60 7a08 	vmul.f32	s15, s0, s16
 8018bae:	e7ee      	b.n	8018b8e <__ieee754_coshf+0x7e>
 8018bb0:	ecbd 8b02 	vpop	{d8}
 8018bb4:	2000      	movs	r0, #0
 8018bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bba:	f7ff bad9 	b.w	8018170 <__math_oflowf>
 8018bbe:	bf00      	nop
 8018bc0:	3eb17217 	.word	0x3eb17217
 8018bc4:	41afffff 	.word	0x41afffff
 8018bc8:	42b17217 	.word	0x42b17217
 8018bcc:	42b2d4fc 	.word	0x42b2d4fc

08018bd0 <__ieee754_expf>:
 8018bd0:	ee10 2a10 	vmov	r2, s0
 8018bd4:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8018bd8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018bdc:	d902      	bls.n	8018be4 <__ieee754_expf+0x14>
 8018bde:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018be2:	4770      	bx	lr
 8018be4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8018be8:	d106      	bne.n	8018bf8 <__ieee754_expf+0x28>
 8018bea:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8018d24 <__ieee754_expf+0x154>
 8018bee:	2900      	cmp	r1, #0
 8018bf0:	bf18      	it	ne
 8018bf2:	eeb0 0a67 	vmovne.f32	s0, s15
 8018bf6:	4770      	bx	lr
 8018bf8:	484b      	ldr	r0, [pc, #300]	@ (8018d28 <__ieee754_expf+0x158>)
 8018bfa:	4282      	cmp	r2, r0
 8018bfc:	dd02      	ble.n	8018c04 <__ieee754_expf+0x34>
 8018bfe:	2000      	movs	r0, #0
 8018c00:	f7ff bab6 	b.w	8018170 <__math_oflowf>
 8018c04:	2a00      	cmp	r2, #0
 8018c06:	da05      	bge.n	8018c14 <__ieee754_expf+0x44>
 8018c08:	4a48      	ldr	r2, [pc, #288]	@ (8018d2c <__ieee754_expf+0x15c>)
 8018c0a:	4293      	cmp	r3, r2
 8018c0c:	d902      	bls.n	8018c14 <__ieee754_expf+0x44>
 8018c0e:	2000      	movs	r0, #0
 8018c10:	f7ff baa8 	b.w	8018164 <__math_uflowf>
 8018c14:	4a46      	ldr	r2, [pc, #280]	@ (8018d30 <__ieee754_expf+0x160>)
 8018c16:	4293      	cmp	r3, r2
 8018c18:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8018c1c:	d952      	bls.n	8018cc4 <__ieee754_expf+0xf4>
 8018c1e:	4a45      	ldr	r2, [pc, #276]	@ (8018d34 <__ieee754_expf+0x164>)
 8018c20:	4293      	cmp	r3, r2
 8018c22:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8018c26:	d834      	bhi.n	8018c92 <__ieee754_expf+0xc2>
 8018c28:	4b43      	ldr	r3, [pc, #268]	@ (8018d38 <__ieee754_expf+0x168>)
 8018c2a:	4413      	add	r3, r2
 8018c2c:	ed93 7a00 	vldr	s14, [r3]
 8018c30:	4b42      	ldr	r3, [pc, #264]	@ (8018d3c <__ieee754_expf+0x16c>)
 8018c32:	4413      	add	r3, r2
 8018c34:	ee30 7a47 	vsub.f32	s14, s0, s14
 8018c38:	f1c1 0201 	rsb	r2, r1, #1
 8018c3c:	edd3 7a00 	vldr	s15, [r3]
 8018c40:	1a52      	subs	r2, r2, r1
 8018c42:	ee37 0a67 	vsub.f32	s0, s14, s15
 8018c46:	ee20 6a00 	vmul.f32	s12, s0, s0
 8018c4a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8018d40 <__ieee754_expf+0x170>
 8018c4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8018d44 <__ieee754_expf+0x174>
 8018c52:	eee6 6a05 	vfma.f32	s13, s12, s10
 8018c56:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8018d48 <__ieee754_expf+0x178>
 8018c5a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8018c5e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8018d4c <__ieee754_expf+0x17c>
 8018c62:	eee5 6a06 	vfma.f32	s13, s10, s12
 8018c66:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8018d50 <__ieee754_expf+0x180>
 8018c6a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8018c6e:	eef0 6a40 	vmov.f32	s13, s0
 8018c72:	eee5 6a46 	vfms.f32	s13, s10, s12
 8018c76:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8018c7a:	ee20 5a26 	vmul.f32	s10, s0, s13
 8018c7e:	bb92      	cbnz	r2, 8018ce6 <__ieee754_expf+0x116>
 8018c80:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8018c84:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8018c88:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018c8c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8018c90:	4770      	bx	lr
 8018c92:	4b30      	ldr	r3, [pc, #192]	@ (8018d54 <__ieee754_expf+0x184>)
 8018c94:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8018d58 <__ieee754_expf+0x188>
 8018c98:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8018d5c <__ieee754_expf+0x18c>
 8018c9c:	4413      	add	r3, r2
 8018c9e:	edd3 7a00 	vldr	s15, [r3]
 8018ca2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018ca6:	eeb0 7a40 	vmov.f32	s14, s0
 8018caa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018cae:	ee17 2a90 	vmov	r2, s15
 8018cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018cb6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018cba:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8018d60 <__ieee754_expf+0x190>
 8018cbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018cc2:	e7be      	b.n	8018c42 <__ieee754_expf+0x72>
 8018cc4:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8018cc8:	d20b      	bcs.n	8018ce2 <__ieee754_expf+0x112>
 8018cca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8018d64 <__ieee754_expf+0x194>
 8018cce:	ee70 6a26 	vadd.f32	s13, s0, s13
 8018cd2:	eef4 6ae5 	vcmpe.f32	s13, s11
 8018cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cda:	dd02      	ble.n	8018ce2 <__ieee754_expf+0x112>
 8018cdc:	ee30 0a25 	vadd.f32	s0, s0, s11
 8018ce0:	4770      	bx	lr
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	e7af      	b.n	8018c46 <__ieee754_expf+0x76>
 8018ce6:	ee36 6a66 	vsub.f32	s12, s12, s13
 8018cea:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8018cee:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8018cf2:	bfb8      	it	lt
 8018cf4:	3264      	addlt	r2, #100	@ 0x64
 8018cf6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018cfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018cfe:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8018d02:	ee17 3a90 	vmov	r3, s15
 8018d06:	bfab      	itete	ge
 8018d08:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8018d0c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8018d10:	ee00 3a10 	vmovge	s0, r3
 8018d14:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8018d68 <__ieee754_expf+0x198>
 8018d18:	bfbc      	itt	lt
 8018d1a:	ee00 3a10 	vmovlt	s0, r3
 8018d1e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8018d22:	4770      	bx	lr
 8018d24:	00000000 	.word	0x00000000
 8018d28:	42b17217 	.word	0x42b17217
 8018d2c:	42cff1b5 	.word	0x42cff1b5
 8018d30:	3eb17218 	.word	0x3eb17218
 8018d34:	3f851591 	.word	0x3f851591
 8018d38:	0801a678 	.word	0x0801a678
 8018d3c:	0801a670 	.word	0x0801a670
 8018d40:	3331bb4c 	.word	0x3331bb4c
 8018d44:	b5ddea0e 	.word	0xb5ddea0e
 8018d48:	388ab355 	.word	0x388ab355
 8018d4c:	bb360b61 	.word	0xbb360b61
 8018d50:	3e2aaaab 	.word	0x3e2aaaab
 8018d54:	0801a680 	.word	0x0801a680
 8018d58:	3fb8aa3b 	.word	0x3fb8aa3b
 8018d5c:	3f317180 	.word	0x3f317180
 8018d60:	3717f7d1 	.word	0x3717f7d1
 8018d64:	7149f2ca 	.word	0x7149f2ca
 8018d68:	0d800000 	.word	0x0d800000

08018d6c <__ieee754_fmodf>:
 8018d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d6e:	ee10 5a90 	vmov	r5, s1
 8018d72:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 8018d76:	1e43      	subs	r3, r0, #1
 8018d78:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018d7c:	d206      	bcs.n	8018d8c <__ieee754_fmodf+0x20>
 8018d7e:	ee10 3a10 	vmov	r3, s0
 8018d82:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8018d86:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8018d8a:	d304      	bcc.n	8018d96 <__ieee754_fmodf+0x2a>
 8018d8c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8018d90:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8018d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d96:	4286      	cmp	r6, r0
 8018d98:	dbfc      	blt.n	8018d94 <__ieee754_fmodf+0x28>
 8018d9a:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 8018d9e:	d105      	bne.n	8018dac <__ieee754_fmodf+0x40>
 8018da0:	4b32      	ldr	r3, [pc, #200]	@ (8018e6c <__ieee754_fmodf+0x100>)
 8018da2:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 8018da6:	ed93 0a00 	vldr	s0, [r3]
 8018daa:	e7f3      	b.n	8018d94 <__ieee754_fmodf+0x28>
 8018dac:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8018db0:	d140      	bne.n	8018e34 <__ieee754_fmodf+0xc8>
 8018db2:	0232      	lsls	r2, r6, #8
 8018db4:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 8018db8:	2a00      	cmp	r2, #0
 8018dba:	dc38      	bgt.n	8018e2e <__ieee754_fmodf+0xc2>
 8018dbc:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 8018dc0:	d13e      	bne.n	8018e40 <__ieee754_fmodf+0xd4>
 8018dc2:	0207      	lsls	r7, r0, #8
 8018dc4:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 8018dc8:	2f00      	cmp	r7, #0
 8018dca:	da36      	bge.n	8018e3a <__ieee754_fmodf+0xce>
 8018dcc:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 8018dd0:	bfb9      	ittee	lt
 8018dd2:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 8018dd6:	1a5b      	sublt	r3, r3, r1
 8018dd8:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 8018ddc:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 8018de0:	bfb8      	it	lt
 8018de2:	fa06 f303 	lsllt.w	r3, r6, r3
 8018de6:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8018dea:	bfb5      	itete	lt
 8018dec:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 8018df0:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 8018df4:	1aad      	sublt	r5, r5, r2
 8018df6:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 8018dfa:	bfb8      	it	lt
 8018dfc:	40a8      	lsllt	r0, r5
 8018dfe:	1a89      	subs	r1, r1, r2
 8018e00:	1a1d      	subs	r5, r3, r0
 8018e02:	bb01      	cbnz	r1, 8018e46 <__ieee754_fmodf+0xda>
 8018e04:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 8018e08:	bf38      	it	cc
 8018e0a:	462b      	movcc	r3, r5
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d0c7      	beq.n	8018da0 <__ieee754_fmodf+0x34>
 8018e10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8018e14:	db1f      	blt.n	8018e56 <__ieee754_fmodf+0xea>
 8018e16:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8018e1a:	db1f      	blt.n	8018e5c <__ieee754_fmodf+0xf0>
 8018e1c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8018e20:	327f      	adds	r2, #127	@ 0x7f
 8018e22:	4323      	orrs	r3, r4
 8018e24:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8018e28:	ee00 3a10 	vmov	s0, r3
 8018e2c:	e7b2      	b.n	8018d94 <__ieee754_fmodf+0x28>
 8018e2e:	3901      	subs	r1, #1
 8018e30:	0052      	lsls	r2, r2, #1
 8018e32:	e7c1      	b.n	8018db8 <__ieee754_fmodf+0x4c>
 8018e34:	15f1      	asrs	r1, r6, #23
 8018e36:	397f      	subs	r1, #127	@ 0x7f
 8018e38:	e7c0      	b.n	8018dbc <__ieee754_fmodf+0x50>
 8018e3a:	3a01      	subs	r2, #1
 8018e3c:	007f      	lsls	r7, r7, #1
 8018e3e:	e7c3      	b.n	8018dc8 <__ieee754_fmodf+0x5c>
 8018e40:	15c2      	asrs	r2, r0, #23
 8018e42:	3a7f      	subs	r2, #127	@ 0x7f
 8018e44:	e7c2      	b.n	8018dcc <__ieee754_fmodf+0x60>
 8018e46:	2d00      	cmp	r5, #0
 8018e48:	da02      	bge.n	8018e50 <__ieee754_fmodf+0xe4>
 8018e4a:	005b      	lsls	r3, r3, #1
 8018e4c:	3901      	subs	r1, #1
 8018e4e:	e7d7      	b.n	8018e00 <__ieee754_fmodf+0x94>
 8018e50:	d0a6      	beq.n	8018da0 <__ieee754_fmodf+0x34>
 8018e52:	006b      	lsls	r3, r5, #1
 8018e54:	e7fa      	b.n	8018e4c <__ieee754_fmodf+0xe0>
 8018e56:	005b      	lsls	r3, r3, #1
 8018e58:	3a01      	subs	r2, #1
 8018e5a:	e7d9      	b.n	8018e10 <__ieee754_fmodf+0xa4>
 8018e5c:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8018e60:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8018e64:	3282      	adds	r2, #130	@ 0x82
 8018e66:	4113      	asrs	r3, r2
 8018e68:	4323      	orrs	r3, r4
 8018e6a:	e7dd      	b.n	8018e28 <__ieee754_fmodf+0xbc>
 8018e6c:	0801a688 	.word	0x0801a688

08018e70 <__ieee754_logf>:
 8018e70:	ee10 3a10 	vmov	r3, s0
 8018e74:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8018e78:	d106      	bne.n	8018e88 <__ieee754_logf+0x18>
 8018e7a:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8019014 <__ieee754_logf+0x1a4>
 8018e7e:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8019018 <__ieee754_logf+0x1a8>
 8018e82:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8018e86:	4770      	bx	lr
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	461a      	mov	r2, r3
 8018e8c:	da02      	bge.n	8018e94 <__ieee754_logf+0x24>
 8018e8e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8018e92:	e7f4      	b.n	8018e7e <__ieee754_logf+0xe>
 8018e94:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018e98:	db02      	blt.n	8018ea0 <__ieee754_logf+0x30>
 8018e9a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018e9e:	4770      	bx	lr
 8018ea0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8018ea4:	bfb8      	it	lt
 8018ea6:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 801901c <__ieee754_logf+0x1ac>
 8018eaa:	485d      	ldr	r0, [pc, #372]	@ (8019020 <__ieee754_logf+0x1b0>)
 8018eac:	bfbe      	ittt	lt
 8018eae:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8018eb2:	f06f 0118 	mvnlt.w	r1, #24
 8018eb6:	ee17 2a90 	vmovlt	r2, s15
 8018eba:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8018ebe:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8018ec2:	4410      	add	r0, r2
 8018ec4:	bfa8      	it	ge
 8018ec6:	2100      	movge	r1, #0
 8018ec8:	3b7f      	subs	r3, #127	@ 0x7f
 8018eca:	440b      	add	r3, r1
 8018ecc:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8018ed0:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8018ed4:	4311      	orrs	r1, r2
 8018ed6:	ee00 1a10 	vmov	s0, r1
 8018eda:	4952      	ldr	r1, [pc, #328]	@ (8019024 <__ieee754_logf+0x1b4>)
 8018edc:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8018ee0:	f102 000f 	add.w	r0, r2, #15
 8018ee4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018ee8:	4001      	ands	r1, r0
 8018eea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018eee:	bb89      	cbnz	r1, 8018f54 <__ieee754_logf+0xe4>
 8018ef0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ef8:	d10f      	bne.n	8018f1a <__ieee754_logf+0xaa>
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	f000 8087 	beq.w	801900e <__ieee754_logf+0x19e>
 8018f00:	ee07 3a90 	vmov	s15, r3
 8018f04:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8019028 <__ieee754_logf+0x1b8>
 8018f08:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801902c <__ieee754_logf+0x1bc>
 8018f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f10:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018f14:	eea7 0a87 	vfma.f32	s0, s15, s14
 8018f18:	4770      	bx	lr
 8018f1a:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8019030 <__ieee754_logf+0x1c0>
 8018f1e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018f22:	eee0 7a66 	vfms.f32	s15, s0, s13
 8018f26:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018f2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f2e:	b913      	cbnz	r3, 8018f36 <__ieee754_logf+0xc6>
 8018f30:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018f34:	4770      	bx	lr
 8018f36:	ee07 3a90 	vmov	s15, r3
 8018f3a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8019028 <__ieee754_logf+0x1b8>
 8018f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f42:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018f46:	ee37 0a40 	vsub.f32	s0, s14, s0
 8018f4a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801902c <__ieee754_logf+0x1bc>
 8018f4e:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8018f52:	4770      	bx	lr
 8018f54:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8018f58:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018f5c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8019034 <__ieee754_logf+0x1c4>
 8018f60:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8019038 <__ieee754_logf+0x1c8>
 8018f64:	4935      	ldr	r1, [pc, #212]	@ (801903c <__ieee754_logf+0x1cc>)
 8018f66:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8018f6a:	4411      	add	r1, r2
 8018f6c:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8018f70:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8018f74:	430a      	orrs	r2, r1
 8018f76:	2a00      	cmp	r2, #0
 8018f78:	ee07 3a90 	vmov	s15, r3
 8018f7c:	ee26 5a06 	vmul.f32	s10, s12, s12
 8018f80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018f84:	ee25 7a05 	vmul.f32	s14, s10, s10
 8018f88:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8019040 <__ieee754_logf+0x1d0>
 8018f8c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8018f90:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8019044 <__ieee754_logf+0x1d4>
 8018f94:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018f98:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8019048 <__ieee754_logf+0x1d8>
 8018f9c:	eee7 7a24 	vfma.f32	s15, s14, s9
 8018fa0:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 801904c <__ieee754_logf+0x1dc>
 8018fa4:	eee7 4a87 	vfma.f32	s9, s15, s14
 8018fa8:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8019050 <__ieee754_logf+0x1e0>
 8018fac:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018fb0:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018fb4:	eee5 7a87 	vfma.f32	s15, s11, s14
 8018fb8:	dd1a      	ble.n	8018ff0 <__ieee754_logf+0x180>
 8018fba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018fbe:	ee20 7a07 	vmul.f32	s14, s0, s14
 8018fc2:	ee27 7a00 	vmul.f32	s14, s14, s0
 8018fc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018fca:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018fce:	b913      	cbnz	r3, 8018fd6 <__ieee754_logf+0x166>
 8018fd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018fd4:	e7ac      	b.n	8018f30 <__ieee754_logf+0xc0>
 8018fd6:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8019028 <__ieee754_logf+0x1b8>
 8018fda:	eee6 7a86 	vfma.f32	s15, s13, s12
 8018fde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018fe2:	ee37 0a40 	vsub.f32	s0, s14, s0
 8018fe6:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801902c <__ieee754_logf+0x1bc>
 8018fea:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8018fee:	4770      	bx	lr
 8018ff0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018ff4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018ff8:	b913      	cbnz	r3, 8019000 <__ieee754_logf+0x190>
 8018ffa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018ffe:	4770      	bx	lr
 8019000:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8019028 <__ieee754_logf+0x1b8>
 8019004:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8019008:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801900c:	e7eb      	b.n	8018fe6 <__ieee754_logf+0x176>
 801900e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8019018 <__ieee754_logf+0x1a8>
 8019012:	4770      	bx	lr
 8019014:	cc000000 	.word	0xcc000000
 8019018:	00000000 	.word	0x00000000
 801901c:	4c000000 	.word	0x4c000000
 8019020:	004afb20 	.word	0x004afb20
 8019024:	007ffff0 	.word	0x007ffff0
 8019028:	3717f7d1 	.word	0x3717f7d1
 801902c:	3f317180 	.word	0x3f317180
 8019030:	3eaaaaab 	.word	0x3eaaaaab
 8019034:	3e1cd04f 	.word	0x3e1cd04f
 8019038:	3e178897 	.word	0x3e178897
 801903c:	ffcf5c30 	.word	0xffcf5c30
 8019040:	3e638e29 	.word	0x3e638e29
 8019044:	3ecccccd 	.word	0x3ecccccd
 8019048:	3e3a3325 	.word	0x3e3a3325
 801904c:	3e924925 	.word	0x3e924925
 8019050:	3f2aaaab 	.word	0x3f2aaaab

08019054 <__ieee754_powf>:
 8019054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019058:	ee10 4a90 	vmov	r4, s1
 801905c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8019060:	ed2d 8b02 	vpush	{d8}
 8019064:	ee10 6a10 	vmov	r6, s0
 8019068:	eeb0 8a40 	vmov.f32	s16, s0
 801906c:	eef0 8a60 	vmov.f32	s17, s1
 8019070:	d10c      	bne.n	801908c <__ieee754_powf+0x38>
 8019072:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8019076:	0076      	lsls	r6, r6, #1
 8019078:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801907c:	f240 829c 	bls.w	80195b8 <__ieee754_powf+0x564>
 8019080:	ee38 0a28 	vadd.f32	s0, s16, s17
 8019084:	ecbd 8b02 	vpop	{d8}
 8019088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801908c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8019090:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8019094:	d802      	bhi.n	801909c <__ieee754_powf+0x48>
 8019096:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801909a:	d908      	bls.n	80190ae <__ieee754_powf+0x5a>
 801909c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80190a0:	d1ee      	bne.n	8019080 <__ieee754_powf+0x2c>
 80190a2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80190a6:	0064      	lsls	r4, r4, #1
 80190a8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80190ac:	e7e6      	b.n	801907c <__ieee754_powf+0x28>
 80190ae:	2e00      	cmp	r6, #0
 80190b0:	da1e      	bge.n	80190f0 <__ieee754_powf+0x9c>
 80190b2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80190b6:	d22b      	bcs.n	8019110 <__ieee754_powf+0xbc>
 80190b8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80190bc:	d332      	bcc.n	8019124 <__ieee754_powf+0xd0>
 80190be:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80190c2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80190c6:	fa49 f503 	asr.w	r5, r9, r3
 80190ca:	fa05 f303 	lsl.w	r3, r5, r3
 80190ce:	454b      	cmp	r3, r9
 80190d0:	d126      	bne.n	8019120 <__ieee754_powf+0xcc>
 80190d2:	f005 0501 	and.w	r5, r5, #1
 80190d6:	f1c5 0502 	rsb	r5, r5, #2
 80190da:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80190de:	d122      	bne.n	8019126 <__ieee754_powf+0xd2>
 80190e0:	2c00      	cmp	r4, #0
 80190e2:	f280 826f 	bge.w	80195c4 <__ieee754_powf+0x570>
 80190e6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80190ea:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80190ee:	e7c9      	b.n	8019084 <__ieee754_powf+0x30>
 80190f0:	2500      	movs	r5, #0
 80190f2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80190f6:	d1f0      	bne.n	80190da <__ieee754_powf+0x86>
 80190f8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80190fc:	f000 825c 	beq.w	80195b8 <__ieee754_powf+0x564>
 8019100:	d908      	bls.n	8019114 <__ieee754_powf+0xc0>
 8019102:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8019464 <__ieee754_powf+0x410>
 8019106:	2c00      	cmp	r4, #0
 8019108:	bfa8      	it	ge
 801910a:	eeb0 0a68 	vmovge.f32	s0, s17
 801910e:	e7b9      	b.n	8019084 <__ieee754_powf+0x30>
 8019110:	2502      	movs	r5, #2
 8019112:	e7ee      	b.n	80190f2 <__ieee754_powf+0x9e>
 8019114:	2c00      	cmp	r4, #0
 8019116:	f280 8252 	bge.w	80195be <__ieee754_powf+0x56a>
 801911a:	eeb1 0a68 	vneg.f32	s0, s17
 801911e:	e7b1      	b.n	8019084 <__ieee754_powf+0x30>
 8019120:	2500      	movs	r5, #0
 8019122:	e7da      	b.n	80190da <__ieee754_powf+0x86>
 8019124:	2500      	movs	r5, #0
 8019126:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801912a:	d102      	bne.n	8019132 <__ieee754_powf+0xde>
 801912c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8019130:	e7a8      	b.n	8019084 <__ieee754_powf+0x30>
 8019132:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8019136:	d109      	bne.n	801914c <__ieee754_powf+0xf8>
 8019138:	2e00      	cmp	r6, #0
 801913a:	db07      	blt.n	801914c <__ieee754_powf+0xf8>
 801913c:	eeb0 0a48 	vmov.f32	s0, s16
 8019140:	ecbd 8b02 	vpop	{d8}
 8019144:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019148:	f7ff b839 	b.w	80181be <__ieee754_sqrtf>
 801914c:	eeb0 0a48 	vmov.f32	s0, s16
 8019150:	f7fe fcd8 	bl	8017b04 <fabsf>
 8019154:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8019158:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801915c:	4647      	mov	r7, r8
 801915e:	d002      	beq.n	8019166 <__ieee754_powf+0x112>
 8019160:	f1b8 0f00 	cmp.w	r8, #0
 8019164:	d117      	bne.n	8019196 <__ieee754_powf+0x142>
 8019166:	2c00      	cmp	r4, #0
 8019168:	bfbc      	itt	lt
 801916a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801916e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8019172:	2e00      	cmp	r6, #0
 8019174:	da86      	bge.n	8019084 <__ieee754_powf+0x30>
 8019176:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801917a:	ea58 0805 	orrs.w	r8, r8, r5
 801917e:	d104      	bne.n	801918a <__ieee754_powf+0x136>
 8019180:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019184:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019188:	e77c      	b.n	8019084 <__ieee754_powf+0x30>
 801918a:	2d01      	cmp	r5, #1
 801918c:	f47f af7a 	bne.w	8019084 <__ieee754_powf+0x30>
 8019190:	eeb1 0a40 	vneg.f32	s0, s0
 8019194:	e776      	b.n	8019084 <__ieee754_powf+0x30>
 8019196:	0ff0      	lsrs	r0, r6, #31
 8019198:	3801      	subs	r0, #1
 801919a:	ea55 0300 	orrs.w	r3, r5, r0
 801919e:	d104      	bne.n	80191aa <__ieee754_powf+0x156>
 80191a0:	ee38 8a48 	vsub.f32	s16, s16, s16
 80191a4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80191a8:	e76c      	b.n	8019084 <__ieee754_powf+0x30>
 80191aa:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80191ae:	d973      	bls.n	8019298 <__ieee754_powf+0x244>
 80191b0:	4bad      	ldr	r3, [pc, #692]	@ (8019468 <__ieee754_powf+0x414>)
 80191b2:	4598      	cmp	r8, r3
 80191b4:	d808      	bhi.n	80191c8 <__ieee754_powf+0x174>
 80191b6:	2c00      	cmp	r4, #0
 80191b8:	da0b      	bge.n	80191d2 <__ieee754_powf+0x17e>
 80191ba:	2000      	movs	r0, #0
 80191bc:	ecbd 8b02 	vpop	{d8}
 80191c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191c4:	f7fe bfd4 	b.w	8018170 <__math_oflowf>
 80191c8:	4ba8      	ldr	r3, [pc, #672]	@ (801946c <__ieee754_powf+0x418>)
 80191ca:	4598      	cmp	r8, r3
 80191cc:	d908      	bls.n	80191e0 <__ieee754_powf+0x18c>
 80191ce:	2c00      	cmp	r4, #0
 80191d0:	dcf3      	bgt.n	80191ba <__ieee754_powf+0x166>
 80191d2:	2000      	movs	r0, #0
 80191d4:	ecbd 8b02 	vpop	{d8}
 80191d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191dc:	f7fe bfc2 	b.w	8018164 <__math_uflowf>
 80191e0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80191e4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80191e8:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8019470 <__ieee754_powf+0x41c>
 80191ec:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80191f0:	eee0 6a67 	vfms.f32	s13, s0, s15
 80191f4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80191f8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80191fc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019204:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8019474 <__ieee754_powf+0x420>
 8019208:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801920c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8019478 <__ieee754_powf+0x424>
 8019210:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019214:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 801947c <__ieee754_powf+0x428>
 8019218:	eef0 6a67 	vmov.f32	s13, s15
 801921c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8019220:	ee16 3a90 	vmov	r3, s13
 8019224:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8019228:	f023 030f 	bic.w	r3, r3, #15
 801922c:	ee06 3a90 	vmov	s13, r3
 8019230:	eee0 6a47 	vfms.f32	s13, s0, s14
 8019234:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019238:	3d01      	subs	r5, #1
 801923a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801923e:	4305      	orrs	r5, r0
 8019240:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019244:	f024 040f 	bic.w	r4, r4, #15
 8019248:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801924c:	bf18      	it	ne
 801924e:	eeb0 8a47 	vmovne.f32	s16, s14
 8019252:	ee07 4a10 	vmov	s14, r4
 8019256:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801925a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801925e:	ee07 3a90 	vmov	s15, r3
 8019262:	eee7 0a27 	vfma.f32	s1, s14, s15
 8019266:	ee07 4a10 	vmov	s14, r4
 801926a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801926e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8019272:	ee17 1a10 	vmov	r1, s14
 8019276:	2900      	cmp	r1, #0
 8019278:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801927c:	f340 80dd 	ble.w	801943a <__ieee754_powf+0x3e6>
 8019280:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8019284:	f240 80ca 	bls.w	801941c <__ieee754_powf+0x3c8>
 8019288:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801928c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019290:	bf4c      	ite	mi
 8019292:	2001      	movmi	r0, #1
 8019294:	2000      	movpl	r0, #0
 8019296:	e791      	b.n	80191bc <__ieee754_powf+0x168>
 8019298:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801929c:	bf01      	itttt	eq
 801929e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8019480 <__ieee754_powf+0x42c>
 80192a2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80192a6:	f06f 0317 	mvneq.w	r3, #23
 80192aa:	ee17 7a90 	vmoveq	r7, s15
 80192ae:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80192b2:	bf18      	it	ne
 80192b4:	2300      	movne	r3, #0
 80192b6:	3a7f      	subs	r2, #127	@ 0x7f
 80192b8:	441a      	add	r2, r3
 80192ba:	4b72      	ldr	r3, [pc, #456]	@ (8019484 <__ieee754_powf+0x430>)
 80192bc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80192c0:	429f      	cmp	r7, r3
 80192c2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80192c6:	dd06      	ble.n	80192d6 <__ieee754_powf+0x282>
 80192c8:	4b6f      	ldr	r3, [pc, #444]	@ (8019488 <__ieee754_powf+0x434>)
 80192ca:	429f      	cmp	r7, r3
 80192cc:	f340 80a4 	ble.w	8019418 <__ieee754_powf+0x3c4>
 80192d0:	3201      	adds	r2, #1
 80192d2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80192d6:	2600      	movs	r6, #0
 80192d8:	4b6c      	ldr	r3, [pc, #432]	@ (801948c <__ieee754_powf+0x438>)
 80192da:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80192de:	ee07 1a10 	vmov	s14, r1
 80192e2:	edd3 5a00 	vldr	s11, [r3]
 80192e6:	4b6a      	ldr	r3, [pc, #424]	@ (8019490 <__ieee754_powf+0x43c>)
 80192e8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80192ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80192f0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80192f4:	1049      	asrs	r1, r1, #1
 80192f6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80192fa:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80192fe:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8019302:	ee37 6a65 	vsub.f32	s12, s14, s11
 8019306:	ee07 1a90 	vmov	s15, r1
 801930a:	ee26 5a24 	vmul.f32	s10, s12, s9
 801930e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8019312:	ee15 7a10 	vmov	r7, s10
 8019316:	401f      	ands	r7, r3
 8019318:	ee06 7a90 	vmov	s13, r7
 801931c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8019320:	ee37 7a65 	vsub.f32	s14, s14, s11
 8019324:	ee65 7a05 	vmul.f32	s15, s10, s10
 8019328:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801932c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8019494 <__ieee754_powf+0x440>
 8019330:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8019498 <__ieee754_powf+0x444>
 8019334:	eee7 5a87 	vfma.f32	s11, s15, s14
 8019338:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801949c <__ieee754_powf+0x448>
 801933c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019340:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8019470 <__ieee754_powf+0x41c>
 8019344:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019348:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80194a0 <__ieee754_powf+0x44c>
 801934c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019350:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80194a4 <__ieee754_powf+0x450>
 8019354:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019358:	eee7 5a27 	vfma.f32	s11, s14, s15
 801935c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8019360:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8019364:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019368:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801936c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8019370:	eef0 5a67 	vmov.f32	s11, s15
 8019374:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8019378:	ee75 5a87 	vadd.f32	s11, s11, s14
 801937c:	ee15 1a90 	vmov	r1, s11
 8019380:	4019      	ands	r1, r3
 8019382:	ee05 1a90 	vmov	s11, r1
 8019386:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801938a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801938e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019392:	ee67 7a85 	vmul.f32	s15, s15, s10
 8019396:	eee6 7a25 	vfma.f32	s15, s12, s11
 801939a:	eeb0 6a67 	vmov.f32	s12, s15
 801939e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80193a2:	ee16 1a10 	vmov	r1, s12
 80193a6:	4019      	ands	r1, r3
 80193a8:	ee06 1a10 	vmov	s12, r1
 80193ac:	eeb0 7a46 	vmov.f32	s14, s12
 80193b0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80193b4:	493c      	ldr	r1, [pc, #240]	@ (80194a8 <__ieee754_powf+0x454>)
 80193b6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80193ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80193be:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80194ac <__ieee754_powf+0x458>
 80193c2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80194b0 <__ieee754_powf+0x45c>
 80193c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80193ca:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80194b4 <__ieee754_powf+0x460>
 80193ce:	eee6 7a07 	vfma.f32	s15, s12, s14
 80193d2:	ed91 7a00 	vldr	s14, [r1]
 80193d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193da:	ee07 2a10 	vmov	s14, r2
 80193de:	eef0 6a67 	vmov.f32	s13, s15
 80193e2:	4a35      	ldr	r2, [pc, #212]	@ (80194b8 <__ieee754_powf+0x464>)
 80193e4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80193e8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80193ec:	ed92 5a00 	vldr	s10, [r2]
 80193f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80193f4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80193f8:	ee76 6a87 	vadd.f32	s13, s13, s14
 80193fc:	ee16 2a90 	vmov	r2, s13
 8019400:	4013      	ands	r3, r2
 8019402:	ee06 3a90 	vmov	s13, r3
 8019406:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801940a:	ee37 7a45 	vsub.f32	s14, s14, s10
 801940e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8019412:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019416:	e70f      	b.n	8019238 <__ieee754_powf+0x1e4>
 8019418:	2601      	movs	r6, #1
 801941a:	e75d      	b.n	80192d8 <__ieee754_powf+0x284>
 801941c:	d152      	bne.n	80194c4 <__ieee754_powf+0x470>
 801941e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80194bc <__ieee754_powf+0x468>
 8019422:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019426:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801942a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801942e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019432:	f73f af29 	bgt.w	8019288 <__ieee754_powf+0x234>
 8019436:	2386      	movs	r3, #134	@ 0x86
 8019438:	e048      	b.n	80194cc <__ieee754_powf+0x478>
 801943a:	4a21      	ldr	r2, [pc, #132]	@ (80194c0 <__ieee754_powf+0x46c>)
 801943c:	4293      	cmp	r3, r2
 801943e:	d907      	bls.n	8019450 <__ieee754_powf+0x3fc>
 8019440:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019448:	bf4c      	ite	mi
 801944a:	2001      	movmi	r0, #1
 801944c:	2000      	movpl	r0, #0
 801944e:	e6c1      	b.n	80191d4 <__ieee754_powf+0x180>
 8019450:	d138      	bne.n	80194c4 <__ieee754_powf+0x470>
 8019452:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019456:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801945a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801945e:	dbea      	blt.n	8019436 <__ieee754_powf+0x3e2>
 8019460:	e7ee      	b.n	8019440 <__ieee754_powf+0x3ec>
 8019462:	bf00      	nop
 8019464:	00000000 	.word	0x00000000
 8019468:	3f7ffff3 	.word	0x3f7ffff3
 801946c:	3f800007 	.word	0x3f800007
 8019470:	3eaaaaab 	.word	0x3eaaaaab
 8019474:	3fb8aa3b 	.word	0x3fb8aa3b
 8019478:	36eca570 	.word	0x36eca570
 801947c:	3fb8aa00 	.word	0x3fb8aa00
 8019480:	4b800000 	.word	0x4b800000
 8019484:	001cc471 	.word	0x001cc471
 8019488:	005db3d6 	.word	0x005db3d6
 801948c:	0801a6a0 	.word	0x0801a6a0
 8019490:	fffff000 	.word	0xfffff000
 8019494:	3e6c3255 	.word	0x3e6c3255
 8019498:	3e53f142 	.word	0x3e53f142
 801949c:	3e8ba305 	.word	0x3e8ba305
 80194a0:	3edb6db7 	.word	0x3edb6db7
 80194a4:	3f19999a 	.word	0x3f19999a
 80194a8:	0801a690 	.word	0x0801a690
 80194ac:	3f76384f 	.word	0x3f76384f
 80194b0:	3f763800 	.word	0x3f763800
 80194b4:	369dc3a0 	.word	0x369dc3a0
 80194b8:	0801a698 	.word	0x0801a698
 80194bc:	3338aa3c 	.word	0x3338aa3c
 80194c0:	43160000 	.word	0x43160000
 80194c4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80194c8:	d971      	bls.n	80195ae <__ieee754_powf+0x55a>
 80194ca:	15db      	asrs	r3, r3, #23
 80194cc:	3b7e      	subs	r3, #126	@ 0x7e
 80194ce:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80194d2:	4118      	asrs	r0, r3
 80194d4:	4408      	add	r0, r1
 80194d6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80194da:	4a3c      	ldr	r2, [pc, #240]	@ (80195cc <__ieee754_powf+0x578>)
 80194dc:	3b7f      	subs	r3, #127	@ 0x7f
 80194de:	411a      	asrs	r2, r3
 80194e0:	4002      	ands	r2, r0
 80194e2:	ee07 2a10 	vmov	s14, r2
 80194e6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80194ea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80194ee:	f1c3 0317 	rsb	r3, r3, #23
 80194f2:	4118      	asrs	r0, r3
 80194f4:	2900      	cmp	r1, #0
 80194f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80194fa:	bfb8      	it	lt
 80194fc:	4240      	neglt	r0, r0
 80194fe:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019502:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80195d0 <__ieee754_powf+0x57c>
 8019506:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80195d4 <__ieee754_powf+0x580>
 801950a:	ee17 3a10 	vmov	r3, s14
 801950e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8019512:	f023 030f 	bic.w	r3, r3, #15
 8019516:	ee07 3a10 	vmov	s14, r3
 801951a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801951e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019522:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019526:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80195d8 <__ieee754_powf+0x584>
 801952a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801952e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8019532:	eef0 6a67 	vmov.f32	s13, s15
 8019536:	eee7 6a06 	vfma.f32	s13, s14, s12
 801953a:	eef0 5a66 	vmov.f32	s11, s13
 801953e:	eee7 5a46 	vfms.f32	s11, s14, s12
 8019542:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019546:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801954a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80195dc <__ieee754_powf+0x588>
 801954e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80195e0 <__ieee754_powf+0x58c>
 8019552:	eea7 6a25 	vfma.f32	s12, s14, s11
 8019556:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80195e4 <__ieee754_powf+0x590>
 801955a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801955e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80195e8 <__ieee754_powf+0x594>
 8019562:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019566:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80195ec <__ieee754_powf+0x598>
 801956a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801956e:	eeb0 6a66 	vmov.f32	s12, s13
 8019572:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8019576:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801957a:	ee66 5a86 	vmul.f32	s11, s13, s12
 801957e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8019582:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8019586:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801958a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801958e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019592:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019596:	ee10 3a10 	vmov	r3, s0
 801959a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801959e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80195a2:	da06      	bge.n	80195b2 <__ieee754_powf+0x55e>
 80195a4:	f000 f9c2 	bl	801992c <scalbnf>
 80195a8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80195ac:	e56a      	b.n	8019084 <__ieee754_powf+0x30>
 80195ae:	2000      	movs	r0, #0
 80195b0:	e7a5      	b.n	80194fe <__ieee754_powf+0x4aa>
 80195b2:	ee00 3a10 	vmov	s0, r3
 80195b6:	e7f7      	b.n	80195a8 <__ieee754_powf+0x554>
 80195b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80195bc:	e562      	b.n	8019084 <__ieee754_powf+0x30>
 80195be:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80195f0 <__ieee754_powf+0x59c>
 80195c2:	e55f      	b.n	8019084 <__ieee754_powf+0x30>
 80195c4:	eeb0 0a48 	vmov.f32	s0, s16
 80195c8:	e55c      	b.n	8019084 <__ieee754_powf+0x30>
 80195ca:	bf00      	nop
 80195cc:	ff800000 	.word	0xff800000
 80195d0:	3f317218 	.word	0x3f317218
 80195d4:	3f317200 	.word	0x3f317200
 80195d8:	35bfbe8c 	.word	0x35bfbe8c
 80195dc:	b5ddea0e 	.word	0xb5ddea0e
 80195e0:	3331bb4c 	.word	0x3331bb4c
 80195e4:	388ab355 	.word	0x388ab355
 80195e8:	bb360b61 	.word	0xbb360b61
 80195ec:	3e2aaaab 	.word	0x3e2aaaab
 80195f0:	00000000 	.word	0x00000000

080195f4 <__ieee754_rem_pio2f>:
 80195f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195f6:	ee10 6a10 	vmov	r6, s0
 80195fa:	4b88      	ldr	r3, [pc, #544]	@ (801981c <__ieee754_rem_pio2f+0x228>)
 80195fc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8019600:	429d      	cmp	r5, r3
 8019602:	b087      	sub	sp, #28
 8019604:	4604      	mov	r4, r0
 8019606:	d805      	bhi.n	8019614 <__ieee754_rem_pio2f+0x20>
 8019608:	2300      	movs	r3, #0
 801960a:	ed80 0a00 	vstr	s0, [r0]
 801960e:	6043      	str	r3, [r0, #4]
 8019610:	2000      	movs	r0, #0
 8019612:	e022      	b.n	801965a <__ieee754_rem_pio2f+0x66>
 8019614:	4b82      	ldr	r3, [pc, #520]	@ (8019820 <__ieee754_rem_pio2f+0x22c>)
 8019616:	429d      	cmp	r5, r3
 8019618:	d83a      	bhi.n	8019690 <__ieee754_rem_pio2f+0x9c>
 801961a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801961e:	2e00      	cmp	r6, #0
 8019620:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8019824 <__ieee754_rem_pio2f+0x230>
 8019624:	4a80      	ldr	r2, [pc, #512]	@ (8019828 <__ieee754_rem_pio2f+0x234>)
 8019626:	f023 030f 	bic.w	r3, r3, #15
 801962a:	dd18      	ble.n	801965e <__ieee754_rem_pio2f+0x6a>
 801962c:	4293      	cmp	r3, r2
 801962e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8019632:	bf09      	itett	eq
 8019634:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801982c <__ieee754_rem_pio2f+0x238>
 8019638:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8019830 <__ieee754_rem_pio2f+0x23c>
 801963c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8019834 <__ieee754_rem_pio2f+0x240>
 8019640:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019644:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8019648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801964c:	ed80 7a00 	vstr	s14, [r0]
 8019650:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019654:	edc0 7a01 	vstr	s15, [r0, #4]
 8019658:	2001      	movs	r0, #1
 801965a:	b007      	add	sp, #28
 801965c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801965e:	4293      	cmp	r3, r2
 8019660:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019664:	bf09      	itett	eq
 8019666:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801982c <__ieee754_rem_pio2f+0x238>
 801966a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8019830 <__ieee754_rem_pio2f+0x23c>
 801966e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8019834 <__ieee754_rem_pio2f+0x240>
 8019672:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8019676:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801967a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801967e:	ed80 7a00 	vstr	s14, [r0]
 8019682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019686:	edc0 7a01 	vstr	s15, [r0, #4]
 801968a:	f04f 30ff 	mov.w	r0, #4294967295
 801968e:	e7e4      	b.n	801965a <__ieee754_rem_pio2f+0x66>
 8019690:	4b69      	ldr	r3, [pc, #420]	@ (8019838 <__ieee754_rem_pio2f+0x244>)
 8019692:	429d      	cmp	r5, r3
 8019694:	d873      	bhi.n	801977e <__ieee754_rem_pio2f+0x18a>
 8019696:	f7fe fa35 	bl	8017b04 <fabsf>
 801969a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801983c <__ieee754_rem_pio2f+0x248>
 801969e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80196a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80196a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80196aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80196ae:	ee17 0a90 	vmov	r0, s15
 80196b2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019824 <__ieee754_rem_pio2f+0x230>
 80196b6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80196ba:	281f      	cmp	r0, #31
 80196bc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019830 <__ieee754_rem_pio2f+0x23c>
 80196c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80196c4:	eeb1 6a47 	vneg.f32	s12, s14
 80196c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80196cc:	ee16 1a90 	vmov	r1, s13
 80196d0:	dc09      	bgt.n	80196e6 <__ieee754_rem_pio2f+0xf2>
 80196d2:	4a5b      	ldr	r2, [pc, #364]	@ (8019840 <__ieee754_rem_pio2f+0x24c>)
 80196d4:	1e47      	subs	r7, r0, #1
 80196d6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80196da:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80196de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80196e2:	4293      	cmp	r3, r2
 80196e4:	d107      	bne.n	80196f6 <__ieee754_rem_pio2f+0x102>
 80196e6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80196ea:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80196ee:	2a08      	cmp	r2, #8
 80196f0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80196f4:	dc14      	bgt.n	8019720 <__ieee754_rem_pio2f+0x12c>
 80196f6:	6021      	str	r1, [r4, #0]
 80196f8:	ed94 7a00 	vldr	s14, [r4]
 80196fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019700:	2e00      	cmp	r6, #0
 8019702:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019706:	ed84 0a01 	vstr	s0, [r4, #4]
 801970a:	daa6      	bge.n	801965a <__ieee754_rem_pio2f+0x66>
 801970c:	eeb1 7a47 	vneg.f32	s14, s14
 8019710:	eeb1 0a40 	vneg.f32	s0, s0
 8019714:	ed84 7a00 	vstr	s14, [r4]
 8019718:	ed84 0a01 	vstr	s0, [r4, #4]
 801971c:	4240      	negs	r0, r0
 801971e:	e79c      	b.n	801965a <__ieee754_rem_pio2f+0x66>
 8019720:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801982c <__ieee754_rem_pio2f+0x238>
 8019724:	eef0 6a40 	vmov.f32	s13, s0
 8019728:	eee6 6a25 	vfma.f32	s13, s12, s11
 801972c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019730:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019734:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8019834 <__ieee754_rem_pio2f+0x240>
 8019738:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801973c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8019740:	ee15 2a90 	vmov	r2, s11
 8019744:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019748:	1a5b      	subs	r3, r3, r1
 801974a:	2b19      	cmp	r3, #25
 801974c:	dc04      	bgt.n	8019758 <__ieee754_rem_pio2f+0x164>
 801974e:	edc4 5a00 	vstr	s11, [r4]
 8019752:	eeb0 0a66 	vmov.f32	s0, s13
 8019756:	e7cf      	b.n	80196f8 <__ieee754_rem_pio2f+0x104>
 8019758:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8019844 <__ieee754_rem_pio2f+0x250>
 801975c:	eeb0 0a66 	vmov.f32	s0, s13
 8019760:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019764:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019768:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8019848 <__ieee754_rem_pio2f+0x254>
 801976c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019770:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019774:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019778:	ed84 7a00 	vstr	s14, [r4]
 801977c:	e7bc      	b.n	80196f8 <__ieee754_rem_pio2f+0x104>
 801977e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8019782:	d306      	bcc.n	8019792 <__ieee754_rem_pio2f+0x19e>
 8019784:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019788:	edc0 7a01 	vstr	s15, [r0, #4]
 801978c:	edc0 7a00 	vstr	s15, [r0]
 8019790:	e73e      	b.n	8019610 <__ieee754_rem_pio2f+0x1c>
 8019792:	15ea      	asrs	r2, r5, #23
 8019794:	3a86      	subs	r2, #134	@ 0x86
 8019796:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801979a:	ee07 3a90 	vmov	s15, r3
 801979e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80197a2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801984c <__ieee754_rem_pio2f+0x258>
 80197a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80197aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80197ae:	ed8d 7a03 	vstr	s14, [sp, #12]
 80197b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80197b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80197ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80197be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80197c2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80197c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80197ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80197ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197d2:	edcd 7a05 	vstr	s15, [sp, #20]
 80197d6:	d11e      	bne.n	8019816 <__ieee754_rem_pio2f+0x222>
 80197d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80197dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197e0:	bf0c      	ite	eq
 80197e2:	2301      	moveq	r3, #1
 80197e4:	2302      	movne	r3, #2
 80197e6:	491a      	ldr	r1, [pc, #104]	@ (8019850 <__ieee754_rem_pio2f+0x25c>)
 80197e8:	9101      	str	r1, [sp, #4]
 80197ea:	2102      	movs	r1, #2
 80197ec:	9100      	str	r1, [sp, #0]
 80197ee:	a803      	add	r0, sp, #12
 80197f0:	4621      	mov	r1, r4
 80197f2:	f000 f901 	bl	80199f8 <__kernel_rem_pio2f>
 80197f6:	2e00      	cmp	r6, #0
 80197f8:	f6bf af2f 	bge.w	801965a <__ieee754_rem_pio2f+0x66>
 80197fc:	edd4 7a00 	vldr	s15, [r4]
 8019800:	eef1 7a67 	vneg.f32	s15, s15
 8019804:	edc4 7a00 	vstr	s15, [r4]
 8019808:	edd4 7a01 	vldr	s15, [r4, #4]
 801980c:	eef1 7a67 	vneg.f32	s15, s15
 8019810:	edc4 7a01 	vstr	s15, [r4, #4]
 8019814:	e782      	b.n	801971c <__ieee754_rem_pio2f+0x128>
 8019816:	2303      	movs	r3, #3
 8019818:	e7e5      	b.n	80197e6 <__ieee754_rem_pio2f+0x1f2>
 801981a:	bf00      	nop
 801981c:	3f490fd8 	.word	0x3f490fd8
 8019820:	4016cbe3 	.word	0x4016cbe3
 8019824:	3fc90f80 	.word	0x3fc90f80
 8019828:	3fc90fd0 	.word	0x3fc90fd0
 801982c:	37354400 	.word	0x37354400
 8019830:	37354443 	.word	0x37354443
 8019834:	2e85a308 	.word	0x2e85a308
 8019838:	43490f80 	.word	0x43490f80
 801983c:	3f22f984 	.word	0x3f22f984
 8019840:	0801a6a8 	.word	0x0801a6a8
 8019844:	2e85a300 	.word	0x2e85a300
 8019848:	248d3132 	.word	0x248d3132
 801984c:	43800000 	.word	0x43800000
 8019850:	0801a728 	.word	0x0801a728

08019854 <__ieee754_sinhf>:
 8019854:	b510      	push	{r4, lr}
 8019856:	ee10 3a10 	vmov	r3, s0
 801985a:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801985e:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8019862:	ed2d 8b02 	vpush	{d8}
 8019866:	eef0 7a40 	vmov.f32	s15, s0
 801986a:	d306      	bcc.n	801987a <__ieee754_sinhf+0x26>
 801986c:	ee70 7a00 	vadd.f32	s15, s0, s0
 8019870:	ecbd 8b02 	vpop	{d8}
 8019874:	eeb0 0a67 	vmov.f32	s0, s15
 8019878:	bd10      	pop	{r4, pc}
 801987a:	2b00      	cmp	r3, #0
 801987c:	4b27      	ldr	r3, [pc, #156]	@ (801991c <__ieee754_sinhf+0xc8>)
 801987e:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 8019882:	eebe 8a00 	vmov.f32	s16, #224	@ 0xbf000000 -0.5
 8019886:	bfa8      	it	ge
 8019888:	eeb0 8a68 	vmovge.f32	s16, s17
 801988c:	429c      	cmp	r4, r3
 801988e:	d82c      	bhi.n	80198ea <__ieee754_sinhf+0x96>
 8019890:	f1b4 5f46 	cmp.w	r4, #830472192	@ 0x31800000
 8019894:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8019898:	d208      	bcs.n	80198ac <__ieee754_sinhf+0x58>
 801989a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8019920 <__ieee754_sinhf+0xcc>
 801989e:	ee30 7a07 	vadd.f32	s14, s0, s14
 80198a2:	eeb4 7ae8 	vcmpe.f32	s14, s17
 80198a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198aa:	dce1      	bgt.n	8019870 <__ieee754_sinhf+0x1c>
 80198ac:	eeb0 0a67 	vmov.f32	s0, s15
 80198b0:	f7fe f928 	bl	8017b04 <fabsf>
 80198b4:	f7fe fa14 	bl	8017ce0 <expm1f>
 80198b8:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80198bc:	d20c      	bcs.n	80198d8 <__ieee754_sinhf+0x84>
 80198be:	ee20 7a00 	vmul.f32	s14, s0, s0
 80198c2:	ee70 8a28 	vadd.f32	s17, s0, s17
 80198c6:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80198ca:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80198ce:	eed0 7a07 	vfnms.f32	s15, s0, s14
 80198d2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80198d6:	e7cb      	b.n	8019870 <__ieee754_sinhf+0x1c>
 80198d8:	ee70 8a28 	vadd.f32	s17, s0, s17
 80198dc:	eec0 7a28 	vdiv.f32	s15, s0, s17
 80198e0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80198e4:	ee60 7a08 	vmul.f32	s15, s0, s16
 80198e8:	e7c2      	b.n	8019870 <__ieee754_sinhf+0x1c>
 80198ea:	4b0e      	ldr	r3, [pc, #56]	@ (8019924 <__ieee754_sinhf+0xd0>)
 80198ec:	429c      	cmp	r4, r3
 80198ee:	d804      	bhi.n	80198fa <__ieee754_sinhf+0xa6>
 80198f0:	f7fe f908 	bl	8017b04 <fabsf>
 80198f4:	f7ff f96c 	bl	8018bd0 <__ieee754_expf>
 80198f8:	e7f4      	b.n	80198e4 <__ieee754_sinhf+0x90>
 80198fa:	4b0b      	ldr	r3, [pc, #44]	@ (8019928 <__ieee754_sinhf+0xd4>)
 80198fc:	429c      	cmp	r4, r3
 80198fe:	d808      	bhi.n	8019912 <__ieee754_sinhf+0xbe>
 8019900:	f7fe f900 	bl	8017b04 <fabsf>
 8019904:	ee20 0a28 	vmul.f32	s0, s0, s17
 8019908:	f7ff f962 	bl	8018bd0 <__ieee754_expf>
 801990c:	ee28 8a00 	vmul.f32	s16, s16, s0
 8019910:	e7e8      	b.n	80198e4 <__ieee754_sinhf+0x90>
 8019912:	ed9f 7a03 	vldr	s14, [pc, #12]	@ 8019920 <__ieee754_sinhf+0xcc>
 8019916:	ee60 7a07 	vmul.f32	s15, s0, s14
 801991a:	e7a9      	b.n	8019870 <__ieee754_sinhf+0x1c>
 801991c:	41afffff 	.word	0x41afffff
 8019920:	7cf0bdc2 	.word	0x7cf0bdc2
 8019924:	42b17217 	.word	0x42b17217
 8019928:	42b2d4fc 	.word	0x42b2d4fc

0801992c <scalbnf>:
 801992c:	ee10 3a10 	vmov	r3, s0
 8019930:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8019934:	d02b      	beq.n	801998e <scalbnf+0x62>
 8019936:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801993a:	d302      	bcc.n	8019942 <scalbnf+0x16>
 801993c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019940:	4770      	bx	lr
 8019942:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8019946:	d123      	bne.n	8019990 <scalbnf+0x64>
 8019948:	4b24      	ldr	r3, [pc, #144]	@ (80199dc <scalbnf+0xb0>)
 801994a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80199e0 <scalbnf+0xb4>
 801994e:	4298      	cmp	r0, r3
 8019950:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019954:	db17      	blt.n	8019986 <scalbnf+0x5a>
 8019956:	ee10 3a10 	vmov	r3, s0
 801995a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801995e:	3a19      	subs	r2, #25
 8019960:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8019964:	4288      	cmp	r0, r1
 8019966:	dd15      	ble.n	8019994 <scalbnf+0x68>
 8019968:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80199e4 <scalbnf+0xb8>
 801996c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80199e8 <scalbnf+0xbc>
 8019970:	ee10 3a10 	vmov	r3, s0
 8019974:	eeb0 7a67 	vmov.f32	s14, s15
 8019978:	2b00      	cmp	r3, #0
 801997a:	bfb8      	it	lt
 801997c:	eef0 7a66 	vmovlt.f32	s15, s13
 8019980:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019984:	4770      	bx	lr
 8019986:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80199ec <scalbnf+0xc0>
 801998a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801998e:	4770      	bx	lr
 8019990:	0dd2      	lsrs	r2, r2, #23
 8019992:	e7e5      	b.n	8019960 <scalbnf+0x34>
 8019994:	4410      	add	r0, r2
 8019996:	28fe      	cmp	r0, #254	@ 0xfe
 8019998:	dce6      	bgt.n	8019968 <scalbnf+0x3c>
 801999a:	2800      	cmp	r0, #0
 801999c:	dd06      	ble.n	80199ac <scalbnf+0x80>
 801999e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80199a2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80199a6:	ee00 3a10 	vmov	s0, r3
 80199aa:	4770      	bx	lr
 80199ac:	f110 0f16 	cmn.w	r0, #22
 80199b0:	da09      	bge.n	80199c6 <scalbnf+0x9a>
 80199b2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80199ec <scalbnf+0xc0>
 80199b6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80199f0 <scalbnf+0xc4>
 80199ba:	ee10 3a10 	vmov	r3, s0
 80199be:	eeb0 7a67 	vmov.f32	s14, s15
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	e7d9      	b.n	801997a <scalbnf+0x4e>
 80199c6:	3019      	adds	r0, #25
 80199c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80199cc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80199d0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80199f4 <scalbnf+0xc8>
 80199d4:	ee07 3a90 	vmov	s15, r3
 80199d8:	e7d7      	b.n	801998a <scalbnf+0x5e>
 80199da:	bf00      	nop
 80199dc:	ffff3cb0 	.word	0xffff3cb0
 80199e0:	4c000000 	.word	0x4c000000
 80199e4:	7149f2ca 	.word	0x7149f2ca
 80199e8:	f149f2ca 	.word	0xf149f2ca
 80199ec:	0da24260 	.word	0x0da24260
 80199f0:	8da24260 	.word	0x8da24260
 80199f4:	33000000 	.word	0x33000000

080199f8 <__kernel_rem_pio2f>:
 80199f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199fc:	ed2d 8b04 	vpush	{d8-d9}
 8019a00:	b0d9      	sub	sp, #356	@ 0x164
 8019a02:	4690      	mov	r8, r2
 8019a04:	9001      	str	r0, [sp, #4]
 8019a06:	4ab9      	ldr	r2, [pc, #740]	@ (8019cec <__kernel_rem_pio2f+0x2f4>)
 8019a08:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8019a0a:	f118 0f04 	cmn.w	r8, #4
 8019a0e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8019a12:	460f      	mov	r7, r1
 8019a14:	f103 3bff 	add.w	fp, r3, #4294967295
 8019a18:	db27      	blt.n	8019a6a <__kernel_rem_pio2f+0x72>
 8019a1a:	f1b8 0203 	subs.w	r2, r8, #3
 8019a1e:	bf48      	it	mi
 8019a20:	f108 0204 	addmi.w	r2, r8, #4
 8019a24:	10d2      	asrs	r2, r2, #3
 8019a26:	1c55      	adds	r5, r2, #1
 8019a28:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8019a2a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8019cfc <__kernel_rem_pio2f+0x304>
 8019a2e:	00e8      	lsls	r0, r5, #3
 8019a30:	eba2 060b 	sub.w	r6, r2, fp
 8019a34:	9002      	str	r0, [sp, #8]
 8019a36:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8019a3a:	eb0a 0c0b 	add.w	ip, sl, fp
 8019a3e:	ac1c      	add	r4, sp, #112	@ 0x70
 8019a40:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8019a44:	2000      	movs	r0, #0
 8019a46:	4560      	cmp	r0, ip
 8019a48:	dd11      	ble.n	8019a6e <__kernel_rem_pio2f+0x76>
 8019a4a:	a91c      	add	r1, sp, #112	@ 0x70
 8019a4c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8019a50:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8019a54:	f04f 0c00 	mov.w	ip, #0
 8019a58:	45d4      	cmp	ip, sl
 8019a5a:	dc27      	bgt.n	8019aac <__kernel_rem_pio2f+0xb4>
 8019a5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019a60:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8019cfc <__kernel_rem_pio2f+0x304>
 8019a64:	4606      	mov	r6, r0
 8019a66:	2400      	movs	r4, #0
 8019a68:	e016      	b.n	8019a98 <__kernel_rem_pio2f+0xa0>
 8019a6a:	2200      	movs	r2, #0
 8019a6c:	e7db      	b.n	8019a26 <__kernel_rem_pio2f+0x2e>
 8019a6e:	42c6      	cmn	r6, r0
 8019a70:	bf5d      	ittte	pl
 8019a72:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8019a76:	ee07 1a90 	vmovpl	s15, r1
 8019a7a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019a7e:	eef0 7a47 	vmovmi.f32	s15, s14
 8019a82:	ece4 7a01 	vstmia	r4!, {s15}
 8019a86:	3001      	adds	r0, #1
 8019a88:	e7dd      	b.n	8019a46 <__kernel_rem_pio2f+0x4e>
 8019a8a:	ecfe 6a01 	vldmia	lr!, {s13}
 8019a8e:	ed96 7a00 	vldr	s14, [r6]
 8019a92:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019a96:	3401      	adds	r4, #1
 8019a98:	455c      	cmp	r4, fp
 8019a9a:	f1a6 0604 	sub.w	r6, r6, #4
 8019a9e:	ddf4      	ble.n	8019a8a <__kernel_rem_pio2f+0x92>
 8019aa0:	ece9 7a01 	vstmia	r9!, {s15}
 8019aa4:	f10c 0c01 	add.w	ip, ip, #1
 8019aa8:	3004      	adds	r0, #4
 8019aaa:	e7d5      	b.n	8019a58 <__kernel_rem_pio2f+0x60>
 8019aac:	a908      	add	r1, sp, #32
 8019aae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019ab2:	9104      	str	r1, [sp, #16]
 8019ab4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8019ab6:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8019cf8 <__kernel_rem_pio2f+0x300>
 8019aba:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8019cf4 <__kernel_rem_pio2f+0x2fc>
 8019abe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8019ac2:	9203      	str	r2, [sp, #12]
 8019ac4:	4654      	mov	r4, sl
 8019ac6:	00a2      	lsls	r2, r4, #2
 8019ac8:	9205      	str	r2, [sp, #20]
 8019aca:	aa58      	add	r2, sp, #352	@ 0x160
 8019acc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8019ad0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8019ad4:	a944      	add	r1, sp, #272	@ 0x110
 8019ad6:	aa08      	add	r2, sp, #32
 8019ad8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8019adc:	4694      	mov	ip, r2
 8019ade:	4626      	mov	r6, r4
 8019ae0:	2e00      	cmp	r6, #0
 8019ae2:	f1a0 0004 	sub.w	r0, r0, #4
 8019ae6:	dc4c      	bgt.n	8019b82 <__kernel_rem_pio2f+0x18a>
 8019ae8:	4628      	mov	r0, r5
 8019aea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019aee:	f7ff ff1d 	bl	801992c <scalbnf>
 8019af2:	eeb0 8a40 	vmov.f32	s16, s0
 8019af6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8019afa:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019afe:	f7fe fba3 	bl	8018248 <floorf>
 8019b02:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8019b06:	eea0 8a67 	vfms.f32	s16, s0, s15
 8019b0a:	2d00      	cmp	r5, #0
 8019b0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019b10:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019b14:	ee17 9a90 	vmov	r9, s15
 8019b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b1c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019b20:	dd41      	ble.n	8019ba6 <__kernel_rem_pio2f+0x1ae>
 8019b22:	f104 3cff 	add.w	ip, r4, #4294967295
 8019b26:	a908      	add	r1, sp, #32
 8019b28:	f1c5 0e08 	rsb	lr, r5, #8
 8019b2c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8019b30:	fa46 f00e 	asr.w	r0, r6, lr
 8019b34:	4481      	add	r9, r0
 8019b36:	fa00 f00e 	lsl.w	r0, r0, lr
 8019b3a:	1a36      	subs	r6, r6, r0
 8019b3c:	f1c5 0007 	rsb	r0, r5, #7
 8019b40:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8019b44:	4106      	asrs	r6, r0
 8019b46:	2e00      	cmp	r6, #0
 8019b48:	dd3c      	ble.n	8019bc4 <__kernel_rem_pio2f+0x1cc>
 8019b4a:	f04f 0e00 	mov.w	lr, #0
 8019b4e:	f109 0901 	add.w	r9, r9, #1
 8019b52:	4670      	mov	r0, lr
 8019b54:	4574      	cmp	r4, lr
 8019b56:	dc68      	bgt.n	8019c2a <__kernel_rem_pio2f+0x232>
 8019b58:	2d00      	cmp	r5, #0
 8019b5a:	dd03      	ble.n	8019b64 <__kernel_rem_pio2f+0x16c>
 8019b5c:	2d01      	cmp	r5, #1
 8019b5e:	d074      	beq.n	8019c4a <__kernel_rem_pio2f+0x252>
 8019b60:	2d02      	cmp	r5, #2
 8019b62:	d07d      	beq.n	8019c60 <__kernel_rem_pio2f+0x268>
 8019b64:	2e02      	cmp	r6, #2
 8019b66:	d12d      	bne.n	8019bc4 <__kernel_rem_pio2f+0x1cc>
 8019b68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019b6c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019b70:	b340      	cbz	r0, 8019bc4 <__kernel_rem_pio2f+0x1cc>
 8019b72:	4628      	mov	r0, r5
 8019b74:	9306      	str	r3, [sp, #24]
 8019b76:	f7ff fed9 	bl	801992c <scalbnf>
 8019b7a:	9b06      	ldr	r3, [sp, #24]
 8019b7c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019b80:	e020      	b.n	8019bc4 <__kernel_rem_pio2f+0x1cc>
 8019b82:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019b86:	3e01      	subs	r6, #1
 8019b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b90:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019b94:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019b98:	ecac 0a01 	vstmia	ip!, {s0}
 8019b9c:	ed90 0a00 	vldr	s0, [r0]
 8019ba0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019ba4:	e79c      	b.n	8019ae0 <__kernel_rem_pio2f+0xe8>
 8019ba6:	d105      	bne.n	8019bb4 <__kernel_rem_pio2f+0x1bc>
 8019ba8:	1e60      	subs	r0, r4, #1
 8019baa:	a908      	add	r1, sp, #32
 8019bac:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8019bb0:	11f6      	asrs	r6, r6, #7
 8019bb2:	e7c8      	b.n	8019b46 <__kernel_rem_pio2f+0x14e>
 8019bb4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019bb8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bc0:	da31      	bge.n	8019c26 <__kernel_rem_pio2f+0x22e>
 8019bc2:	2600      	movs	r6, #0
 8019bc4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bcc:	f040 8098 	bne.w	8019d00 <__kernel_rem_pio2f+0x308>
 8019bd0:	1e60      	subs	r0, r4, #1
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	4550      	cmp	r0, sl
 8019bd6:	da4b      	bge.n	8019c70 <__kernel_rem_pio2f+0x278>
 8019bd8:	2a00      	cmp	r2, #0
 8019bda:	d065      	beq.n	8019ca8 <__kernel_rem_pio2f+0x2b0>
 8019bdc:	3c01      	subs	r4, #1
 8019bde:	ab08      	add	r3, sp, #32
 8019be0:	3d08      	subs	r5, #8
 8019be2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d0f8      	beq.n	8019bdc <__kernel_rem_pio2f+0x1e4>
 8019bea:	4628      	mov	r0, r5
 8019bec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019bf0:	f7ff fe9c 	bl	801992c <scalbnf>
 8019bf4:	1c63      	adds	r3, r4, #1
 8019bf6:	aa44      	add	r2, sp, #272	@ 0x110
 8019bf8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8019cf8 <__kernel_rem_pio2f+0x300>
 8019bfc:	0099      	lsls	r1, r3, #2
 8019bfe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019c02:	4623      	mov	r3, r4
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	f280 80a9 	bge.w	8019d5c <__kernel_rem_pio2f+0x364>
 8019c0a:	4623      	mov	r3, r4
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	f2c0 80c7 	blt.w	8019da0 <__kernel_rem_pio2f+0x3a8>
 8019c12:	aa44      	add	r2, sp, #272	@ 0x110
 8019c14:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019c18:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8019cf0 <__kernel_rem_pio2f+0x2f8>
 8019c1c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8019cfc <__kernel_rem_pio2f+0x304>
 8019c20:	2000      	movs	r0, #0
 8019c22:	1ae2      	subs	r2, r4, r3
 8019c24:	e0b1      	b.n	8019d8a <__kernel_rem_pio2f+0x392>
 8019c26:	2602      	movs	r6, #2
 8019c28:	e78f      	b.n	8019b4a <__kernel_rem_pio2f+0x152>
 8019c2a:	f852 1b04 	ldr.w	r1, [r2], #4
 8019c2e:	b948      	cbnz	r0, 8019c44 <__kernel_rem_pio2f+0x24c>
 8019c30:	b121      	cbz	r1, 8019c3c <__kernel_rem_pio2f+0x244>
 8019c32:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8019c36:	f842 1c04 	str.w	r1, [r2, #-4]
 8019c3a:	2101      	movs	r1, #1
 8019c3c:	f10e 0e01 	add.w	lr, lr, #1
 8019c40:	4608      	mov	r0, r1
 8019c42:	e787      	b.n	8019b54 <__kernel_rem_pio2f+0x15c>
 8019c44:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8019c48:	e7f5      	b.n	8019c36 <__kernel_rem_pio2f+0x23e>
 8019c4a:	f104 3cff 	add.w	ip, r4, #4294967295
 8019c4e:	aa08      	add	r2, sp, #32
 8019c50:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019c54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019c58:	a908      	add	r1, sp, #32
 8019c5a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019c5e:	e781      	b.n	8019b64 <__kernel_rem_pio2f+0x16c>
 8019c60:	f104 3cff 	add.w	ip, r4, #4294967295
 8019c64:	aa08      	add	r2, sp, #32
 8019c66:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019c6a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019c6e:	e7f3      	b.n	8019c58 <__kernel_rem_pio2f+0x260>
 8019c70:	a908      	add	r1, sp, #32
 8019c72:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8019c76:	3801      	subs	r0, #1
 8019c78:	430a      	orrs	r2, r1
 8019c7a:	e7ab      	b.n	8019bd4 <__kernel_rem_pio2f+0x1dc>
 8019c7c:	3201      	adds	r2, #1
 8019c7e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8019c82:	2e00      	cmp	r6, #0
 8019c84:	d0fa      	beq.n	8019c7c <__kernel_rem_pio2f+0x284>
 8019c86:	9905      	ldr	r1, [sp, #20]
 8019c88:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8019c8c:	eb0d 0001 	add.w	r0, sp, r1
 8019c90:	18e6      	adds	r6, r4, r3
 8019c92:	a91c      	add	r1, sp, #112	@ 0x70
 8019c94:	f104 0c01 	add.w	ip, r4, #1
 8019c98:	384c      	subs	r0, #76	@ 0x4c
 8019c9a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8019c9e:	4422      	add	r2, r4
 8019ca0:	4562      	cmp	r2, ip
 8019ca2:	da04      	bge.n	8019cae <__kernel_rem_pio2f+0x2b6>
 8019ca4:	4614      	mov	r4, r2
 8019ca6:	e70e      	b.n	8019ac6 <__kernel_rem_pio2f+0xce>
 8019ca8:	9804      	ldr	r0, [sp, #16]
 8019caa:	2201      	movs	r2, #1
 8019cac:	e7e7      	b.n	8019c7e <__kernel_rem_pio2f+0x286>
 8019cae:	9903      	ldr	r1, [sp, #12]
 8019cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019cb4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8019cb8:	9105      	str	r1, [sp, #20]
 8019cba:	ee07 1a90 	vmov	s15, r1
 8019cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019cc2:	2400      	movs	r4, #0
 8019cc4:	ece6 7a01 	vstmia	r6!, {s15}
 8019cc8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8019cfc <__kernel_rem_pio2f+0x304>
 8019ccc:	46b1      	mov	r9, r6
 8019cce:	455c      	cmp	r4, fp
 8019cd0:	dd04      	ble.n	8019cdc <__kernel_rem_pio2f+0x2e4>
 8019cd2:	ece0 7a01 	vstmia	r0!, {s15}
 8019cd6:	f10c 0c01 	add.w	ip, ip, #1
 8019cda:	e7e1      	b.n	8019ca0 <__kernel_rem_pio2f+0x2a8>
 8019cdc:	ecfe 6a01 	vldmia	lr!, {s13}
 8019ce0:	ed39 7a01 	vldmdb	r9!, {s14}
 8019ce4:	3401      	adds	r4, #1
 8019ce6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019cea:	e7f0      	b.n	8019cce <__kernel_rem_pio2f+0x2d6>
 8019cec:	0801aa6c 	.word	0x0801aa6c
 8019cf0:	0801aa40 	.word	0x0801aa40
 8019cf4:	43800000 	.word	0x43800000
 8019cf8:	3b800000 	.word	0x3b800000
 8019cfc:	00000000 	.word	0x00000000
 8019d00:	9b02      	ldr	r3, [sp, #8]
 8019d02:	eeb0 0a48 	vmov.f32	s0, s16
 8019d06:	eba3 0008 	sub.w	r0, r3, r8
 8019d0a:	f7ff fe0f 	bl	801992c <scalbnf>
 8019d0e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8019cf4 <__kernel_rem_pio2f+0x2fc>
 8019d12:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d1a:	db19      	blt.n	8019d50 <__kernel_rem_pio2f+0x358>
 8019d1c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8019cf8 <__kernel_rem_pio2f+0x300>
 8019d20:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019d24:	aa08      	add	r2, sp, #32
 8019d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d2a:	3508      	adds	r5, #8
 8019d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d30:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019d3c:	ee10 3a10 	vmov	r3, s0
 8019d40:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019d44:	ee17 3a90 	vmov	r3, s15
 8019d48:	3401      	adds	r4, #1
 8019d4a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019d4e:	e74c      	b.n	8019bea <__kernel_rem_pio2f+0x1f2>
 8019d50:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019d54:	aa08      	add	r2, sp, #32
 8019d56:	ee10 3a10 	vmov	r3, s0
 8019d5a:	e7f6      	b.n	8019d4a <__kernel_rem_pio2f+0x352>
 8019d5c:	a808      	add	r0, sp, #32
 8019d5e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019d62:	9001      	str	r0, [sp, #4]
 8019d64:	ee07 0a90 	vmov	s15, r0
 8019d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d6c:	3b01      	subs	r3, #1
 8019d6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019d72:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019d76:	ed62 7a01 	vstmdb	r2!, {s15}
 8019d7a:	e743      	b.n	8019c04 <__kernel_rem_pio2f+0x20c>
 8019d7c:	ecfc 6a01 	vldmia	ip!, {s13}
 8019d80:	ecb5 7a01 	vldmia	r5!, {s14}
 8019d84:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019d88:	3001      	adds	r0, #1
 8019d8a:	4550      	cmp	r0, sl
 8019d8c:	dc01      	bgt.n	8019d92 <__kernel_rem_pio2f+0x39a>
 8019d8e:	4282      	cmp	r2, r0
 8019d90:	daf4      	bge.n	8019d7c <__kernel_rem_pio2f+0x384>
 8019d92:	a858      	add	r0, sp, #352	@ 0x160
 8019d94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8019d98:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8019d9c:	3b01      	subs	r3, #1
 8019d9e:	e735      	b.n	8019c0c <__kernel_rem_pio2f+0x214>
 8019da0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019da2:	2b02      	cmp	r3, #2
 8019da4:	dc09      	bgt.n	8019dba <__kernel_rem_pio2f+0x3c2>
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	dc2b      	bgt.n	8019e02 <__kernel_rem_pio2f+0x40a>
 8019daa:	d044      	beq.n	8019e36 <__kernel_rem_pio2f+0x43e>
 8019dac:	f009 0007 	and.w	r0, r9, #7
 8019db0:	b059      	add	sp, #356	@ 0x164
 8019db2:	ecbd 8b04 	vpop	{d8-d9}
 8019db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dba:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019dbc:	2b03      	cmp	r3, #3
 8019dbe:	d1f5      	bne.n	8019dac <__kernel_rem_pio2f+0x3b4>
 8019dc0:	aa30      	add	r2, sp, #192	@ 0xc0
 8019dc2:	1f0b      	subs	r3, r1, #4
 8019dc4:	4413      	add	r3, r2
 8019dc6:	461a      	mov	r2, r3
 8019dc8:	4620      	mov	r0, r4
 8019dca:	2800      	cmp	r0, #0
 8019dcc:	f1a2 0204 	sub.w	r2, r2, #4
 8019dd0:	dc52      	bgt.n	8019e78 <__kernel_rem_pio2f+0x480>
 8019dd2:	4622      	mov	r2, r4
 8019dd4:	2a01      	cmp	r2, #1
 8019dd6:	f1a3 0304 	sub.w	r3, r3, #4
 8019dda:	dc5d      	bgt.n	8019e98 <__kernel_rem_pio2f+0x4a0>
 8019ddc:	ab30      	add	r3, sp, #192	@ 0xc0
 8019dde:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8019cfc <__kernel_rem_pio2f+0x304>
 8019de2:	440b      	add	r3, r1
 8019de4:	2c01      	cmp	r4, #1
 8019de6:	dc67      	bgt.n	8019eb8 <__kernel_rem_pio2f+0x4c0>
 8019de8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019dec:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8019df0:	2e00      	cmp	r6, #0
 8019df2:	d167      	bne.n	8019ec4 <__kernel_rem_pio2f+0x4cc>
 8019df4:	edc7 6a00 	vstr	s13, [r7]
 8019df8:	ed87 7a01 	vstr	s14, [r7, #4]
 8019dfc:	edc7 7a02 	vstr	s15, [r7, #8]
 8019e00:	e7d4      	b.n	8019dac <__kernel_rem_pio2f+0x3b4>
 8019e02:	ab30      	add	r3, sp, #192	@ 0xc0
 8019e04:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8019cfc <__kernel_rem_pio2f+0x304>
 8019e08:	440b      	add	r3, r1
 8019e0a:	4622      	mov	r2, r4
 8019e0c:	2a00      	cmp	r2, #0
 8019e0e:	da24      	bge.n	8019e5a <__kernel_rem_pio2f+0x462>
 8019e10:	b34e      	cbz	r6, 8019e66 <__kernel_rem_pio2f+0x46e>
 8019e12:	eef1 7a47 	vneg.f32	s15, s14
 8019e16:	edc7 7a00 	vstr	s15, [r7]
 8019e1a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8019e1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e22:	aa31      	add	r2, sp, #196	@ 0xc4
 8019e24:	2301      	movs	r3, #1
 8019e26:	429c      	cmp	r4, r3
 8019e28:	da20      	bge.n	8019e6c <__kernel_rem_pio2f+0x474>
 8019e2a:	b10e      	cbz	r6, 8019e30 <__kernel_rem_pio2f+0x438>
 8019e2c:	eef1 7a67 	vneg.f32	s15, s15
 8019e30:	edc7 7a01 	vstr	s15, [r7, #4]
 8019e34:	e7ba      	b.n	8019dac <__kernel_rem_pio2f+0x3b4>
 8019e36:	ab30      	add	r3, sp, #192	@ 0xc0
 8019e38:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8019cfc <__kernel_rem_pio2f+0x304>
 8019e3c:	440b      	add	r3, r1
 8019e3e:	2c00      	cmp	r4, #0
 8019e40:	da05      	bge.n	8019e4e <__kernel_rem_pio2f+0x456>
 8019e42:	b10e      	cbz	r6, 8019e48 <__kernel_rem_pio2f+0x450>
 8019e44:	eef1 7a67 	vneg.f32	s15, s15
 8019e48:	edc7 7a00 	vstr	s15, [r7]
 8019e4c:	e7ae      	b.n	8019dac <__kernel_rem_pio2f+0x3b4>
 8019e4e:	ed33 7a01 	vldmdb	r3!, {s14}
 8019e52:	3c01      	subs	r4, #1
 8019e54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019e58:	e7f1      	b.n	8019e3e <__kernel_rem_pio2f+0x446>
 8019e5a:	ed73 7a01 	vldmdb	r3!, {s15}
 8019e5e:	3a01      	subs	r2, #1
 8019e60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019e64:	e7d2      	b.n	8019e0c <__kernel_rem_pio2f+0x414>
 8019e66:	eef0 7a47 	vmov.f32	s15, s14
 8019e6a:	e7d4      	b.n	8019e16 <__kernel_rem_pio2f+0x41e>
 8019e6c:	ecb2 7a01 	vldmia	r2!, {s14}
 8019e70:	3301      	adds	r3, #1
 8019e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019e76:	e7d6      	b.n	8019e26 <__kernel_rem_pio2f+0x42e>
 8019e78:	edd2 7a00 	vldr	s15, [r2]
 8019e7c:	edd2 6a01 	vldr	s13, [r2, #4]
 8019e80:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019e84:	3801      	subs	r0, #1
 8019e86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e8a:	ed82 7a00 	vstr	s14, [r2]
 8019e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019e92:	edc2 7a01 	vstr	s15, [r2, #4]
 8019e96:	e798      	b.n	8019dca <__kernel_rem_pio2f+0x3d2>
 8019e98:	edd3 7a00 	vldr	s15, [r3]
 8019e9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8019ea0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019ea4:	3a01      	subs	r2, #1
 8019ea6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019eaa:	ed83 7a00 	vstr	s14, [r3]
 8019eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019eb2:	edc3 7a01 	vstr	s15, [r3, #4]
 8019eb6:	e78d      	b.n	8019dd4 <__kernel_rem_pio2f+0x3dc>
 8019eb8:	ed33 7a01 	vldmdb	r3!, {s14}
 8019ebc:	3c01      	subs	r4, #1
 8019ebe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019ec2:	e78f      	b.n	8019de4 <__kernel_rem_pio2f+0x3ec>
 8019ec4:	eef1 6a66 	vneg.f32	s13, s13
 8019ec8:	eeb1 7a47 	vneg.f32	s14, s14
 8019ecc:	edc7 6a00 	vstr	s13, [r7]
 8019ed0:	ed87 7a01 	vstr	s14, [r7, #4]
 8019ed4:	eef1 7a67 	vneg.f32	s15, s15
 8019ed8:	e790      	b.n	8019dfc <__kernel_rem_pio2f+0x404>
 8019eda:	bf00      	nop

08019edc <_init>:
 8019edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ede:	bf00      	nop
 8019ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ee2:	bc08      	pop	{r3}
 8019ee4:	469e      	mov	lr, r3
 8019ee6:	4770      	bx	lr

08019ee8 <_fini>:
 8019ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eea:	bf00      	nop
 8019eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019eee:	bc08      	pop	{r3}
 8019ef0:	469e      	mov	lr, r3
 8019ef2:	4770      	bx	lr
